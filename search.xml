<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Android - Jetpack套件之 Lifecycle 使用</title>
    <url>/2023/04/14/Android/AndroidDevelop_023_RecyclerView_CacheReuse/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>Android RecyclerView 缓存复用机制研究；</p>
</blockquote>
<span id="more"></span>

<h2 id="1-RecyclerView-复用机制"><a href="#1-RecyclerView-复用机制" class="headerlink" title="1 RecyclerView 复用机制"></a>1 RecyclerView 复用机制</h2><p>在项目中，使用 RecyclerView 实现列表显示及滑动，其中 Item 分为了好几种 ViewType，每种 ViewType 的 item 内容不同，在实际<strong>滑动</strong>时发现当 item 条数比较多时，会出现 Item 显示错乱的情况，那么这就是因为 RecyclerView 缓存复用导致的，分析入口有两个：</p>
<ul>
<li>既然是在滑动过程中存在的问题，所以刻意从 RecyclerView 的滑动事件开始研究，即 onTouchEvent() 的 ACTION_MOVE；</li>
<li>从 RecyclerView 的布局入手，即 onLayout()；</li>
</ul>
<h3 id="1-1-滑动事件入口-onTouchEvent"><a href="#1-1-滑动事件入口-onTouchEvent" class="headerlink" title="1.1 滑动事件入口 - onTouchEvent()"></a>1.1 滑动事件入口 - onTouchEvent()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// RecyclerView.java</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onTouchEvent</span><span class="params">(MotionEvent e)</span> &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE: &#123;</span><br><span class="line">                ...</span><br><span class="line">                    <span class="comment">// scrollByInternal</span></span><br><span class="line">                    <span class="keyword">if</span> (scrollByInternal(</span><br><span class="line">                            canScrollHorizontally ? dx : <span class="number">0</span>,</span><br><span class="line">                            canScrollVertically ? dy : <span class="number">0</span>,</span><br><span class="line">                            e)) &#123;</span><br><span class="line">                        getParent().requestDisallowInterceptTouchEvent(<span class="literal">true</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (mGapWorker != <span class="literal">null</span> &amp;&amp; (dx != <span class="number">0</span> || dy != <span class="number">0</span>)) &#123;</span><br><span class="line">                        mGapWorker.postFromTraversal(<span class="built_in">this</span>, dx, dy);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">scrollByInternal</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, MotionEvent ev)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">unconsumedX</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">unconsumedY</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">consumedX</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">consumedY</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        consumePendingUpdateOperations();</span><br><span class="line">        <span class="keyword">if</span> (mAdapter != <span class="literal">null</span>) &#123;</span><br><span class="line">            mReusableIntPair[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">            mReusableIntPair[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">            scrollStep(x, y, mReusableIntPair); <span class="comment">//</span></span><br><span class="line">            consumedX = mReusableIntPair[<span class="number">0</span>];</span><br><span class="line">            consumedY = mReusableIntPair[<span class="number">1</span>];</span><br><span class="line">            unconsumedX = x - consumedX;</span><br><span class="line">            unconsumedY = y - consumedY;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">scrollStep</span><span class="params">(<span class="type">int</span> dx, <span class="type">int</span> dy, <span class="meta">@Nullable</span> <span class="type">int</span>[] consumed)</span> &#123;</span><br><span class="line">        startInterceptRequestLayout();</span><br><span class="line">        onEnterLayoutOrScroll();</span><br><span class="line"></span><br><span class="line">        TraceCompat.beginSection(TRACE_SCROLL_TAG);</span><br><span class="line">        fillRemainingScrollValues(mState);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">consumedX</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">consumedY</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (dx != <span class="number">0</span>) &#123; <span class="comment">// 横向滑动</span></span><br><span class="line">            consumedX = mLayout.scrollHorizontallyBy(dx, mRecycler, mState);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dy != <span class="number">0</span>) &#123; <span class="comment">// 纵向滑动</span></span><br><span class="line">            consumedY = mLayout.scrollVerticallyBy(dy, mRecycler, mState);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// LinearLayoutManager.java</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">scrollVerticallyBy</span><span class="params">(<span class="type">int</span> dy, RecyclerView.Recycler recycler,</span></span><br><span class="line"><span class="params">            RecyclerView.State state)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mOrientation == HORIZONTAL) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> scrollBy(dy, recycler, state); <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">scrollBy</span><span class="params">(<span class="type">int</span> delta, RecyclerView.Recycler recycler, RecyclerView.State state)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (getChildCount() == <span class="number">0</span> || delta == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ensureLayoutState();</span><br><span class="line">        mLayoutState.mRecycle = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">layoutDirection</span> <span class="operator">=</span> delta &gt; <span class="number">0</span> ? LayoutState.LAYOUT_END : LayoutState.LAYOUT_START;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">absDelta</span> <span class="operator">=</span> Math.abs(delta);</span><br><span class="line">        updateLayoutState(layoutDirection, absDelta, <span class="literal">true</span>, state);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">consumed</span> <span class="operator">=</span> mLayoutState.mScrollingOffset</span><br><span class="line">                + fill(recycler, mLayoutState, state, <span class="literal">false</span>); <span class="comment">// 调用到 fill()</span></span><br><span class="line">        </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="1-2-布局入口-onLayout"><a href="#1-2-布局入口-onLayout" class="headerlink" title="1.2 布局入口 - onLayout()"></a>1.2 布局入口 - onLayout()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// RecyclerView.java</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onLayout</span><span class="params">(<span class="type">boolean</span> changed, <span class="type">int</span> l, <span class="type">int</span> t, <span class="type">int</span> r, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        Trace.beginSection(TRACE_ON_LAYOUT_TAG);</span><br><span class="line">        dispatchLayout();</span><br><span class="line">        Trace.endSection();</span><br><span class="line">        mFirstLayoutComplete = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">dispatchLayout</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mAdapter == <span class="literal">null</span>) &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">&quot;No adapter attached; skipping layout&quot;</span>);</span><br><span class="line">            <span class="comment">// leave the state in START</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mLayout == <span class="literal">null</span>) &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">&quot;No layout manager attached; skipping layout&quot;</span>);</span><br><span class="line">            <span class="comment">// leave the state in START</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mState.mIsMeasuring = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (mState.mLayoutStep == State.STEP_START) &#123;</span><br><span class="line">            dispatchLayoutStep1();</span><br><span class="line">            mLayout.setExactMeasureSpecsFrom(<span class="built_in">this</span>);</span><br><span class="line">            dispatchLayoutStep2();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mAdapterHelper.hasUpdates() || mLayout.getWidth() != getWidth()</span><br><span class="line">                || mLayout.getHeight() != getHeight()) &#123;</span><br><span class="line">            <span class="comment">// First 2 steps are done in onMeasure but looks like we have to run again due to</span></span><br><span class="line">            <span class="comment">// changed size.</span></span><br><span class="line">            mLayout.setExactMeasureSpecsFrom(<span class="built_in">this</span>);</span><br><span class="line">            dispatchLayoutStep2();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// always make sure we sync them (to ensure mode is exact)</span></span><br><span class="line">            mLayout.setExactMeasureSpecsFrom(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        dispatchLayoutStep3();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dispatchLayoutStep2</span><span class="params">()</span> &#123;</span><br><span class="line">        eatRequestLayout();</span><br><span class="line">        onEnterLayoutOrScroll();</span><br><span class="line">        mState.assertLayoutStep(State.STEP_LAYOUT | State.STEP_ANIMATIONS);</span><br><span class="line">        mAdapterHelper.consumeUpdatesInOnePass();</span><br><span class="line">        mState.mItemCount = mAdapter.getItemCount();</span><br><span class="line">        mState.mDeletedInvisibleItemCountSincePreviousLayout = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Step 2: Run layout</span></span><br><span class="line">        mState.mInPreLayout = <span class="literal">false</span>;</span><br><span class="line">        mLayout.onLayoutChildren(mRecycler, mState);</span><br><span class="line"></span><br><span class="line">        mState.mStructureChanged = <span class="literal">false</span>;</span><br><span class="line">        mPendingSavedState = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// onLayoutChildren may have caused client code to disable item animations; re-check</span></span><br><span class="line">        mState.mRunSimpleAnimations = mState.mRunSimpleAnimations &amp;&amp; mItemAnimator != <span class="literal">null</span>;</span><br><span class="line">        mState.mLayoutStep = State.STEP_ANIMATIONS;</span><br><span class="line">        onExitLayoutOrScroll();</span><br><span class="line">        resumeRequestLayout(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>onLayoutChildren()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// LinearLayoutManager.java</span></span><br><span class="line">    <span class="keyword">private</span> LayoutState mLayoutState;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onLayoutChildren</span><span class="params">(RecyclerView.Recycler recycler, RecyclerView.State state)</span> &#123;</span><br><span class="line">        </span><br><span class="line">            fill(recycler, mLayoutState, state, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>

<p>不管是滑动事件入口，还是布局入口，最后都会调用到 fill() 函数；</p>
<h3 id="1-3-fill"><a href="#1-3-fill" class="headerlink" title="1.3 fill()"></a>1.3 fill()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// LinearLayoutManager.java</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">fill</span><span class="params">(RecyclerView.Recycler recycler, LayoutState layoutState,</span></span><br><span class="line"><span class="params">            RecyclerView.State state, <span class="type">boolean</span> stopOnFocusable)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">while</span> ((layoutState.mInfinite || remainingSpace &gt; <span class="number">0</span>) &amp;&amp; layoutState.hasMore(state)) &#123;</span><br><span class="line">            layoutChunkResult.resetInternal();</span><br><span class="line">            ...</span><br><span class="line">            layoutChunk(recycler, state, layoutState, layoutChunkResult); <span class="comment">// 用于四级复用</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// RecyclerView.Recycler 是处理缓存复用的</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">layoutChunk</span><span class="params">(RecyclerView.Recycler recycler, RecyclerView.State state,</span></span><br><span class="line"><span class="params">            LayoutState layoutState, LayoutChunkResult result)</span> &#123;</span><br><span class="line">        <span class="type">View</span> <span class="variable">view</span> <span class="operator">=</span> layoutState.next(recycler); <span class="comment">// 拿到 View</span></span><br><span class="line">        <span class="keyword">if</span> (view == <span class="literal">null</span>) &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">        RecyclerView.<span class="type">LayoutParams</span> <span class="variable">params</span> <span class="operator">=</span> (RecyclerView.LayoutParams) view.getLayoutParams();</span><br><span class="line">        <span class="keyword">if</span> (layoutState.mScrapList == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mShouldReverseLayout == (layoutState.mLayoutDirection == LayoutState.LAYOUT_START)) &#123;</span><br><span class="line">                addView(view); <span class="comment">// 添加 View</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                addView(view, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>

<p>layoutChunk：用于四级复用；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// LinearLayoutManager.java</span></span><br><span class="line">        View <span class="title function_">next</span><span class="params">(RecyclerView.Recycler recycler)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (mScrapList != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> nextViewFromScrapList();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 通过位置获取 View</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">View</span> <span class="variable">view</span> <span class="operator">=</span> recycler.getViewForPosition(mCurrentPosition);</span><br><span class="line">            mCurrentPosition += mItemDirection;</span><br><span class="line">            <span class="keyword">return</span> view;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>通过位置获取 View；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// RecyclerView.java</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Recycler</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> View <span class="title function_">getViewForPosition</span><span class="params">(<span class="type">int</span> position)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> getViewForPosition(position, <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        View <span class="title function_">getViewForPosition</span><span class="params">(<span class="type">int</span> position, <span class="type">boolean</span> dryRun)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> tryGetViewHolderForPositionByDeadline(position, dryRun, FOREVER_NS).itemView;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-4-四级缓存"><a href="#1-4-四级缓存" class="headerlink" title="1.4 四级缓存"></a>1.4 四级缓存</h3><p>四级缓存如下：</p>
<ul>
<li>mChangeScrap 与 mAttachedScrap：用来缓存还在屏幕内的 ViewHolder；</li>
<li>mCachedViews：用来缓存滑动到屏幕之外的 ViewHolder；</li>
<li>mViewCacheExtension：这个的创建和缓存完全由开发者自己控制，系统未往这里添加数据；</li>
<li>RecycledViewPool：ViewHolder 缓存池；</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// RecyclerView.java</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Recycler</span> &#123;</span><br><span class="line">        ViewHolder <span class="title function_">tryGetViewHolderForPositionByDeadline</span><span class="params">(<span class="type">int</span> position, <span class="type">boolean</span> dryRun, <span class="type">long</span> deadlineNs)</span> &#123; <span class="comment">// 处理复用</span></span><br><span class="line">            ...</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">fromScrapOrHiddenOrCache</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="type">ViewHolder</span> <span class="variable">holder</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="comment">// 0) If there is a changed scrap, try to find from there</span></span><br><span class="line">            <span class="keyword">if</span> (mState.isPreLayout()) &#123;</span><br><span class="line">                holder = getChangedScrapViewForPosition(position); <span class="comment">// 从 mChangeScrap 获取</span></span><br><span class="line">                fromScrapOrHiddenOrCache = holder != <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 1) Find by position from scrap/hidden list/cache</span></span><br><span class="line">            <span class="keyword">if</span> (holder == <span class="literal">null</span>) &#123;</span><br><span class="line">                holder = getScrapOrHiddenOrCachedHolderForPosition(position, dryRun); <span class="comment">// 从 mAttachedScrap/mCachedViews 获取</span></span><br><span class="line">                <span class="keyword">if</span> (holder != <span class="literal">null</span>) &#123;</span><br><span class="line">                    ...</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (holder == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="type">int</span> <span class="variable">offsetPosition</span> <span class="operator">=</span> mAdapterHelper.findPositionOffset(position);</span><br><span class="line">                ...</span><br><span class="line">                <span class="keyword">final</span> <span class="type">int</span> <span class="variable">type</span> <span class="operator">=</span> mAdapter.getItemViewType(offsetPosition);</span><br><span class="line">                <span class="comment">// 2) Find from scrap/cache via stable ids, if exists</span></span><br><span class="line">                <span class="keyword">if</span> (mAdapter.hasStableIds()) &#123;</span><br><span class="line">                    holder = getScrapOrCachedViewForId(mAdapter.getItemId(offsetPosition), type, dryRun); <span class="comment">// 通过 id 获取</span></span><br><span class="line">                    <span class="keyword">if</span> (holder != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="comment">// update position</span></span><br><span class="line">                        holder.mPosition = offsetPosition;</span><br><span class="line">                        fromScrapOrHiddenOrCache = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (holder == <span class="literal">null</span> &amp;&amp; mViewCacheExtension != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// We are NOT sending the offsetPosition because LayoutManager does not</span></span><br><span class="line">                    <span class="comment">// know it.</span></span><br><span class="line">                    <span class="keyword">final</span> <span class="type">View</span> <span class="variable">view</span> <span class="operator">=</span> mViewCacheExtension.getViewForPositionAndType(<span class="built_in">this</span>, position, type);</span><br><span class="line">                    <span class="keyword">if</span> (view != <span class="literal">null</span>) &#123;</span><br><span class="line">                        holder = getChildViewHolder(view);</span><br><span class="line">                        ...</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (holder == <span class="literal">null</span>) &#123; <span class="comment">// fallback to pool</span></span><br><span class="line">                    ...</span><br><span class="line">                    holder = getRecycledViewPool().getRecycledView(type);</span><br><span class="line">                    ...</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (holder == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> getNanoTime();</span><br><span class="line">                    ...</span><br><span class="line">                    holder = mAdapter.createViewHolder(RecyclerView.<span class="built_in">this</span>, type); <span class="comment">// 创建 ViewHolder</span></span><br><span class="line">                    ...</span><br><span class="line">                    <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> getNanoTime();</span><br><span class="line">                    mRecyclerPool.factorInCreateTime(type, end - start);</span><br><span class="line">                    <span class="keyword">if</span> (DEBUG) &#123;</span><br><span class="line">                        Log.d(TAG, <span class="string">&quot;tryGetViewHolderForPositionByDeadline created new ViewHolder&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ...</span><br></pre></td></tr></table></figure>

<p>返回的是 ViewHolder，所以复用的就是 ViewHolder，ViewHolder 可以理解为一个 itemview；</p>
<h4 id="1-4-1-mChangeScrap"><a href="#1-4-1-mChangeScrap" class="headerlink" title="1.4.1 mChangeScrap"></a>1.4.1 mChangeScrap</h4><p>getChangedScrapViewForPosition()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// RecyclerView.java</span></span><br><span class="line">        ViewHolder <span class="title function_">getChangedScrapViewForPosition</span><span class="params">(<span class="type">int</span> position)</span> &#123;</span><br><span class="line">            <span class="comment">// If pre-layout, check the changed scrap for an exact match.</span></span><br><span class="line">            ...</span><br><span class="line">            <span class="comment">// find by position</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; changedScrapSize; i++) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="type">ViewHolder</span> <span class="variable">holder</span> <span class="operator">=</span> mChangedScrap.get(i); <span class="comment">// 通过 position 获取</span></span><br><span class="line">                <span class="keyword">if</span> (!holder.wasReturnedFromScrap() &amp;&amp; holder.getLayoutPosition() == position) &#123;</span><br><span class="line">                    holder.addFlags(ViewHolder.FLAG_RETURNED_FROM_SCRAP);</span><br><span class="line">                    <span class="keyword">return</span> holder;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// find by id</span></span><br><span class="line">            <span class="keyword">if</span> (mAdapter.hasStableIds()) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="type">int</span> <span class="variable">offsetPosition</span> <span class="operator">=</span> mAdapterHelper.findPositionOffset(position);</span><br><span class="line">                <span class="keyword">if</span> (offsetPosition &gt; <span class="number">0</span> &amp;&amp; offsetPosition &lt; mAdapter.getItemCount()) &#123;</span><br><span class="line">                    <span class="keyword">final</span> <span class="type">long</span> <span class="variable">id</span> <span class="operator">=</span> mAdapter.getItemId(offsetPosition);</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; changedScrapSize; i++) &#123;</span><br><span class="line">                        <span class="keyword">final</span> <span class="type">ViewHolder</span> <span class="variable">holder</span> <span class="operator">=</span> mChangedScrap.get(i); <span class="comment">// 通过 id 获取</span></span><br><span class="line">                        <span class="keyword">if</span> (!holder.wasReturnedFromScrap() &amp;&amp; holder.getItemId() == id) &#123;</span><br><span class="line">                            holder.addFlags(ViewHolder.FLAG_RETURNED_FROM_SCRAP);</span><br><span class="line">                            <span class="keyword">return</span> holder;</span><br><span class="line">                        ...</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>



<h4 id="1-4-2-mAttachedScrap-x2F-mCachedViews"><a href="#1-4-2-mAttachedScrap-x2F-mCachedViews" class="headerlink" title="1.4.2 mAttachedScrap&#x2F;mCachedViews"></a>1.4.2 mAttachedScrap&#x2F;mCachedViews</h4><h5 id="1-4-2-1-通过位置获取"><a href="#1-4-2-1-通过位置获取" class="headerlink" title="1.4.2.1 通过位置获取"></a>1.4.2.1 通过位置获取</h5><p>getScrapOrHiddenOrCachedHolderForPosition()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// RecyclerView.java</span></span><br><span class="line">        ViewHolder <span class="title function_">getScrapOrHiddenOrCachedHolderForPosition</span><span class="params">(<span class="type">int</span> position, <span class="type">boolean</span> dryRun)</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">scrapCount</span> <span class="operator">=</span> mAttachedScrap.size();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Try first for an exact, non-invalid match from scrap.</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; scrapCount; i++) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="type">ViewHolder</span> <span class="variable">holder</span> <span class="operator">=</span> mAttachedScrap.get(i); <span class="comment">// mAttachedScrap</span></span><br><span class="line">                <span class="keyword">if</span> (!holder.wasReturnedFromScrap() &amp;&amp; holder.getLayoutPosition() == position</span><br><span class="line">                        &amp;&amp; !holder.isInvalid() &amp;&amp; (mState.mInPreLayout || !holder.isRemoved())) &#123;</span><br><span class="line">                    holder.addFlags(ViewHolder.FLAG_RETURNED_FROM_SCRAP);</span><br><span class="line">                    <span class="keyword">return</span> holder;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ...</span><br><span class="line">            <span class="comment">// Search in our first-level recycled view cache.</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">cacheSize</span> <span class="operator">=</span> mCachedViews.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; cacheSize; i++) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="type">ViewHolder</span> <span class="variable">holder</span> <span class="operator">=</span> mCachedViews.get(i); <span class="comment">// mCachedViews 第一层缓存</span></span><br><span class="line">                ...</span><br></pre></td></tr></table></figure>

<h5 id="1-4-2-2-通过-id-获取"><a href="#1-4-2-2-通过-id-获取" class="headerlink" title="1.4.2.2 通过 id 获取"></a>1.4.2.2 通过 id 获取</h5><p>getScrapOrCachedViewForId()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// RecyclerView.java</span></span><br><span class="line">        ViewHolder <span class="title function_">getScrapOrCachedViewForId</span><span class="params">(<span class="type">long</span> id, <span class="type">int</span> type, <span class="type">boolean</span> dryRun)</span> &#123;</span><br><span class="line">            <span class="comment">// Look in our attached views first</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> mAttachedScrap.size(); <span class="comment">// mAttachedScrap</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> count - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="type">ViewHolder</span> <span class="variable">holder</span> <span class="operator">=</span> mAttachedScrap.get(i);</span><br><span class="line">                ...</span><br><span class="line">            <span class="comment">// Search the first-level cache</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">cacheSize</span> <span class="operator">=</span> mCachedViews.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> cacheSize - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="type">ViewHolder</span> <span class="variable">holder</span> <span class="operator">=</span> mCachedViews.get(i); <span class="comment">// mCachedViews</span></span><br><span class="line">                <span class="keyword">if</span> (holder.getItemId() == id) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (type == holder.getItemViewType()) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (!dryRun) &#123;</span><br><span class="line">                            mCachedViews.remove(i);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> holder;</span><br><span class="line">                    ...</span><br></pre></td></tr></table></figure>



<h4 id="1-4-3-mViewCacheExtension-自定义缓存和复用"><a href="#1-4-3-mViewCacheExtension-自定义缓存和复用" class="headerlink" title="1.4.3 mViewCacheExtension - 自定义缓存和复用"></a>1.4.3 mViewCacheExtension - 自定义缓存和复用</h4><p>getViewForPositionAndType()</p>
<p>先自定义缓存，再自定义复用，用的比较少</p>
<h4 id="1-4-4-RecycledViewPool-从缓存池获取"><a href="#1-4-4-RecycledViewPool-从缓存池获取" class="headerlink" title="1.4.4 RecycledViewPool - 从缓存池获取"></a>1.4.4 RecycledViewPool - 从缓存池获取</h4><p>getRecycledViewPool().getRecycledView()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// RecyclerView.java</span></span><br><span class="line">        <span class="keyword">public</span> ViewHolder <span class="title function_">getRecycledView</span><span class="params">(<span class="type">int</span> viewType)</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">ScrapData</span> <span class="variable">scrapData</span> <span class="operator">=</span> mScrap.get(viewType);</span><br><span class="line">            <span class="keyword">if</span> (scrapData != <span class="literal">null</span> &amp;&amp; !scrapData.mScrapHeap.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">final</span> ArrayList&lt;ViewHolder&gt; scrapHeap = scrapData.mScrapHeap;</span><br><span class="line">                <span class="keyword">return</span> scrapHeap.remove(scrapHeap.size() - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-4-5-直接创建-ViewHolder"><a href="#1-4-5-直接创建-ViewHolder" class="headerlink" title="1.4.5 直接创建 ViewHolder"></a>1.4.5 直接创建 ViewHolder</h4><p>mAdapter.createViewHolder()，调用 onCreateViewHolder</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// RecyclerView.java</span></span><br><span class="line">        ViewHolder <span class="title function_">tryGetViewHolderForPositionByDeadline</span><span class="params">(<span class="type">int</span> position, <span class="type">boolean</span> dryRun, <span class="type">long</span> deadlineNs)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (holder == <span class="literal">null</span>) &#123;</span><br><span class="line">                    ...</span><br><span class="line">                    holder = mAdapter.createViewHolder(RecyclerView.<span class="built_in">this</span>, type); <span class="comment">// 直接创建</span></span><br><span class="line">                    ...&#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> VH <span class="title function_">createViewHolder</span><span class="params">(ViewGroup parent, <span class="type">int</span> viewType)</span> &#123;</span><br><span class="line">            Trace.beginSection(TRACE_CREATE_VIEW_TAG);</span><br><span class="line">            <span class="keyword">final</span> <span class="type">VH</span> <span class="variable">holder</span> <span class="operator">=</span> onCreateViewHolder(parent, viewType);</span><br><span class="line">            holder.mItemViewType = viewType;</span><br><span class="line">            Trace.endSection();</span><br><span class="line">            <span class="keyword">return</span> holder;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-4-6-绑定-ViewHolder"><a href="#1-4-6-绑定-ViewHolder" class="headerlink" title="1.4.6 绑定 ViewHolder"></a>1.4.6 绑定 ViewHolder</h4><p>tryBindViewHolderByDeadline() -&gt; mAdapter.bindViewHolder() -&gt; onBindViewHolder()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// RecyclerView.java</span></span><br><span class="line">        ViewHolder <span class="title function_">tryGetViewHolderForPositionByDeadline</span><span class="params">(<span class="type">int</span> position, <span class="type">boolean</span> dryRun, <span class="type">long</span> deadlineNs)</span> &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">bound</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (mState.isPreLayout() &amp;&amp; holder.isBound()) &#123;</span><br><span class="line">                <span class="comment">// do not update unless we absolutely have to.</span></span><br><span class="line">                holder.mPreLayoutPosition = position;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!holder.isBound() || holder.needsUpdate() || holder.isInvalid()) &#123;</span><br><span class="line">                ...</span><br><span class="line">                <span class="keyword">final</span> <span class="type">int</span> <span class="variable">offsetPosition</span> <span class="operator">=</span> mAdapterHelper.findPositionOffset(position);</span><br><span class="line">                bound = tryBindViewHolderByDeadline(holder, offsetPosition, position, deadlineNs); <span class="comment">// </span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">tryBindViewHolderByDeadline</span><span class="params">(ViewHolder holder, <span class="type">int</span> offsetPosition,</span></span><br><span class="line"><span class="params">                <span class="type">int</span> position, <span class="type">long</span> deadlineNs)</span> &#123;</span><br><span class="line">            holder.mOwnerRecyclerView = RecyclerView.<span class="built_in">this</span>;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">viewType</span> <span class="operator">=</span> holder.getItemViewType();</span><br><span class="line">            <span class="type">long</span> <span class="variable">startBindNs</span> <span class="operator">=</span> getNanoTime();</span><br><span class="line">            ...</span><br><span class="line">            mAdapter.bindViewHolder(holder, offsetPosition);</span><br><span class="line">            ...</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">bindViewHolder</span><span class="params">(VH holder, <span class="type">int</span> position)</span> &#123;</span><br><span class="line">            holder.mPosition = position;</span><br><span class="line">            ...</span><br><span class="line">            onBindViewHolder(holder, position, holder.getUnmodifiedPayloads());</span><br><span class="line">            ...</span><br></pre></td></tr></table></figure>

<h3 id="1-5-总结"><a href="#1-5-总结" class="headerlink" title="1.5 总结"></a>1.5 总结</h3><ul>
<li>首先从 mChangeScrap 中获取 ViewHolder；</li>
<li>如果没有获取到，则从 mAttachedScrap &#x2F; mCachedViews 中获取；</li>
<li>如果还没有获取到，则从自定义缓存 mViewCacheExtension 获取；</li>
<li>如果依然没有获取到，则从 RecycledViewPool 中获取；</li>
<li>如果都没有获取到，就直接通过 mAdapter.createViewHolder 创建 ViewHolder；</li>
<li>最后通过 bindViewHolder -&gt; onBindViewHolder 绑定 ViewHolder；</li>
</ul>
<p>待补充f复用流程时序图</p>
<h2 id="2-RecyclerView-缓存机制"><a href="#2-RecyclerView-缓存机制" class="headerlink" title="2 RecyclerView 缓存机制"></a>2 RecyclerView 缓存机制</h2><p>同样在滑动事件和布局都有入口，首先是滑动事件的缓存入口：</p>
<h3 id="2-1-滑动事件缓存入口"><a href="#2-1-滑动事件缓存入口" class="headerlink" title="2.1 滑动事件缓存入口"></a>2.1 滑动事件缓存入口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// LinearLayoutManager.java</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">fill</span><span class="params">(RecyclerView.Recycler recycler, LayoutState layoutState,</span></span><br><span class="line"><span class="params">            RecyclerView.State state, <span class="type">boolean</span> stopOnFocusable)</span> &#123;</span><br><span class="line">        <span class="comment">// max offset we should set is mFastScroll + available</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> layoutState.mAvailable;</span><br><span class="line">        <span class="keyword">if</span> (layoutState.mScrollingOffset != LayoutState.SCROLLING_OFFSET_NaN) &#123;</span><br><span class="line">            <span class="comment">// TODO ugly bug fix. should not happen</span></span><br><span class="line">            <span class="keyword">if</span> (layoutState.mAvailable &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                layoutState.mScrollingOffset += layoutState.mAvailable;</span><br><span class="line">            &#125;</span><br><span class="line">            recycleByLayoutState(recycler, layoutState); <span class="comment">// 缓存 ViewHolder</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>recycleByLayoutState() 就是缓存 ViewHolder 的入口了；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// LinearLayoutManager.java</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">recycleByLayoutState</span><span class="params">(RecyclerView.Recycler recycler, LayoutState layoutState)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!layoutState.mRecycle || layoutState.mInfinite) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (layoutState.mLayoutDirection == LayoutState.LAYOUT_START) &#123;</span><br><span class="line">            recycleViewsFromEnd(recycler, layoutState.mScrollingOffset); <span class="comment">// 缓存尾部(向上滑)</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            recycleViewsFromStart(recycler, layoutState.mScrollingOffset); <span class="comment">// 缓存顶部(向下滑)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>recycleViewsFromEnd 和 recycleViewsFromStart 分别是缓存尾部和缓存底部，分别对应向上滑和向下滑，选择缓存顶部看一下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// LinearLayoutManager.java</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">recycleViewsFromStart</span><span class="params">(RecyclerView.Recycler recycler, <span class="type">int</span> dt)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">limit</span> <span class="operator">=</span> dt;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">childCount</span> <span class="operator">=</span> getChildCount();</span><br><span class="line">        <span class="keyword">if</span> (mShouldReverseLayout) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> childCount - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                <span class="type">View</span> <span class="variable">child</span> <span class="operator">=</span> getChildAt(i);</span><br><span class="line">                <span class="keyword">if</span> (mOrientationHelper.getDecoratedEnd(child) &gt; limit</span><br><span class="line">                        || mOrientationHelper.getTransformedEndWithDecoration(child) &gt; limit) &#123;</span><br><span class="line">                    <span class="comment">// stop here</span></span><br><span class="line">                    recycleChildren(recycler, childCount - <span class="number">1</span>, i); <span class="comment">//</span></span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">                <span class="type">View</span> <span class="variable">child</span> <span class="operator">=</span> getChildAt(i);</span><br><span class="line">                <span class="keyword">if</span> (mOrientationHelper.getDecoratedEnd(child) &gt; limit</span><br><span class="line">                        || mOrientationHelper.getTransformedEndWithDecoration(child) &gt; limit) &#123;</span><br><span class="line">                    <span class="comment">// stop here</span></span><br><span class="line">                    recycleChildren(recycler, <span class="number">0</span>, i); <span class="comment">//</span></span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>两个分支都会调用到 recycleChildren()；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// LinearLayoutManager.java</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">recycleChildren</span><span class="params">(RecyclerView.Recycler recycler, <span class="type">int</span> startIndex, <span class="type">int</span> endIndex)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span> (endIndex &gt; startIndex) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> endIndex - <span class="number">1</span>; i &gt;= startIndex; i--) &#123;</span><br><span class="line">                removeAndRecycleViewAt(i, recycler); <span class="comment">//</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex; i &gt; endIndex; i--) &#123;</span><br><span class="line">                removeAndRecycleViewAt(i, recycler);<span class="comment">//</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>继续调用 removeAndRecycleViewAt()；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// RecyclerView.java</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeAndRecycleViewAt</span><span class="params">(<span class="type">int</span> index, Recycler recycler)</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">View</span> <span class="variable">view</span> <span class="operator">=</span> getChildAt(index);</span><br><span class="line">            removeViewAt(index);</span><br><span class="line">            recycler.recycleView(view); <span class="comment">//</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">recycleView</span><span class="params">(View view)</span> &#123;</span><br><span class="line">    <span class="comment">// This public recycle method tries to make view recycle-able since layout manager</span></span><br><span class="line">    <span class="comment">// intended to recycle this view (e.g. even if it is in scrap or change cache)</span></span><br><span class="line">    <span class="type">ViewHolder</span> <span class="variable">holder</span> <span class="operator">=</span> getChildViewHolderInt(view);</span><br><span class="line">    <span class="keyword">if</span> (holder.isTmpDetached()) &#123;</span><br><span class="line">        removeDetachedView(view, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (holder.isScrap()) &#123;</span><br><span class="line">        holder.unScrap();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (holder.wasReturnedFromScrap()) &#123;</span><br><span class="line">        holder.clearReturnedFromScrapFlag();</span><br><span class="line">    &#125;</span><br><span class="line">    recycleViewHolderInternal(holder); <span class="comment">// 重点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重点是 recycleViewHolderInternal()；</p>
<h3 id="2-2-布局缓存入口"><a href="#2-2-布局缓存入口" class="headerlink" title="2.2 布局缓存入口"></a>2.2 布局缓存入口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// LinearLayoutManager.java</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onLayoutChildren</span><span class="params">(RecyclerView.Recycler recycler, RecyclerView.State state)</span> &#123;</span><br><span class="line">        detachAndScrapAttachedViews(recycler);</span><br></pre></td></tr></table></figure>

<p>LinearLayoutManager 并没有重写 detachAndScrapAttachedViews()，要从父类 RecyclerView 中查看：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// RecyclerView.java</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">detachAndScrapAttachedViews</span><span class="params">(Recycler recycler)</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">childCount</span> <span class="operator">=</span> getChildCount();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> childCount - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="type">View</span> <span class="variable">v</span> <span class="operator">=</span> getChildAt(i);</span><br><span class="line">                scrapOrRecycleView(recycler, i, v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>继续调用 scrapOrRecycleView()；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// RecyclerView.java</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">scrapOrRecycleView</span><span class="params">(Recycler recycler, <span class="type">int</span> index, View view)</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">ViewHolder</span> <span class="variable">viewHolder</span> <span class="operator">=</span> getChildViewHolderInt(view);</span><br><span class="line">            ...</span><br><span class="line">            <span class="keyword">if</span> (viewHolder.isInvalid() &amp;&amp; !viewHolder.isRemoved()</span><br><span class="line">                    &amp;&amp; !mRecyclerView.mAdapter.hasStableIds()) &#123;</span><br><span class="line">                removeViewAt(index);</span><br><span class="line">                recycler.recycleViewHolderInternal(viewHolder); <span class="comment">// 缓存 mCachedViews 和 RecycledViewPool</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                detachViewAt(index);</span><br><span class="line">                recycler.scrapView(view); <span class="comment">// 缓存 mChangedScrap 和 mAttachedScrap</span></span><br><span class="line">                mRecyclerView.mViewInfoStore.onViewDetached(viewHolder);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>这里有两个分支，分别用来缓存到不同的列表：</p>
<ul>
<li>recycleViewHolderInternal：缓存 <strong>mCachedViews</strong> 和 <strong>RecycledViewPool</strong>，滑动和布局都会缓存；</li>
<li>scrapView：缓存 <strong>mChangedScrap</strong> 和 <strong>mAttachedScrap</strong>，只有布局会缓存；</li>
</ul>
<h3 id="2-3-recycleViewHolderInternal-缓存-mCachedViews-和-RecycledViewPool"><a href="#2-3-recycleViewHolderInternal-缓存-mCachedViews-和-RecycledViewPool" class="headerlink" title="2.3 recycleViewHolderInternal() - 缓存 mCachedViews 和 RecycledViewPool"></a>2.3 recycleViewHolderInternal() - 缓存 mCachedViews 和 RecycledViewPool</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// RecyclerView.java</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_CACHE_SIZE</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mViewCacheMax</span> <span class="operator">=</span> DEFAULT_CACHE_SIZE; <span class="comment">// 最大值为 2</span></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">recycleViewHolderInternal</span><span class="params">(ViewHolder holder)</span> &#123;</span><br><span class="line">           ...</span><br><span class="line">            <span class="comment">//noinspection unchecked</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">transientStatePreventsRecycling</span> <span class="operator">=</span> holder</span><br><span class="line">                    .doesTransientStatePreventRecycling();</span><br><span class="line">            <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">forceRecycle</span> <span class="operator">=</span> mAdapter != <span class="literal">null</span></span><br><span class="line">                    &amp;&amp; transientStatePreventsRecycling</span><br><span class="line">                    &amp;&amp; mAdapter.onFailedToRecycleView(holder);</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">cached</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">recycled</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            ...</span><br><span class="line">            <span class="keyword">if</span> (forceRecycle || holder.isRecyclable()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mViewCacheMax &gt; <span class="number">0</span></span><br><span class="line">                        &amp;&amp; !holder.hasAnyOfTheFlags(ViewHolder.FLAG_INVALID</span><br><span class="line">                                | ViewHolder.FLAG_REMOVED</span><br><span class="line">                                | ViewHolder.FLAG_UPDATE</span><br><span class="line">                                | ViewHolder.FLAG_ADAPTER_POSITION_UNKNOWN)) &#123;</span><br><span class="line">                    <span class="comment">// Retire oldest cached view</span></span><br><span class="line">                    <span class="type">int</span> <span class="variable">cachedViewSize</span> <span class="operator">=</span> mCachedViews.size();</span><br><span class="line">                    <span class="keyword">if</span> (cachedViewSize &gt;= mViewCacheMax &amp;&amp; cachedViewSize &gt; <span class="number">0</span>) &#123; <span class="comment">// 如果 mViewCacheMax 满了</span></span><br><span class="line">                        <span class="comment">// 把 mCachedViews 第 0 个元素取出放入 RecucledViewPool 并从 mCachedViews 移除</span></span><br><span class="line">                        recycleCachedViewAt(<span class="number">0</span>);</span><br><span class="line">                        cachedViewSize--;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="type">int</span> <span class="variable">targetCacheIndex</span> <span class="operator">=</span> cachedViewSize;</span><br><span class="line">                    ...</span><br><span class="line">                    mCachedViews.add(targetCacheIndex, holder); <span class="comment">// 添加到 mCachedViews 中</span></span><br><span class="line">                    cached = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!cached) &#123;</span><br><span class="line">                    addViewHolderToRecycledViewPool(holder, <span class="literal">true</span>); <span class="comment">// ViewHolder 存在 if 分支的任一标记，则直接缓存到缓冲池</span></span><br><span class="line">                    recycled = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;...&#125;</span><br></pre></td></tr></table></figure>

<p>如果 mViewCache 存满了，即已经有 2 个ViewHolder 了，就调用 recycleCachedViewAt() 取出 index 为 0 的元素添加到 RecycledViewPool；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// RecyclerView.java</span></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">recycleCachedViewAt</span><span class="params">(<span class="type">int</span> cachedViewIndex)</span> &#123;</span><br><span class="line">            ...</span><br><span class="line">            <span class="type">ViewHolder</span> <span class="variable">viewHolder</span> <span class="operator">=</span> mCachedViews.get(cachedViewIndex); <span class="comment">// 取出</span></span><br><span class="line">            addViewHolderToRecycledViewPool(viewHolder, <span class="literal">true</span>); <span class="comment">// 添加到 RecycledViewPool</span></span><br><span class="line">            mCachedViews.remove(cachedViewIndex); <span class="comment">// 移除</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>addViewHolderToRecycledViewPool()：添加 ViewHolder 到 RecycledViewHolder；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">addViewHolderToRecycledViewPool</span><span class="params">(ViewHolder holder, <span class="type">boolean</span> dispatchRecycled)</span> &#123;</span><br><span class="line">    clearNestedRecyclerViewIfNotNested(holder);</span><br><span class="line">    holder.itemView.setAccessibilityDelegate(<span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">if</span> (dispatchRecycled) &#123;</span><br><span class="line">        dispatchViewRecycled(holder);</span><br><span class="line">    &#125;</span><br><span class="line">    holder.mOwnerRecyclerView = <span class="literal">null</span>;</span><br><span class="line">    getRecycledViewPool().putRecycledView(holder); <span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SparseArray&lt;ScrapData&gt; mScrap = <span class="keyword">new</span> <span class="title class_">SparseArray</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">putRecycledView</span><span class="params">(ViewHolder scrap)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">viewType</span> <span class="operator">=</span> scrap.getItemViewType(); <span class="comment">// 获取 ViewHolder 的类型</span></span><br><span class="line">    <span class="comment">// 获取 ScrapData 中的 mScrapHeap，是一个 List，存的是 ViewHolder</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">ArrayList</span> <span class="variable">scrapHeap</span> <span class="operator">=</span> getScrapDataForType(viewType).mScrapHeap;</span><br><span class="line">    <span class="comment">// 如果存放 ViewHolder 的 scrapHeap 的 size 已经超过最大值了，就直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (mScrap.get(viewType).mMaxScrap &lt;= scrapHeap.size()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    scrap.resetInternal(); <span class="comment">// 重置</span></span><br><span class="line">    scrapHeap.add(scrap); <span class="comment">// 添加到 scrapHeap 中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>mScrap 是一个 SparseArray，mScrap.get(viewType) 则是一个 ScrapData，mMaxScrap 定义在 ScrapData 中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// RecyclerView.java</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">RecycledViewPool</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_MAX_SCRAP</span> <span class="operator">=</span> <span class="number">5</span>; <span class="comment">// 存放 ViewHolder 的 list 最大值为 5</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ScrapData</span> &#123;</span><br><span class="line">            ArrayList&lt;ViewHolder&gt; mScrapHeap = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="type">int</span> <span class="variable">mMaxScrap</span> <span class="operator">=</span> DEFAULT_MAX_SCRAP;</span><br><span class="line">            <span class="type">long</span> <span class="variable">mCreateRunningAverageNs</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">long</span> <span class="variable">mBindRunningAverageNs</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>如果存放 ViewHolder 的 scrapHeap 的 size 已经超过最大值了，就直接返回，否则把需要放入 RecyclerViewPool 的 ViewHolder 存入 scrapHeap 中，即 RecyclerViewPool 中每个 ViewType 对应一个 ScrapData，每个 ScrapData 中有一个保存 ViewHolder 的列表，这个列表的大小为 5，也就是说每种 ViewType 的 ViewHolder 在缓冲池子中的大小都为 5，当不满的时候，先把要缓存的 ViewHolder 重置，然后再放入 scrapHeap 中，所以缓冲池中保存的 ViewHolder 是空白的不带数据的 ViewHolder；</p>
<h3 id="2-4-scrapView-缓存-mChangedScrap-和-mAttachedScrap"><a href="#2-4-scrapView-缓存-mChangedScrap-和-mAttachedScrap" class="headerlink" title="2.4 scrapView() - 缓存 mChangedScrap 和 mAttachedScrap"></a>2.4 scrapView() - 缓存 mChangedScrap 和 mAttachedScrap</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// RecyclerView.java</span></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">scrapView</span><span class="params">(View view)</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">ViewHolder</span> <span class="variable">holder</span> <span class="operator">=</span> getChildViewHolderInt(view);</span><br><span class="line">            <span class="keyword">if</span> (holder.hasAnyOfTheFlags(ViewHolder.FLAG_REMOVED | ViewHolder.FLAG_INVALID)</span><br><span class="line">                    || !holder.isUpdated() || canReuseUpdatedViewHolder(holder)) &#123;</span><br><span class="line">                ...</span><br><span class="line">                holder.setScrapContainer(<span class="built_in">this</span>, <span class="literal">false</span>);</span><br><span class="line">                mAttachedScrap.add(holder); <span class="comment">// 缓存到 mAttachedScrap</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (mChangedScrap == <span class="literal">null</span>) &#123;</span><br><span class="line">                    mChangedScrap = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;ViewHolder&gt;();</span><br><span class="line">                &#125;</span><br><span class="line">                holder.setScrapContainer(<span class="built_in">this</span>, <span class="literal">true</span>);</span><br><span class="line">                mChangedScrap.add(holder); <span class="comment">// 缓存到 mChangedScrap</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-5-总结"><a href="#2-5-总结" class="headerlink" title="2.5 总结"></a>2.5 总结</h3><p>对于滑动事件缓存，只会缓存 mCachedViews 和 RecycledViewPool，</p>
<ul>
<li>mCachedViews：size 为 2，是一个队列，划出屏幕的 ViewHolder 会依次保存到 index 为 0 的元素中，当 size 大于等于 2 时，<ul>
<li>如果 RecycledViewPool 对应 ViewType 的列表没满 5 个，就把 mCachedViews 中第 0 个元素取出放入 RecycledViewPool，把第 1 个元素移到第 0 个位置；</li>
<li>如果 RecycledViewPool 已经满了，则直接丢弃第 0 个元素，把第 1 个元素移到第 0 个位置；</li>
</ul>
</li>
<li>RecycledViewPool：size 为 5，里面根据 ViewType 存放了很多 ScrapData，每个 ScrapData 保存一个 size 为 5 的存放 ViewHolder 的 mScrapHeap 列表，列表中存放的是经过重置的 ViewHolder；</li>
</ul>
<p>对于布局流程的缓存，除了上面两种，还缓存了 mChangedScrap 和 mAttachedScrap；</p>
<p>待补充缓存流程时序图</p>
<p><a href="https://juejin.cn/post/7021059826495176735">Ref</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>RecyclerView</tag>
      </tags>
  </entry>
  <entry>
    <title>Android - Jetpack套件之 Lifecycle 原理</title>
    <url>/2023/03/28/Android/AndroidDevelop_022_Jetpack_Lifecycle_Mechanism/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>Android Jetpack 套件之 Lifecycle 原理；</p>
</blockquote>
<span id="more"></span>

<p>Lifecycle 的使用很简单，接下来让我们研究一下 Lifecycle 的源码和原理；</p>
<h2 id="Lifecycle-原理"><a href="#Lifecycle-原理" class="headerlink" title="Lifecycle 原理"></a>Lifecycle 原理</h2><p>Lifrcycle 使用方式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">getLifecycle().addObserver(myObserver);</span><br></pre></td></tr></table></figure>

<p>先来看看 getLifecycle() 是什么；</p>
<h3 id="getLifecycle"><a href="#getLifecycle" class="headerlink" title="getLifecycle()"></a>getLifecycle()</h3><p>之所以在 Activity&#x2F;Fragment 中可以直接调用 getLifecycle() 方法，是因为 Activity&#x2F;Fragment 间接实现了 LifecycleOwner 接口；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ComponentActivity.java</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">LifecycleRegistry</span> <span class="variable">mLifecycleRegistry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LifecycleRegistry</span>(<span class="built_in">this</span>);</span><br><span class="line">    <span class="keyword">public</span> Lifecycle <span class="title function_">getLifecycle</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mLifecycleRegistry;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Lifecycle <span class="title function_">getLifecycle</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.mLifecycleRegistry;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>返回了一个 LifecycleRegistry 对象，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// LifecycleRegistry.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LifecycleRegistry</span> <span class="keyword">extends</span> <span class="title class_">Lifecycle</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> FastSafeIterableMap&lt;LifecycleObserver, ObserverWithState&gt; mObserverMap;</span><br><span class="line">    <span class="keyword">private</span> Lifecycle.State mState;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> WeakReference&lt;LifecycleOwner&gt; mLifecycleOwner;</span><br><span class="line"><span class="comment">// Lifecycle.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Lifecycle</span> &#123;</span><br></pre></td></tr></table></figure>

<p>几个重要的成员变量：</p>
<ul>
<li>mObserverMap：持有所有的观察者对象 LifecycleObserver，以及该观察者对应的封装对象 ObserverWithState；</li>
<li>mState：State 是一个枚举类，用于表示当前生命周期状态；</li>
<li>mLifecycleOwner：通过弱引用持有与其关联的所有者对象 LifecycleOwner；</li>
</ul>
<p>LifecycleRegistry 继承自 Lifecycle 这个抽象类，且是 Lifecycle 的唯一子类，那么自然而然，addObserver 就是调用了 LifecycleRegistry.addObserver()；</p>
<h3 id="添加观察者-addObserver"><a href="#添加观察者-addObserver" class="headerlink" title="添加观察者-addObserver()"></a>添加观察者-addObserver()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Lifecycle.java</span></span><br><span class="line">    <span class="keyword">private</span> State mState;</span><br><span class="line">    <span class="meta">@MainThread</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">addObserver</span><span class="params">(<span class="meta">@NonNull</span> LifecycleObserver observer)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// LifecycleRegistry.java</span></span><br><span class="line">    <span class="keyword">private</span> State mState;</span><br><span class="line">    <span class="keyword">private</span> FastSafeIterableMap&lt;LifecycleObserver, ObserverWithState&gt; mObserverMap =</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">FastSafeIterableMap</span>&lt;&gt;();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addObserver</span><span class="params">(<span class="meta">@NonNull</span> LifecycleObserver observer)</span> &#123;</span><br><span class="line">        enforceMainThreadIfNeeded(<span class="string">&quot;addObserver&quot;</span>);</span><br><span class="line">        <span class="type">State</span> <span class="variable">initialState</span> <span class="operator">=</span> mState == DESTROYED ? DESTROYED : INITIALIZED;</span><br><span class="line">        <span class="type">ObserverWithState</span> <span class="variable">statefulObserver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObserverWithState</span>(observer, initialState);</span><br><span class="line">        <span class="type">ObserverWithState</span> <span class="variable">previous</span> <span class="operator">=</span> mObserverMap.putIfAbsent(observer, statefulObserver);</span><br></pre></td></tr></table></figure>

<ul>
<li>初始化时，根据 LifecycleRegistry.mState 是否处于 DESTROYED 状态，获取到默认的初始状态为 DESTROYED 或者 INITIALIZED；</li>
<li>再把观察者和对应的初始状态包装成 ObserverWithState 对象；</li>
<li>最后把 ObserverWithState 存入 mObserverMap 中，如果已经添加过，则返回非空，<font color=red><strong>即把所有的观察者存入了 mObserverMap 中</strong></font>；</li>
</ul>
<h4 id="ObserverWithState"><a href="#ObserverWithState" class="headerlink" title="ObserverWithState()"></a>ObserverWithState()</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// LifecycleRegistry.java</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ObserverWithState</span> &#123;</span><br><span class="line">        State mState;</span><br><span class="line">        LifecycleEventObserver mLifecycleObserver;</span><br><span class="line"></span><br><span class="line">        ObserverWithState(LifecycleObserver observer, State initialState) &#123;</span><br><span class="line">            mLifecycleObserver = Lifecycling.lifecycleEventObserver(observer);</span><br><span class="line">            mState = initialState;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">dispatchEvent</span><span class="params">(LifecycleOwner owner, Event event)</span> &#123;</span><br><span class="line">            <span class="type">State</span> <span class="variable">newState</span> <span class="operator">=</span> event.getTargetState();</span><br><span class="line">            mState = min(mState, newState);</span><br><span class="line">            mLifecycleObserver.onStateChanged(owner, event);</span><br><span class="line">            mState = newState;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>如名称所指，LifecycleWithState 包含了 mState 和 mLifecycleObserver 这 2 个成员变量，构造函数里通过 Lifecycling.lifecycleEventObserver(observer) 返回 LifecycleEventObserver 对象 mLifecycleObserver；</p>
<h4 id="lifecycleEventObserver"><a href="#lifecycleEventObserver" class="headerlink" title="lifecycleEventObserver()"></a>lifecycleEventObserver()</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Lifecycling.java</span></span><br><span class="line">    <span class="keyword">static</span> LifecycleEventObserver <span class="title function_">lifecycleEventObserver</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isLifecycleEventObserver</span> <span class="operator">=</span> object <span class="keyword">instanceof</span> LifecycleEventObserver;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isFullLifecycleObserver</span> <span class="operator">=</span> object <span class="keyword">instanceof</span> FullLifecycleObserver;</span><br><span class="line">        <span class="keyword">if</span> (isLifecycleEventObserver &amp;&amp; isFullLifecycleObserver) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FullLifecycleObserverAdapter</span>((FullLifecycleObserver) object,</span><br><span class="line">                    (LifecycleEventObserver) object);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isFullLifecycleObserver) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FullLifecycleObserverAdapter</span>((FullLifecycleObserver) object, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isLifecycleEventObserver) &#123;</span><br><span class="line">            <span class="keyword">return</span> (LifecycleEventObserver) object; <span class="comment">// 直接返回 LifecycleEventObserver 对象，不往下 new 了</span></span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ReflectiveGenericLifecycleObserver</span>(object);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>这里注意 new 的对象是 ReflectiveGenericLifecycleObserver，在后面会用到；</p>
<p>如果传入的观察者即是 LifecycleEventObserver 对象，又是 FullLifecycleObserver 对象（DefaultLifecycleObserver 继承了 FullLifecycleObserver  接口），即观察者同时实现了这两个接口，那么就返回一个 FullLifecycleObserverAdapter 对象，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// FullLifecycleObserverAdapter.java</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FullLifecycleObserverAdapter</span> <span class="keyword">implements</span> <span class="title class_">LifecycleEventObserver</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> FullLifecycleObserver mFullLifecycleObserver;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LifecycleEventObserver mLifecycleEventObserver;</span><br><span class="line"></span><br><span class="line">    FullLifecycleObserverAdapter(FullLifecycleObserver fullLifecycleObserver,</span><br><span class="line">            LifecycleEventObserver lifecycleEventObserver) &#123;</span><br><span class="line">        mFullLifecycleObserver = fullLifecycleObserver;</span><br><span class="line">        mLifecycleEventObserver = lifecycleEventObserver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onStateChanged</span><span class="params">(<span class="meta">@NonNull</span> LifecycleOwner source, <span class="meta">@NonNull</span> Lifecycle.Event event)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (event) &#123;</span><br><span class="line">            <span class="keyword">case</span> ON_CREATE:</span><br><span class="line">                mFullLifecycleObserver.onCreate(source);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ON_START:</span><br><span class="line">                mFullLifecycleObserver.onStart(source);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ON_RESUME:</span><br><span class="line">                mFullLifecycleObserver.onResume(source);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ON_PAUSE:</span><br><span class="line">                mFullLifecycleObserver.onPause(source);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ON_STOP:</span><br><span class="line">                mFullLifecycleObserver.onStop(source);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ON_DESTROY:</span><br><span class="line">                mFullLifecycleObserver.onDestroy(source);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ON_ANY:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;ON_ANY must not been send by anybody&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mLifecycleEventObserver != <span class="literal">null</span>) &#123;</span><br><span class="line">            mLifecycleEventObserver.onStateChanged(source, event);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>FullLifecycleObserverAdapter 中同时包含了 FullLifecycleObserver 和 LifecycleEventObserver 成员变量，而且在 onStateChanged() 中先调用了 FullLifecycleObserver 里面的生命周期方法，后调用 LifecycleEventObserver 的生命周期方法，所以这里就知道了如果观察者同时实现 LifecycleEventObserver 和 DefaultLifecycleObserver 接口的话，那么优先执行 DefaultLifecycleObserver 的生命周期方法，和 【使用篇】里的优先级描述对应起来了；</li>
<li>如果观察者是 LifecycleEventObserver 或者 FullLifecycleObserver 对象（DefaultLifecycleObserver 对象），那么直接返回传入的 object(观察者)给到 mLifecycleObserver，</li>
<li>如果都不是，即早期直接实现 LifecycleObserver 接口并通过注解方式实现生命周期函数的观察者，则 new 一个 ReflectiveGenericLifecycleObserver 对象；</li>
</ul>
<p>接下来继续回到 addObserver() 中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// LifecycleRegistry.java</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addObserver</span><span class="params">(<span class="meta">@NonNull</span> LifecycleObserver observer)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.enforceMainThreadIfNeeded(<span class="string">&quot;addObserver&quot;</span>);</span><br><span class="line">        Lifecycle.<span class="type">State</span> <span class="variable">initialState</span> <span class="operator">=</span> <span class="built_in">this</span>.mState == State.DESTROYED ? State.DESTROYED : State.INITIALIZED;</span><br><span class="line">        <span class="type">ObserverWithState</span> <span class="variable">statefulObserver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObserverWithState</span>(observer, initialState);</span><br><span class="line">        <span class="type">ObserverWithState</span> <span class="variable">previous</span> <span class="operator">=</span> (ObserverWithState)<span class="built_in">this</span>.mObserverMap.putIfAbsent(observer, statefulObserver);</span><br><span class="line">        <span class="keyword">if</span> (previous == <span class="literal">null</span>) &#123; <span class="comment">// 不等于 null 说明之前的 mObserverMap 中没有包含当前观察者</span></span><br><span class="line">            <span class="type">LifecycleOwner</span> <span class="variable">lifecycleOwner</span> <span class="operator">=</span> (LifecycleOwner)<span class="built_in">this</span>.mLifecycleOwner.get();</span><br><span class="line">            <span class="keyword">if</span> (lifecycleOwner != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">isReentrance</span> <span class="operator">=</span> <span class="built_in">this</span>.mAddingObserverCounter != <span class="number">0</span> || <span class="built_in">this</span>.mHandlingEvent;</span><br><span class="line">                <span class="comment">// 计算当前被添加进来的观察者应该同步到哪种最终状态（LifecycleRegistry 对象当前的状态）</span></span><br><span class="line">                Lifecycle.<span class="type">State</span> <span class="variable">targetState</span> <span class="operator">=</span> <span class="built_in">this</span>.calculateTargetState(observer);</span><br><span class="line">                ++<span class="built_in">this</span>.mAddingObserverCounter;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span>(statefulObserver.mState.compareTo(targetState) &lt; <span class="number">0</span> &amp;&amp; <span class="built_in">this</span>.mObserverMap.contains(observer)) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.pushParentState(statefulObserver.mState);</span><br><span class="line">                    Lifecycle.<span class="type">Event</span> <span class="variable">event</span> <span class="operator">=</span> Event.upFrom(statefulObserver.mState); <span class="comment">// 将状态转化为事件</span></span><br><span class="line">                    ...</span><br><span class="line">                    statefulObserver.dispatchEvent(lifecycleOwner, event); <span class="comment">// 分发一次事件以更新 ObserverWithState 中的状态</span></span><br><span class="line">                    <span class="built_in">this</span>.popParentState();</span><br><span class="line">                    <span class="comment">// 再次计算当前观察者应该同步到哪种最终状态,因为这个过程中可能 LifecycleRegistry 的状态会改变</span></span><br><span class="line">                    <span class="comment">// 如果 LifecycleRegistry 的状态改变了或者第一次循环完事后,当前观察者的状态还未和 LifecycleRegistry 的状态同步,那么还需要继续的循环执行</span></span><br><span class="line">                    targetState = <span class="built_in">this</span>.calculateTargetState(observer);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!isReentrance) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.sync();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                --<span class="built_in">this</span>.mAddingObserverCounter;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>calculateTargetState：计算 LifecycleRegistry 对象当前的状态；</li>
<li>while 循环：将观察者和宿主的状态进行对齐，<ul>
<li>compareTo：将观察者和宿主状态进行比较，如果小于 0，说明两者状态还没有对齐；</li>
<li>如果当前观察者的状态还没有对齐，且 mObserverMap 中包含这个观察者，那么就执行一次事件分发，分发对应的生命周期事件；</li>
<li>如果 LifecycleRegistry 的状态改变了或者第一次循环完事后,当前观察者的状态还未和 LifecycleRegistry 的状态同步，那么还需要继续的循环执行；</li>
</ul>
</li>
<li>sync：该方法的作用是将 mObserverMap 中所有的观察者的状态都同步为当前 LifecycleRegistry 的状态；</li>
</ul>
<p><strong>通过 while 循环，可以知道在 Activity&#x2F;Fragment 的任意生命周期方法中添加观察者都能接收到完整的生命周期事件；</strong></p>
<p>到这里，addObserver() 就结束了，接下来分析如何实现 Activity&#x2F;Fragment 的生命周期事件监听；</p>
<h3 id="监听-Activity-x2F-Fragment-生命周期事件"><a href="#监听-Activity-x2F-Fragment-生命周期事件" class="headerlink" title="监听 Activity&#x2F;Fragment 生命周期事件"></a>监听 Activity&#x2F;Fragment 生命周期事件</h3><p>前面讲过 Activity&#x2F;Fragment 间接实现了 LifecycleOwner 接口，具体路径如下：</p>
<p>Activity -&gt; AppCompatActivity -&gt; FragmentActivity -&gt; androidx.activity.ComponentActivity -&gt; androidx.core.app.ComponentActivity，两个 ComponentActivity 都实现了 LifecycleOwner 接口，在它们的 onCreate() 方法中，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// androidx.activity.ComponentActivity.java</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.mSavedStateRegistryController.performRestore(savedInstanceState);</span><br><span class="line">        <span class="built_in">this</span>.mContextAwareHelper.dispatchOnContextAvailable(<span class="built_in">this</span>);</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        ReportFragment.injectIfNeededIn(<span class="built_in">this</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.mContentLayoutId != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.setContentView(<span class="built_in">this</span>.mContentLayoutId);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// androidx.core.app.ComponentActivity.java</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        ReportFragment.injectIfNeededIn(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>都有 <code>ReportFragment.injectIfNeededIn(this)</code> 这行代码；</p>
<h4 id="injectIfNeededIn"><a href="#injectIfNeededIn" class="headerlink" title="injectIfNeededIn()"></a>injectIfNeededIn()</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ReportFragment.java</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">injectIfNeededIn</span><span class="params">(Activity activity)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (VERSION.SDK_INT &gt;= <span class="number">29</span>) &#123;</span><br><span class="line">            ReportFragment.LifecycleCallbacks.registerIn(activity);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">FragmentManager</span> <span class="variable">manager</span> <span class="operator">=</span> activity.getFragmentManager();</span><br><span class="line">        <span class="keyword">if</span> (manager.findFragmentByTag(<span class="string">&quot;androidx.lifecycle.LifecycleDispatcher.report_fragment_tag&quot;</span>) == <span class="literal">null</span>) &#123;</span><br><span class="line">            manager.beginTransaction().add(<span class="keyword">new</span> <span class="title class_">ReportFragment</span>(), <span class="string">&quot;androidx.lifecycle.LifecycleDispatcher.report_fragment_tag&quot;</span>).commit();</span><br><span class="line">            manager.executePendingTransactions();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>做了两件事：</p>
<ul>
<li>判断当前 Activity 是否包含一个 ReportFragment，如果没有，就为其添加一个没有 UI 的 ReportFragment；</li>
<li>如果 SDK 大于 29，为 Activity 注册生命周期回调 LifecycleCallbacks；</li>
</ul>
<h4 id="API-29-以后-Activity-生命周期回调"><a href="#API-29-以后-Activity-生命周期回调" class="headerlink" title="API 29 以后 - Activity 生命周期回调"></a>API 29 以后 - Activity 生命周期回调</h4><p>LifecycleCallbacks() 生命周期回调</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ReportFragment.java</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">LifecycleCallbacks</span> <span class="keyword">implements</span> <span class="title class_">Application</span>.ActivityLifecycleCallbacks &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onActivityCreated</span><span class="params">(<span class="meta">@NonNull</span> Activity activity, <span class="meta">@Nullable</span> Bundle bundle)</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onActivityPostCreated</span><span class="params">(<span class="meta">@NonNull</span> Activity activity, <span class="meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class="line">            ReportFragment.dispatch(activity, Event.ON_CREATE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onActivityPrePaused</span><span class="params">(<span class="meta">@NonNull</span> Activity activity)</span> &#123;</span><br><span class="line">            ReportFragment.dispatch(activity, Event.ON_PAUSE);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onActivityPaused</span><span class="params">(<span class="meta">@NonNull</span> Activity activity)</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>LifecycleCallbacks 实现了 Application.ActivityLifecycleCallbacks() 接口，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Application.java</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ActivityLifecycleCallbacks</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Called when the Activity calls &#123;<span class="doctag">@link</span> Activity#onCreate super.onCreate()&#125;.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">onActivityCreated</span><span class="params">(<span class="meta">@NonNull</span> Activity activity, <span class="meta">@Nullable</span> Bundle savedInstanceState)</span>;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Called as the last step of the Activity being created. This is always called after</span></span><br><span class="line"><span class="comment">         * &#123;<span class="doctag">@link</span> Activity#onCreate&#125;.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">onActivityPostCreated</span><span class="params">(<span class="meta">@NonNull</span> Activity activity,</span></span><br><span class="line"><span class="params">                <span class="meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br></pre></td></tr></table></figure>

<p>从注释中看到 onActivityCreated 和 onActivityPostCreated 都是在 Activity#onCreate 执行时被调用，然后调用到 ReportFragment.dispatch() 函数；</p>
<h4 id="API-29以前-Report-生命周期"><a href="#API-29以前-Report-生命周期" class="headerlink" title="API 29以前 - Report 生命周期"></a>API 29以前 - Report 生命周期</h4><p>因为添加了一个没有 UI 的 ReportFragment，所以当 Activity 的生命周期发生变化时 ReportFragment 的生命周期也会被调用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ReportFragment.java</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onActivityCreated</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onActivityCreated(savedInstanceState);</span><br><span class="line">        <span class="built_in">this</span>.dispatchCreate(<span class="built_in">this</span>.mProcessListener);</span><br><span class="line">        <span class="built_in">this</span>.dispatch(Event.ON_CREATE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onStart</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onStart();</span><br><span class="line">        <span class="built_in">this</span>.dispatchStart(<span class="built_in">this</span>.mProcessListener);</span><br><span class="line">        <span class="built_in">this</span>.dispatch(Event.ON_START);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>所以 API 29 之前和之后，最终都会调用到 ReportFragment.dispatch()，ReportFragment 的作用就是获取生命周期而已，因为 Fragment 生命周期是依附 Activity 的，好处就是把这部分逻辑抽离出来，实现 Activity 的无侵入；</p>
<h3 id="生命周期事件分发-dispatch"><a href="#生命周期事件分发-dispatch" class="headerlink" title="生命周期事件分发 - dispatch()"></a>生命周期事件分发 - dispatch()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ReportFragment.java</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dispatch</span><span class="params">(<span class="meta">@NonNull</span> Activity activity, <span class="meta">@NonNull</span> Lifecycle.Event event)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (activity <span class="keyword">instanceof</span> LifecycleRegistryOwner) &#123; <span class="comment">// 已废弃，无需查看</span></span><br><span class="line">            ((LifecycleRegistryOwner)activity).getLifecycle().handleLifecycleEvent(event);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (activity <span class="keyword">instanceof</span> LifecycleOwner) &#123;</span><br><span class="line">                <span class="type">Lifecycle</span> <span class="variable">lifecycle</span> <span class="operator">=</span> ((LifecycleOwner)activity).getLifecycle();</span><br><span class="line">                <span class="keyword">if</span> (lifecycle <span class="keyword">instanceof</span> LifecycleRegistry) &#123;</span><br><span class="line">                    ((LifecycleRegistry)lifecycle).handleLifecycleEvent(event); <span class="comment">//</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>最终使用 LifecycleRegistry 的 handleLifecycleEvent 方法处理事件，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// LifecycleRegistry.java</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleLifecycleEvent</span><span class="params">(<span class="meta">@NonNull</span> Lifecycle.Event event)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.enforceMainThreadIfNeeded(<span class="string">&quot;handleLifecycleEvent&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.moveToState(event.getTargetState()); <span class="comment">// 获取 event 发生之后的将要处于的状态并移到这个状态</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">moveToState</span><span class="params">(Lifecycle.State next)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.mState != next) &#123; <span class="comment">// 如果和当前状态不一致才处理</span></span><br><span class="line">            <span class="built_in">this</span>.mState = next;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">this</span>.mHandlingEvent &amp;&amp; <span class="built_in">this</span>.mAddingObserverCounter == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.mHandlingEvent = <span class="literal">true</span>;</span><br><span class="line">                <span class="built_in">this</span>.sync(); <span class="comment">// 把生命周期状态同步给所有观察者</span></span><br><span class="line">                <span class="built_in">this</span>.mHandlingEvent = <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.mNewEventOccurred = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sync</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">LifecycleOwner</span> <span class="variable">lifecycleOwner</span> <span class="operator">=</span> (LifecycleOwner)<span class="built_in">this</span>.mLifecycleOwner.get();</span><br><span class="line">        <span class="keyword">if</span> (lifecycleOwner == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;LifecycleOwner of this LifecycleRegistry is alreadygarbage collected. It is too late to change lifecycle state.&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">while</span>(!<span class="built_in">this</span>.isSynced()) &#123; <span class="comment">// isSynced() 意思是所有观察者都同步完了</span></span><br><span class="line">                <span class="built_in">this</span>.mNewEventOccurred = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.mState.compareTo(((ObserverWithState)<span class="built_in">this</span>.mObserverMap.eldest().getValue()).mState) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.backwardPass(lifecycleOwner); <span class="comment">// </span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                Map.Entry&lt;LifecycleObserver, ObserverWithState&gt; newest = <span class="built_in">this</span>.mObserverMap.newest();</span><br><span class="line">                <span class="keyword">if</span> (!<span class="built_in">this</span>.mNewEventOccurred &amp;&amp; newest != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.mState.compareTo(((ObserverWithState)newest.getValue()).mState) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.forwardPass(lifecycleOwner);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">this</span>.mNewEventOccurred = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最老的和最新的观察者的状态一致，都是ower的当前状态，说明已经同步完了</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isSynced</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.mObserverMap.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Lifecycle.<span class="type">State</span> <span class="variable">eldestObserverState</span> <span class="operator">=</span> ((ObserverWithState)<span class="built_in">this</span>.mObserverMap.eldest().getValue()).mState;</span><br><span class="line">            Lifecycle.<span class="type">State</span> <span class="variable">newestObserverState</span> <span class="operator">=</span> ((ObserverWithState)<span class="built_in">this</span>.mObserverMap.newest().getValue()).mState;</span><br><span class="line">            <span class="keyword">return</span> eldestObserverState == newestObserverState &amp;&amp; <span class="built_in">this</span>.mState == newestObserverState;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@NonNull</span></span><br><span class="line">        <span class="keyword">public</span> State <span class="title function_">getTargetState</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">                <span class="keyword">case</span> ON_CREATE:</span><br><span class="line">                <span class="keyword">case</span> ON_STOP:</span><br><span class="line">                    <span class="keyword">return</span> Lifecycle.State.CREATED;</span><br><span class="line">                <span class="keyword">case</span> ON_START:</span><br><span class="line">                <span class="keyword">case</span> ON_PAUSE:</span><br><span class="line">                    <span class="keyword">return</span> Lifecycle.State.STARTED;</span><br><span class="line">                <span class="keyword">case</span> ON_RESUME:</span><br><span class="line">                    <span class="keyword">return</span> Lifecycle.State.RESUMED;</span><br><span class="line">                <span class="keyword">case</span> ON_DESTROY:</span><br><span class="line">                    <span class="keyword">return</span> Lifecycle.State.DESTROYED;</span><br><span class="line">                <span class="keyword">case</span> ON_ANY:</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="built_in">this</span> + <span class="string">&quot; has no target state&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>使用 getTargetState() 获取生命周期事件 event 发生后将要处于的生命周期状态 state，通过 moveToState 移动到新状态，再使用 sync() 把生命周期状态同步给所有观察者，sync() 中有一个 while 循环，判断条件是 isSynced()，意思是最老的和最新的观察者的状态一致，都是ower的当前状态，说明已经同步完了，然后比较宿主状态和最老&#x2F;最新观察者的状态：</p>
<ul>
<li><p>mState 比最老观察者状态小，调用 backwardPass(lifecycleOwner)：从新到老分发，循环使用 downFrom() 和 observer.dispatchEvent()，连续分发事件；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// LifecycleRegistry.java</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backwardPass</span><span class="params">(LifecycleOwner lifecycleOwner)</span> &#123;</span><br><span class="line">        Iterator&lt;Map.Entry&lt;LifecycleObserver, ObserverWithState&gt;&gt; descendingIterator = <span class="built_in">this</span>.mObserverMap.descendingIterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(descendingIterator.hasNext() &amp;&amp; !<span class="built_in">this</span>.mNewEventOccurred) &#123;</span><br><span class="line">            Map.Entry&lt;LifecycleObserver, ObserverWithState&gt; entry = (Map.Entry)descendingIterator.next();</span><br><span class="line">            <span class="type">ObserverWithState</span> <span class="variable">observer</span> <span class="operator">=</span> (ObserverWithState)entry.getValue();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(observer.mState.compareTo(<span class="built_in">this</span>.mState) &gt; <span class="number">0</span> &amp;&amp; !<span class="built_in">this</span>.mNewEventOccurred &amp;&amp; <span class="built_in">this</span>.mObserverMap.contains((LifecycleObserver)entry.getKey())) &#123;</span><br><span class="line">                Lifecycle.<span class="type">Event</span> <span class="variable">event</span> <span class="operator">=</span> Event.downFrom(observer.mState); <span class="comment">// 状态转事件</span></span><br><span class="line">                ...</span><br><span class="line">                <span class="built_in">this</span>.pushParentState(event.getTargetState());</span><br><span class="line">                observer.dispatchEvent(lifecycleOwner, event);</span><br><span class="line">                <span class="built_in">this</span>.popParentState();</span><br><span class="line">            ...</span><br></pre></td></tr></table></figure>


</li>
<li><p>mState 比最新观察者状态大，调用 forwardPass(lifecycleOwner)：从老到新分发，循环使用 upFrom() 和 observer.dispatchEvent()，连续分发事件。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// LifecycleRegistry.java</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">forwardPass</span><span class="params">(LifecycleOwner lifecycleOwner)</span> &#123;</span><br><span class="line">        Iterator&lt;Map.Entry&lt;LifecycleObserver, ObserverWithState&gt;&gt; ascendingIterator = <span class="built_in">this</span>.mObserverMap.iteratorWithAdditions();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(ascendingIterator.hasNext() &amp;&amp; !<span class="built_in">this</span>.mNewEventOccurred) &#123;</span><br><span class="line">            Map.Entry&lt;LifecycleObserver, ObserverWithState&gt; entry = (Map.Entry)ascendingIterator.next();</span><br><span class="line">            <span class="type">ObserverWithState</span> <span class="variable">observer</span> <span class="operator">=</span> (ObserverWithState)entry.getValue();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(observer.mState.compareTo(<span class="built_in">this</span>.mState) &lt; <span class="number">0</span> &amp;&amp; !<span class="built_in">this</span>.mNewEventOccurred &amp;&amp; <span class="built_in">this</span>.mObserverMap.contains((LifecycleObserver)entry.getKey())) &#123;</span><br><span class="line">                <span class="built_in">this</span>.pushParentState(observer.mState);</span><br><span class="line">                Lifecycle.<span class="type">Event</span> <span class="variable">event</span> <span class="operator">=</span> Event.upFrom(observer.mState); <span class="comment">// 状态转事件</span></span><br><span class="line">                ...</span><br><span class="line">                observer.dispatchEvent(lifecycleOwner, event);</span><br><span class="line">                <span class="built_in">this</span>.popParentState();</span><br><span class="line">            ...</span><br></pre></td></tr></table></figure></li>
</ul>
<p>最后都会调用到 ObserverWithState 的 dispatchEvent() 方法；</p>
<h3 id="生命周期事件回调-ObserverWithState-dispatchEvent"><a href="#生命周期事件回调-ObserverWithState-dispatchEvent" class="headerlink" title="生命周期事件回调 - ObserverWithState .dispatchEvent()"></a>生命周期事件回调 - ObserverWithState .dispatchEvent()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// LifecycleRegistry.java</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ObserverWithState</span> &#123;</span><br><span class="line">        Lifecycle.State mState;</span><br><span class="line">        LifecycleEventObserver mLifecycleObserver;</span><br><span class="line"></span><br><span class="line">        ObserverWithState(LifecycleObserver observer, Lifecycle.State initialState) &#123;</span><br><span class="line">            <span class="built_in">this</span>.mLifecycleObserver = Lifecycling.lifecycleEventObserver(observer);</span><br><span class="line">            <span class="built_in">this</span>.mState = initialState;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">dispatchEvent</span><span class="params">(LifecycleOwner owner, Lifecycle.Event event)</span> &#123;</span><br><span class="line">            Lifecycle.<span class="type">State</span> <span class="variable">newState</span> <span class="operator">=</span> event.getTargetState();</span><br><span class="line">            <span class="built_in">this</span>.mState = LifecycleRegistry.min(<span class="built_in">this</span>.mState, newState);</span><br><span class="line">            <span class="built_in">this</span>.mLifecycleObserver.onStateChanged(owner, event);</span><br><span class="line">            <span class="built_in">this</span>.mState = newState;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>最终调用到最开始添加的观察者重写的的 onStateChanged；</p>
<h3 id="旧版本相关分析"><a href="#旧版本相关分析" class="headerlink" title="旧版本相关分析"></a>旧版本相关分析</h3><h4 id="ReflectiveGenericLifecycleObserver"><a href="#ReflectiveGenericLifecycleObserver" class="headerlink" title="ReflectiveGenericLifecycleObserver"></a>ReflectiveGenericLifecycleObserver</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ReflectiveGenericLifecycleObserver.java</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object mWrapped;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> androidx.lifecycle.ClassesInfoCache.CallbackInfo mInfo;</span><br><span class="line">    ReflectiveGenericLifecycleObserver(Object wrapped) &#123;</span><br><span class="line">        mWrapped = wrapped; <span class="comment">// wrapped 是观察者对象</span></span><br><span class="line">        mInfo = ClassesInfoCache.sInstance.getInfo(mWrapped.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onStateChanged</span><span class="params">(<span class="meta">@NonNull</span> LifecycleOwner source, <span class="meta">@NonNull</span> Event event)</span> &#123;</span><br><span class="line">        mInfo.invokeCallbacks(source, event, mWrapped); <span class="comment">// 最终会调用到这里</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这里的 wrapped 就是观察者对应的对象，注意这里的 onStateChanged() 方法，最终会通过这里调用观察者中对应 event 的方法，继续看 getInfo()；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ClassesInfoCache.java</span></span><br><span class="line">    CallbackInfo <span class="title function_">getInfo</span><span class="params">(Class&lt;?&gt; klass)</span> &#123;</span><br><span class="line">        <span class="type">CallbackInfo</span> <span class="variable">existing</span> <span class="operator">=</span> mCallbackMap.get(klass);</span><br><span class="line">        <span class="keyword">if</span> (existing != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> existing;</span><br><span class="line">        &#125;</span><br><span class="line">        existing = createInfo(klass, <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">return</span> existing;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> CallbackInfo <span class="title function_">createInfo</span><span class="params">(Class&lt;?&gt; klass, <span class="meta">@Nullable</span> Method[] declaredMethods)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        Method[] methods = declaredMethods != <span class="literal">null</span> ? declaredMethods : getDeclaredMethods(klass);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">hasLifecycleMethods</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            <span class="type">OnLifecycleEvent</span> <span class="variable">annotation</span> <span class="operator">=</span> method.getAnnotation(OnLifecycleEvent.class);</span><br><span class="line">            <span class="keyword">if</span> (annotation == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            hasLifecycleMethods = <span class="literal">true</span>;</span><br><span class="line">            Class&lt;?&gt;[] params = method.getParameterTypes();</span><br><span class="line">            <span class="type">int</span> <span class="variable">callType</span> <span class="operator">=</span> CALL_TYPE_NO_ARG;</span><br><span class="line">            <span class="keyword">if</span> (params.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                callType = CALL_TYPE_PROVIDER;</span><br><span class="line">                <span class="keyword">if</span> (!params[<span class="number">0</span>].isAssignableFrom(LifecycleOwner.class)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(</span><br><span class="line">                            <span class="string">&quot;invalid parameter type. Must be one and instanceof LifecycleOwner&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            Lifecycle.<span class="type">Event</span> <span class="variable">event</span> <span class="operator">=</span> annotation.value();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (params.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                callType = CALL_TYPE_PROVIDER_WITH_EVENT;</span><br><span class="line">                <span class="keyword">if</span> (!params[<span class="number">1</span>].isAssignableFrom(Lifecycle.Event.class)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(</span><br><span class="line">                            <span class="string">&quot;invalid parameter type. second arg must be an event&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (event != Lifecycle.Event.ON_ANY) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(</span><br><span class="line">                            <span class="string">&quot;Second arg is supported only for ON_ANY value&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (params.length &gt; <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;cannot have more than 2 params&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">MethodReference</span> <span class="variable">methodReference</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MethodReference</span>(callType, method);</span><br><span class="line">            verifyAndPutHandler(handlerToEvent, methodReference, event, klass);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">CallbackInfo</span> <span class="variable">info</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CallbackInfo</span>(handlerToEvent);</span><br><span class="line">        mCallbackMap.put(klass, info);</span><br><span class="line">        mHasLifecycleMethods.put(klass, hasLifecycleMethods);</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p>可见 methods 数组以反射的方法保存了观察者对象对应的类里所有的方法，随后遍历这个方法数组，如果其中的方法没用注解则跳过，有注解的往下执行，callType 其实就是方法的参数个数，event 则是注解的值，然后<font color=red><strong>把参数个数和方法包装成 MethodReference 对象;</strong></font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ClassesInfoCache.java</span></span><br><span class="line">        MethodReference(<span class="type">int</span> callType, Method method) &#123;</span><br><span class="line">            mCallType = callType;</span><br><span class="line">            mMethod = method;</span><br><span class="line">            mMethod.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>通过 setAccessible() 把方法设置为可访问，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ClassesInfoCache.java</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">verifyAndPutHandler</span><span class="params">(Map&lt;MethodReference, Lifecycle.Event&gt; handlers,</span></span><br><span class="line"><span class="params">            MethodReference newHandler, Lifecycle.Event newEvent, Class&lt;?&gt; klass)</span> &#123;</span><br><span class="line">        Lifecycle.<span class="type">Event</span> <span class="variable">event</span> <span class="operator">=</span> handlers.get(newHandler);</span><br><span class="line">        <span class="keyword">if</span> (event != <span class="literal">null</span> &amp;&amp; newEvent != event) &#123;</span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> newHandler.mMethod;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (event == <span class="literal">null</span>) &#123;</span><br><span class="line">            handlers.put(newHandler, newEvent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>通过 verifyAndPutHandler()，把包装好的 MethodReference 作为 key，方法注解对应的事件作为 value 加入到 handlerToEvent 这个 Map 中，再传给 CallbackInfo 对象，并最终返回此 info 给到 ReflectiveGenericLifecycleObserver 中的 mInfo 对象，<font color=red><strong>所以 mInfo 保存了所有带注解的方法，包括注解对应的事件；</strong></font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line">public class AppCompatActivity extends FragmentActivity</span><br><span class="line">public class FragmentActivity extends ComponentActivity</span><br><span class="line"></span><br><span class="line">public class ComponentActivity extends androidx.core.app.ComponentActivity implements</span><br><span class="line">        ContextAware,</span><br><span class="line">        LifecycleOwner,</span><br><span class="line">        ViewModelStoreOwner,</span><br><span class="line">        HasDefaultViewModelProviderFactory,</span><br><span class="line">        SavedStateRegistryOwner,</span><br><span class="line">        OnBackPressedDispatcherOwner,</span><br><span class="line">        ActivityResultRegistryOwner,</span><br><span class="line">        ActivityResultCaller &#123;</span><br></pre></td></tr></table></figure>

<p>通过层层继承，找到 ComponentActivity.onCreate()：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ComponentActivity.java</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="comment">// Restore the Saved State first so that it is available to</span></span><br><span class="line">        <span class="comment">// OnContextAvailableListener instances</span></span><br><span class="line">        mSavedStateRegistryController.performRestore(savedInstanceState);</span><br><span class="line">        mContextAwareHelper.dispatchOnContextAvailable(<span class="built_in">this</span>);</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        ReportFragment.injectIfNeededIn(<span class="built_in">this</span>);</span><br><span class="line">        <span class="keyword">if</span> (mContentLayoutId != <span class="number">0</span>) &#123;</span><br><span class="line">            setContentView(mContentLayoutId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>这里调用了<code>ReportFragment.injectIfNeededIn(this);</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">injectIfNeededIn</span><span class="params">(Activity activity)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">29</span>) &#123;</span><br><span class="line">        <span class="comment">// On API 29+, we can register for the correct Lifecycle callbacks directly</span></span><br><span class="line">        LifecycleCallbacks.registerIn(activity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Prior to API 29 and to maintain compatibility with older versions of</span></span><br><span class="line">    <span class="comment">// ProcessLifecycleOwner (which may not be updated when lifecycle-runtime is updated and</span></span><br><span class="line">    <span class="comment">// need to support activities that don&#x27;t extend from FragmentActivity from support lib),</span></span><br><span class="line">    <span class="comment">// use a framework fragment to get the correct timing of Lifecycle events</span></span><br><span class="line">    android.app.<span class="type">FragmentManager</span> <span class="variable">manager</span> <span class="operator">=</span> activity.getFragmentManager();</span><br><span class="line">    <span class="keyword">if</span> (manager.findFragmentByTag(REPORT_FRAGMENT_TAG) == <span class="literal">null</span>) &#123;</span><br><span class="line">        manager.beginTransaction().add(<span class="keyword">new</span> <span class="title class_">ReportFragment</span>(), REPORT_FRAGMENT_TAG).commit();</span><br><span class="line">        <span class="comment">// Hopefully, we are the first to make a transaction.</span></span><br><span class="line">        manager.executePendingTransactions();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><font color=red><strong>获取 FragmentManager，在 Activity 上添加了一个 ReportFragment，但是这个 Fragment 并没有 UI，那么以后 Activity 的生命周期发生变化时，这个 Fragment 对应的生命周期方法也会被调用;</strong></font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ReportFragment.java</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onActivityCreated</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onActivityCreated(savedInstanceState);</span><br><span class="line">        dispatchCreate(mProcessListener);</span><br><span class="line">        dispatch(Lifecycle.Event.ON_CREATE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onStart</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onStart();</span><br><span class="line">        dispatchStart(mProcessListener);</span><br><span class="line">        dispatch(Lifecycle.Event.ON_START);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onResume</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onResume();</span><br><span class="line">        dispatchResume(mProcessListener);</span><br><span class="line">        dispatch(Lifecycle.Event.ON_RESUME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onPause</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onPause();</span><br><span class="line">        dispatch(Lifecycle.Event.ON_PAUSE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onStop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onStop();</span><br><span class="line">        dispatch(Lifecycle.Event.ON_STOP);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onDestroy();</span><br><span class="line">        dispatch(Lifecycle.Event.ON_DESTROY);</span><br><span class="line">        <span class="comment">// just want to be sure that we won&#x27;t leak reference to an activity</span></span><br><span class="line">        mProcessListener = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>在 ReportFragment 生命周期方法中可以看到都调用了 dispatch() 方法，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ReportFragment.java</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dispatch</span><span class="params">(<span class="meta">@NonNull</span> Lifecycle.Event event)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &lt; <span class="number">29</span>) &#123;</span><br><span class="line">            <span class="comment">// Only dispatch events from ReportFragment on API levels prior</span></span><br><span class="line">            <span class="comment">// to API 29. On API 29+, this is handled by the ActivityLifecycleCallbacks</span></span><br><span class="line">            <span class="comment">// added in ReportFragment.injectIfNeededIn</span></span><br><span class="line">            dispatch(getActivity(), event);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;deprecation&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dispatch</span><span class="params">(<span class="meta">@NonNull</span> Activity activity, <span class="meta">@NonNull</span> Lifecycle.Event event)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (activity <span class="keyword">instanceof</span> LifecycleRegistryOwner) &#123;</span><br><span class="line">            ((LifecycleRegistryOwner) activity).getLifecycle().handleLifecycleEvent(event);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (activity <span class="keyword">instanceof</span> LifecycleOwner) &#123;</span><br><span class="line">            <span class="type">Lifecycle</span> <span class="variable">lifecycle</span> <span class="operator">=</span> ((LifecycleOwner) activity).getLifecycle();</span><br><span class="line">            <span class="keyword">if</span> (lifecycle <span class="keyword">instanceof</span> LifecycleRegistry) &#123;</span><br><span class="line">                ((LifecycleRegistry) lifecycle).handleLifecycleEvent(event);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>即一旦 Activity 生命周期发生变化，就通过 dispatch() 分发事件，然后再调用到 handleLifecycleEvent() 方法，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// LifecycleRegistry.java</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleLifecycleEvent</span><span class="params">(<span class="meta">@NonNull</span> Lifecycle.Event event)</span> &#123;</span><br><span class="line">        enforceMainThreadIfNeeded(<span class="string">&quot;handleLifecycleEvent&quot;</span>);</span><br><span class="line">        moveToState(event.getTargetState());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>调用 moveToState()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// LifecycleRegistry.java</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">moveToState</span><span class="params">(State next)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mState == next) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mState = next;</span><br><span class="line">        <span class="keyword">if</span> (mHandlingEvent || mAddingObserverCounter != <span class="number">0</span>) &#123;</span><br><span class="line">            mNewEventOccurred = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">// we will figure out what to do on upper level.</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mHandlingEvent = <span class="literal">true</span>;</span><br><span class="line">        sync();</span><br><span class="line">        mHandlingEvent = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// LifecycleRegistry.java</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sync</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">LifecycleOwner</span> <span class="variable">lifecycleOwner</span> <span class="operator">=</span> mLifecycleOwner.get();</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">while</span> (!isSynced()) &#123;</span><br><span class="line">            ...</span><br><span class="line">            <span class="keyword">if</span> (mState.compareTo(mObserverMap.eldest().getValue().mState) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                backwardPass(lifecycleOwner);</span><br><span class="line">            &#125;</span><br><span class="line">            Map.Entry&lt;LifecycleObserver, ObserverWithState&gt; newest = mObserverMap.newest();</span><br><span class="line">            <span class="keyword">if</span> (!mNewEventOccurred &amp;&amp; newest != <span class="literal">null</span></span><br><span class="line">                    &amp;&amp; mState.compareTo(newest.getValue().mState) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                forwardPass(lifecycleOwner);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        mNewEventOccurred = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// LifecycleRegistry.java</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">forwardPass</span><span class="params">(LifecycleOwner lifecycleOwner)</span> &#123;</span><br><span class="line">        Iterator&lt;Map.Entry&lt;LifecycleObserver, ObserverWithState&gt;&gt; ascendingIterator =</span><br><span class="line">                mObserverMap.iteratorWithAdditions();</span><br><span class="line">        <span class="keyword">while</span> (ascendingIterator.hasNext() &amp;&amp; !mNewEventOccurred) &#123;</span><br><span class="line">            Map.Entry&lt;LifecycleObserver, ObserverWithState&gt; entry = ascendingIterator.next();</span><br><span class="line">            <span class="type">ObserverWithState</span> <span class="variable">observer</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">            <span class="keyword">while</span> ((observer.mState.compareTo(mState) &lt; <span class="number">0</span> &amp;&amp; !mNewEventOccurred</span><br><span class="line">                    &amp;&amp; mObserverMap.contains(entry.getKey()))) &#123;</span><br><span class="line">                pushParentState(observer.mState);</span><br><span class="line">                <span class="keyword">final</span> <span class="type">Event</span> <span class="variable">event</span> <span class="operator">=</span> Event.upFrom(observer.mState);</span><br><span class="line">                <span class="keyword">if</span> (event == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;no event up from &quot;</span> + observer.mState);</span><br><span class="line">                &#125;</span><br><span class="line">                observer.dispatchEvent(lifecycleOwner, event);</span><br><span class="line">                popParentState();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>从 mObserverMap 中拿到 ObserverWithState 对象，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// LifecycleRegistry.java</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ObserverWithState</span> &#123;</span><br><span class="line">        State mState;</span><br><span class="line">        LifecycleEventObserver mLifecycleObserver;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">dispatchEvent</span><span class="params">(LifecycleOwner owner, Event event)</span> &#123;</span><br><span class="line">            <span class="type">State</span> <span class="variable">newState</span> <span class="operator">=</span> event.getTargetState();</span><br><span class="line">            mState = min(mState, newState);</span><br><span class="line">            mLifecycleObserver.onStateChanged(owner, event);</span><br><span class="line">            mState = newState;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>这里的 mLifecycleObserver 就是前面说到的 ReflectiveGenericLifecycleObserver 对象，所以调用到 ReflectiveGenericLifecycleObserver.onStateChanged()；</p>
<p><font color=red><strong>注意：如前面所述，如果我们的观察者实现了 LifecycleEventObserver 对象，那么这里就直接调用我们实现了 LifecycleEventObserver 的观察者中的 onStateChanged() 方法即可，更简单了，连旧版本的反射调用都省了；</strong></font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ReflectiveGenericLifecycleObserver.java</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onStateChanged</span><span class="params">(<span class="meta">@NonNull</span> LifecycleOwner source, <span class="meta">@NonNull</span> Event event)</span> &#123;</span><br><span class="line">        mInfo.invokeCallbacks(source, event, mWrapped);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>这个 mInfo 前面也提到过，保存了所有带注解的方法，包括注解对应的事件，把被观察者 source，事件，观察者都传入参数，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ClassesInfoCache.java</span></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">invokeCallbacks</span><span class="params">(LifecycleOwner source, Lifecycle.Event event, Object target)</span> &#123;</span><br><span class="line">            invokeMethodsForEvent(mEventToHandlers.get(event), source, event, target);</span><br><span class="line">            invokeMethodsForEvent(mEventToHandlers.get(Lifecycle.Event.ON_ANY), source, event,</span><br><span class="line">                    target);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">invokeMethodsForEvent</span><span class="params">(List&lt;MethodReference&gt; handlers,</span></span><br><span class="line"><span class="params">                LifecycleOwner source, Lifecycle.Event event, Object mWrapped)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (handlers != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> handlers.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                    handlers.get(i).invokeCallback(source, event, mWrapped);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>调用 MethodReference.invokeCallback</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ClassesInfoCache.java</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">MethodReference</span> &#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">invokeCallback</span><span class="params">(LifecycleOwner source, Lifecycle.Event event, Object target)</span> &#123;</span><br><span class="line">            <span class="comment">//noinspection TryWithIdenticalCatches</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">switch</span> (mCallType) &#123;</span><br><span class="line">                    <span class="keyword">case</span> CALL_TYPE_NO_ARG:</span><br><span class="line">                        mMethod.invoke(target);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> CALL_TYPE_PROVIDER:</span><br><span class="line">                        mMethod.invoke(target, source);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> CALL_TYPE_PROVIDER_WITH_EVENT:</span><br><span class="line">                        mMethod.invoke(target, source, event);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Failed to call observer method&quot;</span>, e.getCause());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>前面知道我们当前的参数个数是 1，即 CALL_TYPE_PROVIDER，<code>mMethod.invoke(target, source)</code> 中的 target 就是观察者，mMethod 就是前面 createInfo() 创建 MethodReference() 时传入的方法，source 则是方法的参数，这样就和观察者类中实现的带注解的方法对应起来了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@OnLifecycleEvent(Lifecycle.Event.ON_CREATE)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">onCreateX</span><span class="params">(LifecycleOwner owner)</span>&#123;</span><br><span class="line">    Log.d(<span class="string">&quot;tag&quot;</span>, <span class="string">&quot;ON_CREATE-1&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li><p>1.mObserverMap 保存所有的观察者</p>
</li>
<li><p><del>旧版本：获取观察者中所有带注解的方法，并把信息存入 ReflectiveGenericLifecycleObserver.mInfo 中；</del></p>
</li>
<li><p>Activity 上添加了一个没有 UI 的 ReportFragment，当Activity 的生命周期发生变化时就会调用 ReportFragment 对应的生命周期方法或者 Activity 生命周期回调，通过 dispatch() 分发事件，</p>
</li>
<li><p><del>旧版本：从 mObserverMap 中拿到观察者，通过 mInfo 反射调用观察者中对应事件的方法；</del></p>
</li>
<li><p>新版本：直接调用实现了 LifecycleEventObserver 的观察者中重写的 onStateChanged() 方法；</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Jetpack, Lifecycle</tag>
      </tags>
  </entry>
  <entry>
    <title>Android - Jetpack套件之 Lifecycle 使用</title>
    <url>/2023/03/20/Android/AndroidDevelop_021_Jetpack_Lifecycle_Usage/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>Android Jetpack 套件之 Lifecycle 使用；</p>
</blockquote>
<span id="more"></span>

<h2 id="Jetpack-和-Lifecycle"><a href="#Jetpack-和-Lifecycle" class="headerlink" title="Jetpack 和 Lifecycle"></a>Jetpack 和 Lifecycle</h2><p>Jetpack 是一个由多个库组成的套件，可帮助开发者遵循最佳做法，减少样板代码并编写可在各种 Android 版本和设备中一致运行的代码，让开发者集中精力编写重要的代码。</p>
<p>Jetpack 组件包括 4 个方面：架构（Architecture）、基础（Architecture）、行为（Behavior）、界面（UI）：</p>
<p><img src="https://raw.githubusercontent.com/rangerzhou/ImageHosting/master/blog_resource/2023/Jetpack.png" alt="Jetpack 架构" title="Jetpack 架构"></p>
<p>而 Lifecycle 是用于帮助开发者管理Activity和Fragment 的生命周期，它是LiveData和ViewModel的基础，属于 Android 架构组件；</p>
<h2 id="Lifecycle-使用方式"><a href="#Lifecycle-使用方式" class="headerlink" title="Lifecycle 使用方式"></a>Lifecycle 使用方式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">getLifecycle().addObserver(Observer);</span><br></pre></td></tr></table></figure>

<h3 id="被观察者-LifecycleOwner"><a href="#被观察者-LifecycleOwner" class="headerlink" title="被观察者(LifecycleOwner)"></a>被观察者(LifecycleOwner)</h3><p>被观察者需要实现 LifecycleOwner 接口，比如对于 Activity，Activity —&gt; AppCompatActivity —&gt; FragmentActivity —&gt; ComponentActivity —&gt; LifecycleOwner，最终实现 LifecycleOwner 接口;</p>
<h3 id="观察者-Observer"><a href="#观察者-Observer" class="headerlink" title="观察者(Observer)"></a>观察者(Observer)</h3><p>其中 Observer 有 3 种：LifecycleEventObserver、DefaultLifecycleObserver、LifecycleObserver；</p>
<h3 id="LifecycleEventObserver-接口"><a href="#LifecycleEventObserver-接口" class="headerlink" title="LifecycleEventObserver 接口"></a>LifecycleEventObserver 接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">getLifecycle().addObserver(<span class="keyword">new</span> <span class="title class_">LifecycleEventObserver</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onStateChanged</span><span class="params">(<span class="meta">@NonNull</span> LifecycleOwner source, <span class="meta">@NonNull</span> Lifecycle.Event event)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (event)&#123;</span><br><span class="line">            <span class="keyword">case</span> ON_CREATE:</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;ON_CREATE&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ON_RESUME:</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;ON_RESUME&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">            <span class="keyword">case</span> ON_ANY:</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;ON_ANY&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h3 id="DefaultLifecycleObserver-接口"><a href="#DefaultLifecycleObserver-接口" class="headerlink" title="DefaultLifecycleObserver 接口"></a>DefaultLifecycleObserver 接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">getLifecycle().addObserver(<span class="keyword">new</span> <span class="title class_">DefaultLifecycleObserver</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(<span class="meta">@NonNull</span> LifecycleOwner owner)</span> &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">&quot;ON_CREATE&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onResume</span><span class="params">(<span class="meta">@NonNull</span> LifecycleOwner owner)</span> &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">&quot;ON_RESUME&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h3 id="LifecycleObserver-接口"><a href="#LifecycleObserver-接口" class="headerlink" title="LifecycleObserver 接口"></a>LifecycleObserver 接口</h3><p>通过 OnLifecycleEvent 注解的方式实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">getLifecycle().addObserver(<span class="keyword">new</span> <span class="title class_">LifecycleObserver</span>() &#123;</span><br><span class="line">    <span class="meta">@OnLifecycleEvent(Lifecycle.Event.ON_CREATE)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(LifecycleOwner owner)</span> &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">&quot;ON_CREATE&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnLifecycleEvent(Lifecycle.Event.ON_RESUME)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">onResume</span><span class="params">(LifecycleOwner owner)</span> &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">&quot;ON_RESUME&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnLifecycleEvent(Lifecycle.Event.ON_ANY)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">onAny</span><span class="params">(LifecycleOwner owner)</span> &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">&quot;ON_ANY&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><font color=red><strong><del>使用注解的方式已经废弃</del></strong></font></p>
<h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p>那么这三种方式的优先级是什么呢，我们来看看 LifecycleEventObserver 接口和 DefaultLifecycleObserver 接口的注释：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class that can receive any lifecycle change and dispatch it to the receiver.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * If a class implements both this interface and</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> androidx.lifecycle.DefaultLifecycleObserver&#125;, then</span></span><br><span class="line"><span class="comment"> * methods of &#123;<span class="doctag">@code</span> DefaultLifecycleObserver&#125; will be called first, and then followed by the call</span></span><br><span class="line"><span class="comment"> * of &#123;<span class="doctag">@link</span> LifecycleEventObserver#onStateChanged(LifecycleOwner, Lifecycle.Event)&#125;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * If a class implements this interface and in the same time uses &#123;<span class="doctag">@link</span> OnLifecycleEvent&#125;, then</span></span><br><span class="line"><span class="comment"> * annotations will be ignored.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">LifecycleEventObserver</span> <span class="keyword">extends</span> <span class="title class_">LifecycleObserver</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Callback interface for listening to &#123;<span class="doctag">@link</span> LifecycleOwner&#125; state changes.</span></span><br><span class="line"><span class="comment"> * If a class implements both this interface and &#123;<span class="doctag">@link</span> LifecycleEventObserver&#125;, then</span></span><br><span class="line"><span class="comment"> * methods of &#123;<span class="doctag">@code</span> DefaultLifecycleObserver&#125; will be called first, and then followed by the call</span></span><br><span class="line"><span class="comment"> * of &#123;<span class="doctag">@link</span> LifecycleEventObserver#onStateChanged(LifecycleOwner, Lifecycle.Event)&#125;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * If a class implements this interface and in the same time uses &#123;<span class="doctag">@link</span> OnLifecycleEvent&#125;, then</span></span><br><span class="line"><span class="comment"> * annotations will be ignored.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unused&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DefaultLifecycleObserver</span> <span class="keyword">extends</span> <span class="title class_">FullLifecycleObserver</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>可以看出，如果一个观察者同时实现了 LifecycleEventObserver 和 DefaultLifecycleObserver，那么 DefaultLifecycleObserver 要先于 LifecycleEventObserver 执行，如果同时也添加了 OnLifecycleEvent 注解，那么注解部分会被忽略掉；</p>
<p><a href="https://www.jianshu.com/p/4ad7aa0fc356">Reference</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Jetpack, Lifecycle</tag>
      </tags>
  </entry>
  <entry>
    <title>Android - 渲染机制分析</title>
    <url>/2022/05/20/Android/AndroidDevelop_020_Rendering_Mechanism/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>Android 渲染机制分析，代码基于 Android 12</p>
</blockquote>
<span id="more"></span>



<p>requestLayout - scheduleTraversals - mChoreographer.postCallback - scheduleFrameLocked - scheduleVsyncLocked - DisplayEventReceiver.scheduleVsync - nativeScheduleVsync</p>
<p>nativeScheduleVsync 在底层通过 requestNextVsync 去请求下一个 Vsync，接收 Vsync 信号后回调到 DisplayEventReceiver.onVsync 方法中，在其中发送了一个 Handler 消息到消息队列，接到消息后执行 DisplayEventReceiver.run()，在 run() 中调用 doFrame() - doCallBacks() - CallbackRecord.run() - TraversalRunnable.run() - doTraversal() - performTraversals()，至此开始绘制流程 performMessure - performLayout - performDraw；</p>
<p>详细流程后续更新；</p>
<h3 id="Surface与Canvas的区别在哪里"><a href="#Surface与Canvas的区别在哪里" class="headerlink" title="Surface与Canvas的区别在哪里"></a>Surface与Canvas的区别在哪里</h3><p>Surface和Canvas都有画布的意思</p>
<p>但实际上，Surface才是真正和屏幕管理器打交道的画布</p>
<p>Canvas是对画布操作细节的封装，它更多的是和View、用户打交道</p>
<p>当Canvas完成一轮绘制后，会将绘制结果提交到Surface的缓冲区中，然后由Surface交给屏幕管理器绘制</p>
<h3 id="Surface与Canvas是如何关联的"><a href="#Surface与Canvas是如何关联的" class="headerlink" title="Surface与Canvas是如何关联的"></a>Surface与Canvas是如何关联的</h3><p>每个Window对应一个Surface，每个Surface对应一块屏幕缓冲区</p>
<p>SurfaceFlinger按照z轴顺序，将所有Surface的内容逐个绘制出来，就形成了最终的屏幕内容</p>
<p>ViewRootImpl每次执行draw方法时，都会通过对应的Surface创建一个新的Canvas，并指定一个绘制区域DirtyRect</p>
<p>DecorView在指定的Canvas和DirtyRect上，完成当前轮的绘制工作</p>
<p>ViewRootImpl再通过Surface，将Canvas的绘制结果提交到屏幕管理器，同时释放Canvas</p>
<p>当收到新一轮的绘制或刷新指令时，ViewRootImpl会再创建一个新的Canvas，重复以上工作</p>
<p>由此我们可以看出，Surface只有一个，而Canvas有多个，Canvas负责具体细节，而Surface直接和屏幕管理器打交道<br><a href="https://blog.csdn.net/u013718730/article/details/120753180">参考</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>Android - Application 创建流程、SystemUI 启动以及添加系统窗口（Android 12）</title>
    <url>/2022/02/27/Android/AndroidDevelop_018_CreateApplication_Start_SystemUI_AddSystemWindow/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>Android Application 创建、SystemUI 启动以及系统窗口的添加，源码基于 android-12.1.0_r4；</p>
</blockquote>
<span id="more"></span>

<p>SystemUI 启动</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SystemServer.java</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">startOtherServices</span><span class="params">(<span class="meta">@NonNull</span> TimingsTraceAndSlog t)</span> &#123;</span><br><span class="line">        t.traceBegin(<span class="string">&quot;StartSystemUI&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            startSystemUi(context, windowManagerF);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">startSystemUi</span><span class="params">(Context context, WindowManagerService windowManager)</span> &#123;</span><br><span class="line">        <span class="type">PackageManagerInternal</span> <span class="variable">pm</span> <span class="operator">=</span> LocalServices.getService(PackageManagerInternal.class);</span><br><span class="line">        <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>();</span><br><span class="line">        intent.setComponent(pm.getSystemUiServiceComponent()); <span class="comment">// 设置 SystemUIService Component</span></span><br><span class="line">        intent.addFlags(Intent.FLAG_DEBUG_TRIAGED_MISSING);</span><br><span class="line">        <span class="comment">//Slog.d(TAG, &quot;Starting service: &quot; + intent);</span></span><br><span class="line">        context.startServiceAsUser(intent, UserHandle.SYSTEM); <span class="comment">// 启动服务</span></span><br><span class="line">        windowManager.onSystemUiStarted();</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">public</span> ComponentName <span class="title function_">getSystemUiServiceComponent</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="comment">// 根据 config_systemUIServiceComponent 获取服务组件</span></span><br><span class="line">            <span class="keyword">return</span> ComponentName.unflattenFromString(mContext.getResources().getString(</span><br><span class="line">                    com.android.internal.R.string.config_systemUIServiceComponent));</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>根据 config_systemUIServiceComponent 获取 SystemUIService 服务，并通过 <code>startServiceAsUser()</code> 启动服务；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">// frameworks/base/core/res/res/values/config.xml</span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;config_systemUIServiceComponent&quot;</span> <span class="attr">translatable</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            &gt;</span>com.android.systemui/com.android.systemui.SystemUIService<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>进程启动后会执行到 <code>ActivityThread.main()</code> 方法中，然后调用 <code>thread.attach()</code>，attach 通过 binder 调用 <code>AMS.attachApplication() -&gt; attachApplicationLocked() -&gt; thread.bindApplication()/ActivityTaskManagerInternal.attachApplication()</code>，然后发送 Handler 消息 BIND_APPLICATION&#x2F;EXECUTE_TRANSACTION，主线程 looper 收到 BIND_APPLICATION 消息后调用 <code>handleBinderApplication()</code>，接下来从这里分析；</p>
<h2 id="handleBindApplication"><a href="#handleBindApplication" class="headerlink" title="handleBindApplication()"></a>handleBindApplication()</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ActivityThread.java</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">AppBindData</span> &#123;</span><br><span class="line">        LoadedApk info;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleBindApplication</span><span class="params">(AppBindData data)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建 LoadedApk</span></span><br><span class="line">        data.info = getPackageInfoNoCheck(data.appInfo, data.compatInfo);</span><br><span class="line">        Application app;</span><br><span class="line">            app = data.info.makeApplication(data.restrictedBackupMode, <span class="literal">null</span>); <span class="comment">// 创建 Application</span></span><br><span class="line">            <span class="keyword">if</span> (!data.restrictedBackupMode) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!ArrayUtils.isEmpty(data.providers)) &#123;</span><br><span class="line">                    installContentProviders(app, data.providers); <span class="comment">// 创建 COntentProvider</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                mInstrumentation.callApplicationOnCreate(app); <span class="comment">// 调用 Application.onCreate() 方法</span></span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>

<p>data 是 AppBindData 对象，所以 data.info 则是 LoadedApk 对象，主要工作：</p>
<ul>
<li>getPackageInfoNoCheck()：创建 LoadedApk；</li>
<li>makeApplication()：创建 Application；</li>
<li>调用 Application.onCreate()；</li>
</ul>
<h3 id="创建-LoadedApk"><a href="#创建-LoadedApk" class="headerlink" title="创建 LoadedApk"></a>创建 LoadedApk</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ActivityThread.java</span></span><br><span class="line">    <span class="keyword">final</span> ArrayMap&lt;String, WeakReference&lt;LoadedApk&gt;&gt; mPackages = <span class="keyword">new</span> <span class="title class_">ArrayMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> LoadedApk <span class="title function_">getPackageInfoNoCheck</span><span class="params">(ApplicationInfo ai,</span></span><br><span class="line"><span class="params">            CompatibilityInfo compatInfo)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getPackageInfo(ai, compatInfo, <span class="literal">null</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> LoadedApk <span class="title function_">getPackageInfo</span><span class="params">(ApplicationInfo aInfo, CompatibilityInfo compatInfo,</span></span><br><span class="line"><span class="params">            ClassLoader baseLoader, <span class="type">boolean</span> securityViolation, <span class="type">boolean</span> includeCode,</span></span><br><span class="line"><span class="params">            <span class="type">boolean</span> registerPackage)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">differentUser</span> <span class="operator">=</span> (UserHandle.myUserId() != UserHandle.getUserId(aInfo.uid));</span><br><span class="line">        <span class="keyword">synchronized</span> (mResourcesManager) &#123;</span><br><span class="line">            WeakReference&lt;LoadedApk&gt; ref;</span><br><span class="line">            ...</span><br><span class="line">            <span class="type">LoadedApk</span> <span class="variable">packageInfo</span> <span class="operator">=</span> ref != <span class="literal">null</span> ? ref.get() : <span class="literal">null</span>;</span><br><span class="line">            ...</span><br><span class="line">            packageInfo = <span class="comment">// 创建 LoadedApk 对象</span></span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">LoadedApk</span>(<span class="built_in">this</span>, aInfo, compatInfo, baseLoader,</span><br><span class="line">                            securityViolation, includeCode</span><br><span class="line">                            &amp;&amp; (aInfo.flags &amp; ApplicationInfo.FLAG_HAS_CODE) != <span class="number">0</span>, registerPackage);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (mSystemThread &amp;&amp; <span class="string">&quot;android&quot;</span>.equals(aInfo.packageName)) &#123;</span><br><span class="line">                packageInfo.installSystemApplicationInfo(aInfo,</span><br><span class="line">                        getSystemContext().mPackageInfo.getClassLoader());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (differentUser) &#123;</span><br><span class="line">                <span class="comment">// Caching not supported across users</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (includeCode) &#123; <span class="comment">// 传入的参数为 true</span></span><br><span class="line">                mPackages.put(aInfo.packageName,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">WeakReference</span>&lt;LoadedApk&gt;(packageInfo)); <span class="comment">// 把 LoadedApk 的弱引用添加到 mPackages 中</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;...&#125;</span><br><span class="line">            <span class="keyword">return</span> packageInfo;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>创建 LoadedApk 对象，并把它的弱引用添加到 mPackages 这个 ArrayMap 中，最后返回 pacakgeInfo；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// LoadedApk.java</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LoadedApk</span><span class="params">(ActivityThread activityThread, ApplicationInfo aInfo,</span></span><br><span class="line"><span class="params">            CompatibilityInfo compatInfo, ClassLoader baseLoader,</span></span><br><span class="line"><span class="params">            <span class="type">boolean</span> securityViolation, <span class="type">boolean</span> includeCode, <span class="type">boolean</span> registerPackage)</span> &#123;</span><br><span class="line"></span><br><span class="line">        mActivityThread = activityThread;</span><br><span class="line">        setApplicationInfo(aInfo);</span><br><span class="line">        mPackageName = aInfo.packageName;</span><br><span class="line">        mBaseClassLoader = baseLoader;</span><br><span class="line">        mSecurityViolation = securityViolation;</span><br><span class="line">        mIncludeCode = includeCode;</span><br><span class="line">        mRegisterPackage = registerPackage;</span><br><span class="line">        mDisplayAdjustments.setCompatibilityInfo(compatInfo);</span><br><span class="line">        mAppComponentFactory = createAppFactory(mApplicationInfo, mBaseClassLoader); <span class="comment">// 创建 AppComponentFactory 对象</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>LoadedApk 对象构造函数中创建了 AppComponentFactory 对象；</p>
<h3 id="创建-SystemUIApplication-makeApplication"><a href="#创建-SystemUIApplication-makeApplication" class="headerlink" title="创建 SystemUIApplication - makeApplication()"></a>创建 SystemUIApplication - makeApplication()</h3><p>接下来看一下 makeApplication()；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// LoadedApk.java</span></span><br><span class="line">    <span class="keyword">public</span> Application <span class="title function_">makeApplication</span><span class="params">(<span class="type">boolean</span> forceDefaultAppClass,</span></span><br><span class="line"><span class="params">            Instrumentation instrumentation)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mApplication != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> mApplication;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Application</span> <span class="variable">app</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">appClass</span> <span class="operator">=</span> mApplicationInfo.className;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> java.lang.<span class="type">ClassLoader</span> <span class="variable">cl</span> <span class="operator">=</span> getClassLoader();</span><br><span class="line">            ...</span><br><span class="line">            <span class="comment">// 创建 Application 的 Context</span></span><br><span class="line">            <span class="type">ContextImpl</span> <span class="variable">appContext</span> <span class="operator">=</span> ContextImpl.createAppContext(mActivityThread, <span class="built_in">this</span>);</span><br><span class="line">            ...</span><br><span class="line">            <span class="comment">// 通过 Instrumentation 创建 Application</span></span><br><span class="line">            app = mActivityThread.mInstrumentation.newApplication(cl, appClass, appContext);</span><br><span class="line">            appContext.setOuterContext(app);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;...&#125;</span><br><span class="line">        mActivityThread.mAllApplications.add(app);</span><br><span class="line">        mApplication = app;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">return</span> app;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>又调用了 Instrumentation.newApplication()；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Instrumentation.java</span></span><br><span class="line">    <span class="keyword">public</span> Application <span class="title function_">newApplication</span><span class="params">(ClassLoader cl, String className, Context context)</span></span><br><span class="line">            <span class="keyword">throws</span> InstantiationException, IllegalAccessException, </span><br><span class="line">            ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">// getFactory 返回 AppComponentFactory 对象（在 AndroidManifest.xml 中配置，如未配置则返回 AppComponentFactory.DEFAULT）</span></span><br><span class="line">        <span class="comment">// 随后调用 androidx.core.app.AppComponentFactory.instantiateApplication 创建 Application 对象</span></span><br><span class="line">        <span class="type">Application</span> <span class="variable">app</span> <span class="operator">=</span> getFactory(context.getPackageName())</span><br><span class="line">                .instantiateApplication(cl, className);</span><br><span class="line">        app.attach(context);</span><br><span class="line">        <span class="keyword">return</span> app;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>先执行 <code>getFactory()</code> 获取 AppComponentFactory 对象；</li>
<li>再执行 <code>instantiateApplication()</code> 获取 SystemUIApplication 对象；</li>
</ul>
<h4 id="获取-AppComponentFactory-对象"><a href="#获取-AppComponentFactory-对象" class="headerlink" title="获取 AppComponentFactory 对象"></a>获取 AppComponentFactory 对象</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Instrumentation.java</span></span><br><span class="line">    <span class="keyword">private</span> AppComponentFactory <span class="title function_">getFactory</span><span class="params">(String pkg)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="type">LoadedApk</span> <span class="variable">apk</span> <span class="operator">=</span> mThread.peekPackageInfo(pkg, <span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// This is in the case of starting up &quot;android&quot;.</span></span><br><span class="line">        <span class="keyword">if</span> (apk == <span class="literal">null</span>) apk = mThread.getSystemContext().mPackageInfo;</span><br><span class="line">        <span class="keyword">return</span> apk.getAppFactory();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>getFactory() 通过 LoadedApk.getAppFactory() 来获取 AppComponentFactory 对象；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// LoadedApk.java</span></span><br><span class="line">    <span class="keyword">private</span> AppComponentFactory mAppComponentFactory;</span><br><span class="line">    <span class="keyword">public</span> AppComponentFactory <span class="title function_">getAppFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mAppComponentFactory;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>getAppFactory() 返回 AppComponentFactory 对象，前面讲到在 LoadedApk 的构造函数中通过 <code>LoadedApk.createAppFactory()</code> 创建了 AppComponentFactory 这个对象；</p>
<h5 id="创建-AppComponentFactory-对象"><a href="#创建-AppComponentFactory-对象" class="headerlink" title="创建 AppComponentFactory 对象"></a>创建 AppComponentFactory 对象</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// LoadedApk.java</span></span><br><span class="line">    <span class="keyword">private</span> AppComponentFactory <span class="title function_">createAppFactory</span><span class="params">(ApplicationInfo appInfo, ClassLoader cl)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mIncludeCode &amp;&amp; appInfo.appComponentFactory != <span class="literal">null</span> &amp;&amp; cl != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> (AppComponentFactory)</span><br><span class="line">                        cl.loadClass(appInfo.appComponentFactory).newInstance();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InstantiationException | IllegalAccessException | ClassNotFoundException e) &#123;</span><br><span class="line">                Slog.e(TAG, <span class="string">&quot;Unable to instantiate appComponentFactory&quot;</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> AppComponentFactory.DEFAULT;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>如果 appInfo.appComponentFactory 不等于 null，通过 ClassLoader 加载对应的类创建实例，否则返回 AppComponentFactory.DEFAULT，那么 AppComponentFactory 是什么呢？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Interface used to control the instantiation of manifest elements.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #instantiateApplication</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #instantiateActivity</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #instantiateClassLoader</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #instantiateService</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #instantiateReceiver</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #instantiateProvider</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppComponentFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@NonNull</span> ClassLoader <span class="title function_">instantiateClassLoader</span><span class="params">(...)</span> <span class="comment">// 实例化类加载器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@NonNull</span> Application <span class="title function_">instantiateApplication</span><span class="params">(<span class="meta">@NonNull</span> ClassLoader cl,</span></span><br><span class="line"><span class="params">            <span class="meta">@NonNull</span> String className)</span>... &#123; <span class="comment">// 实例化 Application</span></span><br><span class="line">        <span class="keyword">return</span> (Application) cl.loadClass(className).newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@NonNull</span> Activity <span class="title function_">instantiateActivity</span><span class="params">(...)</span> <span class="comment">// 实例化 Activity</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@NonNull</span> BroadcastReceiver <span class="title function_">instantiateReceiver</span><span class="params">(...)</span> <span class="comment">// 实例化 Receiver</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@NonNull</span> ContentProvider <span class="title function_">instantiateProvider</span><span class="params">(...)</span> <span class="comment">// 实例化 Provider</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">AppComponentFactory</span> <span class="variable">DEFAULT</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AppComponentFactory</span>();</span><br></pre></td></tr></table></figure>

<p>从注释可以看出，这个类是用于控制清单元素（AndroidManifest.xml）实例化的接口，简单说就是允许应用内部创建 AppComponentFactory 实现类，重写 AppComponentFactory 类中的方法，<font color=red><strong>用来执行诸如依赖注入或者对这些类进行类加载器修改</strong></font>，插件化就是用到了这里；</p>
<h5 id="SystemUIAppComponentFactory"><a href="#SystemUIAppComponentFactory" class="headerlink" title="SystemUIAppComponentFactory"></a>SystemUIAppComponentFactory</h5><p>看一下 SystemUI 的 AndroidManifest.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">&quot;.SystemUIApplication&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">...</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:replace</span>=<span class="string">&quot;android:appComponentFactory&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:appComponentFactory</span>=<span class="string">&quot;.SystemUIAppComponentFactory&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样配置以后，PKMS 会将 android:appComponentFactory 解析到 appInfo.appComponentFactory，系统在创建 Application 和四大组件的时候就会调用到这里配置的类，如果没有配置，就会直接使用 AppComponentFactory.DEFAULT 变量，<strong>所以前面 <code>createAppFactory()</code> 返回的就是这里配置的类</strong>；</p>
<p>先看一下这个 SystemUIAppComponentFactory；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SystemUIAppComponentFactory.java</span></span><br><span class="line"><span class="keyword">import</span> androidx.core.app.AppComponentFactory;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemUIAppComponentFactory</span> <span class="keyword">extends</span> <span class="title class_">AppComponentFactory</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需要注意的是这里 SystemUIAppComponentFactory 继承的是 <a href="https://cs.android.com/androidx/platform/frameworks/support/+/androidx-main:core/core/src/main/java/androidx/core/app/AppComponentFactory.java">androidx.core.app.AppComponentFactory</a>，不是 <a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/app/AppComponentFactory.java">android.app.AppComponentFactory</a>，前者继承了后者；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// core/core/src/main/java/androidx/core/app/AppComponentFactory.java</span></span><br><span class="line"><span class="keyword">package</span> androidx.core.app;</span><br><span class="line"><span class="meta">@RequiresApi(28)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppComponentFactory</span> <span class="keyword">extends</span> <span class="title class_">android</span>.app.AppComponentFactory &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Application <span class="title function_">instantiateApplication</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@NonNull</span> ClassLoader cl, <span class="meta">@NonNull</span> String className)</span></span><br><span class="line">            <span class="keyword">throws</span> InstantiationException, IllegalAccessException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">// 调用子类的 instantiateApplicationCompat() 函数</span></span><br><span class="line">        <span class="keyword">return</span> checkCompatWrapper(instantiateApplicationCompat(cl, className));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@NonNull</span> Application <span class="title function_">instantiateApplicationCompat</span><span class="params">(<span class="meta">@NonNull</span> ClassLoader cl, <span class="meta">@NonNull</span> String className)</span>...&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Class.forName(className, <span class="literal">false</span>, cl).asSubclass(Application.class)</span><br><span class="line">                    .getDeclaredConstructor().newInstance();</span><br><span class="line">        &#125; ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>在 instantiateApplication() 内部调用了 <code>instantiateApplicationCompat()</code>，这里其实是调用 <code>SystemUIAppComponentFactory.instantiateApplicationCompat()</code>，因为 SystemUIAppComponentFactory 重写了 <code>AppComponentFactory.instantiateApplicationCompat()</code>，最后创建并返回了 Application 实例;</p>
<p><font color=red><strong>所以最终 <code>getFactory()</code> 根据包名得到了在 AndroidManifest.xml 中定义的继承自 AppComponentFactory 的 SystemUIAPpComponentFactory 对象；</strong></font></p>
<h5 id="获取-SystemUIApplication-对象"><a href="#获取-SystemUIApplication-对象" class="headerlink" title="获取 SystemUIApplication 对象"></a>获取 SystemUIApplication 对象</h5><p>接下来回到 Instrumentation.newApplication() 中；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Instrumentation.java</span></span><br><span class="line">    <span class="keyword">public</span> Application <span class="title function_">newApplication</span><span class="params">(ClassLoader cl, String className, Context context)</span>... &#123;</span><br><span class="line">        <span class="type">Application</span> <span class="variable">app</span> <span class="operator">=</span> getFactory(context.getPackageName())</span><br><span class="line">                .instantiateApplication(cl, className);</span><br><span class="line">        app.attach(context);</span><br><span class="line">        <span class="keyword">return</span> app;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>获取到 SystemUIAppComponentFactory 对象后，调用 <code>instantiateApplication()</code> 方法，这里调用到父类 AppComponentFactory 的 <code>instantiateApplication()</code> 方法，前面分析得知其中又调用到子类 <code>SystemUIAppComponentFactory.instantiateApplicationCompat()</code>方法，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SystemUIAppComponentFactory.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemUIAppComponentFactory</span> <span class="keyword">extends</span> <span class="title class_">AppComponentFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Application <span class="title function_">instantiateApplicationCompat</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@NonNull</span> ClassLoader cl, <span class="meta">@NonNull</span> String className)</span></span><br><span class="line">            <span class="keyword">throws</span> InstantiationException, IllegalAccessException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">// 调用父类方法实例化 Application</span></span><br><span class="line">        <span class="type">Application</span> <span class="variable">app</span> <span class="operator">=</span> <span class="built_in">super</span>.instantiateApplicationCompat(cl, className);</span><br><span class="line">        <span class="keyword">if</span> (app <span class="keyword">instanceof</span> ContextInitializer) &#123;</span><br><span class="line">            <span class="comment">// 注册 Context 成功取得的回调</span></span><br><span class="line">            ((ContextInitializer) app).setContextAvailableCallback(</span><br><span class="line">                    context -&gt; &#123;</span><br><span class="line">                        SystemUIFactory.createFromConfig(context);</span><br><span class="line">                        SystemUIFactory.getInstance().getSysUIComponent().inject(</span><br><span class="line">                                SystemUIAppComponentFactory.<span class="built_in">this</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> app; <span class="comment">// 返回 Application 实例</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ContextAvailableCallback</span> &#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">onContextAvailable</span><span class="params">(Context context)</span>; <span class="comment">// SystemUIApplication.onCreate() 中回调</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ContextInitializer</span> &#123; <span class="comment">// SystemUIApplication 实现了这个接口</span></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">setContextAvailableCallback</span><span class="params">(ContextAvailableCallback callback)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里做了三件事：</p>
<ul>
<li>调用父类的 <code>instantiateApplicationCompat()</code> 方法实例化 Application 对象；</li>
<li>调用 <code>SystemUIApplication.setContextAvailableCallback()</code>；</li>
<li>返回 Application 实例；</li>
</ul>
<p>SystemUIApplication 实现了 <code>SystemUIAppComponentFactory.ContextInitializer</code> 接口，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SystemUIApplication.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemUIApplication</span> <span class="keyword">extends</span> <span class="title class_">Application</span> <span class="keyword">implements</span></span><br><span class="line">        <span class="title class_">SystemUIAppComponentFactory</span>.ContextInitializer &#123;</span><br><span class="line">    <span class="keyword">private</span> SystemUIAppComponentFactory.ContextAvailableCallback mContextAvailableCallback;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setContextAvailableCallback</span><span class="params">(</span></span><br><span class="line"><span class="params">            SystemUIAppComponentFactory.ContextAvailableCallback callback)</span> &#123;</span><br><span class="line">        mContextAvailableCallback = callback;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>把传入的 callback 参数传递给了 mContextAvailableCallback，从前面分析 <code>handleBindApplication()</code> 得知，先创建 Application 对象，然后执行 <code>Application.onCreate()</code>方法，至此已经创建了 SystemUIApplication，接下来看 SystemUIApplication.onCreate() 方法；</p>
<h5 id="SystemUIApplication-onCreate"><a href="#SystemUIApplication-onCreate" class="headerlink" title="SystemUIApplication.onCreate()"></a>SystemUIApplication.onCreate()</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SystemUIApplication.java</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate();</span><br><span class="line">        ...</span><br><span class="line">        mContextAvailableCallback.onContextAvailable(<span class="built_in">this</span>);</span><br></pre></td></tr></table></figure>

<p>这里回调了 <code>onContextAvailable()</code> 方法，在上面传递 ContextAvailableCallback 给 SystemUIApplication 的时候定义了这个方法，此时则执行到了这段代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SystemUIAppComponentFactory.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemUIAppComponentFactory</span> <span class="keyword">extends</span> <span class="title class_">AppComponentFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Application <span class="title function_">instantiateApplicationCompat</span><span class="params">(...)</span>...&#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span> (app <span class="keyword">instanceof</span> ContextInitializer) &#123;</span><br><span class="line">            <span class="comment">// 注册 Context 成功取得的回调</span></span><br><span class="line">            ((ContextInitializer) app).setContextAvailableCallback(</span><br><span class="line">                    context -&gt; &#123;</span><br><span class="line">                        SystemUIFactory.createFromConfig(context);</span><br><span class="line">                        SystemUIFactory.getInstance().getSysUIComponent().inject(</span><br><span class="line">                                SystemUIAppComponentFactory.<span class="built_in">this</span>);</span><br></pre></td></tr></table></figure>

<p>做了两个工作：</p>
<ul>
<li>SystemUIFactory.createFromConfig()</li>
<li>SystemUIFactory.getInstance().getSysUIComponent().inject(SystemUIAppComponentFactory.this)：初始化 depency 中含 @inject 的变量；</li>
</ul>
<h6 id="createFromConfig"><a href="#createFromConfig" class="headerlink" title="createFromConfig()"></a>createFromConfig()</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SystemUIFactory.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemUIFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">createFromConfig</span><span class="params">(Context context, <span class="type">boolean</span> fromTest)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">clsName</span> <span class="operator">=</span> context.getString(R.string.config_systemUIFactoryComponent);</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; cls = <span class="literal">null</span>;</span><br><span class="line">            cls = context.getClassLoader().loadClass(clsName);</span><br><span class="line">            mFactory = (SystemUIFactory) cls.newInstance(); <span class="comment">// 创建 SystemUIFactory 实例</span></span><br><span class="line">            mFactory.init(context, fromTest);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;...&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>创建 SystemUIFactory 实例，执行其 init() 方法，context 是 SystemUIApplication 对象；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SystemUIFactory.java</span></span><br><span class="line">    <span class="keyword">private</span> GlobalRootComponent mRootComponent;</span><br><span class="line">    <span class="keyword">private</span> SysUIComponent mSysUIComponent;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(Context context, <span class="type">boolean</span> fromTest)</span>... &#123;</span><br><span class="line">        mRootComponent = buildGlobalRootComponent(context); <span class="comment">// 获取 dagger 根组件（不仅仅包含 SystemUIComponent）</span></span><br><span class="line">        SysUIComponent.<span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> mRootComponent.getSysUIComponent(); <span class="comment">// 从根组件获取 SystemUIComponent 组件</span></span><br><span class="line">        mSysUIComponent = builder.build();</span><br><span class="line">        <span class="keyword">if</span> (mInitializeComponents) &#123;</span><br><span class="line">            mSysUIComponent.init();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Dependency</span> <span class="variable">dependency</span> <span class="operator">=</span> mSysUIComponent.createDependency();</span><br><span class="line">        dependency.start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> SysUIComponent <span class="title function_">getSysUIComponent</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mSysUIComponent;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>获取 SystemUI 的 dagger 组件，创建 dependency 对象，Dependency 管理各式各样的依赖，被依赖的实例通过 Map 管理，但并不是在初始化的时候就缓存它们。而先将各实例对应的懒加载回调缓存进去。其后在各实例确实需要使用的时候通过注入的懒加载获取和缓存；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@SysUISingleton</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dependency</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ArrayMap&lt;Object, Object&gt; mDependencies = <span class="keyword">new</span> <span class="title class_">ArrayMap</span>&lt;&gt;(); <span class="comment">// 使用 class 作为 key 将对应实例缓存的 Map</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ArrayMap&lt;Object, LazyDependencyCreator&gt; mProviders = <span class="keyword">new</span> <span class="title class_">ArrayMap</span>&lt;&gt;(); <span class="comment">// 缓存实例的懒加载回调的 Map</span></span><br><span class="line">    <span class="meta">@Inject</span> DumpManager mDumpManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span> Lazy&lt;StatusBarWindowController&gt; mTempStatusBarWindowController;</span><br><span class="line">    <span class="meta">@Inject</span> Lazy&lt;IStatusBarService&gt; mIStatusBarService;</span><br><span class="line">    <span class="meta">@Inject</span> Lazy&lt;StatusBarStateController&gt; mStatusBarStateController;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Think about ways to push these creation rules out of Dependency to cut down</span></span><br><span class="line">        <span class="comment">// on imports.</span></span><br><span class="line">        mProviders.put(StatusBarWindowController.class, mTempStatusBarWindowController::get);</span><br><span class="line">        mProviders.put(IStatusBarService.class, mIStatusBarService::get);</span><br><span class="line">        mProviders.put(StatusBarStateController.class, mStatusBarStateController::get);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 根据 class 查询缓存，尚未缓存的话通过懒加载回调获取注入的实例并缓存</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">synchronized</span> &lt;T&gt; T <span class="title function_">getDependencyInner</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        <span class="type">T</span> <span class="variable">obj</span> <span class="operator">=</span> (T) mDependencies.get(key);</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="literal">null</span>) &#123;</span><br><span class="line">            obj = createDependency(key);</span><br><span class="line">            mDependencies.put(key, obj);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">createDependency</span><span class="params">(Object cls)</span> &#123;</span><br><span class="line">        Preconditions.checkArgument(cls <span class="keyword">instanceof</span> DependencyKey&lt;?&gt; || cls <span class="keyword">instanceof</span> Class&lt;?&gt;);</span><br><span class="line"></span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        LazyDependencyCreator&lt;T&gt; provider = mProviders.get(cls);</span><br><span class="line">        <span class="keyword">if</span> (provider == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Unsupported dependency &quot;</span> + cls</span><br><span class="line">                    + <span class="string">&quot;. &quot;</span> + mProviders.size() + <span class="string">&quot; providers known.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> provider.createDependency();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">interface</span> <span class="title class_">LazyDependencyCreator</span>&lt;T&gt; &#123;</span><br><span class="line">        T <span class="title function_">createDependency</span><span class="params">()</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>执行 Dependency.start() 方法；</p>
<h6 id="getSysUIComponent-inject"><a href="#getSysUIComponent-inject" class="headerlink" title="getSysUIComponent.inject()"></a>getSysUIComponent.inject()</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SystemUIFactory.java</span></span><br><span class="line">    <span class="keyword">private</span> SysUIComponent mSysUIComponent;</span><br><span class="line">    <span class="keyword">public</span> SysUIComponent <span class="title function_">getSysUIComponent</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mSysUIComponent;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// SysUIComponent.java</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">inject</span><span class="params">(SystemUIAppComponentFactory factory)</span>;</span><br></pre></td></tr></table></figure>

<p>获取上面得到的 mSysUIComponent，执行其中的 inject() 方法，参数为 SystemUIAppComponentFactory.this，所以是初始化 SystemUIAppComponentFactory 中标注 @Inject 的变量；</p>
<p>Application 创建后，接下来就会执行到 SystemUIService 中的逻辑，进入 SystemUIService.onCreate()；</p>
<h2 id="SystemUIService-onCreate"><a href="#SystemUIService-onCreate" class="headerlink" title="SystemUIService.onCreate()"></a>SystemUIService.onCreate()</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SystemUIService.java</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Start all of SystemUI</span></span><br><span class="line">        ((SystemUIApplication) getApplication()).startServicesIfNeeded(); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<p>调用 SystemUIApplication#startServicesIfNeeded()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SystemUIApplication.java</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startServicesIfNeeded</span><span class="params">()</span> &#123; <span class="comment">// SystemUIService.onCreate() 中调用</span></span><br><span class="line">        <span class="comment">// 获取 SystemUI 中所有服务类名</span></span><br><span class="line">        String[] names = SystemUIFactory.getInstance().getSystemUIServiceComponents(getResources());</span><br><span class="line">        startServicesIfNeeded(<span class="comment">/* metricsPrefix= */</span> <span class="string">&quot;StartServices&quot;</span>, names);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>获取所有 SystemUI 中的服务组件，并在后续依次启动；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SystemUIFactory.java</span></span><br><span class="line">    <span class="keyword">public</span> String[] getSystemUIServiceComponents(Resources resources) &#123;</span><br><span class="line">        <span class="keyword">return</span> resources.getStringArray(R.array.config_systemUIServiceComponents);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>config_systemUIServiceComponents 定义了 SystemUI 的子类组件，状态栏对应 StatusBar 这个；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--frameworks/base/packages/SystemUI/res/values/config.xml--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string-array</span> <span class="attr">name</span>=<span class="string">&quot;config_systemUIServiceComponents&quot;</span> <span class="attr">translatable</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span>&gt;</span>com.android.systemui.util.NotificationChannels<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span>&gt;</span>com.android.systemui.keyguard.KeyguardViewMediator<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span>&gt;</span>com.android.systemui.recents.Recents<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span>&gt;</span>com.android.systemui.volume.VolumeUI<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span>&gt;</span>com.android.systemui.statusbar.phone.StatusBar<span class="tag">&lt;/<span class="name">item</span>&gt;</span> <span class="comment">&lt;!--状态栏--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span>&gt;</span>com.android.systemui.usb.StorageNotification<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span>&gt;</span>com.android.systemui.power.PowerUI<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span>&gt;</span>com.android.systemui.media.RingtonePlayer<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span>&gt;</span>com.android.systemui.keyboard.KeyboardUI<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span>&gt;</span>com.android.systemui.shortcut.ShortcutKeyDispatcher<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span>&gt;</span>@string/config_systemUIVendorServiceComponent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span>&gt;</span>com.android.systemui.util.leak.GarbageMonitor$Service<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span>&gt;</span>com.android.systemui.LatencyTester<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span>&gt;</span>com.android.systemui.globalactions.GlobalActionsComponent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span>&gt;</span>com.android.systemui.ScreenDecorations<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span>&gt;</span>com.android.systemui.biometrics.AuthController<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span>&gt;</span>com.android.systemui.SliceBroadcastRelayHandler<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span>&gt;</span>com.android.systemui.statusbar.notification.InstantAppNotifier<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span>&gt;</span>com.android.systemui.theme.ThemeOverlayController<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span>&gt;</span>com.android.systemui.accessibility.WindowMagnification<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span>&gt;</span>com.android.systemui.accessibility.SystemActions<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span>&gt;</span>com.android.systemui.toast.ToastUI<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span>&gt;</span>com.android.systemui.wmshell.WMShell<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">string-array</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>根据 config_systemUIServiceComponents 获取<strong>包含继承自 SystemUI 的子类名</strong>的数组，作为参数传入 startServicesIfNeeded()；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SystemUIApplication.java</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">startServicesIfNeeded</span><span class="params">(String metricsPrefix, String[] services)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mServicesStarted) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mServices = <span class="keyword">new</span> <span class="title class_">SystemUI</span>[services.length];</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> services.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">clsName</span> <span class="operator">=</span> services[i];</span><br><span class="line">            <span class="keyword">if</span> (DEBUG) Log.d(TAG, <span class="string">&quot;loading: &quot;</span> + clsName);</span><br><span class="line">            log.traceBegin(metricsPrefix + clsName);</span><br><span class="line">            <span class="type">long</span> <span class="variable">ti</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">SystemUI</span> <span class="variable">obj</span> <span class="operator">=</span> mComponentHelper.resolveSystemUI(clsName); <span class="comment">// 将类名转换为类的实例</span></span><br><span class="line">                <span class="keyword">if</span> (obj == <span class="literal">null</span>) &#123; <span class="comment">// 如果为空则利用反射获取服务类的实例</span></span><br><span class="line">                    <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> Class.forName(clsName).getConstructor(Context.class);</span><br><span class="line">                    obj = (SystemUI) constructor.newInstance(<span class="built_in">this</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                mServices[i] = obj;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (...) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(ex);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (DEBUG) Log.d(TAG, <span class="string">&quot;running: &quot;</span> + mServices[i]);</span><br><span class="line">            mServices[i].start(); <span class="comment">// 启动服务</span></span><br><span class="line">            <span class="keyword">if</span> (mBootCompleteCache.isBootComplete()) &#123;</span><br><span class="line">                mServices[i].onBootCompleted();</span><br><span class="line">            &#125;</span><br><span class="line">            ...</span><br><span class="line">        mServicesStarted = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>遍历 SystemUI 子类对象，根据类名通过反射获取子类实例，将实例赋值给 mServices 数组，并执行子类 <code>start()</code> 方法，这里以 StatusBar 为例，执行 <code>StatusBar.start()</code>；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// StatusBar.java</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        mStatusBarStateController.addCallback(mStateListener,</span><br><span class="line">                SysuiStatusBarStateController.RANK_STATUS_BAR);</span><br><span class="line">        <span class="comment">// 获取 WindowManagerImpl</span></span><br><span class="line">        mWindowManager = (WindowManager) mContext.getSystemService(Context.WINDOW_SERVICE);</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// start old BaseStatusBar.start().</span></span><br><span class="line">        mWindowManagerService = WindowManagerGlobal.getWindowManagerService(); <span class="comment">// 获取 IWindowManager.Stub.Proxy</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="type">RegisterStatusBarResult</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = mBarService.registerStatusBar(mCommandQueue);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException ex) &#123;</span><br><span class="line">            ex.rethrowFromSystemServer();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建状态栏 View，并将其添加到 WindowManager</span></span><br><span class="line">        createAndAddWindows(result);</span><br></pre></td></tr></table></figure>

<p>调用 createAndAddWindows()；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// StatusBar.java</span></span><br><span class="line">    <span class="comment">// 创建状态栏 View, 并将其添加到 WindowManager</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createAndAddWindows</span><span class="params">(<span class="meta">@Nullable</span> RegisterStatusBarResult result)</span> &#123;</span><br><span class="line">        makeStatusBarView(result);</span><br><span class="line">        mNotificationShadeWindowController.attach();</span><br><span class="line"></span><br><span class="line">        mStatusBarWindowController.attach(); <span class="comment">// 将 StatusBarWindowView 添加到 WindowManager</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>在前面 Depency.java 中看到其中有 StatusBarWindowController，在 StatusBarWindowController 构造函数中初始化了 mStatusBarWindowView对象，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// StatusBarWindowController.java</span></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">StatusBarWindowController</span><span class="params">(...)</span> &#123;</span><br><span class="line">        mContext = context;</span><br><span class="line">        mWindowManager = windowManager;</span><br><span class="line">        mIWindowManager = iWindowManager;</span><br><span class="line">        mContentInsetsProvider = contentInsetsProvider;</span><br><span class="line">        mStatusBarWindowView = statusBarWindowView; <span class="comment">// 初始化 mStatusBarWindowView</span></span><br><span class="line">        mLaunchAnimationContainer = mStatusBarWindowView.findViewById(</span><br><span class="line">                R.id.status_bar_launch_animation_container);</span><br><span class="line">        mLpChanged = <span class="keyword">new</span> <span class="title class_">WindowManager</span>.LayoutParams();</span><br><span class="line">        mResources = resources;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mBarHeight &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            mBarHeight = SystemBarUtils.getStatusBarHeight(mContext);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>随后调用 attach() 函数把 StatusBarWindowView 添加到 WindowManager 中；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// StatusBarWindowController.java</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> WindowManager mWindowManager;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attach</span><span class="params">()</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        mWindowManager.addView(mStatusBarWindowView, mLp); <span class="comment">// 将 StatusBarWindowView 添加到 WindowManager</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>后面的工作就和<a href="http://rangerzhou.top/2022/02/20/Android/AndroidDevelop_017_ActivityCreateAndWindowDisplay/">Activity 窗口添加-第二小节</a> 一样了；</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>Android - Activity 创建及窗口显示过程</title>
    <url>/2022/02/20/Android/AndroidDevelop_017_CreateActivity_WindowDisplay/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>Activity 创建及窗口显示过程分析，源码基于 android-12.1.0_r4；</p>
</blockquote>
<span id="more"></span>

<p>在 <a href="http://rangerzhou.top/2021/11/05/Android/AndroidDevelop_011_startActivity/">APP 启动流程分析</a> 中得知，启动 APP 的 Activity 最后会调用到 <code>ActivityTaskSupervisor.realStartActivityLocked()</code>，最终在 ActivityThread 中先后调用了 <code>handleLaunchActivity() -&gt; performLaunchActivity()</code> 和 <code>handleResumeActivity() -&gt; performResumeActivity()</code>，</p>
<ul>
<li>performLaunchActivity()：作用是在 <code>Instrumentation.newActivity()</code> 函数中根据 Activity 的类名通过通过反射机制创建对应的 Activity，然后通过 <code>Instrumentation.callActivityOnCreate() -&gt; Activity.performCreate() -&gt; Activity.onCreate()</code> 调用 Activity 的 onCreate () 函数；</li>
<li>performResumeActivity()：通过 <code>Activity.performResume() -&gt; Instrumentation.callActivityOnResume() -&gt; Activity.onResume()</code> 调用 Activity 的 onResume() 函数；</li>
</ul>
<p>但是 <code>handleResumeActivity()</code> 除了调用 <code>performResumeActivity()</code> 之外，还有其他重要工作，接下来开始分析；</p>
<h1 id="1-handleResumeActivity-分析"><a href="#1-handleResumeActivity-分析" class="headerlink" title="1 handleResumeActivity() 分析"></a>1 handleResumeActivity() 分析</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ActivityThread.java</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleResumeActivity</span><span class="params">(ActivityClientRecord r, <span class="type">boolean</span> finalStateRequest,</span></span><br><span class="line"><span class="params">            <span class="type">boolean</span> isForward, String reason)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// 执行 Activity 的 performResume 方法</span></span><br><span class="line">        <span class="keyword">if</span> (!performResumeActivity(r, finalStateRequest, reason)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Activity</span> <span class="variable">a</span> <span class="operator">=</span> r.activity;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span> (r.window == <span class="literal">null</span> &amp;&amp; !a.mFinished &amp;&amp; willBeVisible) &#123;</span><br><span class="line">            r.window = r.activity.getWindow();</span><br><span class="line">            <span class="comment">// 1.获得一个 View 对象，实际上是 DecorView，setContentView 把 view 添加到 mContentParent，</span></span><br><span class="line">            <span class="comment">// mContentParent 是 PhoneWindow.mDecor 的一部分，</span></span><br><span class="line">            <span class="type">View</span> <span class="variable">decor</span> <span class="operator">=</span> r.window.getDecorView();</span><br><span class="line">            decor.setVisibility(View.INVISIBLE);</span><br><span class="line">            <span class="type">ViewManager</span> <span class="variable">wm</span> <span class="operator">=</span> a.getWindowManager(); <span class="comment">// 2.获得 ViewManager 对象，实际上是 WindowManagerImpl 对象</span></span><br><span class="line">            WindowManager.<span class="type">LayoutParams</span> <span class="variable">l</span> <span class="operator">=</span> r.window.getAttributes();</span><br><span class="line">            a.mDecor = decor;</span><br><span class="line">            ...</span><br><span class="line">            <span class="keyword">if</span> (a.mVisibleFromClient) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!a.mWindowAdded) &#123;</span><br><span class="line">                    a.mWindowAdded = <span class="literal">true</span>;</span><br><span class="line">                    wm.addView(decor, l); <span class="comment">// 3.把上面获取的 decor 对象添加到 ViewManager 中，调用 WindowManagerImpl.addView</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ...</span><br><span class="line">        Looper.myQueue().addIdleHandler(<span class="keyword">new</span> <span class="title class_">Idler</span>());</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// getWindowManager()</span></span><br><span class="line">    <span class="keyword">private</span> WindowManager mWindowManager;</span><br><span class="line">    <span class="keyword">public</span> WindowManager <span class="title function_">getWindowManager</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mWindowManager;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>主要工作有 3 个：</p>
<ul>
<li>window.getDecorView()：出现了一个 <font color=red><strong>Window</strong></font> 对象，通过 window.getDecorView 获取一个 View 对象 decor，其实是一个 <font color=red><strong>DecorView</strong></font>，我们知道在 onCreate() 中会 setContentView()，是把一个 View 添加到 mContentParent，而 mContentParent 是 DecorView[PhoneWindow.mDecor] 的一部分；</li>
<li>getWindowManager()：返回一个 <font color=red><strong>WindowManager</strong></font> 对象（继承自 ViewManager），实际上是 <font color=red><strong>WindowManagerImpl</strong></font> 对象；</li>
<li>addView()：把上面获取的 decor 对象添加到 ViewManager 中，实际上调用的是 WindowManagerImpl.addView()；</li>
</ul>
<p>Window、WindowManager、DecorView 是什么？我们回到 <code>ActivityThread.performLaunchActivity()</code>；</p>
<h2 id="1-1-performLaunchActivity-Activity-创建"><a href="#1-1-performLaunchActivity-Activity-创建" class="headerlink" title="1.1 performLaunchActivity() - Activity 创建"></a>1.1 performLaunchActivity() - Activity 创建</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ActivityThread.java</span></span><br><span class="line">    <span class="keyword">private</span> Activity <span class="title function_">performLaunchActivity</span><span class="params">(ActivityClientRecord r, Intent customIntent)</span> &#123;</span><br><span class="line">        <span class="type">ActivityInfo</span> <span class="variable">aInfo</span> <span class="operator">=</span> r.activityInfo;</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// Activity 中的 getContext 函数返回的就是这个 ContextImpl 对象</span></span><br><span class="line">        <span class="type">ContextImpl</span> <span class="variable">appContext</span> <span class="operator">=</span> createBaseContextForActivity(r);</span><br><span class="line">        <span class="type">Activity</span> <span class="variable">activity</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            java.lang.<span class="type">ClassLoader</span> <span class="variable">cl</span> <span class="operator">=</span> appContext.getClassLoader(); <span class="comment">// 获取  ClassLoader</span></span><br><span class="line">            activity = mInstrumentation.newActivity(</span><br><span class="line">                    cl, component.getClassName(), r.intent); <span class="comment">// 根据类名通过反射机制获取 Activity</span></span><br><span class="line">            ...</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Application</span> <span class="variable">app</span> <span class="operator">=</span> r.packageInfo.makeApplication(<span class="literal">false</span>, mInstrumentation);</span><br><span class="line">            ...</span><br><span class="line">                <span class="type">Window</span> <span class="variable">window</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (r.mPendingRemoveWindow != <span class="literal">null</span> &amp;&amp; r.mPreserveWindow) &#123;</span><br><span class="line">                    window = r.mPendingRemoveWindow; <span class="comment">// 待删除的窗口</span></span><br><span class="line">                    r.mPendingRemoveWindow = <span class="literal">null</span>;</span><br><span class="line">                    r.mPendingRemoveWindowManager = <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                ...</span><br><span class="line">                activity.attach(appContext, <span class="built_in">this</span>, getInstrumentation(), r.token,</span><br><span class="line">                        r.ident, app, r.intent, r.activityInfo, title, r.parent,</span><br><span class="line">                        r.embeddedID, r.lastNonConfigurationInstances, config,</span><br><span class="line">                        r.referrer, r.voiceInteractor, window, r.configCallback,</span><br><span class="line">                        r.assistToken, r.shareableActivityToken);</span><br><span class="line">                ...</span><br><span class="line">            <span class="keyword">synchronized</span> (mResourcesManager) &#123;</span><br><span class="line">                mActivities.put(r.token, r);</span><br><span class="line">            &#125;...</span><br><span class="line">                    mInstrumentation.callActivityOnCreate(activity, r.state); <span class="comment">// 最终调用 Activity.onCreate()</span></span><br><span class="line">                &#125;</span><br><span class="line">                ...</span><br><span class="line">        <span class="keyword">return</span> activity;</span><br></pre></td></tr></table></figure>

<p>主要工作：</p>
<ul>
<li>创建 Activity 对应的 ContextImpl 对象；</li>
<li>获取应用所使用的 ClassLoader 对象，用于创建 Activity 对象；</li>
<li>调用 Instrumentation.newActivity() 通过反射机制创建 Activity 对象；</li>
<li><strong>调用 Activity.attach() 方法</strong>；</li>
<li>通过 Instrumentation.callActivityOnCreate() 调用 Activity.onCreate() 方法；</li>
<li>将当前 Activity 所对应的 ActivityClientRecord 对象添加到 mActivities 数组；</li>
</ul>
<p>其他流程在 <a href="http://rangerzhou.top/2021/11/05/Android/AndroidDevelop_011_startActivity/">APP 启动流程分析</a> 中已经分析过了，这里重点看一下 <code>attach()</code> 函数；</p>
<h3 id="1-1-1-attach"><a href="#1-1-1-attach" class="headerlink" title="1.1.1 attach()"></a>1.1.1 attach()</h3><h4 id="1-1-1-1-Window-创建"><a href="#1-1-1-1-Window-创建" class="headerlink" title="1.1.1.1 Window 创建"></a>1.1.1.1 Window 创建</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Activity.java</span></span><br><span class="line">    <span class="keyword">private</span> Window mWindow;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">attach</span><span class="params">(...)</span> &#123;</span><br><span class="line">        <span class="comment">// 保存上一步创建的 ContextImpl 到属性 mBase 中，这样 ContextImpl 就可以调用 Activity 了</span></span><br><span class="line">        attachBaseContext(context);</span><br><span class="line"></span><br><span class="line">        mFragments.attachHost(<span class="literal">null</span> <span class="comment">/*parent*/</span>);</span><br><span class="line">        <span class="comment">// 创建 PhoneWindow</span></span><br><span class="line">        mWindow = <span class="keyword">new</span> <span class="title class_">PhoneWindow</span>(<span class="built_in">this</span>, window, activityConfigCallback);</span><br><span class="line">        mWindow.setWindowControllerCallback(mWindowControllerCallback);</span><br><span class="line">        mWindow.setCallback(<span class="built_in">this</span>);</span><br><span class="line">        mWindow.setOnWindowDismissedCallback(<span class="built_in">this</span>);</span><br><span class="line">        mWindow.getLayoutInflater().setPrivateFactory(<span class="built_in">this</span>);</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// 设置 PhoneWindow 的 WindowManager，关联 WindowManager</span></span><br><span class="line">        mWindow.setWindowManager(</span><br><span class="line">                (WindowManager)context.getSystemService(Context.WINDOW_SERVICE),</span><br><span class="line">                mToken, mComponent.flattenToString(),</span><br><span class="line">                (info.flags &amp; ActivityInfo.FLAG_HARDWARE_ACCELERATED) != <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (mParent != <span class="literal">null</span>) &#123;</span><br><span class="line">            mWindow.setContainer(mParent.getWindow());</span><br><span class="line">        &#125;</span><br><span class="line">        mWindowManager = mWindow.getWindowManager(); <span class="comment">// 保存 PhoneWindow 的 WindowManager 到 Activity 的 mWindowManager</span></span><br><span class="line">        ...</span><br></pre></td></tr></table></figure>

<p>可以看到这个 Window 其实是一个 PhoneWindow 对象，是 Activity 的一个成员变量，<font color=red><strong>即 Activity.mWindow 是一个 PhoneWindow 对象</strong></font>，继续看 <code>setWindowManager()</code>；</p>
<h4 id="1-1-1-2-WindowManager-创建"><a href="#1-1-1-2-WindowManager-创建" class="headerlink" title="1.1.1.2 WindowManager 创建"></a>1.1.1.2 WindowManager 创建</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// PhoneWindow.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PhoneWindow</span> <span class="keyword">extends</span> <span class="title class_">Window</span> <span class="keyword">implements</span> <span class="title class_">MenuBuilder</span>.Callback &#123;</span><br><span class="line"><span class="comment">// Window.java</span></span><br><span class="line">    <span class="keyword">private</span> WindowManager mWindowManager;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWindowManager</span><span class="params">(WindowManager wm, IBinder appToken, String appName,</span></span><br><span class="line"><span class="params">            <span class="type">boolean</span> hardwareAccelerated)</span> &#123;</span><br><span class="line">        mAppToken = appToken;</span><br><span class="line">        mAppName = appName;</span><br><span class="line">        mHardwareAccelerated = hardwareAccelerated;</span><br><span class="line">        <span class="keyword">if</span> (wm == <span class="literal">null</span>) &#123;</span><br><span class="line">            wm = (WindowManager)mContext.getSystemService(Context.WINDOW_SERVICE);</span><br><span class="line">        &#125;</span><br><span class="line">        mWindowManager = ((WindowManagerImpl)wm).createLocalWindowManager(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>PhoneWindow 继承自 Window，<code>setWindowManager()</code> 是在父类 Window 中定义的，又继续调用 <code>WindowManagerImpl.createLocalWindowManager()</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// WindowManagerImpl.java</span></span><br><span class="line">    <span class="keyword">public</span> WindowManagerImpl <span class="title function_">createLocalWindowManager</span><span class="params">(Window parentWindow)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WindowManagerImpl</span>(mContext, parentWindow, mWindowContextToken);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><font color=red><strong>所以 Window.mWindowManager 其实是一个 WindowManagerImpl 对象</strong></font>；</p>
<h3 id="1-1-2-setContentView"><a href="#1-1-2-setContentView" class="headerlink" title="1.1.2 setContentView()"></a>1.1.2 setContentView()</h3><p><code>performLaunchActivity()</code> 的最后调用 <code>callActivityOnCreate()</code> 启动了 Activity 的子类的 <code>onCreate()</code> ，我们都知道在其中会调用 <code>setContentView()</code> ，Activity 中有 3 个 setContentView() 方法，选取其中一个：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Activity.java</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setContentView</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        getWindow().setContentView(view);</span><br><span class="line">        initWindowDecorActionBar(); <span class="comment">// 初始化 ActionBar</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>先来看一下 <code>getWindow()</code> 返回什么：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Activity.java</span></span><br><span class="line">    <span class="keyword">private</span> Window mWindow;</span><br><span class="line">    <span class="keyword">public</span> Window <span class="title function_">getWindow</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mWindow;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// Window.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Window</span> &#123;</span><br></pre></td></tr></table></figure>

<p><font color=red><strong>返回了一个 Window 对象，属于 Activity</strong></font>，通过分析 <code>performLaunchActivity()</code> 得知 <code>getWindow()</code> 返回的是一个 PhoneWindow 对象，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// PhoneWindow.java</span></span><br><span class="line">    ViewGroup mContentParent;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setContentView</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        setContentView(view, <span class="keyword">new</span> <span class="title class_">ViewGroup</span>.LayoutParams(MATCH_PARENT, MATCH_PARENT));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setContentView</span><span class="params">(View view, ViewGroup.LayoutParams params)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mContentParent == <span class="literal">null</span>) &#123; <span class="comment">// mContentParent 是 mDecor 本身，或者是 mDecor 的一部分</span></span><br><span class="line">            installDecor(); <span class="comment">// 1.创建 PhoneWindow.mDecor(DecorView类型)，获取 mContentParent</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!hasFeature(FEATURE_CONTENT_TRANSITIONS)) &#123;&#125;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span> (hasFeature(FEATURE_CONTENT_TRANSITIONS)) &#123;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mLayoutInflater.inflate(layoutResID, mContentParent); <span class="comment">// 使用 LayoutInflater 工具解析并生成视图</span></span><br><span class="line">        &#125;</span><br><span class="line">            mContentParent.addView(view, params); <span class="comment">// 2.把 view 添加到 ViewGroup 中</span></span><br><span class="line">        mContentParent.requestApplyInsets();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Callback</span> <span class="variable">cb</span> <span class="operator">=</span> getCallback();</span><br><span class="line">        <span class="keyword">if</span> (cb != <span class="literal">null</span> &amp;&amp; !isDestroyed()) &#123;</span><br><span class="line">            cb.onContentChanged();</span><br><span class="line">        &#125;</span><br><span class="line">        mContentParentExplicitlySet = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>mContentParent 是一个 ViewGroup，继承自 View，从名字可知它除了是一个 View，还是一个 Group，里面包含了其他 View，上面代码主要有 2 个工作：</p>
<ul>
<li>installDecor()：创建 DecorView[PhoneWindow.mDecor]，加载布局到 DecorView，获取 mContentParent；</li>
<li>使用 LayoutInflater 工具解析并生成视图；</li>
<li>addView()：把传入的 view 添加到 mContentParent 这个 ViewGroup 中；</li>
</ul>
<p>先来看一下 installDecor()；</p>
<h4 id="1-1-2-1-installDecor-安装-DecorView"><a href="#1-1-2-1-installDecor-安装-DecorView" class="headerlink" title="1.1.2.1 installDecor() -安装 DecorView"></a>1.1.2.1 installDecor() -安装 DecorView</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// PhoneWindow.java</span></span><br><span class="line">    <span class="keyword">private</span> DecorView mDecor;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">installDecor</span><span class="params">()</span> &#123;</span><br><span class="line">        mForceDecorInstall = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (mDecor == <span class="literal">null</span>) &#123;</span><br><span class="line">            mDecor = generateDecor(-<span class="number">1</span>); <span class="comment">// 创建 DecorView mDecor，继承自 FrameLayout</span></span><br><span class="line">            ...</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mDecor.setWindow(<span class="built_in">this</span>); <span class="comment">// 已经存在 DecorView，直接传入 PhoneWindow</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mContentParent == <span class="literal">null</span>) &#123;</span><br><span class="line">            mContentParent = generateLayout(mDecor); <span class="comment">// 得到 ViewGroup 对象 mContentParent，处理标题栏显示等</span></span><br><span class="line">        ...</span><br><span class="line">                mTitleView = findViewById(R.id.title); <span class="comment">// 获取标题栏</span></span><br></pre></td></tr></table></figure>

<ul>
<li>首先通过 <code>generateDecor()</code> <font color=red><strong>创建 DecorView</strong></font>，它是 Activity 的根视图，并把 PhoneWindow 对象传递给 DecorView；</li>
<li>然后通过 <code>generateLayout()</code> <font color=red><strong>加载布局文件到 DecorView 中，从 DecorView 中获取并返回 mContentParent</strong></font>，比如 LinearLayout&#x2F;RelativeLayout&#x2F;FrameLayout 等，是 DecorView 的子视图；</li>
</ul>
<p>先来看一下创建 DecorView；</p>
<h5 id="a-generateDecor-创建-DecorView"><a href="#a-generateDecor-创建-DecorView" class="headerlink" title="a. generateDecor() - 创建 DecorView"></a>a. generateDecor() - 创建 DecorView</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// PhoneWindow.java</span></span><br><span class="line">    <span class="keyword">protected</span> DecorView <span class="title function_">generateDecor</span><span class="params">(<span class="type">int</span> featureId)</span> &#123;</span><br><span class="line">        Context context;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DecorView</span>(context, featureId, <span class="built_in">this</span>, getAttributes());</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// DecorView.java</span></span><br><span class="line">    <span class="keyword">private</span> PhoneWindow mWindow;</span><br><span class="line">    DecorView(Context context, <span class="type">int</span> featureId, PhoneWindow window,</span><br><span class="line">            WindowManager.LayoutParams params) &#123;</span><br><span class="line">        <span class="built_in">super</span>(context);</span><br><span class="line">        ...</span><br><span class="line">        setWindow(window);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setWindow</span><span class="params">(PhoneWindow phoneWindow)</span> &#123;</span><br><span class="line">        mWindow = phoneWindow;</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure>

<p><strong>创建 DecorView</strong>，并通过 <code>setWindow()</code> <strong>把 PhoneWindow 对象传递给 DecorView.mWindow</strong>，如果已经存在 DecorView，则直接通过 <code>setWindow()</code> 把 PhoneWindow 传递过去，  这里虽然创建了 DecorView，但是<strong>此时的 DecorView 还是一个空白的 FrameLayout</strong>（DecorView 继承自 FrameLayout）；</p>
<p>继续看 <code>generateLayout()</code> 获取 ViewGropu 对象；</p>
<h5 id="b-generateLayout-加载布局到-DecorView"><a href="#b-generateLayout-加载布局到-DecorView" class="headerlink" title="b. generateLayout() - 加载布局到 DecorView"></a>b. generateLayout() - 加载布局到 DecorView</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// PhoneWindow.java</span></span><br><span class="line">    <span class="keyword">protected</span> ViewGroup <span class="title function_">generateLayout</span><span class="params">(DecorView decor)</span> &#123;</span><br><span class="line">        <span class="type">TypedArray</span> <span class="variable">a</span> <span class="operator">=</span> getWindowStyle(); <span class="comment">// 1.从主题文件获取样式信息</span></span><br><span class="line">        <span class="keyword">if</span> (a.getBoolean(R.styleable.XXX, <span class="literal">false</span>)) &#123;</span><br><span class="line">            requestFeature(XXX); <span class="comment">// 2.根据样式信息请求 requestFeature</span></span><br><span class="line">        <span class="type">int</span> layoutResource;</span><br><span class="line">        <span class="type">int</span> <span class="variable">features</span> <span class="operator">=</span> getLocalFeatures(); <span class="comment">// 3.获取当前 window 正在实现的功能</span></span><br><span class="line">        <span class="comment">// 判断 features，根据主题格式，决定 layoutResource 值(根据不同 feature 确定不同的布局)</span></span><br><span class="line">        <span class="keyword">if</span> ((features &amp; ((<span class="number">1</span> &lt;&lt; FEATURE_LEFT_ICON) | (<span class="number">1</span> &lt;&lt; FEATURE_RIGHT_ICON))) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mIsFloating) &#123;</span><br><span class="line">                <span class="type">TypedValue</span> <span class="variable">res</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TypedValue</span>();</span><br><span class="line">                getContext().getTheme().resolveAttribute(</span><br><span class="line">                        R.attr.dialogTitleIconsDecorLayout, res, <span class="literal">true</span>);</span><br><span class="line">                layoutResource = res.resourceId; <span class="comment">// 获取对应标题栏的资源 id</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                layoutResource = R.layout.screen_title_icons;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// XXX Remove this once action bar supports these features.</span></span><br><span class="line">            removeFeature(FEATURE_ACTION_BAR);</span><br><span class="line">            <span class="comment">// System.out.println(&quot;Title Icons!&quot;);</span></span><br><span class="line">        &#125;... <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 默认加载布局</span></span><br><span class="line">            layoutResource = R.layout.screen_simple;</span><br><span class="line">        &#125;</span><br><span class="line">        mDecor.startChanging(); <span class="comment">// 开始改变 DecorView</span></span><br><span class="line">        mDecor.onResourcesLoaded(mLayoutInflater, layoutResource); <span class="comment">// 4.实例化上面确定的布局并加载到 DecorView 中</span></span><br><span class="line">        <span class="comment">// ID_ANDROID_CONTENT 定义在 Window 中：com.android.internal.R.id.content</span></span><br><span class="line">        <span class="comment">// 5.contentParent 是 PhoneWindow.mDecor 的一部分</span></span><br><span class="line">        <span class="type">ViewGroup</span> <span class="variable">contentParent</span> <span class="operator">=</span> (ViewGroup)findViewById(ID_ANDROID_CONTENT);</span><br><span class="line"></span><br><span class="line">        mDecor.finishChanging(); <span class="comment">// 停止改变 DecorView，停止后调用 drawableChanged 方法更新 DecorView</span></span><br><span class="line">        <span class="keyword">return</span> contentParent;</span><br></pre></td></tr></table></figure>

<ul>
<li>从主题文件获取样式信息，根据样式信息调用 requestFeature()；</li>
<li>通过 <code>getLocalFeatures()</code> 获取 requestFeature() 的功能；</li>
<li>根据功能获取对应的资源 ID，然后调用 <code>onResourcesLoaded()</code> 根据样式加载对应的布局到 PhoneWindow.mDecor(DecorView) 中；</li>
<li>最后从 DecorView 中通过 <code>findViewById()</code> 获取并返回 id 为 <code>R.id.content</code> 的 View （contentParent ）给到 <code>PhoneWindow.mContentParent</code>；</li>
</ul>
<p>看一下默认布局：<em>frameworks&#x2F;base&#x2F;core&#x2F;res&#x2F;res&#x2F;layout&#x2F;screen_simple.xml</em></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:fitsSystemWindows</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ViewStub</span> <span class="attr">android:id</span>=<span class="string">&quot;@+id/action_mode_bar_stub&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:inflatedId</span>=<span class="string">&quot;@+id/action_mode_bar&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:layout</span>=<span class="string">&quot;@layout/action_mode_bar&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:theme</span>=<span class="string">&quot;?attr/actionBarTheme&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">FrameLayout</span></span></span><br><span class="line"><span class="tag">         <span class="attr">android:id</span>=<span class="string">&quot;@android:id/content&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">android:foregroundInsidePadding</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">android:foregroundGravity</span>=<span class="string">&quot;fill_horizontal|top&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">android:foreground</span>=<span class="string">&quot;?android:attr/windowContentOverlay&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>onResourcesLoaded()</strong> 分析：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// DecorView.java</span></span><br><span class="line">    <span class="comment">// This is the caption view for the window, containing the caption and window control</span></span><br><span class="line">    <span class="comment">// buttons. The visibility of this decor depends on the workspace and the window type.</span></span><br><span class="line">    <span class="comment">// If the window type does not require such a view, this member might be null.</span></span><br><span class="line">    <span class="keyword">private</span> DecorCaptionView mDecorCaptionView;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">onResourcesLoaded</span><span class="params">(LayoutInflater inflater, <span class="type">int</span> layoutResource)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// 创建 DecorCaptionView（装饰标题视图）</span></span><br><span class="line">        mDecorCaptionView = createDecorCaptionView(inflater);</span><br><span class="line">        <span class="comment">// 实例化布局，加载传入的 layoutResource 成为根视图</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">View</span> <span class="variable">root</span> <span class="operator">=</span> inflater.inflate(layoutResource, <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (mDecorCaptionView != <span class="literal">null</span>) &#123;<span class="comment">// 判断 DecorCaptionView 是否为空</span></span><br><span class="line">            <span class="keyword">if</span> (mDecorCaptionView.getParent() == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果 mDecorCaptionView 没有父布局，就添加 mDecorCaptionView 到 DecorView 的最后一项</span></span><br><span class="line">                addView(mDecorCaptionView,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">ViewGroup</span>.LayoutParams(MATCH_PARENT, MATCH_PARENT));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 添加 root 到 DecorCaptionView 的最后一项</span></span><br><span class="line">            mDecorCaptionView.addView(root,</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">ViewGroup</span>.MarginLayoutParams(MATCH_PARENT, MATCH_PARENT)); <span class="comment">// 加入标题栏</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Put it below the color views.</span></span><br><span class="line">            <span class="comment">// 添加 root 到 DecorView 的第一项</span></span><br><span class="line">            addView(root, <span class="number">0</span>, <span class="keyword">new</span> <span class="title class_">ViewGroup</span>.LayoutParams(MATCH_PARENT, MATCH_PARENT));</span><br><span class="line">        &#125;</span><br><span class="line">        mContentRoot = (ViewGroup) root;<span class="comment">// 将 root 视图作为 DecorView 的 mContentRoot（一个ViewGroup）</span></span><br><span class="line">        initializeElevation();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>DecorCaptionView 的注释意思是 DecorCaptionView 是窗口的标题视图，包含标题和窗口控制按钮，这种 decor 的可见性取决于工作空间和窗口类型，如果窗口类型不需要这样的视图，则 mDecorCaptionView 可能为空，所以要进行判空操作；</p>
<p>可以看到 <code>onResuourcesLoaded()</code> 的目的是加载传入的 layoutResource 成为根视图，然后把根视图添加到 DecorView 中；</p>
<p>接下来看一下 <code>findViewById()</code>；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Window.java</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T <span class="keyword">extends</span> <span class="title class_">View</span>&gt; T <span class="title function_">findViewById</span><span class="params">(<span class="meta">@IdRes</span> <span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getDecorView().findViewById(id); <span class="comment">// PhoneWindow 实现 getDecorView，返回 PhoneWindow.mDecor</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// PhoneWindow.java</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="meta">@NonNull</span> View <span class="title function_">getDecorView</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mDecor == <span class="literal">null</span> || mForceDecorInstall) &#123;</span><br><span class="line">            installDecor();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mDecor; <span class="comment">// 返回 DecorView</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>可见 <code>findViewById()</code> 都是从 DecorView 中查找 View，所以返回的 contentParent 是 DecorView 的一部分，<font color=red><strong>即 mContentParent 是 DecorView 的一部分</strong></font>；</p>
<h4 id="1-1-2-2-ContentParent-addView-添加-view-到-ContentParent"><a href="#1-1-2-2-ContentParent-addView-添加-view-到-ContentParent" class="headerlink" title="1.1.2.2 ContentParent.addView - 添加 view 到 ContentParent"></a>1.1.2.2 ContentParent.addView - 添加 view 到 ContentParent</h4><p><code>installDecor()</code> 创建 DecorView、加载布局到 DecorView，获取 ContentParent 后，下一步就是调用 <code>ContentParent.addView()</code> 把 View 添加到 mContentParent 这个 ViewGroup 中；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ViewGroup.java</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addView</span><span class="params">(View child, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="type">LayoutParams</span> <span class="variable">params</span> <span class="operator">=</span> child.getLayoutParams();</span><br><span class="line">        ...</span><br><span class="line">        addView(child, index, params);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addView</span><span class="params">(View child, <span class="type">int</span> index, LayoutParams params)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        requestLayout();</span><br><span class="line">        invalidate(<span class="literal">true</span>);</span><br><span class="line">        addViewInner(child, index, params, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>这里就不详细分析了，继续回到 <code>handleResumeActivity()</code> 中；</p>
<h1 id="2-WMI-addView-DecorView"><a href="#2-WMI-addView-DecorView" class="headerlink" title="2 WMI.addView(DecorView)"></a>2 WMI.addView(DecorView)</h1><p>先回忆一下为什么分析 setContentView()，因为在分析 <code>handleResumeActivity()</code> 时遇到了 DecorView、Window、WindowManager 等不熟悉的对象，但是这些对象的来源和 <code>setContentView()</code> 有关，所以就转而分析 <code>setContentView()</code> 了；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ActivityThread.java</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleResumeActivity</span><span class="params">(ActivityClientRecord r, <span class="type">boolean</span> finalStateRequest,</span></span><br><span class="line"><span class="params">            <span class="type">boolean</span> isForward, String reason)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">            <span class="type">ViewManager</span> <span class="variable">wm</span> <span class="operator">=</span> a.getWindowManager();</span><br><span class="line">                    wm.addView(decor, l); <span class="comment">// 把获取的 DecorView 交给 WindowManagerIpml 中进行添加 View 操作</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ...</span><br><span class="line">        Looper.myQueue().addIdleHandler(<span class="keyword">new</span> <span class="title class_">Idler</span>());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>上文得知 wm 是 WindowManagerImpl 实例，所以继续调用到 <code>WindowManagerImpl.addView()</code>；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// WindowManagerImpl.java</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">WindowManagerGlobal</span> <span class="variable">mGlobal</span> <span class="operator">=</span> WindowManagerGlobal.getInstance();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addView</span><span class="params">(<span class="meta">@NonNull</span> View view, <span class="meta">@NonNull</span> ViewGroup.LayoutParams params)</span> &#123;</span><br><span class="line">        applyTokens(params);</span><br><span class="line">        mGlobal.addView(view, params, mContext.getDisplayNoVerify(), mParentWindow,</span><br><span class="line">                mContext.getUserId());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>WindowManagerImpl 又直接交给了 WindowManagerGlobal 处理，这个 <code>mGlobal</code> 是一个单例；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// WindowManagerGlobal.java</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ArrayList&lt;View&gt; mViews = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;View&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ArrayList&lt;ViewRootImpl&gt; mRoots = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;ViewRootImpl&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ArrayList&lt;WindowManager.LayoutParams&gt; mParams =</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;WindowManager.LayoutParams&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addView</span><span class="params">(View view, ViewGroup.LayoutParams params,</span></span><br><span class="line"><span class="params">            Display display, Window parentWindow, <span class="type">int</span> userId)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        ViewRootImpl root;</span><br><span class="line">        <span class="type">View</span> <span class="variable">panelParentView</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">            ...</span><br><span class="line">            root = <span class="keyword">new</span> <span class="title class_">ViewRootImpl</span>(view.getContext(), display); <span class="comment">// 创建 ViewRootImpl</span></span><br><span class="line"></span><br><span class="line">            view.setLayoutParams(wparams);</span><br><span class="line"></span><br><span class="line">            mViews.add(view); <span class="comment">// 保存 DecorView 实例</span></span><br><span class="line">            mRoots.add(root); <span class="comment">// 保存 root 到 mRoots 这个 ArrayList 中</span></span><br><span class="line">            mParams.add(wparams); <span class="comment">// 保存布局配置信息</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// do this last because it fires off messages to start doing things</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 把 window 对应的 View 传递给 VRI，通过 VRI 来更新界面并完成 Window 的添加过程</span></span><br><span class="line">                root.setView(view, wparams, panelParentView, userId);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">                ...</span><br></pre></td></tr></table></figure>

<p>new 了一个 ViewRootImpl 对象，然后调用 VRI.setView()，来看看 ViewRootImpl 的构造函数；</p>
<h2 id="2-1-ViewRootImpl-构造函数"><a href="#2-1-ViewRootImpl-构造函数" class="headerlink" title="2.1 ViewRootImpl 构造函数"></a>2.1 ViewRootImpl 构造函数</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ViewRootImpl.java</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The top of a view hierarchy, implementing the needed protocol between View</span></span><br><span class="line"><span class="comment"> * and the WindowManager.  This is for the most part an internal implementation</span></span><br><span class="line"><span class="comment"> * detail of &#123;<span class="doctag">@link</span> WindowManagerGlobal&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@hide</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;EmptyCatchBlock&quot;, &quot;PointlessBooleanExpression&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ViewRootImpl</span> <span class="keyword">implements</span> <span class="title class_">ViewParent</span>...&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ViewRootImpl</span><span class="params">(Context context, Display display)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(context, display, WindowManagerGlobal.getWindowSession(), <span class="literal">false</span> <span class="comment">/* useSfChoreographer */</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ViewRootImpl</span><span class="params">(<span class="meta">@UiContext</span> Context context, Display display, IWindowSession session,</span></span><br><span class="line"><span class="params">            <span class="type">boolean</span> useSfChoreographer)</span> &#123;</span><br><span class="line">        mContext = context;</span><br><span class="line">        <span class="comment">// Session 负责 Activity 到 WMS 的通信，和 W 对象反向</span></span><br><span class="line">        mWindowSession = session; <span class="comment">// 把 WMS.openSession 返回的 IWindowSession 对象传递给 ViewRootImpl.mWindowSession</span></span><br><span class="line">        mDisplay = display;</span><br><span class="line">        mBasePackageName = context.getBasePackageName();</span><br><span class="line">        mThread = Thread.currentThread(); <span class="comment">// 把当前创建 ViewRootImpl 的线程传递给 ViewRootImpl.mThread</span></span><br><span class="line">        ...</span><br><span class="line">        mWidth = -<span class="number">1</span>;</span><br><span class="line">        mHeight = -<span class="number">1</span>;</span><br><span class="line">        ...</span><br><span class="line">        mWindow = <span class="keyword">new</span> <span class="title class_">W</span>(<span class="built_in">this</span>); <span class="comment">// W extends IWindow.Stub，负责 WMS 到 Activity 的通信</span></span><br><span class="line">        mAttachInfo = <span class="keyword">new</span> <span class="title class_">View</span>.AttachInfo(mWindowSession, mWindow, display, <span class="built_in">this</span>, mHandler, <span class="built_in">this</span>,</span><br><span class="line">                context); <span class="comment">// 创建 AttachInfo，传入 ViewRootImpl，就把 View 和 ViewRootImpl 绑定起来了</span></span><br><span class="line">        ...</span><br><span class="line">        mChoreographer = useSfChoreographer</span><br><span class="line">                ? Choreographer.getSfInstance() : Choreographer.getInstance();</span><br><span class="line">        mDisplayManager = (DisplayManager)context.getSystemService(Context.DISPLAY_SERVICE);</span><br><span class="line">        mInsetsController = <span class="keyword">new</span> <span class="title class_">InsetsController</span>(<span class="keyword">new</span> <span class="title class_">ViewRootInsetsControllerHost</span>(<span class="built_in">this</span>));</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure>

<p>从注释中看出 ViewRootImpl 是 View 中的顶级层级，实现了 View 和 WindowManager 之间需要的协议；</p>
<p>构造函数传递了一个 <code>WindowManagerGlobal.getWindowSession()</code> 作为参数，创建了 AttachInfo 对象，AttachInfo 是 View 的内部类，其中有个 mViewRootImpl 属性，构造 AttachInfo 的时候把 ViewRootImpl 作为参数传递给了 mViewRootImpl，这样就把 View 和 ViewRootImpl 绑定起来了，然后 PhoneWindow.getViewRootImpl 获取的也是 AttachInfo.mViewRootImpl；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// WindowManagerGlobal.java</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> IWindowSession sWindowSession;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> IWindowSession <span class="title function_">getWindowSession</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (WindowManagerGlobal.class) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sWindowSession == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    InputMethodManager.ensureDefaultInstanceForDefaultDisplayIfNecessary();</span><br><span class="line">                    <span class="type">IWindowManager</span> <span class="variable">windowManager</span> <span class="operator">=</span> getWindowManagerService(); <span class="comment">// 获取 WMS 代理</span></span><br><span class="line">                    sWindowSession = windowManager.openSession(</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">IWindowSessionCallback</span>.Stub() &#123;</span><br><span class="line">                                <span class="meta">@Override</span></span><br><span class="line">                                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAnimatorScaleChanged</span><span class="params">(<span class="type">float</span> scale)</span> &#123;</span><br><span class="line">                                    ValueAnimator.setDurationScale(scale);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;);</span><br><span class="line">                ...</span><br><span class="line">            <span class="keyword">return</span> sWindowSession;</span><br><span class="line"><span class="comment">// 获取 WMS 的 binder 代理对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> IWindowManager <span class="title function_">getWindowManagerService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (WindowManagerGlobal.class) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sWindowManagerService == <span class="literal">null</span>) &#123;</span><br><span class="line">                sWindowManagerService = IWindowManager.Stub.asInterface(</span><br><span class="line">                        ServiceManager.getService(<span class="string">&quot;window&quot;</span>));</span><br><span class="line">                ...</span><br><span class="line">            <span class="keyword">return</span> sWindowManagerService;</span><br></pre></td></tr></table></figure>

<p><code>getWindowManagerService()</code> 获取 WMS 的 binder 代理 sWindowManagerService，所以 <code>openSession()</code> 的实现在 WMS 中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// WindowManagerService.java</span></span><br><span class="line">    <span class="keyword">public</span> IWindowSession <span class="title function_">openSession</span><span class="params">(IWindowSessionCallback callback)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Session</span>(<span class="built_in">this</span>, callback);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// Session.java</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Session</span> <span class="keyword">extends</span> <span class="title class_">IWindowSession</span>.Stub <span class="keyword">implements</span> <span class="title class_">IBinder</span>.DeathRecipient &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Session</span><span class="params">(WindowManagerService service, IWindowSessionCallback callback)</span> &#123;</span><br><span class="line">        mService = service;</span><br></pre></td></tr></table></figure>

<p>总结 ViewRootImpl 构造函数：</p>
<ul>
<li>ViewRootImpl 通过 <code>WindowManagerGlobal.getWindowSession()</code> 先通过 binder 通信 <strong>获取 WMS 的代理</strong>；</li>
<li>调用 WMS.openSession() 得到一个 IWindowSession 对象（Session 继承自 IWindowSession.Stub），支持 Binder 通信，且属于服务端；</li>
<li>把 IWindowSession 传递给 <code>ViewRootImpl.mWindowSession</code> ，Session 持有 WMS 对象，这样 Activity 就可以<font color=red><strong>通过 mWindowSession 和 WMS 通信</strong></font>（为什么不直接使用 WMS 的代理通信呢？）；</li>
<li>创建 W 对象，W 继承 IWindow.Stub，会通过 <code>ViewRootImpl.setView()</code> 传递到 WMS 中以创建 Activity 对应的 WindowState，<font color=red><strong>W 也负责 WMS 到 Activity 的通信</strong></font>；</li>
</ul>
<h2 id="2-2-ViewRootImpl-setView"><a href="#2-2-ViewRootImpl-setView" class="headerlink" title="2.2 ViewRootImpl.setView()"></a>2.2 ViewRootImpl.setView()</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ViewRootImpl.java</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setView</span><span class="params">(View view, WindowManager.LayoutParams attrs, View panelParentView,</span></span><br><span class="line"><span class="params">            <span class="type">int</span> userId)</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mView == <span class="literal">null</span>) &#123;</span><br><span class="line">                mView = view; <span class="comment">// 1. 保存传入的 view 参数到 ViewRootImpl.mView，view 指向 PhoneWindow.mDecor(DecorView)</span></span><br><span class="line">                ...</span><br><span class="line">                <span class="comment">// 2. 使用 ViewRootImpl.mChoreographer 的 Handler 发送一个 MSG_DO_SCHEDULE_CALLBACK 消息</span></span><br><span class="line">                requestLayout();</span><br><span class="line">                ...</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ...</span><br><span class="line">                    <span class="comment">// 3. 把 W 对象 mWindow 传递到 WMS 以创建 WindowState</span></span><br><span class="line">                    res = mWindowSession.addToDisplayAsUser(mWindow, mWindowAttributes,</span><br><span class="line">                            getHostVisibility(), mDisplay.getDisplayId(), userId,</span><br><span class="line">                            mInsetsController.getRequestedVisibilities(), inputChannel, mTempInsets,</span><br><span class="line">                            mTempControls);</span><br><span class="line">                    ...</span><br><span class="line">                view.assignParent(<span class="built_in">this</span>); <span class="comment">// 其中会设置 mParent，在 View.requestLayout() 时会用到</span></span><br></pre></td></tr></table></figure>

<p>传入的参数 view 就是 DecorView，保存到 ViewRootImpl.mView；</p>
<ul>
<li>requestLayout()：Activity 视图首次显示之前，完成第一次 layout 布局过程，以确保在收到任何系统事件后面重新布局，最终调用 performTraversals() 那套 measure&#x2F;layout&#x2F;draw 流程；</li>
<li>addToDisplayAsUser()：完成 WindowManager 和 WMS 的通信，将 Window 信息传递给 WMS；</li>
</ul>
<h3 id="2-2-1-VRI-requestLayout-请求布局"><a href="#2-2-1-VRI-requestLayout-请求布局" class="headerlink" title="2.2.1 VRI.requestLayout() - 请求布局"></a>2.2.1 VRI.requestLayout() - 请求布局</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ViewRootImpl.java</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestLayout</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!mHandlingLayoutInLayoutRequest) &#123;</span><br><span class="line">            checkThread(); <span class="comment">// 检查当前线程是否是创建 ViewRootImpl 的线程， 所以一般情况下子线程无法更新 UI 就是因为这里</span></span><br><span class="line">            mLayoutRequested = <span class="literal">true</span>;</span><br><span class="line">            scheduleTraversals(); <span class="comment">// 发送一个消息</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">checkThread</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mThread != Thread.currentThread()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CalledFromWrongThreadException</span>(</span><br><span class="line">                    <span class="string">&quot;Only the original thread that created a view hierarchy can touch its views.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>有个 checkThread() 函数，从前面 ViewRootImpl 构造函数可知这里的 mThread 是创建 ViewRootImpl 的线程，所以这里判断当前线程和创建 ViewRootImpl 的线程是否是同一线程，如果不是，则抛出异常提示只有创建它的线程才能更新它的 View，所以通常说的<font color=red><strong>子线程不能更新 UI 就是这个原因，但是在 ViewRootImpl 创建出来之前 UI 的更新没有线程限制，因为 checkThread() 不会被执行</strong></font>；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ViewRootImpl.java</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">TraversalRunnable</span> <span class="variable">mTraversalRunnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TraversalRunnable</span>();</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">scheduleTraversals</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!mTraversalScheduled) &#123;</span><br><span class="line">            mTraversalScheduled = <span class="literal">true</span>;</span><br><span class="line">            mTraversalBarrier = mHandler.getLooper().getQueue().postSyncBarrier(); <span class="comment">// 设置同步屏障</span></span><br><span class="line">            <span class="comment">// 向 Choreographer 注册一个 VSYNC 信号回调处理，以执行视图的 Traversal 相关逻辑</span></span><br><span class="line">            mChoreographer.postCallback(</span><br><span class="line">                    Choreographer.CALLBACK_TRAVERSAL, mTraversalRunnable, <span class="literal">null</span>);</span><br><span class="line">            notifyRendererOfFramePending();</span><br><span class="line">            pokeDrawLockIfNeeded();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>主要工作：</p>
<ul>
<li>发送同步消息屏障，保障异步消息优先执行，后续会对消息添加异步标志；</li>
<li>向 Choreographer 注册一个 VSYNC 信号回调处理，以执行视图的 Traversal 相关逻辑；</li>
<li>当回调时，会执行类型为 TraversalRunnable 的 run() 方法；</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Choreographer.java</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postCallback</span><span class="params">(<span class="type">int</span> callbackType, Runnable action, Object token)</span> &#123; <span class="comment">// 发送回调事件</span></span><br><span class="line">        postCallbackDelayed(callbackType, action, token, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postCallbackDelayed</span><span class="params">(<span class="type">int</span> callbackType,</span></span><br><span class="line"><span class="params">            Runnable action, Object token, <span class="type">long</span> delayMillis)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        postCallbackDelayedInternal(callbackType, action, token, delayMillis);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">postCallbackDelayedInternal</span><span class="params">(<span class="type">int</span> callbackType,</span></span><br><span class="line"><span class="params">            Object action, Object token, <span class="type">long</span> delayMillis)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">long</span> <span class="variable">now</span> <span class="operator">=</span> SystemClock.uptimeMillis(); <span class="comment">// 从开机到现在的毫秒数</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">long</span> <span class="variable">dueTime</span> <span class="operator">=</span> now + delayMillis;</span><br><span class="line">            <span class="comment">// 添加类型为 callbackType 的 CallbackQueue（将要执行的回调封装而成）</span></span><br><span class="line">            mCallbackQueues[callbackType].addCallbackLocked(dueTime, action, token);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (dueTime &lt;= now) &#123;</span><br><span class="line">                scheduleFrameLocked(now); <span class="comment">// 立即执行</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 异步回调延迟执行</span></span><br><span class="line">                <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> mHandler.obtainMessage(MSG_DO_SCHEDULE_CALLBACK, action);</span><br><span class="line">                msg.arg1 = callbackType;</span><br><span class="line">                msg.setAsynchronous(<span class="literal">true</span>); <span class="comment">// 把消息设置为异步</span></span><br><span class="line">                mHandler.sendMessageAtTime(msg, dueTime);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>根据传入的 Runnable 构建 CallbackRecord 对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Choreographer.java</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCallbackLocked</span><span class="params">(<span class="type">long</span> dueTime, Object action, Object token)</span> &#123;</span><br><span class="line">            <span class="type">CallbackRecord</span> <span class="variable">callback</span> <span class="operator">=</span> obtainCallbackLocked(dueTime, action, token);</span><br><span class="line">            <span class="type">CallbackRecord</span> <span class="variable">entry</span> <span class="operator">=</span> mHead;</span><br><span class="line">            <span class="keyword">if</span> (entry == <span class="literal">null</span>) &#123;</span><br><span class="line">                mHead = callback;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (dueTime &lt; entry.dueTime) &#123;</span><br><span class="line">                callback.next = entry;</span><br><span class="line">                mHead = callback;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (entry.next != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (dueTime &lt; entry.next.dueTime) &#123;</span><br><span class="line">                    callback.next = entry.next;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                entry = entry.next;</span><br><span class="line">            &#125;</span><br><span class="line">            entry.next = callback;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>最终都是执行到 <code>scheduleFrameLocked()</code>；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Choreographer.java</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">scheduleFrameLocked</span><span class="params">(<span class="type">long</span> now)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!mFrameScheduled) &#123;</span><br><span class="line">            mFrameScheduled = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (USE_VSYNC) &#123;</span><br><span class="line">                <span class="keyword">if</span> (DEBUG_FRAMES) &#123;</span><br><span class="line">                    Log.d(TAG, <span class="string">&quot;Scheduling next frame on vsync.&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// If running on the Looper thread, then schedule the vsync immediately,</span></span><br><span class="line">                <span class="comment">// otherwise post a message to schedule the vsync from the UI thread</span></span><br><span class="line">                <span class="comment">// as soon as possible.</span></span><br><span class="line">                <span class="keyword">if</span> (isRunningOnLooperThreadLocked()) &#123; <span class="comment">// 当运行在 Looper 线程，则立刻调度 vsync</span></span><br><span class="line">                    scheduleVsyncLocked();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123; <span class="comment">// 切换到主线程，调度 vsync</span></span><br><span class="line">                    <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> mHandler.obtainMessage(MSG_DO_SCHEDULE_VSYNC);</span><br><span class="line">                    msg.setAsynchronous(<span class="literal">true</span>);</span><br><span class="line">                    mHandler.sendMessageAtFrontOfQueue(msg);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果没有 VSYNC 的同步，则发送消息刷新画面</span></span><br><span class="line">                <span class="keyword">final</span> <span class="type">long</span> <span class="variable">nextFrameTime</span> <span class="operator">=</span> Math.max(</span><br><span class="line">                        mLastFrameTimeNanos / TimeUtils.NANOS_PER_MS + sFrameDelay, now);</span><br><span class="line">                <span class="keyword">if</span> (DEBUG_FRAMES) &#123;</span><br><span class="line">                    Log.d(TAG, <span class="string">&quot;Scheduling next frame in &quot;</span> + (nextFrameTime - now) + <span class="string">&quot; ms.&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> mHandler.obtainMessage(MSG_DO_FRAME);</span><br><span class="line">                msg.setAsynchronous(<span class="literal">true</span>);</span><br><span class="line">                mHandler.sendMessageAtTime(msg, nextFrameTime);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">FrameHandler</span> <span class="keyword">extends</span> <span class="title class_">Handler</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">FrameHandler</span><span class="params">(Looper looper)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(looper);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleMessage</span><span class="params">(Message msg)</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">                <span class="keyword">case</span> MSG_DO_FRAME: <span class="comment">// 刷新当前这一帧</span></span><br><span class="line">                    doFrame(System.nanoTime(), <span class="number">0</span>, <span class="keyword">new</span> <span class="title class_">DisplayEventReceiver</span>.VsyncEventData());</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> MSG_DO_SCHEDULE_VSYNC: <span class="comment">// 做 VSYNC 的信号同步</span></span><br><span class="line">                    doScheduleVsync();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> MSG_DO_SCHEDULE_CALLBACK: <span class="comment">// 将当前任务加入执行队列</span></span><br><span class="line">                    doScheduleCallback(msg.arg1);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Choreographer.java</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">doFrame</span><span class="params">(<span class="type">long</span> frameTimeNanos, <span class="type">int</span> frame,</span></span><br><span class="line"><span class="params">            DisplayEventReceiver.VsyncEventData vsyncEventData)</span> &#123;</span><br><span class="line">            <span class="comment">// 顺序执行几种类型的事件回调处理</span></span><br><span class="line">            doCallbacks(Choreographer.CALLBACK_INPUT, frameTimeNanos, frameIntervalNanos);</span><br><span class="line">            doCallbacks(Choreographer.CALLBACK_ANIMATION, frameTimeNanos, frameIntervalNanos);</span><br><span class="line">            doCallbacks(Choreographer.CALLBACK_INSETS_ANIMATION, frameTimeNanos, frameIntervalNanos);</span><br><span class="line">            doCallbacks(Choreographer.CALLBACK_TRAVERSAL, frameTimeNanos, frameIntervalNanos);</span><br><span class="line">            doCallbacks(Choreographer.CALLBACK_COMMIT, frameTimeNanos, frameIntervalNanos);</span><br></pre></td></tr></table></figure>

<p>按照顺序执行几种类型的事件回调，这里我们要分析的是 CALLBACK_TRAVERSAL 类型，在 <code>scheduleTraversals()</code> 中传入；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Choreographer.java</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">doCallbacks</span><span class="params">(<span class="type">int</span> callbackType, <span class="type">long</span> frameTimeNanos, <span class="type">long</span> frameIntervalNanos)</span> &#123;</span><br><span class="line">        CallbackRecord callbacks;</span><br><span class="line">        <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Trace.traceBegin(Trace.TRACE_TAG_VIEW, CALLBACK_TRACE_TITLES[callbackType]);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">CallbackRecord</span> <span class="variable">c</span> <span class="operator">=</span> callbacks; c != <span class="literal">null</span>; c = c.next) &#123;</span><br><span class="line">                <span class="keyword">if</span> (DEBUG_FRAMES) &#123;</span><br><span class="line">                    Log.d(TAG, <span class="string">&quot;RunCallback: type=&quot;</span> + callbackType</span><br><span class="line">                            + <span class="string">&quot;, action=&quot;</span> + c.action + <span class="string">&quot;, token=&quot;</span> + c.token</span><br><span class="line">                            + <span class="string">&quot;, latencyMillis=&quot;</span> + (SystemClock.uptimeMillis() - c.dueTime));</span><br><span class="line">                &#125;</span><br><span class="line">                c.run(frameTimeNanos);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Choreographer.java</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">CallbackRecord</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> CallbackRecord next;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">long</span> dueTime;</span><br><span class="line">        <span class="keyword">public</span> Object action; <span class="comment">// Runnable or FrameCallback</span></span><br><span class="line">        <span class="keyword">public</span> Object token;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@UnsupportedAppUsage(maxTargetSdk = Build.VERSION_CODES.R, trackingBug = 170729553)</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(<span class="type">long</span> frameTimeNanos)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (token == FRAME_CALLBACK_TOKEN) &#123;</span><br><span class="line">                ((FrameCallback)action).doFrame(frameTimeNanos);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ((Runnable)action).run();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><code>CallbackRecord.run()</code> 直接运行封装的 <code>Runnable.run()</code>，而 <code>scheduleTraversals()</code> 中传入的 Runnable 是 TraversalRunnable，所以这里回调执行到 <code>TraversalRunnable.run()</code>；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ViewRootImpl.java</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">TraversalRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            doTraversal();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">TraversalRunnable</span> <span class="variable">mTraversalRunnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TraversalRunnable</span>();</span><br></pre></td></tr></table></figure>

<p>调用 <code>doTraversal()</code>；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ViewRootImpl.java</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">doTraversal</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mTraversalScheduled) &#123;</span><br><span class="line">            mTraversalScheduled = <span class="literal">false</span>;</span><br><span class="line">            mHandler.getLooper().getQueue().removeSyncBarrier(mTraversalBarrier); <span class="comment">// 移除同步屏障</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (mProfile) &#123;</span><br><span class="line">                Debug.startMethodTracing(<span class="string">&quot;ViewAncestor&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            performTraversals();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (mProfile) &#123;</span><br><span class="line">                Debug.stopMethodTracing();</span><br><span class="line">                mProfile = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>做了两件事：</p>
<ul>
<li>移除同步消息屏障；</li>
<li>调用 <code>performTraversals()</code> ；</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ViewRootImpl.java</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">performTraversals</span><span class="params">()</span> &#123;</span><br></pre></td></tr></table></figure>

<p><code>performTraversals()</code> 方法向 WMS 申请了 Surface、测量（measure）、布局（layout）、绘制（draw）三大流程，此文暂不分析；<a href="https://blog.csdn.net/qq_41095045/article/details/122510861">参考</a></p>
<h3 id="2-2-2-Session-addToDisplayAsUser"><a href="#2-2-2-Session-addToDisplayAsUser" class="headerlink" title="2.2.2 Session.addToDisplayAsUser()"></a>2.2.2 Session.addToDisplayAsUser()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Session.java</span></span><br><span class="line">    <span class="keyword">final</span> WindowManagerService mService;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">addToDisplayAsUser</span><span class="params">(IWindow window, WindowManager.LayoutParams attrs,</span></span><br><span class="line"><span class="params">            <span class="type">int</span> viewVisibility, <span class="type">int</span> displayId, <span class="type">int</span> userId, InsetsVisibilities requestedVisibilities,</span></span><br><span class="line"><span class="params">            InputChannel outInputChannel, InsetsState outInsetsState,</span></span><br><span class="line"><span class="params">            InsetsSourceControl[] outActiveControls)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mService.addWindow(<span class="built_in">this</span>, window, attrs, viewVisibility, displayId, userId,</span><br><span class="line">                requestedVisibilities, outInputChannel, outInsetsState, outActiveControls);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>mService 是 WMS 对象，直接调用 <code>WMS.addWindow()</code>；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// WindowManagerService.java</span></span><br><span class="line">    <span class="keyword">final</span> HashMap&lt;IBinder, WindowState&gt; mWindowMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">addWindow</span><span class="params">(Session session, IWindow client, ...)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="type">WindowState</span> <span class="variable">parentWindow</span> <span class="operator">=</span> <span class="literal">null</span>; <span class="comment">// WindowState 对象</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">callingUid</span> <span class="operator">=</span> Binder.getCallingUid();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">callingPid</span> <span class="operator">=</span> Binder.getCallingPid();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">long</span> <span class="variable">origId</span> <span class="operator">=</span> Binder.clearCallingIdentity();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">type</span> <span class="operator">=</span> attrs.type;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (mGlobalLock) &#123;</span><br><span class="line">            ...</span><br><span class="line">            <span class="keyword">if</span> (type &gt;= FIRST_SUB_WINDOW &amp;&amp; type &lt;= LAST_SUB_WINDOW) &#123;</span><br><span class="line">                <span class="comment">// 1. 以 token 为 key 从 mWindowMap 中获取 WindowState 对象</span></span><br><span class="line">                parentWindow = windowForClientLocked(<span class="literal">null</span>, attrs.token, <span class="literal">false</span>);</span><br><span class="line">                ...</span><br><span class="line">            &#125;</span><br><span class="line">            ...</span><br><span class="line">            <span class="type">ActivityRecord</span> <span class="variable">activity</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">hasParent</span> <span class="operator">=</span> parentWindow != <span class="literal">null</span>;</span><br><span class="line">            <span class="type">WindowToken</span> <span class="variable">token</span> <span class="operator">=</span> displayContent.getWindowToken(</span><br><span class="line">                    hasParent ? parentWindow.mAttrs.token : attrs.token);</span><br><span class="line">            ...</span><br><span class="line">            <span class="comment">// 2. 以 parentWindow 创建 WindowState</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">WindowState</span> <span class="variable">win</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WindowState</span>(<span class="built_in">this</span>, session, client, token, parentWindow,</span><br><span class="line">                    appOp[<span class="number">0</span>], attrs, viewVisibility, session.mUid, userId,</span><br><span class="line">                    session.mCanAddInternalSystemWindow);</span><br><span class="line">            ...</span><br><span class="line">            win.attach(); <span class="comment">// 3. 调用 attach</span></span><br><span class="line">            mWindowMap.put(client.asBinder(), win);</span><br><span class="line">            ...</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>主要工作：</p>
<ul>
<li>创建 WindowState 对象，用来描述与 W 对象所关联的 Activity 的窗口状态，并且以后会通过这个 W 对象来控制对应的 Activity 的窗口状态；</li>
<li>调用 WindowState.attach() ；</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// WindowState.java</span></span><br><span class="line">    <span class="keyword">final</span> Session mSession;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">attach</span><span class="params">()</span> &#123;</span><br><span class="line">        mSession.windowAddedLocked();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>继续调用 <code>Session.windowAddedLocked()</code> ；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Session.java</span></span><br><span class="line">    SurfaceSession mSurfaceSession;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">windowAddedLocked</span><span class="params">()</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span> (mSurfaceSession == <span class="literal">null</span>) &#123;</span><br><span class="line">            mSurfaceSession = <span class="keyword">new</span> <span class="title class_">SurfaceSession</span>(); <span class="comment">// 创建 SurfaceSession 对象</span></span><br><span class="line">            mService.mSessions.add(<span class="built_in">this</span>);</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">        mNumWindow++;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h1 id="3-总结"><a href="#3-总结" class="headerlink" title="3 总结"></a>3 总结</h1><p> <img src="https://raw.githubusercontent.com/rangerzhou/ImageHosting/master/blog_resource/2022/Activity_Window_DecorView.png"></p>
<p>每个 Activity 中有个 Window 对象，用来描述程序窗口，每个窗口又包含一个 View 对象，用来描述程序视图；</p>
<p>performLaunchActivity() 时<font color=red><strong>通过 attach() 方法生成 PhoneWindow 对象，生成 WindowManager（其实为 WindowManagerImpl 对象）并和 mWindow 绑定</strong></font>，在 onCreate() 中会 调用 PhoneWindow.setContentView()，</p>
<ul>
<li><font color=red><strong>在 <code>setContentView()</code> 创建了 DecorView</strong></font>，并关联了 PhoneWindow 对象（PhoneWindow 和 DecorView 互相持有）；</li>
<li>然后根据主题获取样式信息，根据样式加载对应的布局到 DecorView；</li>
<li>再从 DecorView 中通过 <code>findViewById()</code> 获取并返回 id 为 <code>R.id.content</code> 的 View （contentParent ）给到 <code>PhoneWindow.mContentParent</code> ；</li>
<li>最后把 setContentView() 传入的 View 添加到 PhoneWindow.mContentParent，只是把需要添加的 View添加保存在了 DecorView 中，但是还没绘制；</li>
</ul>
<p>在 performResumeActivity() 阶段通过 WindowManager.addView() 把 DecorView 添加到 Window 里，真正干活的是 WindowManagerGlobal，在其中创建了 ViewRootImpl，VRI 包含了 mWindowSession:Session 对象用于 Activity 向 WMS 通信，也包含了 mWindow:W 对象用于 WMS 向 Activity 通信，然后通过 setView() 实现 addView()，把视图交给 WindowManager 管理，</p>
<ul>
<li>在其中通过 requestLayout() 触发第一次绘制，向 WMS 申请 Surface；</li>
<li>然后再通过 WMS.addWindow() 在 WMS 中创建一个与 Window 相关的 WindowState 对象，WMS 管理所有的 Window 的层级、位置、大小，掌管 Surface 的显示顺序、位置、大小，应用端在分配的 Surface 绘制完成后，SurfaceFlinger 把这些 Surface 图像按 WMS 中的层级、位置、大小等进行合成，最终写屏幕的缓冲区显示出来；</li>
</ul>
<p>AMS、Activity、WMS建立连接的过程如下：</p>
<ul>
<li>Activity 启动时，AMS 服务会在服务端创建一个 ActivityRecord 对象；</li>
<li>AMS 使用 ActivityRecord（实现接口 IApplicationToken）为参数请求 WMS，WMS 为 Activity 组件创建一个 AppWindowToken 对象，ActivityRecord 对象被保存在 AppWindowToken 对象的成员变量 appToken 中；</li>
<li>于是在启动完成该 Activity 组件后，WMS 获得了一个 ActivityRecord 对象和一个对应的 W 对象；</li>
<li>WMS 会根据 AppWindowToken 对象以及 W 对象，为 Activity 创建一个 WindowState 对象，并且将 AppWindowToken 对象保存在 WindowState 对象的mAppToken中；</li>
<li>每一个 Activity 组件，在 ActivityManagerService 服务内部都有一个对应的 ActivityRecord 对象，并且在 WindowManagerService 服务内部关联有一个AppWindowToken 对象；</li>
</ul>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>Android - WMS系列之启动流程</title>
    <url>/2022/02/20/Android/AndroidDevelop_019_WMS01_Boot/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="de9841aafc0b8147b316df6276bd01757e62683f9f009d662c0efac4378ed6d9">8a594f550020b2c4c53139d4c120877c670d47411eb78fc0c4abbfbe587bcfe2cb113c41bfd328c5065f6f2b39026d346a12ba8473dca30b30f240c25870a030489e615608fa9f6e76f98000ee177152e76d6a95c217e988b4d906c34b48bd06c561fecb61502376067f4deb2da17be1dcbae3e86c8e69f0e1e448dfd4040abf79f321fb32109ecc1343fcac9e185e6d4544677b561fc43351e23ea5518574b2139e272c97b707a613cb5296f5b3e348b5c8d88480ff605033b6598baa43b3225d7173fa010cb6f3d7f9524f0af91f4443071921465f954317130cef99ab094885d44414fa40e44effe17f7a3c69c8dbd50e8a7985ceed135d184c0f061dd66cdd5ce7c1470033e87b22bc8db3dfd0e4c4c5869bd579acfdfdad9db03e4d4fb5a835bdd8136c6d9044da70436e7175159ee19c4f4f420767ffdf3ecda374f4dbe9796a3dde3e8b23cf7117dc29041c9ec4f8cc29ecf2b535a13eac25a8dd0c9282fcdc64967ecc65741c56d16b7b9d01501d7092f2ec504ca15b09003db48e6b7cf27f6f749e5ad184a76e61cee6ebb55fc4f18f3d26c5967e3d1b8b86ee38053090d43c651bbba4824c6fc413c65f65e3a32dda40958ca321b33bf1eebd8bb922b1edc7ef12b976c6e6ebe764b4c2f2f1c8abb1adfc0d82cfd667de8c2f4a8d584007ec88c2318d39cebfdd366ddfad8e926632fc6de550edbd1eb24aaa57f4085ed66d20ccf3c88b78773778fd1e0ac415a33e2739f40ad947da22bff8392f344b711870f1f714b9debb60795b6e1a1b05ba4c5ec93f19a980f8e30511abfae1d58bec292ddddaa939ff05dac9f91942c5906334cf1726e566638555a3365a5d6f560236f2004ab266db26760463494b5a24e4ad1f79eeb3c019b84cc4756bc91e1eec9203c020f06b25b09d02b40224302965ca9c78ad85dd5a4c77281bbaa107c22dbe03b91d8c63e74be3e0cf0d0d571d20efd1d14e6b149daeab9945dab918409769e9b45ade8cbfc36d117b2448628457df3c0eec78f4b55805f40e6534fdc8b826e96054424861b5f793f00d7dcecaecf063c55ea90aef7d148d1b0eaacf0e6d04ed82e2ceddced3b60ff40df579143c7b5cc490ea70aa5b603b88771c65e49a849a7d5b0fd3a96c14e8048ef7ade7a49acdc0d3e810d8c4e8b3290b35c073b61d6aad14edce0603aad8616eb212dd3c2054a229cf2b7efbca835cecdfd152cc60c4521905949151236b981a4e829aea9520094e9355be0fc8634fed31a2f29df7018ef73855242488d01d1453b4ef2cba1e43476fe21e176d17f500d9e32fbc6c50250f194e8ded09824cf0c512edf285dac6b7efddc7819bf0ba0023950b3a3a2bbbbceffd1c70176673538f28e4f9b9a54297af80699155465b3b8416c829e093411d44b19aa65e20222bbc47e0cbc0bf03ef6aeb1fa1cb01723c40198405d2fd416cefad35ee1cb119b732705459442ea4de1ee8883bee99780bfa476ed637f4c45092a8371e5931e278c7ab482bd560c7281b060dfed4d2b660e7438fbde049480f44e3996155db9281e2c8788875feb274633e4a20d095d5a3a22c0338d08b5c107b90921572721d3b0c6d013bcca7c496b61c7f42e8ed1f3bab566804daf1254fa98235cc94e9e538aa1932962546b60730fcb06221b785da8a5997d94158f648836df2b2302f1f71b8f349c77de8a7f5b59cf3f45b7ace250f2c270df493884e88b2af2b6541c9f295fec1ff4cbb6be957f2dc0be87265655b1e30393e48a312aee43ae8daeec47f305fb7291f9bf216f5afaf7c621bb2c7f624047607af2e96f3343194459468c3db9446f27395140d79424214dcf9602dfc1a7becacc90d72727ef2dffb1c6febdc4c14b17e028ec2df07f5a8fca9de5321d2cc7b4f952f86294043e9b6538a8306babfccdffdda73a70d8082bd11b09c9815155b89924f6b02d7ab88fb1f30b878dc377c3c5c83d034b4a7925b36099cf0510c09345800b6a40eb589694965f5076c19cb4466a1a5c21ca71a072ea78d7c9c477b23cb1efc84a00d06d336c12ca72a4564e3dec088ef9eb8f3daddbbb899910f0d74a28dd4d9a2a9e99207122ce302cffe898d7ec85c946204d9c62650a20e106e78d0f218a4008a3c5dd84f64eb0510c831c96e8b7097fbc0324d4faed5804a6c4ef90786773696c8b4dac81c2f6e810824f7c760fc0dd0ae3794a0d439a44a725a19b6971306842500c80ec9ca408f0974becb63af96e0cc18ab848c5b473794762e39f157d18a80f569e88b30c52bb6b4c413d803c85c47f224225c05f7409eb856357defb984c73c55ce521aaf016af85054f62421c3d1621ddbf262135c79ccad95f986104342c7ae59f2fdb7552f32dbd2523a8025e20686b44839f44c215b224f5c2839da054b50d966640b38c6b9b03c8e5352b6441ade3af94715f4587f05cc571d1704d95343cd0d56c48aa1f6242cf3c9c2e27783bde52138834c57ffecfd227d62bee057bd7b1a4890ff0c863470c212c585b86fef5f60bc4bb6fdf0d7dfb68c8e5f57ea60f1595ddc375d3145ef6fba7253b10ff946125872bfa67860d6615f2d84f5c9c49982782781f2a7ed507db33531cd6042357c140453aadd5a3d0f30cf18e4fdc828384f164975b7304d6105848fed2d04b8993e1d232192e1c9791dffa471a71e97c9ba48295ebec60bbb27990e0a65b8f7cb1cc4d08f4db6b513bc30f6e78ef9eda7e54e3c094d007de5f63996e398f643c9e7ce6733bd9fc5d48078c109280318acf14dbd49bdaac703109e406ede9864399753759b0825b2512cdb90e597b36857d01341721a4179524164390cd46b27416ea8f90410c879f075db138b26358df942a1ba2fe9c25d55e6b5233988710764805ce10ce7e8eab5276b860cbd262a01c4530661ce55fa8ecf5ca2ea54caf3d5d1fc9d34defac292eba243bdeb703c0048bcd9af2327a32d9ddb1569c4f554f9ed5afafb352ab60c061d3b729197253ab833e5a3d5a095fa81eed4255f6fcf4e9207ec6f3813a777358c17e20435c699c2a7618b24e7a5a3f7a66e3830e7b65bfa321d1d7b88389396876082f08c479d32883f5bc87a5c93555b1d5da61b7cae69288bd354237cd98b6b1095b53889b2c6c0a741acbf78ba37412d776f07e93122ed46d287260bcb058270bd699def4f03a364403be834ba1b86c3df4d134470d990f941503927f21ad302f2a1ec8e846ce245c5a21df1d4f924ca2336656dabc959b8947e66717fa0ab5190b05430ffc8a3e1037a38f8c91165a4b26ccff30226a07091969c4da181e1a41c37f1ad5d432274394cf0ea164960a4949e0f70e3cb222cbdc0009973c4f3f8f2e78d40b392948a284c5a1b1de63ee95abdfef3c510d71682448eb930691d8a5b5c757dc2ff47d1bb1cddee92509938d0982372c99a711939e25d96e47f21f63a6af878e8b5554c8b6e0d22477d190648fd0a81c2cbdbfd05e1a16d72b76793cafe5df176e21620937c020e8184e3339e61c5108cefedf91ef17cc2809945110d1fc1a802d0d60c1f09c9639630539dfebda481136314ed41a548d4690b710829a623d91afb26c508f742a776adcfc8327c1488ef53ec564e03755b9217f0b2c3400d274e6251ea66bcae01cabf401b617075293ff290cea406fe152d254c36a1133ed6d592291ad0f0e0ec3367b21d2006a62e684c91fd3424fb4fef6029a9131804318e30b6ab7604976f805c25b4eed81c91cb0aaeed444e1b50a603b2d9e93ac2a1a75d9f7502d3ff846d2bd0a77c1f9bebe85e67973d28f404951416d08c220d966b302fab7a207360a739faa3847fe5a0e246bc5d671ac30ebb32f223edc2df5fe6bc8bb2f458957238565b4d47a670e0fb6716fe196ec50568f032b58f04c8d9b14cab39ff50d5486fcf2719c735f493f648108c85f5bf89c03d47e258efdccf8c98a33897cceddd2c298997b7074bd4d110fc7052a8f09f95ad0db65de81e0ff6</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>Android - PackageManagerService 简析</title>
    <url>/2022/01/12/Android/AndroidDevelop_016_PKMS/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>PackageManagerService（PKMS）是 Android 系统中的核心服务之一，负责应用程序的安装、卸载、信息查询等工作，本文简要分析 PKMS 的启动和安装应用过程，源码基于 android-12.1.0_r4；</p>
</blockquote>
<span id="more"></span>

<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h2><p>Android 系统启动时，会启动 PKMS，此服务负责扫描系统中特定的目录，寻找里面的 APK 格式文件，并对这些文件进行解析，然后得到应用程序相关信息，会全面解析应用程序的 AndroidManifest.xml，得到 Activity &#x2F; Service &#x2F; BroadcastReceiver &#x2F; ContentProvider 等信息，最后完成应用程序的安装。</p>
<h2 id="2-PKMS-启动"><a href="#2-PKMS-启动" class="headerlink" title="2 PKMS 启动"></a>2 PKMS 启动</h2><p>PKMS 属于 system_server 进程，在 Zygote 启动 system_server 的时候在 SystemServer.main() 中启动了近百个系统服务；</p>
<h3 id="2-1-SystemServer-main"><a href="#2-1-SystemServer-main" class="headerlink" title="2.1 SystemServer.main()"></a>2.1 SystemServer.main()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SystemServer.java</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">SystemServer</span>().run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// Start services.</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            t.traceBegin(<span class="string">&quot;StartServices&quot;</span>);</span><br><span class="line">            startBootstrapServices(t); <span class="comment">// 启动引导服务</span></span><br><span class="line">            startCoreServices(t); <span class="comment">// 启动核心服务</span></span><br><span class="line">            startOtherServices(t); <span class="comment">// 启动其他服务</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">startBootstrapServices</span><span class="params">(<span class="meta">@NonNull</span> TimingsTraceAndSlog t)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="type">Installer</span> <span class="variable">installer</span> <span class="operator">=</span> mSystemServiceManager.startService(Installer.class); <span class="comment">// 1.启动 installer</span></span><br><span class="line">        <span class="comment">// Only run &quot;core&quot; apps if we&#x27;re encrypting the device.</span></span><br><span class="line">        <span class="comment">// 2.如果设备加密，只运行核心 app</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">cryptState</span> <span class="operator">=</span> VoldProperties.decrypt().orElse(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (ENCRYPTING_STATE.equals(cryptState)) &#123;</span><br><span class="line">            Slog.w(TAG, <span class="string">&quot;Detected encryption in progress - only parsing core apps&quot;</span>);</span><br><span class="line">            mOnlyCore = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ENCRYPTED_STATE.equals(cryptState)) &#123;</span><br><span class="line">            Slog.w(TAG, <span class="string">&quot;Device encrypted - only parsing core apps&quot;</span>);</span><br><span class="line">            mOnlyCore = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        t.traceBegin(<span class="string">&quot;StartPackageManagerService&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123; <span class="comment">// 3.启动 PKMS</span></span><br><span class="line">            Watchdog.getInstance().pauseWatchingCurrentThread(<span class="string">&quot;packagemanagermain&quot;</span>);</span><br><span class="line">            mPackageManagerService = PackageManagerService.main(mSystemContext, installer,</span><br><span class="line">                    domainVerificationService, mFactoryTestMode != FactoryTest.FACTORY_TEST_OFF,</span><br><span class="line">                    mOnlyCore);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            Watchdog.getInstance().resumeWatchingCurrentThread(<span class="string">&quot;packagemanagermain&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        mFirstBoot = mPackageManagerService.isFirstBoot();</span><br><span class="line">        <span class="comment">// 4.如果设备没有加密，启动 OtaDexOptService 服务</span></span><br><span class="line">        <span class="keyword">if</span> (!mOnlyCore) &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">disableOtaDexopt</span> <span class="operator">=</span> SystemProperties.getBoolean(<span class="string">&quot;config.disable_otadexopt&quot;</span>,</span><br><span class="line">                    <span class="literal">false</span>);</span><br><span class="line">            <span class="keyword">if</span> (!disableOtaDexopt) &#123;</span><br><span class="line">                t.traceBegin(<span class="string">&quot;StartOtaDexOptService&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Watchdog.getInstance().pauseWatchingCurrentThread(<span class="string">&quot;moveab&quot;</span>);</span><br><span class="line">                    OtaDexoptService.main(mSystemContext, mPackageManagerService);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                    ...</span><br></pre></td></tr></table></figure>

<p>上述代码主要做了四件事：</p>
<ul>
<li>启动 installer：阻塞等待 installer 启动完成，以便有机会创建具有适当权限的关键目录，比如 <em>&#x2F;data&#x2F;user</em>；</li>
<li>检查设备是否加密：如果加密了，则只解析 core 应用，并配置 <code>mOnlyCore = true</code>，后续会多次使用该变量进行条件判断；</li>
<li>初始化 PKMS：调用 PKMS.main() 初始化 PKMS；</li>
<li>启动 OtaDexOptService 服务：如果设备没有加密则启动 dex 服务；</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SystemServer.java</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">startOtherServices</span><span class="params">(<span class="meta">@NonNull</span> TimingsTraceAndSlog t)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span> (!mOnlyCore) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 5.如果设备没有加密，执行 performDexOptUpgrade，完成 dex 优化</span></span><br><span class="line">                mPackageManagerService.updatePackagesIfNeeded();</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123; <span class="comment">// 6.执行 performFstrimIfNeeded，完成磁盘维护</span></span><br><span class="line">            mPackageManagerService.performFstrimIfNeeded();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 7.PKMS 准备就绪</span></span><br><span class="line">        t.traceBegin(<span class="string">&quot;MakePackageManagerServiceReady&quot;</span>);</span><br><span class="line">        mPackageManagerService.systemReady();</span><br><span class="line">        t.traceEnd();</span><br></pre></td></tr></table></figure>

<p>在 <code>startOtherServices()</code> 中继续有 PKMS 的相关操作：</p>
<ul>
<li>执行 dex 优化；</li>
<li>完成磁盘维护；</li>
<li>PKMS 准备就绪；</li>
</ul>
<h3 id="2-2-PKMS-main"><a href="#2-2-PKMS-main" class="headerlink" title="2.2 PKMS.main()"></a>2.2 PKMS.main()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> PackageManagerService <span class="title function_">main</span><span class="params">(Context context, Installer installer,</span></span><br><span class="line"><span class="params">        <span class="meta">@NonNull</span> DomainVerificationService domainVerificationService, <span class="type">boolean</span> factoryTest,</span></span><br><span class="line"><span class="params">        <span class="type">boolean</span> onlyCore)</span> &#123;</span><br><span class="line">    PackageManagerServiceCompilerMapping.checkProperties(); <span class="comment">// 1.检查 package 编译相关属性</span></span><br><span class="line">    <span class="type">Injector</span> <span class="variable">injector</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Injector</span>(</span><br><span class="line">            ...</span><br><span class="line">            (i, pm) -&gt; PermissionManagerService.create(context,</span><br><span class="line">                    i.getSystemConfig().getAvailableFeatures()),</span><br><span class="line">            (i, pm) -&gt; <span class="keyword">new</span> <span class="title class_">UserManagerService</span>(context, pm,</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">UserDataPreparer</span>(installer, installLock, context, onlyCore),</span><br><span class="line">                    lock),</span><br><span class="line">            (i, pm) -&gt; <span class="keyword">new</span> <span class="title class_">Settings</span>(Environment.getDataDirectory(),</span><br><span class="line">                    RuntimePermissionsPersistence.createInstance(),</span><br><span class="line">                    i.getPermissionManagerServiceInternal(),</span><br><span class="line">                    domainVerificationService, lock),</span><br><span class="line">            ...</span><br><span class="line">            (i, pm) -&gt; <span class="keyword">new</span> <span class="title class_">PackageInstallerService</span>(</span><br><span class="line">                    i.getContext(), pm, i::getScanningPackageParser),</span><br><span class="line">            ...</span><br><span class="line">    <span class="type">PackageManagerService</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PackageManagerService</span>(injector, onlyCore, factoryTest,</span><br><span class="line">            Build.FINGERPRINT, Build.IS_ENG, Build.IS_USERDEBUG, Build.VERSION.SDK_INT,</span><br><span class="line">            Build.VERSION.INCREMENTAL);<span class="comment">// 2.调用 PKMS 构造函数</span></span><br><span class="line">    <span class="comment">// 3.注册 PMS/PMN 到 servicemanager</span></span><br><span class="line">    ServiceManager.addService(<span class="string">&quot;package&quot;</span>, m);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">PackageManagerNative</span> <span class="variable">pmn</span> <span class="operator">=</span> m.<span class="keyword">new</span> <span class="title class_">PackageManagerNative</span>();</span><br><span class="line">    ServiceManager.addService(<span class="string">&quot;package_native&quot;</span>, pmn);</span><br></pre></td></tr></table></figure>

<p>创建了一个 Injector 对象，其中使用 Singleton 的模式初始化了很多变量，传递到 PKMS 的构造函数中；</p>
<h3 id="2-3-PKMS-构造函数"><a href="#2-3-PKMS-构造函数" class="headerlink" title="2.3 PKMS 构造函数"></a>2.3 PKMS 构造函数</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// PackageManagerService.java</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PackageManagerService</span><span class="params">(Injector injector, <span class="type">boolean</span> onlyCore, <span class="type">boolean</span> factoryTest,</span></span><br><span class="line"><span class="params">            <span class="keyword">final</span> String buildFingerprint, <span class="keyword">final</span> <span class="type">boolean</span> isEngBuild,</span></span><br><span class="line"><span class="params">            <span class="keyword">final</span> <span class="type">boolean</span> isUserDebugBuild, <span class="keyword">final</span> <span class="type">int</span> sdkVersion, <span class="keyword">final</span> String incrementalVersion)</span> &#123;</span><br><span class="line">        mLock = injector.getLock();</span><br><span class="line">        <span class="comment">// mInstallLock 用来保护所有安装 APK 的访问权限，此操作通常涉及繁重的磁盘数据读写等操作，并且是单线程操作，故有时候会处理很慢</span></span><br><span class="line">        <span class="comment">// 此锁不会在已经持有 mLock 锁的情况下获得，反之，在已经持有 mInstallLock 锁的情况下，立即获取 mLock 是安全的</span></span><br><span class="line">        mInstallLock = injector.getInstallLock();</span><br><span class="line">        LockGuard.installLock(mLock, LockGuard.INDEX_PACKAGES);</span><br><span class="line">        <span class="comment">// 阶段1：BOOT_PROGRESS_PMS_START</span></span><br><span class="line">        EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_PMS_START, SystemClock.uptimeMillis());</span><br><span class="line">            <span class="comment">// 阶段2：BOOT_PROGRESS_PMS_SYSTEM_SCAN_START</span></span><br><span class="line">            EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_PMS_SYSTEM_SCAN_START,</span><br><span class="line">                    startTime);</span><br><span class="line">            <span class="comment">// 阶段3:BOOT_PROGRESS_PMS_DATA_SCAN_START</span></span><br><span class="line">            <span class="keyword">if</span> (!mOnlyCore) &#123;</span><br><span class="line">                EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_PMS_DATA_SCAN_START, SystemClock.uptimeMillis());</span><br><span class="line">            <span class="comment">// 阶段4：BOOT_PROGRESS_PMS_SCAN_END</span></span><br><span class="line">            EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_PMS_SCAN_END, SystemClock.uptimeMillis());</span><br><span class="line">            <span class="comment">// 阶段5：BOOT_PROGRESS_PMS_READY</span></span><br><span class="line">            EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_PMS_READY, SystemClock.uptimeMillis());</span><br></pre></td></tr></table></figure>

<p>PKMS 构造函数分为了 5 个阶段：</p>
<ul>
<li>BOOT_PROGRESS_PMS_START：构造 DisplayMetrics 保存分辨率信息，创建 mPermissionManager 进行管理权限，创建 mSettings 来保存安装包信息；</li>
<li>BOOT_PROGRESS_PMS_SYSTEM_SCAN_START：扫描系统 apk（system&#x2F;vendor&#x2F;product 等目录），清除安装时的临时文件和其他不需要的信息；</li>
<li>BOOT_PROGRESS_PMS_DATA_SCAN_START：扫描 data 目录 apk，</li>
<li>BOOT_PROGRESS_PMS_SCAN_END：OTA 升级后首次启动要清除不必要的缓存数据，</li>
<li>BOOT_PROGRESS_PMS_READY</li>
</ul>
<h4 id="2-3-1-第一阶段-BOOT-PROGRESS-PMS-START"><a href="#2-3-1-第一阶段-BOOT-PROGRESS-PMS-START" class="headerlink" title="2.3.1 第一阶段 BOOT_PROGRESS_PMS_START"></a>2.3.1 第一阶段 BOOT_PROGRESS_PMS_START</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// PackageManagerService.java</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PackageManagerService</span><span class="params">(...)</span> &#123;</span><br><span class="line">        <span class="comment">// 阶段1：BOOT_PROGRESS_PMS_START</span></span><br><span class="line">        EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_PMS_START, SystemClock.uptimeMillis());</span><br><span class="line">        mOnlyCore = onlyCore; <span class="comment">// 标注是否只加载</span></span><br><span class="line">        mMetrics = injector.getDisplayMetrics(); <span class="comment">// 保存分辨率等信息</span></span><br><span class="line">        mInstaller = injector.getInstaller();</span><br><span class="line">        mPermissionManager = injector.getPermissionManagerServiceInternal(); <span class="comment">// 用来进行权限管理</span></span><br><span class="line">        mSettings = injector.getSettings(); <span class="comment">// mSettings 保存安装包信息</span></span><br><span class="line">        <span class="comment">// </span></span><br><span class="line">        mSettings.addSharedUserLPw(<span class="string">&quot;android.uid.system&quot;</span>, Process.SYSTEM_UID,</span><br><span class="line">                ApplicationInfo.FLAG_SYSTEM, ApplicationInfo.PRIVATE_FLAG_PRIVILEGED);</span><br><span class="line">        mSettings.addSharedUserLPw(<span class="string">&quot;android.uid.phone&quot;</span>, RADIO_UID,...);</span><br><span class="line">        mSettings.addSharedUserLPw(<span class="string">&quot;android.uid.log&quot;</span>, LOG_UID,...);</span><br><span class="line">        mSettings.addSharedUserLPw(<span class="string">&quot;android.uid.nfc&quot;</span>, NFC_UID,...);</span><br><span class="line">        mSettings.addSharedUserLPw(<span class="string">&quot;android.uid.bluetooth&quot;</span>, BLUETOOTH_UID,...);</span><br><span class="line">        mSettings.addSharedUserLPw(<span class="string">&quot;android.uid.shell&quot;</span>, SHELL_UID,...);</span><br><span class="line">        mSettings.addSharedUserLPw(<span class="string">&quot;android.uid.se&quot;</span>, SE_UID,...);</span><br><span class="line">        mSettings.addSharedUserLPw(<span class="string">&quot;android.uid.networkstack&quot;</span>, NETWORKSTACK_UID,...);</span><br><span class="line">        mSettings.addSharedUserLPw(<span class="string">&quot;android.uid.uwb&quot;</span>, UWB_UID,...);</span><br><span class="line">        <span class="comment">// 用于处理 dex 优化</span></span><br><span class="line">        mPackageDexOptimizer = injector.getPackageDexOptimizer();</span><br><span class="line">        mDexManager = injector.getDexManager();</span><br></pre></td></tr></table></figure>

<p>利用 Injector 初始化一些实例，构造 DisplayMetrics，用于保存分辨率；创建 Installer 用于与 installd 交互；创建 mPermissionManager 进行权限管理；构造 Settings 类，保存安装包信息，清除路径不存在的孤立应用，给 mSettings 添加 system&#x2F;phone&#x2F;log&#x2F;nfc&#x2F;bluetooth&#x2F;shell&#x2F;se&#x2F;networkstack&#x2F;uwb 9 种 shareUserId 到 mSettings（<strong>sharedUserId 属性相同的 package 可以运行在同一个进程中，或者相互读取资源</strong>），Settings 可以看做是一个数据动态管理类，它主要会管理 packages.xml 文件中的信息；构造 PackageDexOptimizer 及 DexManager 类，处理 dex 优化；重点看一下 Settings 类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// frameworks/base/services/core/java/com/android/server/pm/Settings.java</span></span><br><span class="line">    Settings(File dataDir, RuntimePermissionsPersistence runtimePermissionsPersistence,</span><br><span class="line">            LegacyPermissionDataProvider permissionDataProvider,</span><br><span class="line">            <span class="meta">@NonNull</span> DomainVerificationManagerInternal domainVerificationManager,</span><br><span class="line">            <span class="meta">@NonNull</span> PackageManagerTracedLock lock)  &#123;</span><br><span class="line">        mPackages = <span class="keyword">new</span> <span class="title class_">WatchedArrayMap</span>&lt;&gt;();</span><br><span class="line">        ...</span><br><span class="line">        mSettingsFilename = <span class="keyword">new</span> <span class="title class_">File</span>(mSystemDir, <span class="string">&quot;packages.xml&quot;</span>);</span><br><span class="line">        mBackupSettingsFilename = <span class="keyword">new</span> <span class="title class_">File</span>(mSystemDir, <span class="string">&quot;packages-backup.xml&quot;</span>);</span><br><span class="line">        mPackageListFilename = <span class="keyword">new</span> <span class="title class_">File</span>(mSystemDir, <span class="string">&quot;packages.list&quot;</span>);</span><br><span class="line">        FileUtils.setPermissions(mPackageListFilename, <span class="number">0640</span>, SYSTEM_UID, PACKAGE_INFO_GID);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">File</span> <span class="variable">kernelDir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/config/sdcardfs&quot;</span>);</span><br><span class="line">        mKernelMappingFilename = kernelDir.exists() ? kernelDir : <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Deprecated: Needed for migration</span></span><br><span class="line">        mStoppedPackagesFilename = <span class="keyword">new</span> <span class="title class_">File</span>(mSystemDir, <span class="string">&quot;packages-stopped.xml&quot;</span>);</span><br><span class="line">        mBackupStoppedPackagesFilename = <span class="keyword">new</span> <span class="title class_">File</span>(mSystemDir, <span class="string">&quot;packages-stopped-backup.xml&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>初始化一些变量指向的路径：</p>
<ul>
<li>mSettingsFilename：指向 <em>&#x2F;data&#x2F;system&#x2F;packages.xml</em>，记录了系统中所有安装应用的基本信息；</li>
<li>mBackupSettingsFilename：指向 <em>&#x2F;data&#x2F;system&#x2F;packages-backup.xml</em>，是 packages.xml 的备份；</li>
<li>mPackageListFilename：指向 <em>&#x2F;data&#x2F;system&#x2F;packages.list</em>，保存了应用的数据目录和 UID 等信息；</li>
<li>mStoppedPackagesFilename：指向 <em>&#x2F;data&#x2F;system&#x2F;packages-stopped.xml</em>，记录系统中所有被强制停止运行的应用的信息；</li>
<li>mBackupStoppedPackagesFilename：指向 <em>&#x2F;data&#x2F;system&#x2F;packages-stopped-backup.xml</em>，是 packages-stopped.xml 的备份；</li>
</ul>
<p>随后在 PKMS 中调用 Settings.readLPw() 对 packages.xml 进行解析</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// PackageManagerService.java </span></span><br><span class="line">            mFirstBoot = !mSettings.readLPw(mInjector.getUserManagerInternal().getUsers(<span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>));</span><br><span class="line"><span class="comment">// Settings.java</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">readLPw</span><span class="params">(<span class="meta">@NonNull</span> List&lt;UserInfo&gt; users)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">                    <span class="comment">// packages-backup.xml两个目录同时存在，则删除 packages.xml</span></span><br><span class="line">                    mSettingsFilename.delete();</span><br><span class="line">                <span class="comment">// 如果 packages-backup.xml 没数据，则读取 packages.xml 中的数据</span></span><br><span class="line">                str = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(mSettingsFilename);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">TypedXmlPullParser</span> <span class="variable">parser</span> <span class="operator">=</span> Xml.resolvePullParser(str); <span class="comment">// xml 解析器，解析 packages.xml</span></span><br><span class="line"></span><br><span class="line">            ...</span><br><span class="line">            <span class="keyword">while</span> ((type = parser.next()) != XmlPullParser.END_DOCUMENT</span><br><span class="line">                    &amp;&amp; (type != XmlPullParser.END_TAG || parser.getDepth() &gt; outerDepth)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 根据 XML 的各个节点进行各种操作，例如读取权限、shared-user等</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">tagName</span> <span class="operator">=</span> parser.getName();</span><br><span class="line">                <span class="keyword">if</span> (tagName.equals(<span class="string">&quot;package&quot;</span>)) &#123;</span><br><span class="line">                    readPackageLPw(parser, users);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tagName.equals(<span class="string">&quot;permissions&quot;</span>)) &#123;</span><br><span class="line">                    mPermissions.readPermissions(parser);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tagName.equals(<span class="string">&quot;permission-trees&quot;</span>)) &#123;</span><br><span class="line">                    mPermissions.readPermissionTrees(parser);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tagName.equals(<span class="string">&quot;shared-user&quot;</span>)) &#123;</span><br><span class="line">                    readSharedUserLPw(parser, users);</span><br><span class="line">                ...</span><br></pre></td></tr></table></figure>



<h4 id="2-3-2-第二阶段-BOOT-PROGRESS-PMS-SYSTEM-SCAN-START"><a href="#2-3-2-第二阶段-BOOT-PROGRESS-PMS-SYSTEM-SCAN-START" class="headerlink" title="2.3.2 第二阶段 BOOT_PROGRESS_PMS_SYSTEM_SCAN_START"></a>2.3.2 第二阶段 BOOT_PROGRESS_PMS_SYSTEM_SCAN_START</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// PackageManagerService.java</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PackageManagerService</span><span class="params">(...)</span> &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> SystemClock.uptimeMillis(); <span class="comment">// 记录扫描开始时间</span></span><br><span class="line"></span><br><span class="line">            EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_PMS_SYSTEM_SCAN_START, startTime); <span class="comment">// 进入第二阶段</span></span><br><span class="line">            ...</span><br><span class="line">                scanDirTracedLI(partition.getOverlayFolder(), ...); <span class="comment">// vender/product/system_ext 下的 overlay 目录</span></span><br><span class="line">            scanDirTracedLI(frameworkDir, ...); <span class="comment">// system/framework</span></span><br><span class="line">                    scanDirTracedLI(partition.getPrivAppFolder(), ...); <span class="comment">// /xxx/priv-app 目录</span></span><br><span class="line">                scanDirTracedLI(partition.getAppFolder(), ...); <span class="comment">// /xxx/app 目录</span></span><br><span class="line">            mSettings.pruneSharedUsersLPw();</span><br><span class="line">            <span class="keyword">final</span> <span class="type">long</span> <span class="variable">systemScanTime</span> <span class="operator">=</span> SystemClock.uptimeMillis() - startTime; <span class="comment">// 计算 system app 扫描时间</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">systemPackagesCount</span> <span class="operator">=</span> mPackages.size(); <span class="comment">// system app 数量</span></span><br></pre></td></tr></table></figure>

<p>调用 scanDirTracedLI() 扫描 system&#x2F;vendor&#x2F;product 等等目录下的 overlay&#x2F;priv-app&#x2F;app 目录；</p>
<h4 id="2-3-3-第三阶段-BOOT-PROGRESS-PMS-DATA-SCAN-START"><a href="#2-3-3-第三阶段-BOOT-PROGRESS-PMS-DATA-SCAN-START" class="headerlink" title="2.3.3 第三阶段 BOOT_PROGRESS_PMS_DATA_SCAN_START"></a>2.3.3 第三阶段 BOOT_PROGRESS_PMS_DATA_SCAN_START</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (!mOnlyCore) &#123;</span><br><span class="line">    EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_PMS_DATA_SCAN_START,</span><br><span class="line">            SystemClock.uptimeMillis()); <span class="comment">// 进入第三阶段</span></span><br><span class="line">    scanDirTracedLI(mAppInstallDir, <span class="number">0</span>, scanFlags | SCAN_REQUIRE_KNOWN, <span class="number">0</span>,</span><br><span class="line">            packageParser, executorService);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 确保 userdata 分区上的系统应用都实际出现</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mExpectingBetter.size(); i++) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="type">AndroidPackage</span> <span class="variable">newPkg</span> <span class="operator">=</span> scanPackageTracedLI(</span><br><span class="line">                        scanFile, reparseFlags, rescanFlags, <span class="number">0</span>, <span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">long</span> <span class="variable">dataScanTime</span> <span class="operator">=</span> SystemClock.uptimeMillis() - systemScanTime - startTime;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">dataPackagesCount</span> <span class="operator">=</span> mPackages.size() - systemPackagesCount;</span><br></pre></td></tr></table></figure>

<p>第三阶段主要工作就是处理 data 目录的应用信息，及时更新，去除不必要的数据；</p>
<h4 id="2-3-4-第四阶段-BOOT-PROGRESS-PMS-SCAN-END"><a href="#2-3-4-第四阶段-BOOT-PROGRESS-PMS-SCAN-END" class="headerlink" title="2.3.4 第四阶段 BOOT_PROGRESS_PMS_SCAN_END"></a>2.3.4 第四阶段 BOOT_PROGRESS_PMS_SCAN_END</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// PKMS.java</span></span><br><span class="line">            EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_PMS_SCAN_END,</span><br><span class="line">                    SystemClock.uptimeMillis());</span><br></pre></td></tr></table></figure>

<p>OTA 升级后首次启动要清除不必要的缓存数据、权限等默认项，更新后要清理相关数据，更新 packages.xml；</p>
<h4 id="2-3-5-第五阶段-BOOT-PROGRESS-PMS-READY"><a href="#2-3-5-第五阶段-BOOT-PROGRESS-PMS-READY" class="headerlink" title="2.3.5 第五阶段 BOOT_PROGRESS_PMS_READY"></a>2.3.5 第五阶段 BOOT_PROGRESS_PMS_READY</h4><p>GC 回收内存；</p>
<h4 id="2-3-6-总结"><a href="#2-3-6-总结" class="headerlink" title="2.3.6 总结"></a>2.3.6 总结</h4><ul>
<li><p>第一阶段：创建 Settings 对象，读取 <em>&#x2F;data&#x2F;system&#x2F;packages.xml</em> 和 <em>&#x2F;data&#x2F;system&#x2F;packages-backup.xml</em>，并把解析结果存储到 Settings 对象；</p>
</li>
<li><p>第二阶段：扫描 system&#x2F;vendor&#x2F;product 等目录下的 overlay&#x2F;priv-app&#x2F;app 目录；</p>
</li>
<li><p>第三阶段：扫描 <em>&#x2F;data&#x2F;</em> 目录；</p>
</li>
<li><p>第四阶段：把第二阶段、第三阶段扫描的结果写入 packages.xml，更新 packages.xml；</p>
</li>
<li><p>第五阶段：GC 回收内存；</p>
</li>
</ul>
<h3 id="2-4-APK-扫描"><a href="#2-4-APK-扫描" class="headerlink" title="2.4 APK 扫描"></a>2.4 APK 扫描</h3><p>扫描 apk 总结下来分为两步，</p>
<ul>
<li>扫描 APK，解析 AndroidManifest.xml 文件，得到清单文件各个标签内容；</li>
<li>解析清单文件的信息由 Package 保存，从该类的成员变量可看出，和 Android 四大组件相关的信息分别由 activites、receivers、providers、services 保存，由于一个 APK 可声明多个组件，因此 activites 和 receivers 等均声明为 ArrayList；</li>
</ul>
<h3 id="2-5-APK-安装"><a href="#2-5-APK-安装" class="headerlink" title="2.5 APK 安装"></a>2.5 APK 安装</h3><p>调用流程（从点击 apk 文件开始）：</p>
<ul>
<li><strong>PackageInstallerActivity</strong>.bindUi()：弹出一个 Alert，点击安装调用到 startInstall()；</li>
<li>startInstall()：使用 startActivity() 启动 <strong>InstallInstalling</strong>，随后执行 onCreate()，onResume()，</li>
<li>InstallInstalling.onResume()：调用 <strong>InstallingAsyncTask</strong>.execute()，执行到 InstallingAsyncTask.onPostExecute()，又调用了 PackageInstaller.Session.commit()；</li>
<li><strong>PackageInstaller</strong>.Session.commit()：在其中又通过 <strong>IPC 跨进程</strong>调用到 system_server 进程的 <strong>PackageInstallerSession</strong> 服务的 commit()；</li>
<li><strong>PackageInstallerSession</strong>.dispatchSessionSealed()：发送 handle 消息 <font color=blue><strong>MSG_ON_SESSION_SEALED</strong></font>；</li>
<li><strong>PackageInstallerSession</strong>.handleMessage()：收到消息调用 handleSessionSealed() 发送 <font color=blue><strong>MSG_STREAM_VALIDATE_AND_COMMIT</strong></font> 消息，再调用 handleStreamValidateAndCommit() 发送 <font color=blue><strong>MSG_INSTALL</strong></font> 消息，然后调用 handleInstall()；</li>
<li><strong>PackageInstallerSession</strong>.verify() -&gt; verifyNonStaged() -&gt; prepareForVerification() -&gt; makeVerificationParamsLocked() -&gt; install() -&gt; installNonStaged() -&gt; PKMS.installStage()；</li>
<li><strong>PackageManagerService</strong>.installStage()：发送 Handle 消息 INIT_COPY；</li>
<li>PKMS.PackageHandler.handlerMessage() -&gt; doHandleMessage()；</li>
<li>PKMS.HandlerParams.startCopy() -&gt; handleStartCopy()，handleReturnCode()；</li>
<li>PKMS.InstallParams.handleReturnCode()；</li>
<li>processPendingInstall()；<ul>
<li>PKMS.FileInstallArgs.copyApk() -&gt; doCopyApk()；</li>
<li><strong>PackageManagerServiceUtils</strong>.copyPackage()：先 copy apk 到 <em>&#x2F;data&#x2F;app&#x2F;base.apk</em> 下，再 copy so 文件，然后回到 processPendingInstall() 继续往下执行；</li>
</ul>
</li>
<li><strong>PackageManagerService</strong>.processInstallRequestsAsync()：调用 installPackagesTracedLI()；</li>
<li>installPackagesTracedLI()：调用 installPackagesLI() 安装解析 apk；</li>
<li>installPackagesLI()<ul>
<li>preparePackageLI()：准备，分析当前安装状态，解析包并初始验证；</li>
<li>scanPackageTracedLI()：根据准备阶段解析的包信息上下文，进一步解析；<ul>
<li>scanPackageLI -&gt; <strong>PackageParser2</strong>.parsePackage()：到这里又到了扫描 apk 的环节，后续步骤参考扫描总结；</li>
</ul>
</li>
<li>reconcilePackagesLocked()：验证扫描后的包信息和系统状态，确保安装成功；</li>
<li>CommitRequest()：提交扫描的包、更新系统状态；</li>
</ul>
</li>
<li><strong>PackageManagerService</strong>.executePostCommitSteps()：安装完成后，准备 app 数据、执行 dex 优化；<ul>
<li>prepareAppDataAfterInstallLIF() -&gt; prepareAppData() -&gt; prepareAppDataLeaf() -&gt; Installer.createAppData() -&gt; <strong>Installd</strong>.createAppData()：最终通过 IPC 操作跨进程调用到 init 进程启动的守护进程 Installd 中，后续不再分析；</li>
<li>performDexOpt()：执行 dex 优化；</li>
</ul>
</li>
<li>回到 <strong>PackageManagerService</strong>.processInstallRequestsAsync()，继续往下调用 restoreAndPostInstall()；</li>
<li>restoreAndPostInstall()：使用 handler 发送 POST_INSTALL 消息；</li>
<li>handlePackagePostInstall()：处理 POST_INSTALL 消息，发送 ACTION_PACKAGE_ADDED 等广播，调用 notifyInstallObserver() -&gt; PackageInstallObserver2.onPackageInstalled()，发送安装成功的通知；</li>
</ul>
<p>apk 的安装原理其实就是把 apk 文件 copy 到对应的目录：</p>
<ul>
<li><p>把 apk 拷贝到 *&#x2F;data&#x2F;app&#x2F;packagename&#x2F;*，可以直接把 apk 拷贝出来点击安装，比如查看微信的 apk 文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">adb shell pm list packages -f com.tencent.mm</span></span><br><span class="line">package:/data/app/~~upY4pffUA2R84QfD_Ce7UA==/com.tencent.mm-RrcnDRXvQ_Luk8HcYou__g==/base.apk=com.tencent.mm</span><br></pre></td></tr></table></figure>
</li>
<li><p>开辟存放应用程序文件数据的目录 *&#x2F;data&#x2F;data&#x2F;packagename&#x2F;(db, cache)*，包括应用的 so 库，缓存文件等待；</p>
</li>
<li><p>将 apk 中的 dex 文件安装到 <em>&#x2F;data&#x2F;dalvik-cache</em> 目录下；</p>
</li>
</ul>
<p><font color=red><strong>待补充时序图</strong></font></p>
<h3 id="2-6-权限扫描"><a href="#2-6-权限扫描" class="headerlink" title="2.6 权限扫描"></a>2.6 权限扫描</h3><p>PKMS 的构造函数中会获取 SystemConfig 对象，在 SystemConfig 的构造函数中会调用 readAllPermissions() 从 <em>&#x2F;system&#x2F;etc&#x2F;permissions&#x2F;<em>、</em>&#x2F;system&#x2F;etc&#x2F;sysconfig</em> 中的各种 xml 文件进行扫描，把 xml 中的标签转换成对应的数据结构，供之后权限管理使用；</p>
<h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3 总结"></a>3 总结</h2><h3 id="3-1-构造函数总结"><a href="#3-1-构造函数总结" class="headerlink" title="3.1 构造函数总结"></a>3.1 构造函数总结</h3><ul>
<li><p>第一阶段：创建 mSettings 对象，读取 <em>&#x2F;data&#x2F;system&#x2F;packages.xml</em> 和 <em>&#x2F;data&#x2F;system&#x2F;packages-backup.xml</em>，并把解析结果存储到 mSettings 对象，代表上次启动时的应用包信息；</p>
</li>
<li><p>第二阶段：扫描 system&#x2F;vendor&#x2F;product 等目录下的 overlay&#x2F;priv-app&#x2F;app 目录的 apk（系统 app）；</p>
</li>
<li><p>第三阶段：扫描 <em>&#x2F;data&#x2F;</em> 目录 apk（用户安装的 app）；</p>
</li>
<li><p>第四阶段：根据第二阶段、第三阶段扫描的结果更新 packages.xml；</p>
</li>
<li><p>第五阶段：GC 回收内存；</p>
</li>
</ul>
<p>开机时间有很大一部分是耗费在这五个阶段，还有一大部分是耗费在随后的 dex 优化上；</p>
<h3 id="3-2-APK-扫描总结"><a href="#3-2-APK-扫描总结" class="headerlink" title="3.2 APK 扫描总结"></a>3.2 APK 扫描总结</h3><ul>
<li>调用路径：<ul>
<li><strong>PKMS</strong>.scanDirTracedLI() -&gt; ：被 PKMS 构造函数调用，<font color=blue><strong>开启扫描 apk</strong></font>起点；</li>
<li>scanDirLI() -&gt; ：收集 apk，提交文件并行解析；</li>
<li><strong>ParallelPackageParser</strong>.submit() -&gt; ：提交文件并行解析</li>
<li>parsePackage() -&gt; PackageParser2.parsePackage() -&gt; ParsingPackageUtils.parsePackage() -&gt; ：进行 apk 解析，区分传入的是目录还是 apk，最终都是调用到 ParsingPackageUtils.parseMonolithicPackage()；</li>
<li><strong>ParsingPackageUtils</strong>.parseMonolithicPackage() -&gt; ：解析给定的 apk 文件，具体调用 parseBaseApk() 去解析；</li>
<li>parseBaseApk()：</li>
<li>parseBaseApkTags()：<font color=blue><strong>解析 Manifest.xml</strong></font>；<ul>
<li>parseBaseApkTag()：解析非 application 标签，比如 permission &#x2F; uses-feature &#x2F; attribution 等；</li>
<li>parseBaseApplication()：<font color=blue><strong>针对 application 标签进行全面解析</strong></font>，例如 activity &#x2F; receiver &#x2F; service &#x2F; provider；</li>
</ul>
</li>
<li>返回最终解析结果给 ParsedPackage 对象，然后又回到 PKMS.scanDirLI()，调用 addForInitLI()；</li>
<li>commitReconciledScanResultLocked()：内部调用 commitPackageSettings()</li>
<li>commitPackageSettings()：<font color=blue><strong>包信息记录在了 PKMS 的属性中</strong></font>；</li>
</ul>
</li>
<li>小结：对所有存在 apk 的目录进行扫描，解析所有 apk 的 AndroidManifest.xml，最后把包扫描结果提交到 PKMS 的各个属性中；</li>
</ul>
<h3 id="3-3-apk-安装总结"><a href="#3-3-apk-安装总结" class="headerlink" title="3.3 apk 安装总结"></a>3.3 apk 安装总结</h3><ul>
<li>PackageInstallerActivity 点击安装</li>
<li>APK 用写入 Session 把包信息和 APK 安装操作都提交到了 PKMS；</li>
<li>IPC 跨进程让 PKMS 执行 copy、扫描、解析；</li>
<li>system_server 进程的 Installer IPC 跨进程到 Installd 进程（具有 root 权限，8.0 以前好像用的 socket 通信）准备用户目录 <em>&#x2F;data&#x2F;user&#x2F;</em> ，执行 dex 优化；</li>
<li>最后发送安装结果通知 UI 层；</li>
</ul>
<p><a href="https://cloud.tencent.com/developer/article/1900466">reference</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>Android OpenGL 开发学习</title>
    <url>/2021/12/01/Android/Android_OpenGLES_Study/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>Android OpenGL ES 开发学习。</p>
</blockquote>
<span id="more"></span>

<h2 id="1-OpenGL-渲染流程"><a href="#1-OpenGL-渲染流程" class="headerlink" title="1. OpenGL 渲染流程"></a>1. OpenGL 渲染流程</h2><p><a href="https://raw.githubusercontent.com/rangerzhou/ImageHosting/master/blog_resource/2022/OpenGL_Render_Pipeline.png">OpenGL 渲染管线流程</a></p>
<p><img src="https://raw.githubusercontent.com/rangerzhou/ImageHosting/master/blog_resource/2022/OpenGL_Render_Pipeline.png" alt="OpenGL_Render_Pipeline" title="OpenGL渲染管线流程"></p>
<p>OpenGL 渲染管线也叫渲染流水线，一般是由显示芯片（GPU）内部处理图形信号的并行处理单元组成。这些并行处理单元量量之间是相互独立的，不同型号的硬件上独立处理单元的数量也有很大的差异。</p>
<p>OpenGL 渲染管线流程如上图所示，主要包括：<strong>读取顶点数据 -&gt; 顶点着色器 -&gt; 图元装配 -&gt; 光栅化图元 -&gt; 片元着色器 -&gt; 写入帧缓冲 -&gt; 显示到屏幕上</strong>，释义如下：</p>
<ul>
<li><p>基本处理：设定 3D 空间中物体的顶点坐标、颜色、纹理坐标属性，指定绘制方式（点&#x2F;线&#x2F;三角形）；</p>
</li>
<li><p>读取顶点数据：将待绘制图形的顶点数据传递给渲染管线中（通常通过顶点缓冲对象的方式，节省 GPU I&#x2F;O 带宽，提高渲染效率）；</p>
</li>
<li><p>顶点着色器：生成每个顶点的最终位置，执行顶点的各种变换（基础变换矩阵&lt;旋转&#x2F;平移&#x2F;缩放&gt;，相机视图矩阵，投影矩阵），会针对每个顶点执行一次，确定了最终位置后，OpenGL 就可以把这些顶点集合按照给定的参数类型组装成点、线或者三角形；</p>
</li>
<li><p>图元装配：图元装配包括两部分，图元组装和图元处理；</p>
<ul>
<li>图元组装：指顶点数据根据设置的绘制方式被结合成完整的图元，例如，点绘制方式每个顶点为一个图元，线绘制方式每两个顶点构成一个图元，三角形绘制方式三个顶点构成一个图元；</li>
<li>图元处理：对图元进行剪裁，使得图元位于视景体内部的部分传递到后续步骤，视景体外部的部分剪裁丢弃；</li>
</ul>
</li>
<li><p>光栅化图元：指的是将一个图元离散化成很多可显示的二维单元片段，这些小单元称为片元。一个片元对应屏幕上一个或多个像素，片元包括了位置、颜色、纹理坐标等信息，这些值是由图元的顶点信息进行插值计算得到的；</p>
</li>
<li><p>片元着色器：为每个片元生成最终的颜色，针对每个片元都会执行一次，一旦颜色确定，OpenGL 就会把他们写入到帧缓冲区中；</p>
</li>
</ul>
<h3 id="1-1-顶点着色器原理"><a href="#1-1-顶点着色器原理" class="headerlink" title="1.1 顶点着色器原理"></a>1.1 顶点着色器原理</h3><p><a href="https://raw.githubusercontent.com/rangerzhou/ImageHosting/master/blog_resource/2022/OpenGL_Principle_Vertex_Shader.png" title="顶点着色器原理">顶点着色器原理</a></p>
<p><img src="https://raw.githubusercontent.com/rangerzhou/ImageHosting/master/blog_resource/2022/OpenGL_Principle_Vertex_Shader.png" alt="OpenGL_Principle_Vertex_Shader" title="顶点着色器原理"></p>
<h3 id="1-2-片元着色器原理"><a href="#1-2-片元着色器原理" class="headerlink" title="1.2 片元着色器原理"></a>1.2 片元着色器原理</h3><p><a href="https://raw.githubusercontent.com/rangerzhou/ImageHosting/master/blog_resource/2022/OpenGL_Principle_Fragment_Shader.png">片元着色器原理</a></p>
<p><img src="https://raw.githubusercontent.com/rangerzhou/ImageHosting/master/blog_resource/2022/OpenGL_Principle_Fragment_Shader.png" alt="OpenGL_Principle_Fragment_Shader" title="片元着色器原理"></p>
<h2 id="2-OpenGL-矩阵变换流程"><a href="#2-OpenGL-矩阵变换流程" class="headerlink" title="2. OpenGL 矩阵变换流程"></a>2. OpenGL 矩阵变换流程</h2><p>首先了解几种不同的空间，主要包括：物体空间、世界空间、摄像机空间、裁剪空间、标准设备空间、实际窗口空间：</p>
<ul>
<li>物体空间：或者叫局部空间，就是需要绘制的 3D 物体所在的原始坐标系代表的空间。例如，在设计时物体的中心是摆放到坐标系原点的，这个坐标系代表的就是物体空间。</li>
<li>世界空间：物体在最终 3D 场景中的摆放位置对应的坐标所属的坐标系代表的空间。比如要在[10,5,8] 位置摆放一个球，在 [20,8,9] 位置摆放一个正方体，这里的 [10,5,8] 和 [20,8,9] 两组坐标所属的坐标系代表的就是世界空间。</li>
<li>摄像机空间：物体经摄像机观察后，进入摄像机空间。指的是以观察场景的摄像机为原点的一个特定坐标系代表的空间。在这个坐标系中，摄像机永远位于原点，视线永远沿 z 轴负方向，y 轴方向与摄像机 UP 向量方向一致。但是相对于世界坐标系，摄像机坐标系可能是歪的或斜的，就像人眼观察世界时，若歪着头看，就感觉是物体斜了，其实物体在世界坐标系中是正的，只是经过眼睛观察后进入了眼睛（摄像机）坐标系里是歪的而已。</li>
<li>裁剪空间：物体即使被摄像机观察到进入了摄像机空间，如果有的部分位于视景体外部，也是看不到的，所以被摄像机观察到的，同时位于视景体外部的部分裁去，留下在视景体内部的物体部分，这部分构成了剪裁空间。</li>
<li>标准设备空间：将剪裁空间内的物体进行透视除法后得到的就是在标准设备空间的物体，需要注意的是对于 OpenGL ES 而言标准设备空间三个轴的坐标范围都是 -1.0~1.0。</li>
<li>实际窗口空间：就是视口对应的空间，代表设备屏幕上的一块矩形区域，其坐标以像素为单位，一般以 <code>glViewport(0, 0, width, height)</code> 设置。</li>
</ul>
<p>从一个空间到另一个空间的变换就是通过乘以各种变换矩阵以及进行一些必要的计算来完成的，具体过程如下图：</p>
<p><a href="https://raw.githubusercontent.com/rangerzhou/ImageHosting/master/blog_resource/2022/OpenGL_Matrix_Transformation_Process.png">矩阵变换流程</a></p>
<p><img src="https://raw.githubusercontent.com/rangerzhou/ImageHosting/master/blog_resource/2022/OpenGL_Matrix_Transformation_Process.png" alt="OpenGL_Principle_Fragment_Shader" title="矩阵变换流程"></p>
<ul>
<li>物体空间 ——&gt; 世界空间：<strong>乘以基本变换矩阵</strong>实现，基本变换矩阵就是用于实现各种基本变换（缩放、平移、旋转）的矩阵；</li>
<li>世界空间 —— &gt; 摄像机空间：<strong>乘以摄像机观察矩阵（相机视图矩阵）</strong>；</li>
<li>摄像机空间 ——&gt; 裁剪空间：<strong>乘以投影矩阵</strong>，根据需求选择正交投影或透视投影的变换矩阵，乘以投影矩阵后，任何一个点的坐标 [x,y,z,w] 中的 x、y、z 分量都将在 -w~w 内，乘完后，物体就已经被投影在近平面上了，此时物体各个顶点的坐标不再是三维，而是二维，是对应在近平面上的位置；</li>
</ul>
<p><strong><font color = red>用户可以操作的为以上三个步骤，一旦物体投影到近平面后，之后的步骤就由渲染管线自动完成。</font></strong></p>
<ul>
<li>裁剪空间 ——&gt; 标准设备空间：<strong>执行透视除法</strong>完成，将近平面上的物体顶点坐标化为标准设备空间中的 [-1,1] 坐标，就是将齐次坐标 [x,y,z,w] 的 4 个分量都除以 w，结果为 [x&#x2F;w,y&#x2F;w,z&#x2F;w,1]，本质就是对齐次坐标进行了规范化；</li>
<li>标准设备空间 ——&gt; 实际窗口空间：将执行透视除法后的 x、y 坐标分量转换为实际窗口的 xy 像素坐标；</li>
</ul>
<p>上述每一步乘以不同矩阵以及进行响应计算产生的具体效果如下：</p>
<p><a href="https://raw.githubusercontent.com/rangerzhou/ImageHosting/master/blog_resource/2022/OpenGL_Matrix_Transformation_Effect.png">矩阵变换效果</a></p>
<p><img src="https://raw.githubusercontent.com/rangerzhou/ImageHosting/master/blog_resource/2022/OpenGL_Matrix_Transformation_Effect.png" alt="OpenGL_Matrix_Transformation_Effect" title="矩阵变换效果"></p>
<p><a href="https://raw.githubusercontent.com/rangerzhou/ImageHosting/master/blog_resource/2022/Cartesian_coordinates.png">笛卡尔坐标系</a></p>
<p><img src="https://raw.githubusercontent.com/rangerzhou/ImageHosting/master/blog_resource/2022/Cartesian_coordinates.png" alt="Cartesian_coordinates" title="笛卡尔坐标系"></p>
<ul>
<li><p>世界坐标系内的坐标乘以观察矩阵变换到眼坐标空间 eye.xyzw &#x3D; viewMatrix * world.xyzw;</p>
</li>
<li><p>眼坐标系内的坐标通过乘上投影矩阵变换到裁剪空间 clip.xyzw &#x3D; projectMatrix * eye.xyzw;</p>
</li>
<li><p>裁剪坐标系内的坐标通过透视除法（也就是 w 为 1 化） 到 规范化设备坐标系 ndc.xyz &#x3D; clip.xyz &#x2F; clip.w;</p>
</li>
<li><p>设备规范化坐标系到窗口坐标系 win.z &#x3D; (dfar - dnear)&#x2F;2 * ndc.z + (dfar+dnear)&#x2F;2;</p>
</li>
</ul>
<p>齐次坐标：齐次坐标简而言之就是用 N+1 维来代表 N 维坐标，在原有2D&#x2F;3D笛卡尔坐标末尾加上一个额外的变量 w，就形成了 2D&#x2F;3D 齐次坐标；齐次坐标是用来表示一个点在无穷远处（∞,∞），比如一个点 (1,2) 移动到无穷远处，在笛卡尔坐标下变为 (∞,∞)，那么它的齐次坐标表示为 (1,2,0)，因为 (1&#x2F;0,2&#x2F;0) &#x3D; (∞,∞)，这样就可以不用 ∞ 来表示一个无穷远处的点了，<a href="https://zhuanlan.zhihu.com/p/373969867">点击查看齐次坐标参考讲解</a>。</p>
<p>参考1：<a href="https://blog.csdn.net/grace_yi/article/details/109341926">https://blog.csdn.net/grace_yi/article/details/109341926</a> —— 如上的转换方式公式</p>
<p>参考2：<a href="https://blog.csdn.net/tiandyoin/article/details/106039312">https://blog.csdn.net/tiandyoin/article/details/106039312</a></p>
<p>参考3：<a href="https://blog.csdn.net/zhongjling/article/details/8488844">https://blog.csdn.net/zhongjling/article/details/8488844</a> —— 坐标转换理解</p>
<h2 id="3-顶点着色器的输入变量"><a href="#3-顶点着色器的输入变量" class="headerlink" title="3. 顶点着色器的输入变量"></a>3. 顶点着色器的输入变量</h2><p>顶点着色器中只能使用 in 限定符来修饰全局变量，其变量用来接收渲染管线传递进顶点着色器的当前待处理顶点的各种属性值，如顶点坐标、法向量、颜色、纹理坐标等。</p>
<h3 id="1-1-将顶点属性值送入缓冲"><a href="#1-1-将顶点属性值送入缓冲" class="headerlink" title="1.1 将顶点属性值送入缓冲"></a>1.1 将顶点属性值送入缓冲</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// java</span></span><br><span class="line"><span class="type">float</span> vertices[]=<span class="keyword">new</span> <span class="title class_">float</span>[] &#123;                                 <span class="comment">// 首先将顶点此项属性数据依次放入数组，这里是顶点坐标</span></span><br><span class="line">    -<span class="number">4</span>*UNIT_SIZE,<span class="number">0</span>,                                            <span class="comment">// 第 1 个顶点的 X、Y、Z 坐标值</span></span><br><span class="line">    <span class="number">0</span>,<span class="number">0</span>,-<span class="number">4</span>*UNIT_SIZE,                                          <span class="comment">// 第 2 个顶点的 X、Y、Z 坐标值</span></span><br><span class="line">    <span class="number">0</span>,<span class="number">4</span>*UNIT_SIZE,<span class="number">0</span>,<span class="number">0</span>                                          <span class="comment">// 第 3 个顶点的 X、Y、Z 坐标值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">ByteBuffer</span> <span class="variable">vbb</span> <span class="operator">=</span> ByteBuffer.allocateDirect(vertices.length*<span class="number">4</span>)  <span class="comment">// 开辟对应容量的缓冲</span></span><br><span class="line">vbb.order(ByteOrder.nativeOrder())                             <span class="comment">// 设置字节顺序为本地操作系统顺序</span></span><br><span class="line">mVertexBuffer = vbb.asFloatBuffer()                            <span class="comment">// 浮点(Float)型缓冲</span></span><br><span class="line">mVertexBuffer.put(vertices)                                    <span class="comment">// 将数组中的顶点数据送入缓冲</span></span><br><span class="line">mVertexBuffer.position(<span class="number">0</span>)                                      <span class="comment">// 设置缓冲起始位置</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">// kotlin</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> mVertexBuffer: FloatBuffer =</span><br><span class="line">    ByteBuffer.allocateDirect(vertices.size * <span class="number">4</span>).run &#123;</span><br><span class="line">        order(ByteOrder.nativeOrder())</span><br><span class="line">        asFloatBuffer().apply &#123;</span><br><span class="line">            put(triangleCoords)</span><br><span class="line">            position(<span class="number">0</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>首先将需要的数据依次放入数组，然后开辟对应容量的缓冲，最后将数组中的数据存入缓冲即可。随具体情况的变化，数据的数量、类型会有所不同。</p>
<h3 id="1-2-将顶点属性数据送入渲染管线"><a href="#1-2-将顶点属性数据送入渲染管线" class="headerlink" title="1.2 将顶点属性数据送入渲染管线"></a>1.2 将顶点属性数据送入渲染管线</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> maPositionHandle                               <span class="comment">// 声明顶点位置属性引用</span></span><br><span class="line">maPositionHandle = GLES31.glGetAttribLocation(     <span class="comment">// 获取顶点位置属性引用的值			</span></span><br><span class="line">    mProgram,                                      <span class="comment">// 采用的着色器程序id</span></span><br><span class="line">    <span class="string">&quot;aPosition&quot;</span>)                                   <span class="comment">// 着色器中对应的输入变量名称</span></span><br><span class="line">GLES31.glVertexAttribPointer(                      <span class="comment">// 将顶点位置数据传送进渲染管线</span></span><br><span class="line">    maPositionHandle,                              <span class="comment">// 顶点位置属性引用</span></span><br><span class="line">    <span class="number">3</span>,                                             <span class="comment">// 每顶点一组的数据个数(这里是X、Y、Z 坐标，因此为3)</span></span><br><span class="line">    GLES31.GL_FLOAT,                               <span class="comment">// 数据类型</span></span><br><span class="line">    <span class="literal">false</span>,                                         <span class="comment">// 是否规格化</span></span><br><span class="line">    <span class="number">3</span>*<span class="number">4</span>,                                           <span class="comment">// 每组数据的尺寸，这里每组3 个浮点数值(X、Y、Z 坐标)，每个浮点数4 个字节,共3*4=12 个字节</span></span><br><span class="line">    mVertexBuffer                                  <span class="comment">// 存放了数据的缓冲</span></span><br><span class="line">);</span><br><span class="line">GLES31.glEnableVertexAttribArray(maPositionHandle) <span class="comment">// 启用顶点位置数据</span></span><br></pre></td></tr></table></figure>

<p>一般来说，将顶点数据传送进渲染管线需要调用 glVertexAttribPointer() 或者 glVertexAttribIPointer() 方法，前者浮点型数据，后者整型数据。</p>
<h2 id="4-片元着色器的输入变量"><a href="#4-片元着色器的输入变量" class="headerlink" title="4. 片元着色器的输入变量"></a>4. 片元着色器的输入变量</h2><p>片元着色器中可以使用 in 或 centroid in 限定符来修饰全局变量，其变量用于接收来自顶点着色器的相关数据，最典型的是接收根据顶点着色器的顶点数据插值产生的片元数据。</p>
<h2 id="5-常用函数接口"><a href="#5-常用函数接口" class="headerlink" title="5. 常用函数接口"></a>5. 常用函数接口</h2><h3 id="Matrix-setLookAtM-：摄像机的设置"><a href="#Matrix-setLookAtM-：摄像机的设置" class="headerlink" title="Matrix.setLookAtM()：摄像机的设置"></a>Matrix.setLookAtM()：摄像机的设置</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">Matrix.setLookAtM(</span><br><span class="line">	mVMatrix,               <span class="comment">// 存储生成矩阵元素的float[]类型数组，即生成的摄像机观察矩阵（相机视图矩阵）</span></span><br><span class="line">	<span class="number">0</span>,                      <span class="comment">// 填充起始偏移量</span></span><br><span class="line">	eyeX, eyeY, eyeZ,             <span class="comment">// 摄像机位置的 X、Y、Z 坐标 —— 摄像机在世界坐标系的位置</span></span><br><span class="line">	centerX, centerY, centerZ,             <span class="comment">// 观察目标点 X、Y、Z 坐标 —— 观察物体在世界坐标系的位置</span></span><br><span class="line">	upX, upY, upZ           <span class="comment">// 摄像机 up 向量在 X、Y、Z 轴上的分量 —— 摄像机顶端的指向，垂直于观察方向，在世界坐标系中的方向</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>观察目标点坐标和摄像机位置坐标一起决定了摄像机观察的方向，即向量(centerX - eyeX,centerY - eyeY,centerZ - eyeZ)，观察方向不朝向视景体是无法看到的。</p>
<ul>
<li>eyeX, eyeY, eyeZ：相当于你的头的具体坐标</li>
<li>centerX, centerY, centerZ：眼睛要看的物体的坐标</li>
<li>upX, upY, upZ：头的方向，头朝上（upY &#x3D; 1），倒立（upY &#x3D; -1），向右歪头90°看（upX &#x3D; 1），向左歪头90°看（upX &#x3D; -1），仰头看（upZ &#x3D; 1，up 方向和观察方向平行，看不到东西），低头看（upZ &#x3D; -1，up 方向和观察方向平行，看不到东西）</li>
</ul>
<p><a href="https://cloud.tencent.com/developer/article/1015587">https://cloud.tencent.com/developer/article/1015587</a></p>
<p><strong>对应 glm 库函数 API</strong></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">// pos：摄像机位置向量(X,Y,Z坐标)，target：观察目标点位置向量(X,Y,Z坐标)，UP：摄像机 UP 向量(UP 向量在 X/Y/Z 轴上的分量)</span></span><br><span class="line">glm.lookAt(pos, target, UP)</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/weixin_44176696/article/details/110149079">https://blog.csdn.net/weixin_44176696/article/details/110149079</a> —— 详解参考</p>
<h3 id="Matrix-orthoM-：正交投影的设置"><a href="#Matrix-orthoM-：正交投影的设置" class="headerlink" title="Matrix.orthoM()：正交投影的设置"></a>Matrix.orthoM()：正交投影的设置</h3><p>正交投影效果是<strong>远处近处看起来一样大</strong></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">Matrix.orthoM(</span><br><span class="line">	mProjMatrix, <span class="comment">// 存储生成矩阵元素的 float[4*4] 类型数组，即生成的投影矩阵</span></span><br><span class="line">	<span class="number">0</span>, <span class="comment">// 填充起始偏移量</span></span><br><span class="line">	left, right, <span class="comment">// 近平面 left、right 边的 x 坐标</span></span><br><span class="line">	bottom, top, <span class="comment">// 近平面 bottom、top 边的 y 坐标</span></span><br><span class="line">	near, far <span class="comment">// 近平面、远平面距离摄像机（视点）的距离</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><strong>对应 glm 库函数 API</strong></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">glm.ortho(left, right, bottom, top, near, far)</span><br></pre></td></tr></table></figure>



<h3 id="Matrix-frustumM-：透视投影的设置"><a href="#Matrix-frustumM-：透视投影的设置" class="headerlink" title="Matrix.frustumM()：透视投影的设置"></a>Matrix.frustumM()：透视投影的设置</h3><p>透视投影效果是<strong>近大远小</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Matrix.frustumM(</span><br><span class="line">	mProjMatrix, <span class="comment">// 存储生成矩阵元素的 float[4*4] 类型数组，即生成的投影矩阵</span></span><br><span class="line">	<span class="number">0</span>, <span class="comment">//填充起始偏移量</span></span><br><span class="line">	left, right, <span class="comment">//near 面的left、right</span></span><br><span class="line">	bottom, top, <span class="comment">//near 面的bottom、top</span></span><br><span class="line">	near, far <span class="comment">//near 面、far 面与视点的距离</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>left，right, bottom,top，这 4 个参数会影响图像左右和上下缩放比，</p>
<ul>
<li>如果 left 和 right 已经设置好缩放 -width&#x2F;height 和 width&#x2F;height，则 bottom只需要设置为 -1，top设置为 1，这样就能保持图像不变形；</li>
<li>也可以将 left&#x2F;right 与 bottom&#x2F;top 交换比例，即 bottom 和 top 设置为 -height&#x2F;width 和 height&#x2F;width, left 和 right 设置为 -1 和 1；</li>
<li>即 (left+right)&#x2F;(top+bottom) &#x3D; width&#x2F;height；</li>
</ul>
<p><strong>对应 glm 库函数 API</strong></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">glm.frustum(left, right, bottom, top, near, far)</span><br></pre></td></tr></table></figure>

<p>不过更加常用的方案是使用视线夹角作为参数来创建投影矩阵，因为我们总是认为相机投影应该四四方方的对称（而使用<code>frustum</code> 函数则没有这种限制）；</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一个参数为视锥上下面之间的夹角(即 y 轴的视线夹角，单位为弧度)，第二个参数为视口宽高比，第三、四个参数分别为近平面和远平面的深度</span></span><br><span class="line">glm.perspective(glm.radians(<span class="number">33.0f</span>), aspect, near, far)</span><br></pre></td></tr></table></figure>

<p><font color=red><strong>使用 <code>glm.perspective()</code> 需要注意的是，第一个参数是视椎体角度，因为 <code>tan(fov/2) = top / near, aspect = width / height = right / top</code>，所以真实设置的近平面参数 <code>top = tan(fov/2) * near,right = aspect * top, left = -right, bottom = -top</code>，这些参数和使用 <code>Matrix.frustumM()</code> 设置的参数才是一致的，在做 3D 物体拾取的时候近平面参数会直接影响射线起始点坐标。</strong></font></p>
<h3 id="GLES30-glViewport-：设置视口"><a href="#GLES30-glViewport-：设置视口" class="headerlink" title="GLES30.glViewport()：设置视口"></a>GLES30.glViewport()：设置视口</h3><p>视口是显示屏上指定的矩形区域，x 和 y 是视口的左下角坐标值（x 轴向右，y 轴向上），后两个参数是矩形的宽高</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">GLES30.glViewport(x, y, width, height);		<span class="comment">// 设置视口</span></span><br></pre></td></tr></table></figure>

<h3 id="平移、旋转、缩放"><a href="#平移、旋转、缩放" class="headerlink" title="平移、旋转、缩放"></a>平移、旋转、缩放</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">MatrixState.translate(<span class="number">3.5f</span>, <span class="number">0</span>, <span class="number">0</span>); <span class="comment">//沿x 方向平移3.5f</span></span><br><span class="line">MatrixState.rotate(<span class="number">30</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>); <span class="comment">//绕z 轴旋转30°</span></span><br><span class="line">MatrixState.scale(<span class="number">0.4f</span>, <span class="number">2f</span>, <span class="number">0.6f</span>); <span class="comment">//x、y、z 3 个方向按各自的缩放因子进行缩放</span></span><br></pre></td></tr></table></figure>

<h3 id="mix-：插值"><a href="#mix-：插值" class="headerlink" title="mix()：插值"></a>mix()：插值</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">genType mix(genType x,genType y,float a)</span><br></pre></td></tr></table></figure>

<p><code>mix()</code>是一个特殊线性插值函数，前两个参数值基于第三个参数插值，即<code>(x * (1-a) + y * a)</code>，简单理解就是 a 的值决定了 x 和 y 的强弱关系，a 的取值范围在 [0,1] 之间，a 值越大，结果值中 y 占比会越大；a 值越小，结果值中 y 占比会越小；</p>
<h2 id="6-颜色混合模式"><a href="#6-颜色混合模式" class="headerlink" title="6 颜色混合模式"></a>6 颜色混合模式</h2><p><a href="https://cloud.tencent.com/developer/article/1132385?from=article.detail.1367494">https://cloud.tencent.com/developer/article/1132385?from=article.detail.1367494</a></p>
<h2 id="7-深度测试"><a href="#7-深度测试" class="headerlink" title="7 深度测试"></a>7 深度测试</h2><p><a href="https://cloud.tencent.com/developer/article/1367494">https://cloud.tencent.com/developer/article/1367494</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>Android - JNI 分析</title>
    <url>/2021/11/11/Android/AndroidDevelop_012_JNI/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="012b817f641d922970c712c000c683cde0beead0a1f5d0249c438447d6a319c0"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>Android - Activity 启动流程分析（Android 12）</title>
    <url>/2021/11/05/Android/AndroidDevelop_011_startActivity/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>APP 启动流程涉及到进程的创建、进程间通信、Socket 通信、Handler 线程通信，作为系统工程师了解 APP 的启动流程很有必要，本文从 startActivity() 开始分析 APP 的启动流程，代码基于 android-12.1.0_r4；</p>
</blockquote>
<span id="more"></span>

<h2 id="1-相关代码路径"><a href="#1-相关代码路径" class="headerlink" title="1. 相关代码路径"></a>1. 相关代码路径</h2><table>
<thead>
<tr>
<th>Layer</th>
<th>Path</th>
</tr>
</thead>
<tbody><tr>
<td>framework</td>
<td>frameworks&#x2F;base&#x2F;core&#x2F;java&#x2F;android&#x2F;app&#x2F;Activity.java</td>
</tr>
<tr>
<td></td>
<td>frameworks&#x2F;base&#x2F;core&#x2F;java&#x2F;android&#x2F;app&#x2F;Instrumentation.java</td>
</tr>
<tr>
<td></td>
<td>frameworks&#x2F;base&#x2F;core&#x2F;java&#x2F;android&#x2F;app&#x2F;ActivityTaskManager.java</td>
</tr>
<tr>
<td></td>
<td>frameworks&#x2F;base&#x2F;services&#x2F;core&#x2F;java&#x2F;com&#x2F;android&#x2F;server&#x2F;wm&#x2F;ActivityTaskManagerService.java</td>
</tr>
<tr>
<td></td>
<td>frameworks&#x2F;base&#x2F;services&#x2F;core&#x2F;java&#x2F;com&#x2F;android&#x2F;server&#x2F;am&#x2F;ActivityManagerService.java</td>
</tr>
<tr>
<td></td>
<td>frameworks&#x2F;base&#x2F;services&#x2F;core&#x2F;java&#x2F;com&#x2F;android&#x2F;server&#x2F;wm&#x2F;ActivityStarter.java</td>
</tr>
<tr>
<td></td>
<td>frameworks&#x2F;base&#x2F;services&#x2F;core&#x2F;java&#x2F;com&#x2F;android&#x2F;server&#x2F;wm&#x2F;RootWindowContainer.java</td>
</tr>
<tr>
<td></td>
<td>frameworks&#x2F;base&#x2F;services&#x2F;core&#x2F;java&#x2F;com&#x2F;android&#x2F;server&#x2F;wm&#x2F;Task.java</td>
</tr>
<tr>
<td></td>
<td>frameworks&#x2F;base&#x2F;services&#x2F;core&#x2F;java&#x2F;com&#x2F;android&#x2F;server&#x2F;wm&#x2F;TaskFragment.java</td>
</tr>
<tr>
<td></td>
<td>frameworks&#x2F;base&#x2F;services&#x2F;core&#x2F;java&#x2F;com&#x2F;android&#x2F;server&#x2F;wm&#x2F;ActivityTaskSupervisor.java</td>
</tr>
<tr>
<td></td>
<td>frameworks&#x2F;base&#x2F;services&#x2F;core&#x2F;java&#x2F;com&#x2F;android&#x2F;server&#x2F;wm&#x2F;ClientLifecycleManager.java</td>
</tr>
<tr>
<td></td>
<td>frameworks&#x2F;base&#x2F;core&#x2F;java&#x2F;android&#x2F;app&#x2F;servertransaction&#x2F;ClientTransaction.java</td>
</tr>
<tr>
<td></td>
<td>frameworks&#x2F;base&#x2F;core&#x2F;java&#x2F;android&#x2F;app&#x2F;ActivityThread.java</td>
</tr>
<tr>
<td></td>
<td>frameworks&#x2F;base&#x2F;core&#x2F;java&#x2F;android&#x2F;app&#x2F;ClientTransactionHandler.java</td>
</tr>
<tr>
<td></td>
<td>frameworks&#x2F;base&#x2F;core&#x2F;java&#x2F;android&#x2F;app&#x2F;servertransaction&#x2F;TransactionExecutor.java</td>
</tr>
<tr>
<td></td>
<td>frameworks&#x2F;base&#x2F;core&#x2F;java&#x2F;android&#x2F;app&#x2F;servertransaction&#x2F;LaunchActivityItem.java</td>
</tr>
<tr>
<td></td>
<td>frameworks&#x2F;base&#x2F;core&#x2F;java&#x2F;android&#x2F;app&#x2F;AppComponentFactory.java</td>
</tr>
<tr>
<td></td>
<td>frameworks&#x2F;base&#x2F;services&#x2F;core&#x2F;java&#x2F;com&#x2F;android&#x2F;server&#x2F;am&#x2F;ProcessList.java</td>
</tr>
<tr>
<td></td>
<td>frameworks&#x2F;base&#x2F;core&#x2F;java&#x2F;android&#x2F;os&#x2F;Process.java</td>
</tr>
<tr>
<td></td>
<td>frameworks&#x2F;base&#x2F;core&#x2F;java&#x2F;android&#x2F;os&#x2F;ZygoteProcess.java</td>
</tr>
<tr>
<td></td>
<td>frameworks&#x2F;base&#x2F;core&#x2F;java&#x2F;com&#x2F;android&#x2F;internal&#x2F;os&#x2F;ZygoteServer.java</td>
</tr>
<tr>
<td></td>
<td>frameworks&#x2F;base&#x2F;core&#x2F;java&#x2F;com&#x2F;android&#x2F;internal&#x2F;os&#x2F;ZygoteConnection.java</td>
</tr>
<tr>
<td></td>
<td>frameworks&#x2F;base&#x2F;core&#x2F;java&#x2F;com&#x2F;android&#x2F;internal&#x2F;os&#x2F;Zygote.java</td>
</tr>
<tr>
<td></td>
<td>frameworks&#x2F;base&#x2F;core&#x2F;java&#x2F;com&#x2F;android&#x2F;internal&#x2F;os&#x2F;ZygoteInit.java</td>
</tr>
<tr>
<td></td>
<td>frameworks&#x2F;base&#x2F;core&#x2F;java&#x2F;com&#x2F;android&#x2F;internal&#x2F;os&#x2F;RuntimeInit.java</td>
</tr>
<tr>
<td></td>
<td>frameworks&#x2F;base&#x2F;services&#x2F;core&#x2F;java&#x2F;com&#x2F;android&#x2F;server&#x2F;wm&#x2F;RootWindowContainer.java</td>
</tr>
<tr>
<td></td>
<td>frameworks&#x2F;base&#x2F;core&#x2F;jni&#x2F;com_android_internal_os_Zygote.cpp</td>
</tr>
</tbody></table>
<h2 id="2-Launcher-向-system-server-发起请求-Binder"><a href="#2-Launcher-向-system-server-发起请求-Binder" class="headerlink" title="2. Launcher 向 system_server 发起请求(Binder)"></a>2. Launcher 向 system_server 发起请求(Binder)</h2><h3 id="2-1-Activity"><a href="#2-1-Activity" class="headerlink" title="2.1 Activity"></a>2.1 Activity</h3><p>Launcher 中点击 icon 后最终会执行到 Activity.startActivity()，以此为入口分析 startActivity() 流程；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Activity.java</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startActivity</span><span class="params">(Intent intent)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.startActivity(intent, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startActivity</span><span class="params">(Intent intent, <span class="meta">@Nullable</span> Bundle options)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mIntent != <span class="literal">null</span> &amp;&amp; mIntent.hasExtra(AutofillManager.EXTRA_RESTORE_SESSION_TOKEN)</span><br><span class="line">                &amp;&amp; mIntent.hasExtra(AutofillManager.EXTRA_RESTORE_CROSS_ACTIVITY)) &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (options != <span class="literal">null</span>) &#123;</span><br><span class="line">            startActivityForResult(intent, -<span class="number">1</span>, options);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            startActivityForResult(intent, -<span class="number">1</span>); <span class="comment">// -1 表示 Launcher 不需要知道 Activity 启动的结果</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startActivityForResult</span><span class="params">(<span class="meta">@RequiresPermission</span> Intent intent, <span class="type">int</span> requestCode)</span> &#123;</span><br><span class="line">        startActivityForResult(intent, requestCode, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startActivityForResult</span><span class="params">(<span class="meta">@RequiresPermission</span> Intent intent, <span class="type">int</span> requestCode, <span class="meta">@Nullable</span> Bundle options)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">            Instrumentation.<span class="type">ActivityResult</span> <span class="variable">ar</span> <span class="operator">=</span></span><br><span class="line">                mInstrumentation.execStartActivity(<span class="built_in">this</span>, mMainThread.getApplicationThread(), mToken, <span class="built_in">this</span>, intent, requestCode, options);</span><br><span class="line">            <span class="keyword">if</span> (ar != <span class="literal">null</span>) &#123;</span><br><span class="line">                mMainThread.sendActivityResult(mToken, mEmbeddedID, requestCode, ar.getResultCode(), ar.getResultData());</span><br><span class="line">            ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>有多种启动 activity 的方法，但是最终都是调用 mInstrumentation.execStartActivity()，Instrumentation 主要用来监控应用程序和系统的交互。</p>
<h3 id="2-2-Instrumentation"><a href="#2-2-Instrumentation" class="headerlink" title="2.2 Instrumentation"></a>2.2 Instrumentation</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Instrumentation.java</span></span><br><span class="line"><span class="keyword">public</span> ActivityResult <span class="title function_">execStartActivity</span><span class="params">(</span></span><br><span class="line"><span class="params">            Context who, IBinder contextThread, IBinder token, Activity target,</span></span><br><span class="line"><span class="params">            Intent intent, <span class="type">int</span> requestCode, Bundle options)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            intent.migrateExtraStreamToClipData(who);</span><br><span class="line">            intent.prepareToLeaveProcess(who);</span><br><span class="line">            <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> ActivityTaskManager.getService().startActivity(whoThread,</span><br><span class="line">                    who.getOpPackageName(), who.getAttributionTag(), intent,</span><br><span class="line">                    intent.resolveTypeIfNeeded(who.getContentResolver()), token,</span><br><span class="line">                    target != <span class="literal">null</span> ? target.mEmbeddedID : <span class="literal">null</span>, requestCode, <span class="number">0</span>, <span class="literal">null</span>, options);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>获取 ATMS，并执行其中的 startActivity()</p>
<h3 id="2-3-ActivityTaskManager"><a href="#2-3-ActivityTaskManager" class="headerlink" title="2.3 ActivityTaskManager"></a>2.3 ActivityTaskManager</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ActivityTaskManager.java</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> IActivityTaskManager <span class="title function_">getService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> IActivityTaskManagerSingleton.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@UnsupportedAppUsage(trackingBug = 129726065)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton&lt;IActivityTaskManager&gt; IActivityTaskManagerSingleton =</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Singleton</span>&lt;IActivityTaskManager&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">protected</span> IActivityTaskManager <span class="title function_">create</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="keyword">final</span> <span class="type">IBinder</span> <span class="variable">b</span> <span class="operator">=</span> ServiceManager.getService(Context.ACTIVITY_TASK_SERVICE);</span><br><span class="line">                    <span class="keyword">return</span> IActivityTaskManager.Stub.asInterface(b);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br></pre></td></tr></table></figure>

<p>getService() 返回的是 <code>IActivityTaskManager.Stub.asInterface(b);</code>，这是一个远程调用模式，是 AIDL 生成的 IActivityTaskManager.java 中的 stub 类中的 asInterface() 方法，先通过 ACTIVITY_TASK_SERVICE 获取 ATMS 的 IBinder 对象 b，再通过 asInterface(b) 获取 ATMS 的代理对象，接下来进入 ATMS 中；</p>
<h2 id="3-system-server-进程请求-Zygote-创建新进程-Socket"><a href="#3-system-server-进程请求-Zygote-创建新进程-Socket" class="headerlink" title="3. system_server 进程请求 Zygote 创建新进程(Socket)"></a>3. system_server 进程请求 Zygote 创建新进程(Socket)</h2><h3 id="3-1-ActivityTaskManagerService"><a href="#3-1-ActivityTaskManagerService" class="headerlink" title="3.1 ActivityTaskManagerService"></a>3.1 ActivityTaskManagerService</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ActivityTaskManagerService.java</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">startActivity</span><span class="params">(IApplicationThread caller, String callingPackage,</span></span><br><span class="line"><span class="params">            String callingFeatureId, Intent intent, String resolvedType, IBinder resultTo,</span></span><br><span class="line"><span class="params">            String resultWho, <span class="type">int</span> requestCode, <span class="type">int</span> startFlags, ProfilerInfo profilerInfo,</span></span><br><span class="line"><span class="params">            Bundle bOptions)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> startActivityAsUser(caller, callingPackage, callingFeatureId, intent, resolvedType,</span><br><span class="line">                resultTo, resultWho, requestCode, startFlags, profilerInfo, bOptions,</span><br><span class="line">                UserHandle.getCallingUserId());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">startActivityAsUser</span><span class="params">(IApplicationThread caller, String callingPackage,</span></span><br><span class="line"><span class="params">            String callingFeatureId, Intent intent, String resolvedType, IBinder resultTo,</span></span><br><span class="line"><span class="params">            String resultWho, <span class="type">int</span> requestCode, <span class="type">int</span> startFlags, ProfilerInfo profilerInfo,</span></span><br><span class="line"><span class="params">            Bundle bOptions, <span class="type">int</span> userId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> startActivityAsUser(caller, callingPackage, callingFeatureId, intent, resolvedType,</span><br><span class="line">                resultTo, resultWho, requestCode, startFlags, profilerInfo, bOptions, userId,</span><br><span class="line">                <span class="literal">true</span> <span class="comment">/*validateIncomingUser*/</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">startActivityAsUser</span><span class="params">(IApplicationThread caller, String callingPackage,</span></span><br><span class="line"><span class="params">            <span class="meta">@Nullable</span> String callingFeatureId, Intent intent, String resolvedType,</span></span><br><span class="line"><span class="params">            IBinder resultTo, String resultWho, <span class="type">int</span> requestCode, <span class="type">int</span> startFlags,</span></span><br><span class="line"><span class="params">            ProfilerInfo profilerInfo, Bundle bOptions, <span class="type">int</span> userId, <span class="type">boolean</span> validateIncomingUser)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Switch to user app stacks here.</span></span><br><span class="line">        <span class="keyword">return</span> getActivityStartController().obtainStarter(intent, <span class="string">&quot;startActivityAsUser&quot;</span>)</span><br><span class="line">                .setCaller(caller)</span><br><span class="line">                .setCallingPackage(callingPackage)</span><br><span class="line">                .setCallingFeatureId(callingFeatureId)</span><br><span class="line">                .setResolvedType(resolvedType)</span><br><span class="line">                .setResultTo(resultTo)</span><br><span class="line">                .setResultWho(resultWho)</span><br><span class="line">                .setRequestCode(requestCode)</span><br><span class="line">                .setStartFlags(startFlags)</span><br><span class="line">                .setProfilerInfo(profilerInfo)</span><br><span class="line">                .setActivityOptions(bOptions)</span><br><span class="line">                .setUserId(userId)</span><br><span class="line">                .execute();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>通过 obtailStarter() 获取 ActivityStarter 对象并设置一些参数，最终调用到 ActivityStarter.execute()</p>
<h3 id="3-2-ActivityStarter"><a href="#3-2-ActivityStarter" class="headerlink" title="3.2 ActivityStarter"></a>3.2 ActivityStarter</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ActivityStarter.java</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ...</span><br><span class="line">                res = resolveToHeavyWeightSwitcherIfNeeded();</span><br><span class="line">                <span class="keyword">if</span> (res != START_SUCCESS) &#123;</span><br><span class="line">                    <span class="keyword">return</span> res;</span><br><span class="line">                &#125;</span><br><span class="line">                res = executeRequest(mRequest);</span><br><span class="line">                ...</span><br></pre></td></tr></table></figure>

<p>根据前面提供的请求参数解析必要的信息，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ActivityStarter.java</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">executeRequest</span><span class="params">(Request request)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ActivityRecord</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ActivityRecord</span>.Builder(mService)</span><br><span class="line">                ...      </span><br><span class="line">        mLastStartActivityResult = startActivityUnchecked(r, sourceRecord, voiceSession,</span><br><span class="line">                request.voiceInteractor, startFlags, <span class="literal">true</span> <span class="comment">/* doResume */</span>, checkedOptions,</span><br><span class="line">                inTask, inTaskFragment, restrictedBgActivity, intentGrants);</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">return</span> mLastStartActivityResult;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ActiviyStarter.java</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">startActivityUnchecked</span><span class="params">(<span class="keyword">final</span> ActivityRecord r, ActivityRecord sourceRecord,</span></span><br><span class="line"><span class="params">            IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,</span></span><br><span class="line"><span class="params">            <span class="type">int</span> startFlags, <span class="type">boolean</span> doResume, ActivityOptions options, Task inTask,</span></span><br><span class="line"><span class="params">            TaskFragment inTaskFragment, <span class="type">boolean</span> restrictedBgActivity,</span></span><br><span class="line"><span class="params">            NeededUriGrants intentGrants)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">            result = startActivityInner(r, sourceRecord, voiceSession, voiceInteractor,</span><br><span class="line">                    startFlags, doResume, options, inTask, inTaskFragment, restrictedBgActivity,</span><br><span class="line">                    intentGrants);</span><br><span class="line">            ...</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ActivityStarter.java</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">startActivityInner</span><span class="params">(<span class="keyword">final</span> ActivityRecord r, ActivityRecord sourceRecord,</span></span><br><span class="line"><span class="params">            IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,</span></span><br><span class="line"><span class="params">            <span class="type">int</span> startFlags, <span class="type">boolean</span> doResume, ActivityOptions options, Task inTask,</span></span><br><span class="line"><span class="params">            TaskFragment inTaskFragment, <span class="type">boolean</span> restrictedBgActivity,</span></span><br><span class="line"><span class="params">            NeededUriGrants intentGrants)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        mTargetRootTask.startActivityLocked(mStartActivity,</span><br><span class="line">                topRootTask != <span class="literal">null</span> ? topRootTask.getTopNonFinishingActivity() : <span class="literal">null</span>, newTask,</span><br><span class="line">                isTaskSwitch, mOptions, sourceRecord);</span><br><span class="line">            ...</span><br><span class="line">                mRootWindowContainer.resumeFocusedTasksTopActivities(</span><br><span class="line">                        mTargetRootTask, mStartActivity, mOptions, mTransientLaunch);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">return</span> START_SUCCESS;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>startActivityLocked()：判断当前 activity 是否可见以及是否需要为其新建 Task，根据不同情况将 ActivityRecord 加入到对应的 Task 栈顶中；</p>
<p>resumeFocusedTasksTopActivities()：将所有聚焦的 Task 的所有 Activity 恢复运行，因为有些刚加入的 Activity 是处于暂停状态的，判断传入的 targetRootTask 是否等于当前栈顶的 Task，不管是否相等，后续都是调用栈顶 Task 的 <strong>resumeTopActivityUncheckedLocked()</strong> 方法；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// RootWindowContainer.java</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">resumeFocusedTasksTopActivities</span><span class="params">(</span></span><br><span class="line"><span class="params">            Task targetRootTask, ActivityRecord target, ActivityOptions targetOptions,</span></span><br><span class="line"><span class="params">            <span class="type">boolean</span> deferPause)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">                <span class="keyword">final</span> <span class="type">Task</span> <span class="variable">focusedRoot</span> <span class="operator">=</span> display.getFocusedRootTask();</span><br><span class="line">                <span class="keyword">if</span> (focusedRoot != <span class="literal">null</span>) &#123;</span><br><span class="line">                    result |= focusedRoot.resumeTopActivityUncheckedLocked(target, targetOptions);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (targetRootTask == <span class="literal">null</span>) &#123;</span><br><span class="line">                    ...</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Task.java</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">resumeTopActivityUncheckedLocked</span><span class="params">(ActivityRecord prev, ActivityOptions options)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> resumeTopActivityUncheckedLocked(prev, options, <span class="literal">false</span> <span class="comment">/* skipPause */</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">resumeTopActivityUncheckedLocked</span><span class="params">(ActivityRecord prev, ActivityOptions options,</span></span><br><span class="line"><span class="params">            <span class="type">boolean</span> deferPause)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">someActivityResumed</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// Protect against recursion.</span></span><br><span class="line">            mInResumeTopActivity = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (isLeafTask()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (isFocusableAndVisible()) &#123;</span><br><span class="line">                    someActivityResumed = resumeTopActivityInnerLocked(prev, options, deferPause);</span><br><span class="line">                &#125;</span><br><span class="line">            ...</span><br><span class="line">        <span class="keyword">return</span> someActivityResumed;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Task.java</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">resumeTopActivityInnerLocked</span><span class="params">(ActivityRecord prev, ActivityOptions options,</span></span><br><span class="line"><span class="params">            <span class="type">boolean</span> deferPause)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">final</span> <span class="type">boolean</span>[] resumed = <span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">final</span> <span class="type">TaskFragment</span> <span class="variable">topFragment</span> <span class="operator">=</span> topActivity.getTaskFragment();</span><br><span class="line">        resumed[<span class="number">0</span>] = topFragment.resumeTopActivity(prev, options, deferPause);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TaskFragment.java    </span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">resumeTopActivity</span><span class="params">(ActivityRecord prev, ActivityOptions options,</span></span><br><span class="line"><span class="params">            <span class="type">boolean</span> deferPause)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// 将发起者置为 pause 状态，也就是 mainactivity 置为 onPause 状态</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">pausing</span> <span class="operator">=</span> !deferPause &amp;&amp; taskDisplayArea.pauseBackTasks(next);</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span> (next.attachedToProcess()) &#123; <span class="comment">// Activity 已经附加到进程，恢复页面并更新栈</span></span><br><span class="line">			...</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ...</span><br><span class="line">            mTaskSupervisor.startSpecificActivity(next, <span class="literal">true</span>, <span class="literal">true</span>); </span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>判断当前(栈顶) Activity 是否与已有的进程关联，如果已经关联，就在该进程中恢复页面，否则就需要在 startSpecificActivity() 重新启动目标 Activity，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ActivityTaskSupervisor.java</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">startSpecificActivity</span><span class="params">(ActivityRecord r, <span class="type">boolean</span> andResume, <span class="type">boolean</span> checkConfig)</span> &#123;</span><br><span class="line">        <span class="comment">// Is this activity&#x27;s application already running?</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">WindowProcessController</span> <span class="variable">wpc</span> <span class="operator">=</span></span><br><span class="line">                mService.getProcessController(r.processName, r.info.applicationInfo.uid);</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">knownToBeDead</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (wpc != <span class="literal">null</span> &amp;&amp; wpc.hasThread()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                realStartActivityLocked(r, wpc, andResume, checkConfig); <span class="comment">// 1</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            ...</span><br><span class="line">        <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">isTop</span> <span class="operator">=</span> andResume &amp;&amp; r.isTopRunningActivity();</span><br><span class="line">        mService.startProcessAsync(r, knownToBeDead, isTop, isTop ? <span class="string">&quot;top-activity&quot;</span> : <span class="string">&quot;activity&quot;</span>); <span class="comment">// 2</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>首先判断待启动的 activity 所在的 application 是否在运行，如果已经运行就直接启动，否则启动新进程</p>
<h2 id="4-App-进程已存在"><a href="#4-App-进程已存在" class="headerlink" title="4. App 进程已存在"></a>4. App 进程已存在</h2><h3 id="4-1-ATS-realStartActivityLocked"><a href="#4-1-ATS-realStartActivityLocked" class="headerlink" title="4.1 ATS.realStartActivityLocked()"></a>4.1 ATS.realStartActivityLocked()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ActivityTaskSupervisor.java</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">realStartActivityLocked</span><span class="params">(ActivityRecord r, WindowProcessController proc,</span></span><br><span class="line"><span class="params">            <span class="type">boolean</span> andResume, <span class="type">boolean</span> checkConfig)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        ...</span><br><span class="line">                <span class="comment">// 创建 Activity 启动事务</span></span><br><span class="line">                <span class="keyword">final</span> <span class="type">ClientTransaction</span> <span class="variable">clientTransaction</span> <span class="operator">=</span> ClientTransaction.obtain(</span><br><span class="line">                        proc.getThread(), r.appToken);</span><br><span class="line">                <span class="comment">// 这里会给客户端用于创建 activity</span></span><br><span class="line">                clientTransaction.addCallback(LaunchActivityItem.obtain(<span class="keyword">new</span> <span class="title class_">Intent</span>(r.intent),...); </span><br><span class="line">                <span class="comment">// Set desired final state.</span></span><br><span class="line">                <span class="keyword">final</span> ActivityLifecycleItem lifecycleItem; <span class="comment">// 设置所需的最终状态</span></span><br><span class="line">                <span class="keyword">if</span> (andResume) &#123; <span class="comment">// 这里创建的是 ResumeActivityItem</span></span><br><span class="line">                    lifecycleItem = ResumeActivityItem.obtain(isTransitionForward);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    lifecycleItem = PauseActivityItem.obtain();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 用于指定事务执行完后客户端应该处于的最终状态，理解为发送给客户端的请求</span></span><br><span class="line">                clientTransaction.setLifecycleStateRequest(lifecycleItem);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 调度一个事务</span></span><br><span class="line">                mService.getLifecycleManager().scheduleTransaction(clientTransaction);</span><br><span class="line">                ...</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>CLientTransaction 类是一种容器，用于保存可发送给客户端的消息序列，包括一个回调列表和一个最终生命周期状态；</p>
<p>消息分为 5 种，包括 LaunchActivityItem &#x2F; ResumeActivityItem &#x2F; PauseActivityItem &#x2F; StopActivityItem &#x2F; DestroyActivityItem；</p>
<p>上述代码主要就是添加 LaunchActivityItem 到回调列表中以及通过 <code>setLifecycleStateRequest()</code> 设置最终的生命周期状态，最后调用 <code>ClientTransaction.schedule()</code>；</p>
<h3 id="4-2-CLM-scheduleTransaction"><a href="#4-2-CLM-scheduleTransaction" class="headerlink" title="4.2 CLM.scheduleTransaction()"></a>4.2 CLM.scheduleTransaction()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ClientLifecycleManager.java</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">scheduleTransaction</span><span class="params">(ClientTransaction transaction)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">IApplicationThread</span> <span class="variable">client</span> <span class="operator">=</span> transaction.getClient();</span><br><span class="line">        transaction.schedule();</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>最终 ClientLifecycleManager 把创建 activity 事务提交给了客户端的 ApplicationThread 类。</p>
<h3 id="4-3-ClientTransaction-schedule-Binder"><a href="#4-3-ClientTransaction-schedule-Binder" class="headerlink" title="4.3 ClientTransaction.schedule()[Binder]"></a>4.3 ClientTransaction.schedule()[Binder]</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CLientTransaction.java</span></span><br><span class="line">    <span class="keyword">private</span> IApplicationThread mClient;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">schedule</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        mClient.scheduleTransaction(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>mCLient 是 IApplicationThread 对象，IApplicationThread 是一个 AIDL 接口，ApplicationThread 是ActivityThread 的内部类，继承 IApplicationThread.Stub，所以会调用到服务端 ApplicationThread 的 scheduleTransaction() 中，此时我们是在 system_server 进程，所以对应的服务端就是 app 进程， 实现在 ActivityThread.ApplicationThread 中：</p>
<h3 id="4-4-APP-Binder-线程向主线程发送-EXECUTE-TRANSACTION-Handler"><a href="#4-4-APP-Binder-线程向主线程发送-EXECUTE-TRANSACTION-Handler" class="headerlink" title="4.4 APP Binder 线程向主线程发送 EXECUTE_TRANSACTION[Handler]"></a>4.4 APP Binder 线程向主线程发送 EXECUTE_TRANSACTION[Handler]</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ActivityThread.java</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">scheduleTransaction</span><span class="params">(ClientTransaction transaction)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">            ActivityThread.<span class="built_in">this</span>.scheduleTransaction(transaction);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>ActivityThread 继承 ClientTransactionHandler，最后对应的实现在 ClientTransactionHandler 中；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ClientTransactionHandler.java</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">scheduleTransaction</span><span class="params">(ClientTransaction transaction)</span> &#123;</span><br><span class="line">        transaction.preExecute(<span class="built_in">this</span>);</span><br><span class="line">        sendMessage(ActivityThread.H.EXECUTE_TRANSACTION, transaction);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(<span class="type">int</span> what, Object obj)</span>;</span><br></pre></td></tr></table></figure>

<p>通过 handler 发送 EXECUTE_TRANSACTION 消息给 ActivityThread；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ActivityThread.java</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">H</span> <span class="variable">mH</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">H</span>();</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(<span class="type">int</span> what, Object obj)</span> &#123;</span><br><span class="line">        sendMessage(what, obj, <span class="number">0</span>, <span class="number">0</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(<span class="type">int</span> what, Object obj, <span class="type">int</span> arg1, <span class="type">int</span> arg2, <span class="type">boolean</span> async)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_MESSAGES) &#123;</span><br><span class="line">            Slog.v(TAG,</span><br><span class="line">                    <span class="string">&quot;SCHEDULE &quot;</span> + what + <span class="string">&quot; &quot;</span> + mH.codeToString(what) + <span class="string">&quot;: &quot;</span> + arg1 + <span class="string">&quot; / &quot;</span> + obj);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> Message.obtain();</span><br><span class="line">        msg.what = what;</span><br><span class="line">        msg.obj = obj;</span><br><span class="line">        msg.arg1 = arg1;</span><br><span class="line">        msg.arg2 = arg2;</span><br><span class="line">        <span class="keyword">if</span> (async) &#123;</span><br><span class="line">            msg.setAsynchronous(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        mH.sendMessage(msg);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>mH 是 H 类，调用 ActivityThread.handleMessage() 处理；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ActivityThread.java</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleMessage</span><span class="params">(Message msg)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_MESSAGES) Slog.v(TAG, <span class="string">&quot;&gt;&gt;&gt; handling: &quot;</span> + codeToString(msg.what));</span><br><span class="line">            <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">                <span class="keyword">case</span> EXECUTE_TRANSACTION:</span><br><span class="line">                    <span class="keyword">final</span> <span class="type">ClientTransaction</span> <span class="variable">transaction</span> <span class="operator">=</span> (ClientTransaction) msg.obj;</span><br><span class="line">                    mTransactionExecutor.execute(transaction);</span><br><span class="line">                    <span class="keyword">if</span> (isSystem()) &#123;</span><br><span class="line">                        <span class="comment">// Client transactions inside system process are recycled on the client side</span></span><br><span class="line">                        <span class="comment">// instead of ClientLifecycleManager to avoid being cleared before this</span></span><br><span class="line">                        <span class="comment">// message is handled.</span></span><br><span class="line">                        transaction.recycle();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// TODO(lifecycler): Recycle locally scheduled transactions.</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure>

<h3 id="4-5-TransactionExecutor"><a href="#4-5-TransactionExecutor" class="headerlink" title="4.5 TransactionExecutor"></a>4.5 TransactionExecutor</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TransactionExecutor.java</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(ClientTransaction transaction)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_RESOLVER) Slog.d(TAG, tId(transaction) + <span class="string">&quot;Start resolving transaction&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">IBinder</span> <span class="variable">token</span> <span class="operator">=</span> transaction.getActivityToken();</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// 该方法中通过遍历 transaction#callbacks 获取到 LaunchActivityItem，然后调用 onCreate 方法</span></span><br><span class="line">        executeCallbacks(transaction);</span><br><span class="line">        <span class="comment">// 将请求的事务转为最终的生命周期</span></span><br><span class="line">        executeLifecycleState(transaction);</span><br><span class="line">        mPendingActions.clear();</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_RESOLVER) Slog.d(TAG, tId(transaction) + <span class="string">&quot;End resolving transaction&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>TransactionExecutor 类的功能就是以正确顺序管理事务执行，即前面 **[4.1 小节]**添加的消息在这个类里会按照一定的顺序去执行；</p>
<h4 id="4-5-1-executeCallbacks"><a href="#4-5-1-executeCallbacks" class="headerlink" title="4.5.1 executeCallbacks()"></a>4.5.1 executeCallbacks()</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TransactionExecutor.java</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">executeCallbacks</span><span class="params">(ClientTransaction transaction)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> List&lt;ClientTransactionItem&gt; callbacks = transaction.getCallbacks();</span><br><span class="line">        ...      </span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> callbacks.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; ++i) &#123; <span class="comment">// 遍历 ClientTransactionItem</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">ClientTransactionItem</span> <span class="variable">item</span> <span class="operator">=</span> callbacks.get(i);</span><br><span class="line">            <span class="comment">// 执行具体动作</span></span><br><span class="line">            item.execute(mTransactionHandler, token, mPendingActions);</span><br><span class="line">            item.postExecute(mTransactionHandler, token, mPendingActions);</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>在服务端提交事务的时候，通过 <code>clientTransaction.addCallback</code>方式将 LaunchActivityItem 添加到 mActivityCallbacks 里面，所以通过遍历  transaction#callbacks 获取到 LaunchActivityItem，然后调用 execute 方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// LaunchActivityItem.java</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(ClientTransactionHandler client, IBinder token,</span></span><br><span class="line"><span class="params">            PendingTransactionActions pendingActions)</span> &#123;</span><br><span class="line">        Trace.traceBegin(TRACE_TAG_ACTIVITY_MANAGER, <span class="string">&quot;activityStart&quot;</span>);</span><br><span class="line">        <span class="type">ActivityClientRecord</span> <span class="variable">r</span> <span class="operator">=</span> client.getLaunchingActivity(token);</span><br><span class="line">        client.handleLaunchActivity(r, pendingActions, <span class="literal">null</span> <span class="comment">/* customIntent */</span>);</span><br><span class="line">        Trace.traceEnd(TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>调用到 <code>ClientTransactionHandler.handleLaunchActivity()</code>，ActivityClientRecord 是 ActivityThread 的内部类，ActivityThread 继承了 ClientTransactionHandler，实现了抽象方法 <code>getLaunchingActivity()</code>和<code>handleLaunchActivity()</code>，进入到 ActivityThread；</p>
<h4 id="4-5-2-executeLifecycleState"><a href="#4-5-2-executeLifecycleState" class="headerlink" title="4.5.2 executeLifecycleState()"></a>4.5.2 executeLifecycleState()</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TransactionExecutor.java</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">executeLifecycleState</span><span class="params">(ClientTransaction transaction)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取事务的最终生命周期状态</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">ActivityLifecycleItem</span> <span class="variable">lifecycleItem</span> <span class="operator">=</span> transaction.getLifecycleStateRequest();</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">final</span> <span class="type">IBinder</span> <span class="variable">token</span> <span class="operator">=</span> transaction.getActivityToken();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ActivityClientRecord</span> <span class="variable">r</span> <span class="operator">=</span> mTransactionHandler.getActivityClient(token); <span class="comment">// 通过token获取到对应的 activityRecord</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// Cycle to the state right before the final requested state.</span></span><br><span class="line">        <span class="comment">// 循环到最终请求状态之前的状态</span></span><br><span class="line">        cycleToPath(r, lifecycleItem.getTargetState(), <span class="literal">true</span> <span class="comment">/* excludeLastState */</span>, transaction);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Execute the final transition with proper parameters.</span></span><br><span class="line">        <span class="comment">// 使用适当的参数执行最终转换</span></span><br><span class="line">        lifecycleItem.execute(mTransactionHandler, token, mPendingActions);</span><br><span class="line">        lifecycleItem.postExecute(mTransactionHandler, token, mPendingActions);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>这里通过 <code>getLifecycleStateRequest()</code> 获取事务的最终生命周期状态，即在 **[4.1 小节]**中通过 <code>setLifecycleStateRequest()</code> 添加的 ResumeActivityItem，所以此处的 lifecycleItem 就是 ResumeActivityItem，先来看一下 <code>cycleToPath()</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TransactionExecutor.java</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">cycleToPath</span><span class="params">(ActivityClientRecord r, <span class="type">int</span> finish, <span class="type">boolean</span> excludeLastState,</span></span><br><span class="line"><span class="params">            ClientTransaction transaction)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> r.getLifecycleState();</span><br><span class="line">        <span class="comment">// 计算活动的主要生命周期状态的路径，并使用从初始状态之后的状态开始的值填充</span></span><br><span class="line">        <span class="comment">// 比如 onStart,onStop 周期就是在这里额外加入的</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">IntArray</span> <span class="variable">path</span> <span class="operator">=</span> mHelper.getLifecyclePath(start, finish, excludeLastState);</span><br><span class="line">        performLifecycleSequence(r, path, transaction);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>循环到最终请求状态之前的状态，拿到 lifeCyclePath 后就交给了 performLifecycleSequence()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TransactionExecutor.java</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">performLifecycleSequence</span><span class="params">(ActivityClientRecord r, IntArray path,</span></span><br><span class="line"><span class="params">            ClientTransaction transaction)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> path.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, state; i &lt; size; i++) &#123;</span><br><span class="line">            state = path.get(i);</span><br><span class="line">            <span class="keyword">switch</span> (state) &#123;</span><br><span class="line">                <span class="keyword">case</span> ON_CREATE: mTransactionHandler.handleLaunchActivity(...);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> ON_START: mTransactionHandler.handleStartActivity(...);</span><br><span class="line">                <span class="keyword">case</span> ON_RESUME: mTransactionHandler.handleResumeActivity(...);</span><br><span class="line">                <span class="keyword">case</span> ON_PAUSE: mTransactionHandler.handlePauseActivity(...);</span><br><span class="line">                <span class="keyword">case</span> ON_STOP: mTransactionHandler.handleStopActivity(...);</span><br><span class="line">                <span class="keyword">case</span> ON_DESTROY: mTransactionHandler.handleDestroyActivity(...);</span><br><span class="line">                <span class="keyword">case</span> ON_RESTART: mTransactionHandler.performRestartActivity(...);</span><br></pre></td></tr></table></figure>

<p>按照状态执行对应的操作，然后继续看 <code>cycleToPath()</code>后面的代码 <code>lifecycleItem.execute()</code>，即 <code>ResumeActivityItem.execute()</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ResumeActivityItem.java</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(ClientTransactionHandler client, ActivityClientRecord r,</span></span><br><span class="line"><span class="params">            PendingTransactionActions pendingActions)</span> &#123;</span><br><span class="line">        Trace.traceBegin(TRACE_TAG_ACTIVITY_MANAGER, <span class="string">&quot;activityResume&quot;</span>);</span><br><span class="line">        client.handleResumeActivity(r, <span class="literal">true</span> <span class="comment">/* finalStateRequest */</span>, mIsForward, <span class="string">&quot;RESUME_ACTIVITY&quot;</span>);</span><br><span class="line">        Trace.traceEnd(TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>和 <code>LaunchActivityItem.execute()</code> 一样，调用到 <code>ActivityThread.handleResumeActivity()</code>；</p>
<h3 id="4-6-handleLaunchActivity"><a href="#4-6-handleLaunchActivity" class="headerlink" title="4.6 handleLaunchActivity()"></a>4.6 handleLaunchActivity()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ActivityThread.java</span></span><br><span class="line">    <span class="keyword">public</span> Activity <span class="title function_">handleLaunchActivity</span><span class="params">(ActivityClientRecord r,</span></span><br><span class="line"><span class="params">            PendingTransactionActions pendingActions, Intent customIntent)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Activity</span> <span class="variable">a</span> <span class="operator">=</span> performLaunchActivity(r, customIntent);</span><br></pre></td></tr></table></figure>

<h4 id="4-6-1-performLaunchActivity-创建-Activity"><a href="#4-6-1-performLaunchActivity-创建-Activity" class="headerlink" title="4.6.1 performLaunchActivity() - 创建 Activity"></a>4.6.1 performLaunchActivity() - 创建 Activity</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ActivityThread.java</span></span><br><span class="line">    <span class="keyword">private</span> Activity <span class="title function_">performLaunchActivity</span><span class="params">(ActivityClientRecord r, Intent customIntent)</span> &#123;</span><br><span class="line">        <span class="comment">// Activity 中的 getContext 函数返回的就是这个 ContextImpl 对象</span></span><br><span class="line">        <span class="type">ContextImpl</span> <span class="variable">appContext</span> <span class="operator">=</span> createBaseContextForActivity(r);</span><br><span class="line">        <span class="type">Activity</span> <span class="variable">activity</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            java.lang.<span class="type">ClassLoader</span> <span class="variable">cl</span> <span class="operator">=</span> appContext.getClassLoader();</span><br><span class="line">            activity = mInstrumentation.newActivity(</span><br><span class="line">                    cl, component.getClassName(), r.intent); <span class="comment">// 根据类名使用反射机制获取 Activity</span></span><br><span class="line">            ......</span><br><span class="line">                r.activity = activity;</span><br><span class="line">                <span class="keyword">if</span> (r.isPersistable()) &#123; <span class="comment">// 调用 Activity 的 onCreate()</span></span><br><span class="line">                    mInstrumentation.callActivityOnCreate(activity, r.state, r.persistentState);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    mInstrumentation.callActivityOnCreate(activity, r.state);</span><br><span class="line">                &#125;</span><br><span class="line"><span class="comment">// newActivity()</span></span><br><span class="line">    <span class="keyword">public</span> Activity <span class="title function_">newActivity</span><span class="params">(ClassLoader cl, String className,</span></span><br><span class="line"><span class="params">            Intent intent)</span></span><br><span class="line">            <span class="keyword">throws</span> InstantiationException, IllegalAccessException,</span><br><span class="line">            ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">pkg</span> <span class="operator">=</span> intent != <span class="literal">null</span> &amp;&amp; intent.getComponent() != <span class="literal">null</span></span><br><span class="line">                ? intent.getComponent().getPackageName() : <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> getFactory(pkg).instantiateActivity(cl, className, intent);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// AppComponentFactory.java</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@NonNull</span> Activity <span class="title function_">instantiateActivity</span><span class="params">(<span class="meta">@NonNull</span> ClassLoader cl, <span class="meta">@NonNull</span> String className,</span></span><br><span class="line"><span class="params">            <span class="meta">@Nullable</span> Intent intent)</span></span><br><span class="line">            <span class="keyword">throws</span> InstantiationException, IllegalAccessException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">return</span> (Activity) cl.loadClass(className).newInstance();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>performLaunchActivity() 的作用就是在 <code>Instrumentation.newActivity()</code> 函数中根据 Activity 的类名通过通过反射机制创建对应的 Activity，然后调用 Activity 的 onCreate() 函数；</p>
<h4 id="4-6-2-callActivityOnCreate-执行-Activity-onCreate"><a href="#4-6-2-callActivityOnCreate-执行-Activity-onCreate" class="headerlink" title="4.6.2 callActivityOnCreate - 执行 Activity.onCreate"></a>4.6.2 callActivityOnCreate - 执行 Activity.onCreate</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Instrumentation.java</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">callActivityOnCreate</span><span class="params">(Activity activity, Bundle icicle)</span> &#123;</span><br><span class="line">        prePerformCreate(activity);</span><br><span class="line">        activity.performCreate(icicle); <span class="comment">// 进入 Activity 内部</span></span><br><span class="line">        postPerformCreate(activity);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// Activity.java</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">performCreate</span><span class="params">(Bundle icicle)</span> &#123;</span><br><span class="line">        performCreate(icicle, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">performCreate</span><span class="params">(Bundle icicle, PersistableBundle persistentState)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span> (persistentState != <span class="literal">null</span>) &#123;</span><br><span class="line">            onCreate(icicle, persistentState);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            onCreate(icicle);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure>

<p>最终调用到 Activity.onCreate() 方法，开始执行 APP 的代码，app 进程已启动的情况流程完结，startActivity() 成功；</p>
<p><code>handleResumeActivity()</code> 的流程也和上面一样，<code>handleResumeActivity() -&gt; performResumeActivity() -&gt; Activity.performResume() -&gt; Instrumentation.callActivityOnResume() -&gt; Activity.onResume()</code>，不再展开，接下来看 app 进程未启动的情况。</p>
<h2 id="5-App-进程不存在，请求-Zygote-创建新进程-Socket"><a href="#5-App-进程不存在，请求-Zygote-创建新进程-Socket" class="headerlink" title="5. App 进程不存在，请求 Zygote 创建新进程(Socket)"></a>5. App 进程不存在，请求 Zygote 创建新进程(Socket)</h2><h3 id="5-1-startProcessAsync"><a href="#5-1-startProcessAsync" class="headerlink" title="5.1 startProcessAsync()"></a>5.1 startProcessAsync()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ActivityTaskManagerService.java</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">startProcessAsync</span><span class="params">(ActivityRecord activity, <span class="type">boolean</span> knownToBeDead, <span class="type">boolean</span> isTop,</span></span><br><span class="line"><span class="params">            String hostingType)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (Trace.isTagEnabled(TRACE_TAG_WINDOW_MANAGER)) &#123;</span><br><span class="line">                Trace.traceBegin(TRACE_TAG_WINDOW_MANAGER, <span class="string">&quot;dispatchingStartProcess:&quot;</span></span><br><span class="line">                        + activity.processName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 发布消息以启动进程，以避免在持有 ATMS 锁的情况下调用 AMS 可能出现死锁</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">Message</span> <span class="variable">m</span> <span class="operator">=</span> PooledLambda.obtainMessage(ActivityManagerInternal::startProcess,</span><br><span class="line">                    mAmInternal, activity.processName, activity.info.applicationInfo, knownToBeDead,</span><br><span class="line">                    isTop, hostingType, activity.intent.getComponent());</span><br><span class="line">            mH.sendMessage(m);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            Trace.traceEnd(TRACE_TAG_WINDOW_MANAGER);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-2-AMS-startProcess"><a href="#5-2-AMS-startProcess" class="headerlink" title="5.2 AMS.startProcess()"></a>5.2 AMS.startProcess()</h3><p>进入 ActivityManagerInternal::startProcess()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ActivityManagerInternal.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">ActivityManagerInternal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">startProcess</span><span class="params">(String processName, ApplicationInfo info,</span></span><br><span class="line"><span class="params">            <span class="type">boolean</span> knownToBeDead, <span class="type">boolean</span> isTop, String hostingType, ComponentName hostingName)</span>;</span><br></pre></td></tr></table></figure>

<p>是个抽象类，AMS.LocalService 继承了它，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ActivityManagerService.java</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">LocalService</span> <span class="keyword">extends</span> <span class="title class_">ActivityManagerInternal</span></span><br><span class="line">            <span class="keyword">implements</span> <span class="title class_">ActivityManagerLocal</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startProcess</span><span class="params">(String processName, ApplicationInfo info, <span class="type">boolean</span> knownToBeDead,</span></span><br><span class="line"><span class="params">                <span class="type">boolean</span> isTop, String hostingType, ComponentName hostingName)</span> &#123;</span><br><span class="line">            ...</span><br><span class="line">                <span class="keyword">synchronized</span> (ActivityManagerService.<span class="built_in">this</span>) &#123;</span><br><span class="line">                    <span class="comment">// 如果该进程被称为 top app，则设置一个提示，以便在该进程启动时，可以立即申请最高优先级，</span></span><br><span class="line">                    <span class="comment">// 以避免在附加 top app 的进程之前，cpu 被其他进程抢占</span></span><br><span class="line">                    startProcessLocked(processName, info, knownToBeDead, <span class="number">0</span> <span class="comment">/* intentFlags */</span>,</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">HostingRecord</span>(hostingType, hostingName, isTop),</span><br><span class="line">                            ZYGOTE_POLICY_FLAG_LATENCY_SENSITIVE, <span class="literal">false</span> <span class="comment">/* allowWhileBooting */</span>,</span><br><span class="line">                            <span class="literal">false</span> <span class="comment">/* isolated */</span>);</span><br><span class="line">                ...</span><br></pre></td></tr></table></figure>

<h3 id="5-3-startProcessLocked"><a href="#5-3-startProcessLocked" class="headerlink" title="5.3 startProcessLocked()"></a>5.3 startProcessLocked()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ActivityManagerService.java Line: 2702</span></span><br><span class="line">    <span class="keyword">final</span> ProcessRecord <span class="title function_">startProcessLocked</span><span class="params">(String processName,</span></span><br><span class="line"><span class="params">            ApplicationInfo info, <span class="type">boolean</span> knownToBeDead, <span class="type">int</span> intentFlags,</span></span><br><span class="line"><span class="params">            HostingRecord hostingRecord, <span class="type">int</span> zygotePolicyFlags, <span class="type">boolean</span> allowWhileBooting,</span></span><br><span class="line"><span class="params">            <span class="type">boolean</span> isolated)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mProcessList.startProcessLocked(processName, info, knownToBeDead, intentFlags,</span><br><span class="line">                hostingRecord, zygotePolicyFlags, allowWhileBooting, isolated, <span class="number">0</span> <span class="comment">/* isolatedUid */</span>,</span><br><span class="line">                <span class="literal">null</span> <span class="comment">/* ABI override */</span>, <span class="literal">null</span> <span class="comment">/* entryPoint */</span>,</span><br><span class="line">                <span class="literal">null</span> <span class="comment">/* entryPointArgs */</span>, <span class="literal">null</span> <span class="comment">/* crashHandler */</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ProcessList.java Line: 2462</span></span><br><span class="line">    ProcessRecord <span class="title function_">startProcessLocked</span><span class="params">(String processName, ApplicationInfo info,</span></span><br><span class="line"><span class="params">            <span class="type">boolean</span> knownToBeDead, <span class="type">int</span> intentFlags, HostingRecord hostingRecord,</span></span><br><span class="line"><span class="params">            <span class="type">int</span> zygotePolicyFlags, <span class="type">boolean</span> allowWhileBooting, <span class="type">boolean</span> isolated, <span class="type">int</span> isolatedUid,</span></span><br><span class="line"><span class="params">            String abiOverride, String entryPoint, String[] entryPointArgs, Runnable crashHandler)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> SystemClock.uptimeMillis();</span><br><span class="line">        ProcessRecord app;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span></span><br><span class="line">                startProcessLocked(app, hostingRecord, zygotePolicyFlags, abiOverride);</span><br><span class="line">        checkSlow(startTime, <span class="string">&quot;startProcess: done starting proc!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> success ? app : <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// Line 2454</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">startProcessLocked</span><span class="params">(ProcessRecord app, HostingRecord hostingRecord,</span></span><br><span class="line"><span class="params">            <span class="type">int</span> zygotePolicyFlags, String abiOverride)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> startProcessLocked(app, hostingRecord, zygotePolicyFlags,</span><br><span class="line">                <span class="literal">false</span> <span class="comment">/* disableHiddenApiChecks */</span>, <span class="literal">false</span> <span class="comment">/* disableTestApiChecks */</span>,</span><br><span class="line">                abiOverride);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// Line 1807</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">startProcessLocked</span><span class="params">(ProcessRecord app, HostingRecord hostingRecord,</span></span><br><span class="line"><span class="params">            <span class="type">int</span> zygotePolicyFlags, <span class="type">boolean</span> disableHiddenApiChecks, <span class="type">boolean</span> disableTestApiChecks,</span></span><br><span class="line"><span class="params">            String abiOverride)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> SystemClock.uptimeMillis(); <span class="comment">// 记录启动时间</span></span><br><span class="line">        ... <span class="comment">// 记录下面的 entryPoint，zygote 启动进程的时候会用到</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">String</span> <span class="variable">entryPoint</span> <span class="operator">=</span> <span class="string">&quot;android.app.ActivityThread&quot;</span>; <span class="comment">// Line 2043</span></span><br><span class="line">            <span class="keyword">return</span> startProcessLocked(hostingRecord, entryPoint, app, uid, gids,</span><br><span class="line">                    runtimeFlags, zygotePolicyFlags, mountExternal, seInfo, requiredAbi,</span><br><span class="line">                    instructionSet, invokeWith, startTime);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// Line 2064</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">startProcessLocked</span><span class="params">(HostingRecord hostingRecord, String entryPoint, ProcessRecord app,</span></span><br><span class="line"><span class="params">            <span class="type">int</span> uid, <span class="type">int</span>[] gids, <span class="type">int</span> runtimeFlags, <span class="type">int</span> zygotePolicyFlags, <span class="type">int</span> mountExternal,</span></span><br><span class="line"><span class="params">            String seInfo, String requiredAbi, String instructionSet, String invokeWith,</span></span><br><span class="line"><span class="params">            <span class="type">long</span> startTime)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">final</span> Process.<span class="type">ProcessStartResult</span> <span class="variable">startResult</span> <span class="operator">=</span> startProcess(...);</span><br><span class="line">                handleProcessStartedLocked(app, startResult.pid, startResult.usingWrapper,</span><br><span class="line">                        startSeq, <span class="literal">false</span>);</span><br><span class="line">            ...</span><br></pre></td></tr></table></figure>

<p>记住 ProcessList.java:2043 行的 entryPoint，在后面 zygote 创建完子进程后需要用到；</p>
<h3 id="5-4-ProcessList-startProcess"><a href="#5-4-ProcessList-startProcess" class="headerlink" title="5.4 ProcessList.startProcess()"></a>5.4 ProcessList.startProcess()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ProcessList.java Line: 2318</span></span><br><span class="line">    <span class="keyword">private</span> Process.ProcessStartResult <span class="title function_">startProcess</span><span class="params">(HostingRecord hostingRecord, String entryPoint,</span></span><br><span class="line"><span class="params">            ProcessRecord app, <span class="type">int</span> uid, <span class="type">int</span>[] gids, <span class="type">int</span> runtimeFlags, <span class="type">int</span> zygotePolicyFlags,</span></span><br><span class="line"><span class="params">            <span class="type">int</span> mountExternal, String seInfo, String requiredAbi, String instructionSet,</span></span><br><span class="line"><span class="params">            String invokeWith, <span class="type">long</span> startTime)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            startResult = startWebView(...); <span class="comment">// </span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (hostingRecord.usesAppZygote()) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="type">AppZygote</span> <span class="variable">appZygote</span> <span class="operator">=</span> createAppZygoteForProcessIfNeeded(app);</span><br><span class="line">                startResult = appZygote.getProcess().start(...);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                regularZygote = <span class="literal">true</span>;</span><br><span class="line">                startResult = Process.start(...);</span><br><span class="line">            &#125;</span><br><span class="line">            ...</span><br></pre></td></tr></table></figure>

<p>有三种不同类型的 zygote，</p>
<ul>
<li>webview zygote：辅助 zygote 进程，用于创建 isolated_app 进程来渲染不可信的 web 内容，具有最为严格的安全限制；</li>
<li>app zygote：应用 zygote 进程，与常规 zygote 创建的应用相比受到更多限制；</li>
<li>regular zygote：常规的 zygote32&#x2F;zygote64 进程，是所有 Android Java 应用的父进程；</li>
</ul>
<p>关注常规 zygote 即可，最终都是调用到 Process.start() 方法；</p>
<h3 id="5-5-Process-start"><a href="#5-5-Process-start" class="headerlink" title="5.5 Process.start()"></a>5.5 Process.start()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Process.java</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ZygoteProcess</span> <span class="variable">ZYGOTE_PROCESS</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZygoteProcess</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ProcessStartResult <span class="title function_">start</span><span class="params">(...)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ZYGOTE_PROCESS.start(processClass, niceName, uid, gid, gids,</span><br><span class="line">                    runtimeFlags, mountExternal, targetSdkVersion, seInfo,</span><br><span class="line">                    abi, instructionSet, appDataDir, invokeWith, packageName,</span><br><span class="line">                    zygotePolicyFlags, isTopApp, disabledCompatChanges,</span><br><span class="line">                    pkgDataInfoMap, whitelistedDataInfoMap, bindMountAppsData,</span><br><span class="line">                    bindMountAppStorageDirs, zygoteArgs);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>调用 ZYGOTE_PROCESS.start()，ZYGOTE_PROCESS 就是一个 ZygoteProcess 对象，其在构造函数中初始化了用于和 zygote 通信的 mZygoteSocketAddress，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ZygoteProcess.java</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Process.ProcessStartResult <span class="title function_">start</span><span class="params">(...)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">            <span class="keyword">return</span> startViaZygote(processClass, niceName, uid, gid, gids,</span><br><span class="line">                    runtimeFlags, mountExternal, targetSdkVersion, seInfo,</span><br><span class="line">                    abi, instructionSet, appDataDir, invokeWith, <span class="comment">/*startChildZygote=*/</span> <span class="literal">false</span>,</span><br><span class="line">                    packageName, zygotePolicyFlags, isTopApp, disabledCompatChanges,</span><br><span class="line">                    pkgDataInfoMap, allowlistedDataInfoList, bindMountAppsData,</span><br><span class="line">                    bindMountAppStorageDirs, zygoteArgs);</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure>

<h3 id="5-6-Process-ProcessStartResult"><a href="#5-6-Process-ProcessStartResult" class="headerlink" title="5.6 Process.ProcessStartResult"></a>5.6 Process.ProcessStartResult</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ZygoteProcess.java</span></span><br><span class="line">    <span class="keyword">private</span> Process.ProcessStartResult <span class="title function_">startViaZygote</span><span class="params">(...)</span></span><br><span class="line">        ...</span><br><span class="line">        argsForZygote.add(<span class="string">&quot;--runtime-args&quot;</span>);</span><br><span class="line">        argsForZygote.add(<span class="string">&quot;--setuid=&quot;</span> + uid);</span><br><span class="line">        argsForZygote.add(<span class="string">&quot;--setgid=&quot;</span> + gid);</span><br><span class="line">        argsForZygote.add(<span class="string">&quot;--runtime-flags=&quot;</span> + runtimeFlags);</span><br><span class="line">        argsForZygote.add(<span class="string">&quot;--target-sdk-version=&quot;</span> + targetSdkVersion);</span><br><span class="line">		...</span><br><span class="line">            argsForZygote.add(<span class="string">&quot;--nice-name=&quot;</span> + niceName);</span><br><span class="line">            argsForZygote.add(<span class="string">&quot;--package-name=&quot;</span> + packageName);</span><br><span class="line">        <span class="keyword">synchronized</span>(mLock) &#123;</span><br><span class="line">            <span class="comment">// The USAP pool can not be used if the application will not use the systems graphics</span></span><br><span class="line">            <span class="comment">// driver.  If that driver is requested use the Zygote application start path.</span></span><br><span class="line">            <span class="keyword">return</span> zygoteSendArgsAndGetResult(openZygoteSocketIfNeeded(abi)<span class="comment">/*尝试打开 socket*/</span>,</span><br><span class="line">                                              zygotePolicyFlags,</span><br><span class="line">                                              argsForZygote);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>该过程主要工作是生成<code>argsForZygote</code>数组，该数组保存了进程的 uid、gid、groups、target-sdk、nice-name、package-name  等一系列的参数；</p>
<p>openZygoteSocketIfNeeded() 是根据当前的 abi 来选择与 zygote 还是 zygote64 进程建立连接，获取和 Zygote 通信的 Socket，最终返回了一个已连接 Zygote、包含对应套接字的 ZygoteState 对象，便于后面通信使用；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ZygoteProcess.java</span></span><br><span class="line">    <span class="keyword">private</span> Process.ProcessStartResult <span class="title function_">zygoteSendArgsAndGetResult</span><span class="params">(</span></span><br><span class="line"><span class="params">            ZygoteState zygoteState, <span class="type">int</span> zygotePolicyFlags, <span class="meta">@NonNull</span> ArrayList&lt;String&gt; args)</span></span><br><span class="line">            <span class="keyword">throws</span> ZygoteStartFailedEx &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="type">String</span> <span class="variable">msgStr</span> <span class="operator">=</span> args.size() + <span class="string">&quot;\n&quot;</span> + String.join(<span class="string">&quot;\n&quot;</span>, args) + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">return</span> attemptZygoteSendArgsAndGetResult(zygoteState, msgStr);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>ZygoteState 是用于与 Zygote 通信的状态，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ZygoteProcess.java 这是一个阻塞函数</span></span><br><span class="line">    <span class="keyword">private</span> Process.ProcessStartResult <span class="title function_">attemptZygoteSendArgsAndGetResult</span><span class="params">(</span></span><br><span class="line"><span class="params">            ZygoteState zygoteState, String msgStr)</span> <span class="keyword">throws</span> ZygoteStartFailedEx &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">BufferedWriter</span> <span class="variable">zygoteWriter</span> <span class="operator">=</span> zygoteState.mZygoteOutputWriter;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">DataInputStream</span> <span class="variable">zygoteInputStream</span> <span class="operator">=</span> zygoteState.mZygoteInputStream;</span><br><span class="line">            <span class="comment">// socket 通信</span></span><br><span class="line">            zygoteWriter.write(msgStr); <span class="comment">// 向 zygote 进程发送参数列表</span></span><br><span class="line">            zygoteWriter.flush();</span><br><span class="line"></span><br><span class="line">            Process.<span class="type">ProcessStartResult</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Process</span>.ProcessStartResult();</span><br><span class="line">            result.pid = zygoteInputStream.readInt(); <span class="comment">// 阻塞等待 Socket 服务端（Zygote）返回新创建的进程 pid</span></span><br><span class="line">            result.usingWrapper = zygoteInputStream.readBoolean();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (result.pid &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ZygoteStartFailedEx</span>(<span class="string">&quot;fork() failed&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure>

<p>主要功能是通过 socket 通道向 Zygote 进程发送一个参数列表，然后进入阻塞等待状态，直到远端的socket服务端发送回来新创建的进程 pid 才返回。</p>
<p>system_server 向 zygote 进程发送消息后就唤醒了 zygote 进程，来响应 socket 客户端的请求，接下来 zygote 开始创建进程。</p>
<h2 id="6-Zygote-fork-新进程"><a href="#6-Zygote-fork-新进程" class="headerlink" title="6. Zygote fork 新进程"></a>6. Zygote fork 新进程</h2><h3 id="6-1-Zygote-fork-流程"><a href="#6-1-Zygote-fork-流程" class="headerlink" title="6.1 Zygote fork 流程"></a>6.1 Zygote fork 流程</h3><h4 id="6-1-1-runSelectLoop"><a href="#6-1-1-runSelectLoop" class="headerlink" title="6.1.1 runSelectLoop()"></a>6.1.1 runSelectLoop()</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ZygoteServer.java</span></span><br><span class="line">    Runnable <span class="title function_">runSelectLoop</span><span class="params">(String abiList)</span> &#123;</span><br><span class="line">        ArrayList&lt;FileDescriptor&gt; socketFDs = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        ArrayList&lt;ZygoteConnection&gt; peers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// mZygoteSocket 是 socket 通信的服务端，即 zygote 进程，把 fd 添加到 socketFDs</span></span><br><span class="line">        socketFDs.add(mZygoteSocket.getFileDescriptor());</span><br><span class="line">        peers.add(<span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            ...</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                pollReturnValue = Os.poll(pollFDs, pollTimeoutMs); <span class="comment">// 当 pollFDs 有事件到来就往下执行，否则阻塞在这里</span></span><br><span class="line">                ...</span><br><span class="line">                <span class="keyword">while</span> (--pollIndex &gt;= <span class="number">0</span>) &#123; <span class="comment">// 当接收到客户端发出连接请求 或者数据处理请求到来，则往下执行，否则 continue</span></span><br><span class="line">                    <span class="keyword">if</span> ((pollFDs[pollIndex].revents &amp; POLLIN) == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (pollIndex == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="comment">// Zygote server socket 有客户端请求，创建 ZygoteConnection 对象，并添加到 socketFDs 中</span></span><br><span class="line">                        <span class="type">ZygoteConnection</span> <span class="variable">newPeer</span> <span class="operator">=</span> acceptCommandPeer(abiList); <span class="comment">// 创建 ZygoteConnection 对象</span></span><br><span class="line">                        peers.add(newPeer);</span><br><span class="line">                        socketFDs.add(newPeer.getFileDescriptor()); <span class="comment">// 添加到 socketFDs</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pollIndex &lt; usapPoolEventFDIndex) &#123;</span><br><span class="line">                        <span class="comment">// Session socket accepted from the Zygote server socket</span></span><br><span class="line">                        <span class="comment">// 通过socket接收来自对端的数据，并执行相应操作</span></span><br><span class="line"></span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="type">ZygoteConnection</span> <span class="variable">connection</span> <span class="operator">=</span> peers.get(pollIndex);</span><br><span class="line">                            <span class="type">boolean</span> <span class="variable">multipleForksOK</span> <span class="operator">=</span> !isUsapPoolEnabled()</span><br><span class="line">                                    &amp;&amp; ZygoteHooks.isIndefiniteThreadSuspensionSafe();</span><br><span class="line">                            <span class="comment">// 处理收到的命令，并且根据需要执行 fork，该调用会返回两次</span></span><br><span class="line">                            <span class="keyword">final</span> <span class="type">Runnable</span> <span class="variable">command</span> <span class="operator">=</span> connection.processCommand(<span class="built_in">this</span>, multipleForksOK);</span><br></pre></td></tr></table></figure>

<p>Zygote 服务端收到客户端请求，创建 ZygoteConnection 对象，调用其 <code>processCommand()</code> 处理收到的数据；</p>
<h4 id="6-1-2-processCommand"><a href="#6-1-2-processCommand" class="headerlink" title="6.1.2 processCommand()"></a>6.1.2 processCommand()</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ZygoteConnection.java</span></span><br><span class="line">    Runnable <span class="title function_">processCommand</span><span class="params">(ZygoteServer zygoteServer, <span class="type">boolean</span> multipleOK)</span> &#123;</span><br><span class="line">                    pid = Zygote.forkAndSpecialize(...); <span class="comment">// fork 子进程</span></span><br><span class="line">                        <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123; <span class="comment">// 子进程操作</span></span><br><span class="line">                            <span class="comment">// in child</span></span><br><span class="line">                            zygoteServer.setForkChild();</span><br><span class="line"></span><br><span class="line">                            zygoteServer.closeServerSocket();</span><br><span class="line">                            IoUtils.closeQuietly(serverPipeFd);</span><br><span class="line">                            serverPipeFd = <span class="literal">null</span>;</span><br><span class="line">                            <span class="comment">// 6.3 fork 后子进程工作</span></span><br><span class="line">                            <span class="keyword">return</span> handleChildProc(parsedArgs, childPipeFd,</span><br><span class="line">                                    parsedArgs.mStartChildZygote);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 父进程操作</span></span><br><span class="line">                            <span class="comment">// In the parent. A pid &lt; 0 indicates a failure and will be handled in</span></span><br><span class="line">                            <span class="comment">// handleParentProc.</span></span><br><span class="line">                            IoUtils.closeQuietly(childPipeFd);</span><br><span class="line">                            childPipeFd = <span class="literal">null</span>;</span><br><span class="line">                            handleParentProc(pid, serverPipeFd); <span class="comment">// 6.2 fork 后父进程工作</span></span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                        &#125;</span><br></pre></td></tr></table></figure>

<p>调用 forkAndSpecialize() fork 出子进程，函数返回两次；</p>
<h4 id="6-1-3-forkAndSpecialize"><a href="#6-1-3-forkAndSpecialize" class="headerlink" title="6.1.3 forkAndSpecialize()"></a>6.1.3 forkAndSpecialize()</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Zygote.java</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">forkAndSpecialize</span><span class="params">(<span class="type">int</span> uid, <span class="type">int</span> gid, <span class="type">int</span>[] gids, <span class="type">int</span> runtimeFlags,</span></span><br><span class="line"><span class="params">            <span class="type">int</span>[][] rlimits, <span class="type">int</span> mountExternal, String seInfo, String niceName, <span class="type">int</span>[] fdsToClose,</span></span><br><span class="line"><span class="params">            <span class="type">int</span>[] fdsToIgnore, <span class="type">boolean</span> startChildZygote, String instructionSet, String appDataDir,</span></span><br><span class="line"><span class="params">            <span class="type">boolean</span> isTopApp, String[] pkgDataInfoList, String[] allowlistedDataInfoList,</span></span><br><span class="line"><span class="params">            <span class="type">boolean</span> bindMountAppDataDirs, <span class="type">boolean</span> bindMountAppStorageDirs)</span> &#123;</span><br><span class="line">        ZygoteHooks.preFork();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">pid</span> <span class="operator">=</span> nativeForkAndSpecialize(</span><br><span class="line">                uid, gid, gids, runtimeFlags, rlimits, mountExternal, seInfo, niceName, fdsToClose,</span><br><span class="line">                fdsToIgnore, startChildZygote, instructionSet, appDataDir, isTopApp,</span><br><span class="line">                pkgDataInfoList, allowlistedDataInfoList, bindMountAppDataDirs,</span><br><span class="line">                bindMountAppStorageDirs);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>fork</strong> 出一个新的进程，通过 JNI 调用 nativeForAndSpecialize() 函数，对应的是 <code>com_android_internal_os_Zygote_nativeForkAndSpecialize()</code>。</p>
<h4 id="6-1-4-com-android-internal-os-Zygote-nativeForkAndSpecialize"><a href="#6-1-4-com-android-internal-os-Zygote-nativeForkAndSpecialize" class="headerlink" title="6.1.4 com_android_internal_os_Zygote_nativeForkAndSpecialize"></a>6.1.4 com_android_internal_os_Zygote_nativeForkAndSpecialize</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// com_android_internal_os_Zygote.cpp</span></span><br><span class="line"><span class="function"><span class="type">static</span> jint <span class="title">com_android_internal_os_Zygote_nativeForkAndSpecialize</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        JNIEnv* env, jclass, jint uid, jint gid, jintArray gids, jint runtime_flags,</span></span></span><br><span class="line"><span class="params"><span class="function">        jobjectArray rlimits, jint mount_external, jstring se_info, jstring nice_name,</span></span></span><br><span class="line"><span class="params"><span class="function">        jintArray managed_fds_to_close, jintArray managed_fds_to_ignore, jboolean is_child_zygote,</span></span></span><br><span class="line"><span class="params"><span class="function">        jstring instruction_set, jstring app_data_dir, jboolean is_top_app,</span></span></span><br><span class="line"><span class="params"><span class="function">        jobjectArray pkg_data_info_list, jobjectArray allowlisted_data_info_list,</span></span></span><br><span class="line"><span class="params"><span class="function">        jboolean mount_data_dirs, jboolean mount_storage_dirs)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="type">pid_t</span> pid = zygote::<span class="built_in">ForkCommon</span>(env, <span class="comment">/* is_system_server= */</span> <span class="literal">false</span>, fds_to_close, fds_to_ignore,</span><br><span class="line">                                   <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123; <span class="comment">// fork 成功，代码块在子进程执行</span></span><br><span class="line">        <span class="built_in">SpecializeCommon</span>(env, uid, gid, gids, runtime_flags, rlimits, capabilities, capabilities,</span><br><span class="line">                         mount_external, se_info, nice_name, <span class="literal">false</span>, is_child_zygote == JNI_TRUE,</span><br><span class="line">                         instruction_set, app_data_dir, is_top_app == JNI_TRUE, pkg_data_info_list,</span><br><span class="line">                         allowlisted_data_info_list, mount_data_dirs == JNI_TRUE,</span><br><span class="line">                         mount_storage_dirs == JNI_TRUE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="6-1-5-ForkCommon"><a href="#6-1-5-ForkCommon" class="headerlink" title="6.1.5 ForkCommon"></a>6.1.5 ForkCommon</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// com_android_internal_os_Zygote.cpp</span></span><br><span class="line"><span class="function"><span class="type">pid_t</span> <span class="title">zygote::ForkCommon</span><span class="params">(JNIEnv* env, <span class="type">bool</span> is_system_server,</span></span></span><br><span class="line"><span class="params"><span class="function">                         <span class="type">const</span> std::vector&lt;<span class="type">int</span>&gt;&amp; fds_to_close,</span></span></span><br><span class="line"><span class="params"><span class="function">                         <span class="type">const</span> std::vector&lt;<span class="type">int</span>&gt;&amp; fds_to_ignore,</span></span></span><br><span class="line"><span class="params"><span class="function">                         <span class="type">bool</span> is_priority_fork,</span></span></span><br><span class="line"><span class="params"><span class="function">                         <span class="type">bool</span> purge)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">  <span class="type">pid_t</span> pid = fork(); <span class="comment">// fork 子进程</span></span><br></pre></td></tr></table></figure>

<p>fork() 采用写时拷贝(copy on write)，即如果 fork 完什么也不做，其实内存中并没有为子进程分配物理内存，父子进程共用同一份物理内存，只有当父子进程任一方修改内存数据时（on write 时机），才会分配新的物理内存，fork() 函数调用一次，返回两次，返回值有 3 种类型：</p>
<ul>
<li>子进程：fork() 返回 0；</li>
<li>父进程：fork() 返回子进程 pid；</li>
<li>&lt; 0：fork() 失败（当进程数超过上限或者系统内存不足时会 fork 失败）；</li>
</ul>
<p>fork() 的主要工作是寻找空闲的进程号 pid，然后从父进程拷贝进程信息，例如数据段和代码段、fork() 后子进程要执行的代码等；</p>
<p>到这里 app 进程已经创建，fork() 返回 pid 后根据 pid 的值分别进入子进程和父进程执行 <code>handleChildProc()</code> 和 <code>handleParentProc()</code> ；</p>
<h3 id="6-2-fork-后父进程工作"><a href="#6-2-fork-后父进程工作" class="headerlink" title="6.2 fork 后父进程工作"></a>6.2 fork 后父进程工作</h3><h4 id="handleParentProc"><a href="#handleParentProc" class="headerlink" title="handleParentProc()"></a>handleParentProc()</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ZygoteConnection.java</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleParentProc</span><span class="params">(<span class="type">int</span> pid, FileDescriptor pipeFd)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mSocketOutStream.writeInt(pid);</span><br><span class="line">            mSocketOutStream.writeBoolean(usingWrapper);</span><br></pre></td></tr></table></figure>

<p>fork 成功后 zygote 进程通过 socket 返回数据；</p>
<h3 id="6-3-fork-后子进程工作"><a href="#6-3-fork-后子进程工作" class="headerlink" title="6.3 fork 后子进程工作"></a>6.3 fork 后子进程工作</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ZygoteConnection.java</span></span><br><span class="line">                    pid = Zygote.forkAndSpecialize(...);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="comment">// in child</span></span><br><span class="line">                            zygoteServer.setForkChild();</span><br><span class="line"></span><br><span class="line">                            zygoteServer.closeServerSocket();</span><br><span class="line">                            IoUtils.closeQuietly(serverPipeFd);</span><br><span class="line">                            serverPipeFd = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">return</span> handleChildProc(parsedArgs, childPipeFd,</span><br><span class="line">                                    parsedArgs.mStartChildZygote);</span><br><span class="line">                        &#125;</span><br></pre></td></tr></table></figure>

<h4 id="6-3-1-handleChildProc"><a href="#6-3-1-handleChildProc" class="headerlink" title="6.3.1 handleChildProc"></a>6.3.1 handleChildProc</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ZygoteConnection.java</span></span><br><span class="line">    <span class="keyword">private</span> Runnable <span class="title function_">handleChildProc</span><span class="params">(ZygoteArguments parsedArgs,</span></span><br><span class="line"><span class="params">            FileDescriptor pipeFd, <span class="type">boolean</span> isZygote)</span> &#123;</span><br><span class="line">        closeSocket(); <span class="comment">// 关闭 zygote 的 socket 两端的连接</span></span><br><span class="line">        Zygote.setAppProcessName(parsedArgs, TAG); <span class="comment">// 设置进程名</span></span><br><span class="line">        <span class="keyword">if</span> (parsedArgs.mInvokeWith != <span class="literal">null</span>) &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!isZygote) &#123;</span><br><span class="line">                <span class="keyword">return</span> ZygoteInit.zygoteInit(parsedArgs.mTargetSdkVersion,</span><br><span class="line">                        parsedArgs.mDisabledCompatChanges,</span><br><span class="line">                        parsedArgs.mRemainingArgs, <span class="literal">null</span> <span class="comment">/* classLoader */</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> ZygoteInit.childZygoteInit(</span><br><span class="line">                        parsedArgs.mRemainingArgs  <span class="comment">/* classLoader */</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="6-3-2-zygoteInit"><a href="#6-3-2-zygoteInit" class="headerlink" title="6.3.2 zygoteInit"></a>6.3.2 zygoteInit</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ZygoteInit.java</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Runnable <span class="title function_">zygoteInit</span><span class="params">(<span class="type">int</span> targetSdkVersion, <span class="type">long</span>[] disabledCompatChanges,</span></span><br><span class="line"><span class="params">            String[] argv, ClassLoader classLoader)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        RuntimeInit.commonInit(); <span class="comment">// 初始化运行环境</span></span><br><span class="line">        ZygoteInit.nativeZygoteInit(); <span class="comment">// 启动 Binder，方法在 AndroidRuntime.cpp 中注册</span></span><br><span class="line">        <span class="keyword">return</span> RuntimeInit.applicationInit(targetSdkVersion, disabledCompatChanges, argv,</span><br><span class="line">                classLoader);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="6-3-3-nativeZygoteInit"><a href="#6-3-3-nativeZygoteInit" class="headerlink" title="6.3.3 nativeZygoteInit()"></a>6.3.3 nativeZygoteInit()</h4><p>在 <a href="http://rangerzhou.top/2021/11/01/Android/AndroidDevelop_010_SystemServer/#1-4-zygoteInit">forkSystemServer() 流程</a> 中已经分析，就是调用 open() 打开 <em>&#x2F;dev&#x2F;binder</em> 驱动设备，再使用 mmap() 映射内核地址空间，将 Binder 驱动的 fd 赋值给 ProcessState 对象中的变量 mDriveFD，创建一个新的 binder 线程池，通过 talkWithDriver() 与驱动通信；</p>
<h4 id="6-3-4-applicationInit"><a href="#6-3-4-applicationInit" class="headerlink" title="6.3.4 applicationInit"></a>6.3.4 applicationInit</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// RuntimeInit.java</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> Runnable <span class="title function_">applicationInit</span><span class="params">(<span class="type">int</span> targetSdkVersion, <span class="type">long</span>[] disabledCompatChanges,</span></span><br><span class="line"><span class="params">            String[] argv, ClassLoader classLoader)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Arguments</span> <span class="variable">args</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Arguments</span>(argv);</span><br><span class="line">		...</span><br><span class="line">        <span class="comment">// Remaining arguments are passed to the start class&#x27;s static main</span></span><br><span class="line">        <span class="keyword">return</span> findStaticMain(args.startClass, args.startArgs, classLoader);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>回忆一下前面 ProcessList.java:2043 行的 entryPoint 的值，这里的 startClass 是 entryPoint（android.app.ActivityThread），接下来的操作也在 <a href="http://rangerzhou.top/2021/11/01/Android/AndroidDevelop_010_SystemServer01-forkSystemServer/#1-4-zygoteInit">forkSystemServer() 流程</a> 中已经分析，最终就是通过反射获取到 startClass 的 main() 函数，返回一个 Runnable，然后在 ZygoteInit.main() 中调用 <code>caller.run();</code> 启动 ActivityThread.main()；</p>
<h2 id="7-APP-进程向-system-server-发起-attachApplication-Binder"><a href="#7-APP-进程向-system-server-发起-attachApplication-Binder" class="headerlink" title="7. APP 进程向 system_server 发起 attachApplication[Binder]"></a>7. APP 进程向 system_server 发起 attachApplication[Binder]</h2><h3 id="attach-gt-attachApplication"><a href="#attach-gt-attachApplication" class="headerlink" title="attach() -&gt; attachApplication()"></a>attach() -&gt; attachApplication()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ActivityThread.java</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Environment.initForCurrentUser(); <span class="comment">// 初始化环境</span></span><br><span class="line">        Looper.prepareMainLooper(); <span class="comment">// 初始化主线程 Looper</span></span><br><span class="line">        <span class="type">ActivityThread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ActivityThread</span>();</span><br><span class="line">        thread.attach(<span class="literal">false</span>, startSeq); <span class="comment">// 初始化 APP 进程，attach 到系统进程</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (sMainThreadHandler == <span class="literal">null</span>) &#123;</span><br><span class="line">            sMainThreadHandler = thread.getHandler();</span><br><span class="line">        &#125;</span><br><span class="line">        Looper.loop(); <span class="comment">// 主线程进入循环状态</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// ActivityThread.java</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">ApplicationThread</span> <span class="variable">mAppThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ApplicationThread</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">attach</span><span class="params">(<span class="type">boolean</span> system, <span class="type">long</span> startSeq)</span> &#123;</span><br><span class="line">            RuntimeInit.setApplicationObject(mAppThread.asBinder());</span><br><span class="line">            <span class="keyword">final</span> <span class="type">IActivityManager</span> <span class="variable">mgr</span> <span class="operator">=</span> ActivityManager.getService();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                mgr.attachApplication(mAppThread, startSeq);</span><br></pre></td></tr></table></figure>

<p>通过 Binder 调用 AMS.attachApplication()，并传入 app 的 Binder 对象 mAppThread。</p>
<h2 id="8-system-server-请求-APP-bindeApplication-Binder"><a href="#8-system-server-请求-APP-bindeApplication-Binder" class="headerlink" title="8. system_server 请求 APP bindeApplication[Binder]"></a>8. system_server 请求 APP bindeApplication[Binder]</h2><p>system_server 收到请求后向 app binder线程(ApplicationThread) 请求 bindeApplication[Binder 通信]；</p>
<h3 id="8-1-attachApplication"><a href="#8-1-attachApplication" class="headerlink" title="8.1 attachApplication()"></a>8.1 attachApplication()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ActivityManagerService.java</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">attachApplication</span><span class="params">(IApplicationThread thread, <span class="type">long</span> startSeq)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (thread == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SecurityException</span>(<span class="string">&quot;Invalid application interface&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">callingPid</span> <span class="operator">=</span> Binder.getCallingPid(); <span class="comment">// 获取远程 Binder 调用端的 pid</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">callingUid</span> <span class="operator">=</span> Binder.getCallingUid(); <span class="comment">// 获取远程 Binder 调用端的 uid</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">long</span> <span class="variable">origId</span> <span class="operator">=</span> Binder.clearCallingIdentity(); <span class="comment">// 清除远程 Binder 调用端的 uid 和 pid 信息，并保存到 origId 变量</span></span><br><span class="line">            attachApplicationLocked(thread, callingPid, callingUid, startSeq);</span><br><span class="line">            Binder.restoreCallingIdentity(origId); <span class="comment">// 通过 origId 变量，还原远程 Binder 调用端的 uid 和 pid 信息</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>在 binder 远程调用的时候，服务端在执行 binder_thread_read() 过程中会把客户端线程的 pid 和 uid 保存到 binder_transaction_data 对象中传递到用户空间，然后在处理 BR_TRANSACTION 的时候把内核传递过来的客户端的 pid 和 uid 赋值给到服务端的 IPCThreadState 的 mCallingPid 和 mCallingUid，所以此处 </p>
<ul>
<li>Binder.getCallingPid() &#x2F; Binder.getCallingUid()：返回 binder 调用端的 pid 和 uid；</li>
<li>Binder.clearCallingIdentity()：把 binder 调用端的 pid 和 uid 保存到一个 token(origId) 并返回，然后用当前线程（服务端）的 pid 和 uid 赋值给服务端 IPCThreadState 的 mCallingPid 和 mCallingUid 变量；</li>
<li>restoreCallingIdentity()：把 origId 中保存的调用端的 pid 和 uid 恢复到服务端 IPCThreadState 的 mCallingPid 和 mCallingUid 变量；</li>
</ul>
<h3 id="8-2-attachApplicationLocked"><a href="#8-2-attachApplicationLocked" class="headerlink" title="8.2 attachApplicationLocked"></a>8.2 attachApplicationLocked</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ActivityManagerService.java</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">attachApplicationLocked</span><span class="params">(<span class="meta">@NonNull</span> IApplicationThread thread,</span></span><br><span class="line"><span class="params">            <span class="type">int</span> pid, <span class="type">int</span> callingUid, <span class="type">long</span> startSeq)</span> &#123;</span><br><span class="line">                thread.bindApplication(...); <span class="comment">// 初始化 app 进程并启动</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span> (normalMode) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                didSomething = mAtmInternal.attachApplication(app.getWindowProcessController()); <span class="comment">// 启动 activity</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                Slog.wtf(TAG, <span class="string">&quot;Exception thrown launching activities in &quot;</span> + app, e);</span><br><span class="line">                badApp = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>thread 是 app 进程传过来的 binder 对象，attachApplicationLocked 做了两件重要的事：</p>
<ul>
<li>thread.bindApplication：创建 Application 并启动其 onCreate() 方法；</li>
<li>mAtmInternal.attachApplication：创建 Activity，并启动其 onCreate()&#x2F;onResume() 等方法；</li>
</ul>
<h2 id="9-创建-Application-x2F-Activity"><a href="#9-创建-Application-x2F-Activity" class="headerlink" title="9. 创建 Application&#x2F;Activity"></a>9. 创建 Application&#x2F;Activity</h2><h3 id="9-1-初始化-Application-进程并启动-onCreate"><a href="#9-1-初始化-Application-进程并启动-onCreate" class="headerlink" title="9.1 初始化 Application 进程并启动 onCreate()"></a>9.1 初始化 Application 进程并启动 onCreate()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ActivityThread.java</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">bindApplication</span><span class="params">(...)</span> &#123;</span><br><span class="line">            ...</span><br><span class="line">            sendMessage(H.BIND_APPLICATION, data);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>通过 Handler 发送 BIND_APPLICATION 消息，app 进程的 looper 从 MessageQueue 取出消息，在 handleMessage() 中处理：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ActivityThread.java</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleMessage</span><span class="params">(Message msg)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_MESSAGES) Slog.v(TAG, <span class="string">&quot;&gt;&gt;&gt; handling: &quot;</span> + codeToString(msg.what));</span><br><span class="line">            <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">                <span class="keyword">case</span> BIND_APPLICATION:</span><br><span class="line">                    Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">&quot;bindApplication&quot;</span>);</span><br><span class="line">                    <span class="type">AppBindData</span> <span class="variable">data</span> <span class="operator">=</span> (AppBindData)msg.obj;</span><br><span class="line">                    handleBindApplication(data);</span><br><span class="line">                    Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure>

<p>调用 handleBindApplication()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ActivityThread.java</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleBindApplication</span><span class="params">(AppBindData data)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// 设置应用名称</span></span><br><span class="line">        Process.setArgV0(data.processName);</span><br><span class="line">        android.ddm.DdmHandleAppName.setAppName(data.processName, data.appInfo.packageName, UserHandle.myUserId());</span><br><span class="line">        VMRuntime.setProcessPackageName(data.appInfo.packageName);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ContextImpl</span> <span class="variable">appContext</span> <span class="operator">=</span> ContextImpl.createAppContext(<span class="built_in">this</span>, data.info); <span class="comment">// 创建 app 的上下文</span></span><br><span class="line">        Application app;</span><br><span class="line">            app = data.info.makeApplication(data.restrictedBackupMode, <span class="literal">null</span>); <span class="comment">// 创建 Application</span></span><br><span class="line">                mInstrumentation.callApplicationOnCreate(app); <span class="comment">// 启动 Application.onCreate() 方法</span></span><br></pre></td></tr></table></figure>

<p>创建 Application，然后通过 <code>callApplicationOnCreate()</code> 启动 <code>Application.onCreate()</code> 方法；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Instrumentation.java</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">callApplicationOnCreate</span><span class="params">(Application app)</span> &#123;</span><br><span class="line">        app.onCreate();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>到这里应用程序的 Application 中的 onCreate() 方法就执行了；</p>
<h3 id="9-2-创建-Activity"><a href="#9-2-创建-Activity" class="headerlink" title="9.2 创建 Activity"></a>9.2 创建 Activity</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ActivityManagerService.java</span></span><br><span class="line">    <span class="keyword">public</span> ActivityTaskManagerInternal mAtmInternal;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">attachApplicationLocked</span><span class="params">(...)</span>&#123;</span><br><span class="line">        ...</span><br><span class="line">                didSomething = mAtmInternal.attachApplication(app.getWindowProcessController());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>调用 ActivityTaskManagerInternal.attachApplication() 方法；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ActivityTaskManagerService.java</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">attachApplication</span><span class="params">(WindowProcessController wpc)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (mGlobalLockWithoutBoost) &#123;</span><br><span class="line">                ...</span><br><span class="line">                    <span class="keyword">return</span> mRootWindowContainer.attachApplication(wpc);</span><br><span class="line">                ...</span><br></pre></td></tr></table></figure>

<p>调用 RootWindowContainer.attachApplication() 方法；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// RootWindowContainer.java</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">attachApplication</span><span class="params">(WindowProcessController app)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">didSomething</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        ...</span><br><span class="line">                <span class="keyword">final</span> <span class="type">PooledFunction</span> <span class="variable">c</span> <span class="operator">=</span> PooledLambda.obtainFunction(</span><br><span class="line">                        RootWindowContainer::startActivityForAttachedApplicationIfNeeded, <span class="built_in">this</span>,</span><br><span class="line">                        PooledLambda.__(ActivityRecord.class), app,</span><br><span class="line">                        rootTask.topRunningActivity());</span><br><span class="line">                ...</span><br></pre></td></tr></table></figure>

<p>调用 RootWindowContainer.startActivityForAttachedApplicationIfNeeded() 方法；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// RootWindowContainer.java</span></span><br><span class="line">    ActivityTaskSupervisor mTaskSupervisor;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">startActivityForAttachedApplicationIfNeeded</span><span class="params">(ActivityRecord r,</span></span><br><span class="line"><span class="params">            WindowProcessController app, ActivityRecord top)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">            <span class="keyword">if</span> (mTaskSupervisor.realStartActivityLocked(r, app,</span><br><span class="line">                    top == r &amp;&amp; r.isFocusable() <span class="comment">/*andResume*/</span>, <span class="literal">true</span> <span class="comment">/*checkConfig*/</span>)) &#123;</span><br><span class="line">                mTmpBoolean = <span class="literal">true</span>;</span><br><span class="line">            ...</span><br></pre></td></tr></table></figure>

<p>最终又调用到了 <code>realStartActivityLocked()</code>，流程和前面 [第 4 小节](# 4. App 进程已存在) 一样，app 的 looper 处理 <code>EXECUTE_TRANSACTION</code>命令，启动 Activity。</p>
<h2 id="10-总结"><a href="#10-总结" class="headerlink" title="10. 总结"></a>10. 总结</h2><p>点击 Launcher 中的 icon 可以启动 APP，APP 启动流程分为如下阶段：</p>
<ul>
<li><p>Launcher 通过 <strong>Binder</strong> 向 system_server 进程发起 startActivity 请求；</p>
</li>
<li><p>system_server 通过 <strong>socket</strong> 向 zygote 发起创建进程请求；</p>
</li>
<li><p>zygote 进程 fork 出 app 子进程，通过 <strong>socket</strong> 返回 pid 给 system_server 进程；</p>
</li>
<li><p>app 子进程通过 <strong>Binder</strong> 向 system_server 进程发起 attachApplication 请求；</p>
</li>
<li><p>system_server 进程通过 <strong>Binder</strong> 向 app 进程发送 binderApplication 请求；</p>
<ul>
<li>app 进程的 binder 线程（ApplicationThread）收到请求后通过 <strong>Handler</strong> 向 app 主线程发送 BIND_APPLICATION 消息，ActivityThread 通过 handleBindApplication() <strong>创建 Application</strong> 并执行其 onCreate() 方法；</li>
</ul>
</li>
<li><p>system_server 进程通过 <strong>Binder</strong> 向 app 进程发送 scheduleTransaction 请求；</p>
<ul>
<li>app 进程的 binder 线程（ApplicationThread）收到请求后通过 <strong>Handler</strong> 向 app 主线程发送 EXECUTE_TRANSACTION 消息；</li>
</ul>
</li>
<li><p>app 主线程收到 Message 后通过反射机制 <strong>创建目标 Activity</strong>；</p>
</li>
<li><p>app 正式启动，进入 Activity 生命周期，执行 onCreate&#x2F;onStart&#x2F;onResume，UI 渲染结束进入 app 主界面；</p>
</li>
</ul>
<p>APP 启动涉及了多个进程之间的交互，使用了 Binder&#x2F;Socket 进程间通信机制，Handler 线程间通信机制。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>Android - system_server 进程启动</title>
    <url>/2021/11/01/Android/AndroidDevelop_010_SystemServer/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>SystemServer 进程启动流程。</p>
</blockquote>
<span id="more"></span>

<h1 id="1-zygote-forkSystemServer"><a href="#1-zygote-forkSystemServer" class="headerlink" title="1. zygote forkSystemServer"></a>1. zygote forkSystemServer</h1><h2 id="1-1-ZygoteInit-main"><a href="#1-1-ZygoteInit-main" class="headerlink" title="1.1 ZygoteInit.main()"></a>1.1 ZygoteInit.main()</h2><p><a href="">frameworks&#x2F;base&#x2F;core&#x2F;java&#x2F;com&#x2F;android&#x2F;internal&#x2F;os&#x2F;ZygoteInit.java</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ZygoteInit.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String argv[])</span> &#123;</span><br><span class="line">        <span class="type">ZygoteServer</span> <span class="variable">zygoteServer</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">...</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">...</span><br><span class="line">            <span class="keyword">if</span> (startSystemServer) &#123;</span><br><span class="line">                <span class="type">Runnable</span> <span class="variable">r</span> <span class="operator">=</span> forkSystemServer(abiList, zygoteSocketName, zygoteServer);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// &#123;@code r == null&#125; in the parent (zygote) process, and &#123;@code r != null&#125; in the</span></span><br><span class="line">                <span class="comment">// child (system_server) process.</span></span><br><span class="line">                <span class="keyword">if</span> (r != <span class="literal">null</span>) &#123;</span><br><span class="line">                    r.run();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>

<p>forkSystemServer 在 fork system_server 进程后，如果是父进程（Zygote 进程），则返回 null，如果是 system_server 进程，则返回一个 Runnable</p>
<h2 id="1-2-forkSystemServer"><a href="#1-2-forkSystemServer" class="headerlink" title="1.2 forkSystemServer()"></a>1.2 forkSystemServer()</h2><p><a href="">frameworks&#x2F;base&#x2F;core&#x2F;java&#x2F;com&#x2F;android&#x2F;internal&#x2F;os&#x2F;ZygoteInit.java</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ZygoteInit.java</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Runnable <span class="title function_">forkSystemServer</span><span class="params">(String abiList, String socketName,</span></span><br><span class="line"><span class="params">            ZygoteServer zygoteServer)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">/* Hardcoded command line to start the system server */</span></span><br><span class="line">        String args[] = &#123;</span><br><span class="line">                <span class="string">&quot;--setuid=1000&quot;</span>,</span><br><span class="line">                <span class="string">&quot;--setgid=1000&quot;</span>,</span><br><span class="line">                <span class="string">&quot;--setgroups=1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1018,1021,1023,&quot;</span></span><br><span class="line">                        + <span class="string">&quot;1024,1032,1065,3001,3002,3003,3006,3007,3009,3010,3011&quot;</span>,</span><br><span class="line">                <span class="string">&quot;--capabilities=&quot;</span> + capabilities + <span class="string">&quot;,&quot;</span> + capabilities,</span><br><span class="line">                <span class="string">&quot;--nice-name=system_server&quot;</span>,</span><br><span class="line">                <span class="string">&quot;--runtime-args&quot;</span>,</span><br><span class="line">                <span class="string">&quot;--target-sdk-version=&quot;</span> + VMRuntime.SDK_VERSION_CUR_DEVELOPMENT,</span><br><span class="line">                <span class="string">&quot;com.android.server.SystemServer&quot;</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ZygoteArguments</span> <span class="variable">parsedArgs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> pid;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            parsedArgs = <span class="keyword">new</span> <span class="title class_">ZygoteArguments</span>(args);</span><br><span class="line">            ...</span><br><span class="line">            <span class="comment">/* Request to fork the system server process */</span></span><br><span class="line">            pid = Zygote.forkSystemServer(</span><br><span class="line">                    parsedArgs.mUid, parsedArgs.mGid,</span><br><span class="line">                    parsedArgs.mGids,</span><br><span class="line">                    parsedArgs.mRuntimeFlags,</span><br><span class="line">                    <span class="literal">null</span>,</span><br><span class="line">                    parsedArgs.mPermittedCapabilities,</span><br><span class="line">                    parsedArgs.mEffectiveCapabilities);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(ex);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* For child process */</span></span><br><span class="line">        <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hasSecondZygote(abiList)) &#123;</span><br><span class="line">                waitForSecondaryZygote(socketName);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            zygoteServer.closeServerSocket();</span><br><span class="line">            <span class="keyword">return</span> handleSystemServerProcess(parsedArgs); <span class="comment">// 子进程中，返回一个 runnable</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">// pid 不等于 0，说明是父进程，返回 null</span></span><br></pre></td></tr></table></figure>

<ul>
<li>通过 <code>ZygoteArguments</code> 对 args[] 数组参数进行解析；</li>
<li>通过 <code>Zygote.forkSystemServer()</code> 来 fork <code>system_server</code>进程，在 <code>system_server</code> 进程（返回的 pid &#x3D;&#x3D; 0）中调用 <code>handleSystemServerProcess</code> 得到一个 runnable；</li>
</ul>
<h2 id="1-3-handleSystemServerProcess"><a href="#1-3-handleSystemServerProcess" class="headerlink" title="1.3 handleSystemServerProcess()"></a>1.3 handleSystemServerProcess()</h2><p><a href="">frameworks&#x2F;base&#x2F;core&#x2F;java&#x2F;com&#x2F;android&#x2F;internal&#x2F;os&#x2F;ZygoteInit.java</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ZygoteInit.java</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Runnable <span class="title function_">handleSystemServerProcess</span><span class="params">(ZygoteArguments parsedArgs)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">            <span class="comment">// 把剩余参数传递给 SystemServer</span></span><br><span class="line">            <span class="keyword">return</span> ZygoteInit.zygoteInit(parsedArgs.mTargetSdkVersion,</span><br><span class="line">                    parsedArgs.mDisabledCompatChanges,</span><br><span class="line">                    parsedArgs.mRemainingArgs, cl);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>把第二步 <code>ZygoteArguments</code> 解析后的 <code>mRemainingArgs</code> 再传到 <code>ZygoteInit.zygoteInit()</code> 函数中；</p>
<h2 id="1-4-zygoteInit"><a href="#1-4-zygoteInit" class="headerlink" title="1.4 zygoteInit()"></a>1.4 zygoteInit()</h2><p><a href="">frameworks&#x2F;base&#x2F;core&#x2F;java&#x2F;com&#x2F;android&#x2F;internal&#x2F;os&#x2F;ZygoteInit.java</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ZygoteInit.java</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Runnable <span class="title function_">zygoteInit</span><span class="params">(<span class="type">int</span> targetSdkVersion, <span class="type">long</span>[] disabledCompatChanges,</span></span><br><span class="line"><span class="params">            String[] argv, ClassLoader classLoader)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        RuntimeInit.commonInit(); <span class="comment">// 初始化运行环境</span></span><br><span class="line">        ZygoteInit.nativeZygoteInit(); <span class="comment">// 启动 Binder，方法在 AndroidRuntime.cpp 中注册</span></span><br><span class="line">        <span class="keyword">return</span> RuntimeInit.applicationInit(targetSdkVersion, disabledCompatChanges, argv,</span><br><span class="line">                classLoader);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>因为 app_main() 中 runtime.start() 的 runtime 是 AndroidRuntime 的子类 AppRuntime，runtime.start() -&gt; ZygoteInit.main() -&gt; forkSystemserver() -&gt; 子进程 handleSystemServerProcess() -&gt; zygoteInit()，com_android_internal_os_ZygoteInit_nativeZygoteInit 调用 AndroidRuntime.h.onZygoteInit()，AppRuntime 覆盖了父类 AndroidRuntime.onZygoteInit()，所以最后执行 AppRuntime.onZygoteInit()</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AndroidRuntime.cpp</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">com_android_internal_os_ZygoteInit_nativeZygoteInit</span><span class="params">(JNIEnv* env, jobject clazz)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    gCurRuntime-&gt;<span class="built_in">onZygoteInit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// AndroidRuntime.h</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">onZygoteInit</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"><span class="comment">// app_main.cpp</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AppRuntime</span> : <span class="keyword">public</span> AndroidRuntime</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">onZygoteInit</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        sp&lt;ProcessState&gt; proc = ProcessState::<span class="built_in">self</span>(); <span class="comment">// 打开驱动</span></span><br><span class="line">        <span class="built_in">ALOGV</span>(<span class="string">&quot;App process: starting thread pool.\n&quot;</span>);</span><br><span class="line">        proc-&gt;<span class="built_in">startThreadPool</span>(); <span class="comment">// 启动线程池</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>所以最终 system_server 打开驱动，进行 mmap() 映射，启动 binder 线程池。</p>
<h2 id="1-5-applicationInit"><a href="#1-5-applicationInit" class="headerlink" title="1.5 applicationInit()"></a>1.5 applicationInit()</h2><p><a href="">frameworks&#x2F;base&#x2F;core&#x2F;java&#x2F;com&#x2F;android&#x2F;internal&#x2F;os&#x2F;RuntimeInit.java</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="type">static</span> Runnable <span class="title">applicationInit</span><span class="params">(<span class="type">int</span> targetSdkVersion, <span class="type">long</span>[] disabledCompatChanges,</span></span></span><br><span class="line"><span class="params"><span class="function">        String[] argv, ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// If the application calls System.exit(), terminate the process</span></span><br><span class="line">    <span class="comment">// immediately without running any shutdown hooks.  It is not possible to</span></span><br><span class="line">    <span class="comment">// shutdown an Android application gracefully.  Among other things, the</span></span><br><span class="line">    <span class="comment">// Android runtime shutdown hooks close the Binder driver, which can cause</span></span><br><span class="line">    <span class="comment">// leftover running threads to crash before the process actually exits.</span></span><br><span class="line">    <span class="built_in">nativeSetExitWithoutCleanup</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    VMRuntime.<span class="built_in">getRuntime</span>().<span class="built_in">setTargetSdkVersion</span>(targetSdkVersion);</span><br><span class="line">    VMRuntime.<span class="built_in">getRuntime</span>().<span class="built_in">setDisabledCompatChanges</span>(disabledCompatChanges);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Arguments args = <span class="keyword">new</span> <span class="built_in">Arguments</span>(argv);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The end of of the RuntimeInit event (see #zygoteInit).</span></span><br><span class="line">    Trace.<span class="built_in">traceEnd</span>(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Remaining arguments are passed to the start class&#x27;s static main</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">findStaticMain</span>(args.startClass, args.startArgs, classLoader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>通过 <code>Arguments()</code> 对第三步传入的 <code>parsedArgs.mRemainingArgs</code> 解析，得到 args.startClass，即<code>com.android.server.SystemServer</code> ；</li>
<li>调用 <code>findStaticMain()</code> 函数；</li>
</ul>
<h2 id="1-6-findStaticMain"><a href="#1-6-findStaticMain" class="headerlink" title="1.6 findStaticMain()"></a>1.6 findStaticMain()</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> Runnable <span class="title function_">findStaticMain</span><span class="params">(String className, String[] argv,</span></span><br><span class="line"><span class="params">        ClassLoader classLoader)</span> &#123;</span><br><span class="line">    Class&lt;?&gt; cl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        cl = Class.forName(className, <span class="literal">true</span>, classLoader);</span><br><span class="line">    ...</span><br><span class="line">    Method m;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        m = cl.getMethod(<span class="string">&quot;main&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String[].class &#125;);</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MethodAndArgsCaller</span>(m, argv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>findStaticMain()</code> 主要工作是通过反射机制找到对应 className(SystemServer) 的 main 方法，但是并未执行；</p>
<h2 id="1-7-MethodAndArgsCaller"><a href="#1-7-MethodAndArgsCaller" class="headerlink" title="1.7 MethodAndArgsCaller()"></a>1.7 MethodAndArgsCaller()</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MethodAndArgsCaller</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="comment">/** method to call */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Method mMethod;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** argument array */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String[] mArgs;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MethodAndArgsCaller</span><span class="params">(Method method, String[] args)</span> &#123;</span><br><span class="line">        mMethod = method;</span><br><span class="line">        mArgs = args;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mMethod.invoke(<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; mArgs &#125;);</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure>

<p>SystemServer 的 main 方法在 <code>MethodAndArgsCaller</code> 的 <code>run()</code> 中被 invoke ，在上一步中的 <code>findStaticMain</code> 函数返回了一个 <code>MethodAndArgsCaller</code> 对象，即是一个 runnable，<code>ZygoteInit.main()</code> 中的 <code>r.run()</code> 即调用了 <code>MethodAndArgsCaller.run()</code>，invoke 启动 SystemServer.java 的 main 函数；</p>
<h2 id="1-9-总结"><a href="#1-9-总结" class="headerlink" title="1.9 总结"></a>1.9 总结</h2><p><code>ZygoteInit.forkSystemServer()</code> 函数的作用就是 fork 出 <code>system_server</code> 进程，并在 <code>system_server</code> 进程中获取一个找到 <em>frameworks&#x2F;base&#x2F;services&#x2F;java&#x2F;com&#x2F;android&#x2F;server&#x2F;SystemServer.java</em> main 方法的 runnable，然后通过 r.run() 去执行 <em>SystemServer.java</em> 的 main 方法，启动 android 系统中大量的服务。</p>
<h1 id="2-SystemServer-启动"><a href="#2-SystemServer-启动" class="headerlink" title="2. SystemServer 启动"></a>2. SystemServer 启动</h1><h2 id="2-1-SystemServer-main"><a href="#2-1-SystemServer-main" class="headerlink" title="2.1 SystemServer.main()"></a>2.1 SystemServer.main()</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SystemServer.java</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">sMaxBinderThreads</span> <span class="operator">=</span> <span class="number">31</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">SystemServer</span>().run();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            BinderInternal.setMaxThreads(sMaxBinderThreads); <span class="comment">// 设置 binder 线程池最大数量</span></span><br><span class="line">            Looper.prepareMainLooper(); <span class="comment">// 以当前线程作为 MainLooper</span></span><br><span class="line">            Looper.getMainLooper().setSlowLogThresholdMs(</span><br><span class="line">                    SLOW_DISPATCH_THRESHOLD_MS, SLOW_DELIVERY_THRESHOLD_MS);</span><br><span class="line">            createSystemContext(); <span class="comment">// 初始化 context</span></span><br><span class="line">            mSystemServiceManager = <span class="keyword">new</span> <span class="title class_">SystemServiceManager</span>(mSystemContext); <span class="comment">// 创建 ssm，管理系统服务的启动</span></span><br><span class="line">            <span class="comment">// 将 ssm 作为本地进程 Service 使用</span></span><br><span class="line">            LocalServices.addService(SystemServiceManager.class, mSystemServiceManager);</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// Start services.</span></span><br><span class="line">        <span class="keyword">try</span> &#123; <span class="comment">// 启动服务</span></span><br><span class="line">            t.traceBegin(<span class="string">&quot;StartServices&quot;</span>);</span><br><span class="line">            startBootstrapServices(t); <span class="comment">// 启动引导服务</span></span><br><span class="line">            startCoreServices(t); <span class="comment">// 启动核心服务</span></span><br><span class="line">            startOtherServices(t); <span class="comment">// 启动其他服务</span></span><br><span class="line">        &#125;</span><br><span class="line">        Looper.loop(); <span class="comment">// 进入 loop 循环</span></span><br></pre></td></tr></table></figure>

<p>在 SystemServer 的 run() 方法中，主要做了如下工作：</p>
<ul>
<li>设置 SystemServer 的 binder 线程池的数量为 31，默认是 15，这里的数量不包含 binder 主线程；</li>
<li>准备 Looper；</li>
<li>初始化 SystemContext；</li>
<li>创建 SystemServiceManager，用来管理系统服务的创建、启动和生命周期管理；</li>
<li>启动引导服务、核心服务以及其他服务；</li>
<li>进入 Looper 循环；</li>
</ul>
<p>启动了三类服务：引导服务、核心服务、其他服务，比如 AMS&#x2F;PMS&#x2F;PKMS 等都在引导服务中启动，WMS 在其他服务中启动，这些服务都继承自 SystemServices，且都添加到 binder 的大管家 ServiceManager 进程中管理。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>Android - Handler原理分析</title>
    <url>/2021/10/27/Android/AndroidDevelop_009_Handler/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>Handler 消息机制是 Android 系统的消息传递机制，用于同进程的线程间通信，由 Message、MessageQueue、Hander、Looper 共同组成。</p>
</blockquote>
<span id="more"></span>

<p>代码路径</p>
<table>
<thead>
<tr>
<th>Path</th>
</tr>
</thead>
<tbody><tr>
<td>frameworks&#x2F;base&#x2F;core&#x2F;java&#x2F;android&#x2F;os&#x2F;Message.java</td>
</tr>
<tr>
<td>frameworks&#x2F;base&#x2F;core&#x2F;java&#x2F;android&#x2F;os&#x2F;MessageQueue.java</td>
</tr>
<tr>
<td>frameworks&#x2F;base&#x2F;core&#x2F;java&#x2F;android&#x2F;os&#x2F;Handler.java</td>
</tr>
<tr>
<td>frameworks&#x2F;base&#x2F;core&#x2F;java&#x2F;android&#x2F;os&#x2F;Looper.java</td>
</tr>
<tr>
<td>java&#x2F;lang&#x2F;ThreadLocal.java</td>
</tr>
</tbody></table>
<p>Handler 机制主要涉及如下几个类：</p>
<ul>
<li>Message：消息实体；</li>
<li>MessageQueue：消息队列，用于存储消息和管理消息；</li>
<li>Handler：消息的真正处理者，具备发送消息、接收消息、处理消息、移除消息等功能；</li>
<li>Looper：轮询消息队列，取出消息交给 Handler 处理，一个线程只有一个 Looper；</li>
<li>ThreadLocal：线程本地存储区（Thread Local Storage，简称 TLS），每个线程都有自己私有的TLS，不同线程之间彼此无法访问对方的 TLS 区域，ThreadLocal 的作用是提供线程内的局部变量 TLS；</li>
</ul>
<h2 id="Message"><a href="#Message" class="headerlink" title="Message"></a>Message</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Message.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Message</span> <span class="keyword">implements</span> <span class="title class_">Parcelable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> what; <span class="comment">// 消息类别，唯一标识</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> arg1; <span class="comment">// 参数 1</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> arg2; <span class="comment">// 参数 2</span></span><br><span class="line">    <span class="keyword">public</span> Object obj; <span class="comment">// 消息内容</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> when; <span class="comment">// 消息触发时间戳</span></span><br><span class="line">    <span class="comment">/*package*/</span> Handler target; <span class="comment">// 消息响应方</span></span><br><span class="line">    <span class="comment">/*package*/</span> Runnable callback; <span class="comment">// Message 的回调方法</span></span><br><span class="line">    <span class="comment">/*package*/</span> Message next; <span class="comment">// 指向当前 Message 后面的节点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_POOL_SIZE</span> <span class="operator">=</span> <span class="number">50</span>;</span><br></pre></td></tr></table></figure>

<p>每个创建的消息都包含上述一个或者多个内容，消息池默认大小 <em>MAX_POOL_SIZE &#x3D; 50</em>；</p>
<h3 id="获取-Message-的方式"><a href="#获取-Message-的方式" class="headerlink" title="获取 Message 的方式"></a>获取 Message 的方式</h3><p>有三种方式获取 Message：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> handler.obtainMessage();</span><br><span class="line"><span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> Message.obtain();</span><br><span class="line"><span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>();</span><br></pre></td></tr></table></figure>

<p>首先来看 Handler.obtainMessage()：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Handler.java</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Message <span class="title function_">obtainMessage</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Message.obtain(<span class="built_in">this</span>); <span class="comment">// 传递当前 handler</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>可知最终也是调用到 Message.obtain()；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Message.java</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Message <span class="title function_">obtain</span><span class="params">(Handler h)</span> &#123;</span><br><span class="line">        <span class="type">Message</span> <span class="variable">m</span> <span class="operator">=</span> obtain();</span><br><span class="line">        m.target = h; <span class="comment">// 将当前 handler 赋给 message.target</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Message <span class="title function_">obtain</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (sPoolSync) &#123; <span class="comment">// sPoolSync 是一个 Object 对象，用来同步保证线程安全</span></span><br><span class="line">            <span class="comment">// sPoll 是在 Looper.loop() -&gt; loopOnce() 中 dispatchMessage() 后 Message.recycleUnchecked() 回收的 Message</span></span><br><span class="line">            <span class="keyword">if</span> (sPool != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">Message</span> <span class="variable">m</span> <span class="operator">=</span> sPool;</span><br><span class="line">                sPool = m.next;</span><br><span class="line">                m.next = <span class="literal">null</span>;</span><br><span class="line">                m.flags = <span class="number">0</span>; <span class="comment">// clear in-use flag</span></span><br><span class="line">                sPoolSize--;</span><br><span class="line">                <span class="keyword">return</span> m;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Message</span>();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>如果消息池中有 Message 则直接取出返回，否则 new 一个 Message；</p>
<p><strong>日常使用时优先使用 <code>Message.obtain()</code> 或者 <code>Handler.obtainMessage()</code> 获取消息，可以检查是否有可以复用的 Message，避免频繁创建、销毁 Message 对象，可优化内存和性能；</strong></p>
<h2 id="MessageQuene"><a href="#MessageQuene" class="headerlink" title="MessageQuene"></a>MessageQuene</h2><p>MessageQueue 是用来存放 Message 的地方，虽然名为消息队列，但是实际上是使用 <font color=red><strong>单链表</strong></font> 数据结构来维护消息的；</p>
<p>从前述 Message 对象看到，每个 Message 都持有一个 next 属性，而 next 属性也是一个 Message 对象，所以 MessageQueue 是一个<strong>单链表</strong>，同时 Message 对象还有一个 when 属性，在 MessageQueue 中会根据 when 值<strong>从小到大</strong>进行插入，when 值最小的在表头，所以 MessageQueue 中的消息是<strong>有优先级的</strong>；</p>
<h3 id="MessageQueue-构造函数"><a href="#MessageQueue-构造函数" class="headerlink" title="MessageQueue 构造函数"></a>MessageQueue 构造函数</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// MessageQueue.java</span></span><br><span class="line">    MessageQueue(<span class="type">boolean</span> quitAllowed) &#123;</span><br><span class="line">        mQuitAllowed = quitAllowed; <span class="comment">// 消息队列是否可以销毁，主线程的队列不可以销毁需要传入 false</span></span><br><span class="line">        mPtr = nativeInit();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>mQuitAllowed 决定消息队列是否可以销毁，主线程的队列是不可以销毁的，需要传入 false；</p>
<p>MessageQueue 主要有两个操作，插入消息（MessageQueue.enqueueMessage）和读取消息(MessageQueue.next)；</p>
<h3 id="enqueueMessage-插入消息"><a href="#enqueueMessage-插入消息" class="headerlink" title="enqueueMessage() 插入消息"></a>enqueueMessage() 插入消息</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// MessageQueue.java</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">enqueueMessage</span><span class="params">(Message msg, <span class="type">long</span> when)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// 内置锁（由系统控制 lock 和 unlock），对所有调用同一个 MQ 对象的线程来说都是互斥的</span></span><br><span class="line">        <span class="comment">// 1线程-&gt;1Looper-&gt;1MQ，所以主线程就只有一个 MQ 对象，那么所有子线程向主线程发送消息的时候，</span></span><br><span class="line">        <span class="comment">// 主线程一次只处理一个消息，其他消息都需要等待，如此消息队列就不会混乱</span></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">            ...</span><br><span class="line">            msg.markInUse();</span><br><span class="line">            msg.when = when;</span><br><span class="line">            <span class="type">Message</span> <span class="variable">p</span> <span class="operator">=</span> mMessages; <span class="comment">// 当前链表头结点</span></span><br><span class="line">            <span class="type">boolean</span> needWake;</span><br><span class="line">            <span class="keyword">if</span> (p == <span class="literal">null</span> || when == <span class="number">0</span> || when &lt; p.when) &#123; <span class="comment">// 插入队列头部</span></span><br><span class="line">                <span class="comment">// New head, wake up the event queue if blocked.</span></span><br><span class="line">                msg.next = p;</span><br><span class="line">                mMessages = msg;</span><br><span class="line">                needWake = mBlocked;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 根据 when 值插入到适当位置</span></span><br><span class="line">                <span class="comment">// Inserted within the middle of the queue.  Usually we don&#x27;t have to wake</span></span><br><span class="line">                <span class="comment">// up the event queue unless there is a barrier at the head of the queue</span></span><br><span class="line">                <span class="comment">// and the message is the earliest asynchronous message in the queue.</span></span><br><span class="line">                needWake = mBlocked &amp;&amp; p.target == <span class="literal">null</span> &amp;&amp; msg.isAsynchronous();</span><br><span class="line">                Message prev;</span><br><span class="line">                <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                    prev = p;</span><br><span class="line">                    p = p.next;</span><br><span class="line">                    <span class="keyword">if</span> (p == <span class="literal">null</span> || when &lt; p.when) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (needWake &amp;&amp; p.isAsynchronous()) &#123;</span><br><span class="line">                        needWake = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                msg.next = p; <span class="comment">// invariant: p == prev.next</span></span><br><span class="line">                prev.next = msg;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// We can assume mPtr != 0 because mQuitting is false.</span></span><br><span class="line">            <span class="keyword">if</span> (needWake) &#123;</span><br><span class="line">                nativeWake(mPtr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>MessageQueue 中有一个 <code>Message mMessages</code> 属性，代表消息队列头节点，向消息队列中插入消息时，如果 <code>p==null（消息队列为空）|| when == 0 || when &lt; p.when(当前要插入消息的 when 小于消息队列头节点的 when)</code>，则把当前消息插入到消息队列头节点，并且赋给 mMessages；</p>
<p>否则和消息队列中现有 Message 的 when 值进行比较，插入到适当位置；</p>
<h3 id="next-取消息"><a href="#next-取消息" class="headerlink" title="next() 取消息"></a>next() 取消息</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// MessageQueue.java</span></span><br><span class="line">    Message <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// Return here if the message loop has already quit and been disposed.</span></span><br><span class="line">        <span class="comment">// This can happen if the application tries to restart a looper after quit</span></span><br><span class="line">        <span class="comment">// which is not supported.</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">long</span> <span class="variable">ptr</span> <span class="operator">=</span> mPtr;</span><br><span class="line">        <span class="keyword">if</span> (ptr == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">pendingIdleHandlerCount</span> <span class="operator">=</span> -<span class="number">1</span>; <span class="comment">// -1 only during first iteration</span></span><br><span class="line">        <span class="comment">// -1：一直阻塞不会超时；0：不会阻塞，立即返回；&gt;0：最长阻塞时间（毫秒）</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">nextPollTimeoutMillis</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nextPollTimeoutMillis != <span class="number">0</span>) &#123;</span><br><span class="line">                Binder.flushPendingCommands();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            nativePollOnce(ptr, nextPollTimeoutMillis); <span class="comment">// 阻塞多久</span></span><br><span class="line">            <span class="comment">// 此处加锁的目的是为了 next() 函数和 enqueueMessage() 函数互斥，如此插入消息和读取消息就会互斥，</span></span><br><span class="line">            <span class="comment">// 才能保证多线程访问的时候 MQ 的有序进行</span></span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">                <span class="comment">// Try to retrieve the next message.  Return if found.</span></span><br><span class="line">                <span class="keyword">final</span> <span class="type">long</span> <span class="variable">now</span> <span class="operator">=</span> SystemClock.uptimeMillis(); <span class="comment">// 获取系统开机到现在的时间</span></span><br><span class="line">                <span class="type">Message</span> <span class="variable">prevMsg</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> mMessages; <span class="comment">// 当前链表的头结点</span></span><br><span class="line">                <span class="keyword">if</span> (msg != <span class="literal">null</span> &amp;&amp; msg.target == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 如果 target == null，那么就是同步屏障，循环遍历，一直往后找到第一个异步的消息</span></span><br><span class="line">                    <span class="comment">// Stalled by a barrier.  Find the next asynchronous message in the queue.</span></span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        prevMsg = msg;</span><br><span class="line">                        msg = msg.next;</span><br><span class="line">                    &#125; <span class="keyword">while</span> (msg != <span class="literal">null</span> &amp;&amp; !msg.isAsynchronous());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (msg != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 如果有消息需要处理，先判断时间有没有到，如果没到设置需要阻塞的时间，比如 postDelay 场景</span></span><br><span class="line">                    <span class="keyword">if</span> (now &lt; msg.when) &#123;</span><br><span class="line">                        <span class="comment">// Next message is not ready.  Set a timeout to wake up when it is ready.</span></span><br><span class="line">                        nextPollTimeoutMillis = (<span class="type">int</span>) Math.min(msg.when - now, Integer.MAX_VALUE);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// Got a message.</span></span><br><span class="line">                        mBlocked = <span class="literal">false</span>;</span><br><span class="line">                        <span class="comment">// 链表操作，获取 msg 并删除该节点</span></span><br><span class="line">                        <span class="keyword">if</span> (prevMsg != <span class="literal">null</span>) &#123;</span><br><span class="line">                            prevMsg.next = msg.next;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            mMessages = msg.next;</span><br><span class="line">                        &#125;</span><br><span class="line">                        msg.next = <span class="literal">null</span>; <span class="comment">// 从消息队列中移除获取到的消息</span></span><br><span class="line">                        <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">&quot;Returning message: &quot;</span> + msg);</span><br><span class="line">                        msg.markInUse();</span><br><span class="line">                        <span class="keyword">return</span> msg; <span class="comment">// 返回队列中下一条要执行的消息</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// No more messages.</span></span><br><span class="line">                    nextPollTimeoutMillis = -<span class="number">1</span>; <span class="comment">// 如果没有消息需要处理，就进入休眠，直到被唤醒</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Process the quit message now that all pending messages have been handled.</span></span><br><span class="line">                <span class="keyword">if</span> (mQuitting) &#123;</span><br><span class="line">                    dispose();</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure>

<p>首先判断 MessageQueue 的头结点 mMessages.target 是否等于 null，如果是 null，代表有同步屏障，则从消息队列中找到第一个异步消息，否则找出消息队列头结点消息；</p>
<p>如果有消息需要处理(msg !&#x3D; null)，首先判断消息执行时间是否到了，如果没到就阻塞差值时间，如果到了就取出消息并从消息队列中删除此节点，返回拿到的消息；</p>
<p>如果没有消息要处理(msg &#x3D;&#x3D; null)，则 <code>nextPollTimeoutMillis = -1</code>，通过 nativePollOnce() 一直阻塞；</p>
<p>可以看到 <code>enqueueMessage()</code> 和 <code>next()</code> 函数执行时都有对 MessageQueue 加锁 <code>synchronized (this)</code>，这样就保证了插入消息和读取消息互斥；</p>
<h3 id="IdleHandler"><a href="#IdleHandler" class="headerlink" title="IdleHandler"></a>IdleHandler</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// MessageQueue.java</span></span><br><span class="line">    Message <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">pendingIdleHandlerCount</span> <span class="operator">=</span> -<span class="number">1</span>; <span class="comment">// -1 only during first iteration</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">nextPollTimeoutMillis</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// -1: 一直阻塞，0: 不阻塞，&gt;0: 阻塞毫秒数</span></span><br><span class="line">        ...</span><br><span class="line">                <span class="keyword">if</span> (mQuitting) &#123;</span><br><span class="line">                    dispose();</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (pendingIdleHandlerCount &lt; <span class="number">0</span></span><br><span class="line">                        &amp;&amp; (mMessages == <span class="literal">null</span> || now &lt; mMessages.when)) &#123;</span><br><span class="line">                    <span class="comment">// 如果消息队列为空或者消息还没到触发时间，则当前队列为空闲状态</span></span><br><span class="line">                    pendingIdleHandlerCount = mIdleHandlers.size();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (pendingIdleHandlerCount &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// No idle handlers to run.  Loop and wait some more.</span></span><br><span class="line">                    mBlocked = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (mPendingIdleHandlers == <span class="literal">null</span>) &#123; <span class="comment">// 如果数组为 null，创建数组</span></span><br><span class="line">                    mPendingIdleHandlers = <span class="keyword">new</span> <span class="title class_">IdleHandler</span>[Math.max(pendingIdleHandlerCount, <span class="number">4</span>)];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 从 mIdleHandlers 这个列表获取 IdleHandler 元素</span></span><br><span class="line">                mPendingIdleHandlers = mIdleHandlers.toArray(mPendingIdleHandlers);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 遍历 mPendingIdleHandlers 数组，调用每个 IdleHandler 的 queueIdle() 方法</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; pendingIdleHandlerCount; i++) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="type">IdleHandler</span> <span class="variable">idler</span> <span class="operator">=</span> mPendingIdleHandlers[i];</span><br><span class="line">                mPendingIdleHandlers[i] = <span class="literal">null</span>; <span class="comment">// release the reference to the handler</span></span><br><span class="line"></span><br><span class="line">                <span class="type">boolean</span> <span class="variable">keep</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    keep = idler.queueIdle();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                    Log.wtf(TAG, <span class="string">&quot;IdleHandler threw exception&quot;</span>, t);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 如果 queueIdle() 返回 false，则从 mIdleHandlers 列表中移除这个 IdleHandler</span></span><br><span class="line">                <span class="keyword">if</span> (!keep) &#123;</span><br><span class="line">                    <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">                        mIdleHandlers.remove(idler);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Reset the idle handler count to 0 so we do not run them again.</span></span><br><span class="line">            pendingIdleHandlerCount = <span class="number">0</span>; <span class="comment">// 重置 IdleHandler 数量为 0 以免后面重复执行</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// While calling an idle handler, a new message could have been delivered</span></span><br><span class="line">            <span class="comment">// so go back and look again for a pending message without waiting.</span></span><br><span class="line">            nextPollTimeoutMillis = <span class="number">0</span>; <span class="comment">// 重置为 0，使之不阻塞</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>如果当前队列中没有消息要处理或者还没到消息的触发时间，则认为当前队列处于空闲状态，才会执行 IdleHandler；</p>
<p>先从 mIdleHandlers 这个 ArrayList 列表中获取 IdleHandler 元素放入 mPendingIdleHandlers 数组，然后遍历这个数组，调用数组中每个 IdleHandler 的 <code>queueIdle()</code>方法，执行处理逻辑；</p>
<p>如果 <code>queueIdle()</code>返回 false，则表示 <code>queueIdle()</code> 执行后移除此 IdleHandler，否则保留此 IdleHandler；</p>
<p>全部执行完后重置 <code>pendingIdleHandlerCount = 0</code>，以免下次轮询消息队列的时候又重复执行，然后重置 <code>nextPollTimeoutMillis = 0</code>，不再阻塞队列，所以这里的代码也不能太耗时，否则就影响后面 Message 的执行了；</p>
<h4 id="IdleHandler-使用"><a href="#IdleHandler-使用" class="headerlink" title="IdleHandler 使用"></a>IdleHandler 使用</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Looper.myQueue().addIdleHandler(<span class="keyword">new</span> <span class="title class_">IdleHandler</span>()&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">queueIdle</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 处理逻辑</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h2 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h2><h3 id="Handler-创建"><a href="#Handler-创建" class="headerlink" title="Handler 创建"></a>Handler 创建</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Handler.java</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Handler</span><span class="params">(<span class="meta">@NonNull</span> Looper looper)</span> &#123; <span class="comment">// 指定 Looper</span></span><br><span class="line">        <span class="built_in">this</span>(looper, <span class="literal">null</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Handler</span><span class="params">(<span class="meta">@NonNull</span> Looper looper, <span class="meta">@Nullable</span> Callback callback)</span> &#123; <span class="comment">// 指定 Looper 和 Callback</span></span><br><span class="line">        <span class="built_in">this</span>(looper, callback, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Handler</span><span class="params">(<span class="meta">@NonNull</span> Looper looper, <span class="meta">@Nullable</span> Callback callback, <span class="type">boolean</span> async)</span> &#123;</span><br><span class="line">        mLooper = looper;</span><br><span class="line">        mQueue = looper.mQueue;</span><br><span class="line">        mCallback = callback;</span><br><span class="line">        mAsynchronous = async;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>参数可指定 Looper、Callback 回调方法以及是否异步，之前的无参构造函数从 Android 11 开始被废弃，使用 <code>new Handler(Looper.myLooper())</code> 代替原来的无参构造方法，在创建 Handler 的同时也绑定了 Looper 的消息队列；</p>
<h3 id="sendMessage-发送消息"><a href="#sendMessage-发送消息" class="headerlink" title="sendMessage() 发送消息"></a>sendMessage() 发送消息</h3><p>发送消息的函数有如下几种：</p>
<ul>
<li>sendMessage()</li>
<li>sendMessageAtFrontOfQueue()</li>
<li>sendMessageAtTime()</li>
<li>sendMessageDelayed()</li>
<li>sendEmptyMessage()</li>
<li>sendEmptyMessageAtTime()</li>
<li>sendEmptyMessageDelayed()</li>
<li>postXXX()</li>
</ul>
<p>但是殊途同归，最终都是调用到 <code>Handler.enqueueMessage(queue, msg, uptimeMillis)</code>，然后再调用到 <code>MessageQueue.enqueueMessage(msg, uptimeMillis)</code>；</p>
<h3 id="dispatchMessage-分发消息"><a href="#dispatchMessage-分发消息" class="headerlink" title="dispatchMessage() 分发消息"></a>dispatchMessage() 分发消息</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Handler.java</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispatchMessage</span><span class="params">(<span class="meta">@NonNull</span> Message msg)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (msg.callback != <span class="literal">null</span>) &#123; <span class="comment">// Message 存在回调方法，则执行 message.callback.run()</span></span><br><span class="line">            handleCallback(msg);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (mCallback != <span class="literal">null</span>) &#123; <span class="comment">// Handler 存在 CallBack 变量，则执行 mCallback.handleMessage(msg) </span></span><br><span class="line">                <span class="keyword">if</span> (mCallback.handleMessage(msg)) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            handleMessage(msg); <span class="comment">// 否则执行 Handler 自身的回调方法</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleMessage</span><span class="params">(<span class="meta">@NonNull</span> Message msg)</span> &#123; <span class="comment">// 默认空实现，Handler 子类需要重写以接收消息</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><code>msg.callback != null</code>的情况是使用 <code>post(runnable)</code> 发送消息时，把传入的 runnable 赋值给了 <code>Message.callback</code>；</p>
<p><code>mCallback != null</code>则是在创建 Handler 对象时传入了一个 Callback 参数；</p>
<p>一般使用子类重写 handleMessage 这种方法用的比较多；</p>
<h2 id="Looper"><a href="#Looper" class="headerlink" title="Looper"></a>Looper</h2><h3 id="Looper-1"><a href="#Looper-1" class="headerlink" title="Looper()"></a>Looper()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Looper.java</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Looper</span><span class="params">(<span class="type">boolean</span> quitAllowed)</span> &#123;</span><br><span class="line">        mQueue = <span class="keyword">new</span> <span class="title class_">MessageQueue</span>(quitAllowed);</span><br><span class="line">        mThread = Thread.currentThread();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>Looper 创建的同时初始化了 MessageQueue；</p>
<h3 id="prepare"><a href="#prepare" class="headerlink" title="prepare()"></a>prepare()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Looper.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Looper</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Looper&gt; sThreadLocal = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;Looper&gt;(); <span class="comment">// TLS 变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Looper sMainLooper; <span class="comment">// 主线程 Looper</span></span><br><span class="line">    <span class="keyword">final</span> MessageQueue mQueue;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">prepare</span><span class="params">()</span> &#123;</span><br><span class="line">        prepare(<span class="literal">true</span>); <span class="comment">// 无参方法，子线程中调用，传入参数 true，即 Looper 可退出</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">prepare</span><span class="params">(<span class="type">boolean</span> quitAllowed)</span> &#123; <span class="comment">// 主线程中调用传入 false 参数</span></span><br><span class="line">        <span class="keyword">if</span> (sThreadLocal.get() != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Only one Looper may be created per thread&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sThreadLocal.set(<span class="keyword">new</span> <span class="title class_">Looper</span>(quitAllowed));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>每个线程只能有一个 Looper，Looper 中有一个 ThreadLocal 对象 sThreadLocal，这个 sThreadLocal 是一个 TLS 变量，线程间互不影响；</p>
<p>这里 sThreadLocal 把一个 Looper 对象 set 进去了，所以说每个线程都有自己的一个 Looper，且仅有一个；</p>
<p>在 ActivityThread.main() 中调用了 <code>Looper.prepareMainLooper()</code>，在其中通过 <code>prepare(false)</code> <strong>设置了主线程的 Looper</strong>，在 Looper 的构造中又<strong>初始化了 MessageQueue</strong>；</p>
<h3 id="loop"><a href="#loop" class="headerlink" title="loop()"></a>loop()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Looper.java</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Looper</span> <span class="variable">me</span> <span class="operator">=</span> myLooper(); <span class="comment">// 获取当前线程 Looper 对象</span></span><br><span class="line">        ...</span><br><span class="line">        me.mInLoop = <span class="literal">true</span>;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!loopOnce(me, ident, thresholdOverride)) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>loop() 中有一个死循环 <code>for(;;)</code>，在其中调用了 <code>loopOnce()</code>；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Looper.java</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">loopOnce</span><span class="params">(<span class="keyword">final</span> Looper me,</span></span><br><span class="line"><span class="params">            <span class="keyword">final</span> <span class="type">long</span> ident, <span class="keyword">final</span> <span class="type">int</span> thresholdOverride)</span> &#123;</span><br><span class="line">        <span class="comment">// 从 MessageQueue 中取消息</span></span><br><span class="line">        <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> me.mQueue.next(); <span class="comment">// might block</span></span><br><span class="line">        <span class="keyword">if</span> (msg == <span class="literal">null</span>) &#123; <span class="comment">// msg 为 null，则直接 return false 退出循环，说明 Looper 退出</span></span><br><span class="line">            <span class="comment">// No message indicates that the message queue is quitting.</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// This must be in a local variable, in case a UI event sets the logger</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Printer</span> <span class="variable">logging</span> <span class="operator">=</span> me.mLogging; <span class="comment">// 可利用这里通过 setMessageLogging() 指定输出，用于 debug</span></span><br><span class="line">        <span class="keyword">if</span> (logging != <span class="literal">null</span>) &#123;</span><br><span class="line">            logging.println(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt; Dispatching to &quot;</span> + msg.target + <span class="string">&quot; &quot;</span></span><br><span class="line">                    + msg.callback + <span class="string">&quot;: &quot;</span> + msg.what);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Make sure the observer won&#x27;t change while processing a transaction.</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Observer</span> <span class="variable">observer</span> <span class="operator">=</span> sObserver;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            msg.target.dispatchMessage(msg); <span class="comment">// 调用 Handler.dispatchMessage 分发消息</span></span><br><span class="line">            <span class="keyword">if</span> (observer != <span class="literal">null</span>) &#123;</span><br><span class="line">                observer.messageDispatched(token, msg);</span><br><span class="line">            &#125;</span><br><span class="line">            dispatchEnd = needEndTime ? SystemClock.uptimeMillis() : <span class="number">0</span>;</span><br><span class="line">        &#125; ...</span><br><span class="line">        <span class="keyword">if</span> (logging != <span class="literal">null</span>) &#123;</span><br><span class="line">            logging.println(<span class="string">&quot;&lt;&lt;&lt;&lt;&lt; Finished to &quot;</span> + msg.target + <span class="string">&quot; &quot;</span> + msg.callback);</span><br><span class="line">        &#125;</span><br><span class="line">        msg.recycleUnchecked(); <span class="comment">// 把分发后的 Message 回收到消息池</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>loop() 函数中运行了一个死循环，不断的使用 MessageQueue.next() 中读取下一条 Message，如果取出的 msg &#x3D; null，则 <code>loopOnce()</code> 返回 false，这样 <code>loop()</code>就退出死循环了，从而 <code>ActivityThread.main()</code>方法也结束了，整个程序也退出了，但是我们的程序是要一直运行的，所以 <code>MessageQueue.next()</code>方法中一直有消息，但是如果程序一段时间没有操作，也就没有需要执行的消息了，为什么程序还不退出呢？这是因为当没有消息要处理的时候，<code>MessageQueue.next()</code>会一直阻塞，直到 <code>MessageQueue.enqueueMessage()</code>插入消息时使用 <code>nativeWake(mPtr)</code>唤醒；</p>
<p> 把 Message 分发给对应的 Handler，分发后回收 Message，这样需要 Message 时就可以直接通过 Message.obtain() 或者 Handler.obtainMessage() 获取了，可以优化内存和性能；</p>
<p>如果 logging 不为 null，在分发消息的前后都使用 <code>logging.println()</code> 打印了log，mLogging 在 Looper 中没有初始化值，所以默认为空，在应用中可以通过 setMessageLogging() 指定输出用于调试，比如通过前后两条 log 的时间判断消息的执行时间，判断是否有卡顿；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Looper.java</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessageLogging</span><span class="params">(<span class="meta">@Nullable</span> Printer printer)</span> &#123;</span><br><span class="line">        mLogging = printer;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h2><p>ThreadLocal（Thread Local Storage，线程本地存储，简称 TLS）是一个在多线程中为每一个线程创建单独的变量副本的类；当使用 ThreadLocal 来维护变量时，ThreadLocal 会为每个线程创建单独的变量副本，每个线程的 TLS 变量之间互不影响，避免了多线程操作共享变量导致数据不一致的情况；</p>
<p>ThreadLocal 中有 set() 和 get() 两个函数，作用分别是将 value 值添加到当前线程的 TLS 区域，获取当前线程 TLS 区域的数据；</p>
<h3 id="ThreadLocal-set"><a href="#ThreadLocal-set" class="headerlink" title="ThreadLocal.set()"></a>ThreadLocal.set()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ThreadLocal.java</span></span><br><span class="line"><span class="comment">// ThreadLocal.set()</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(T value)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> Thread.currentThread(); <span class="comment">// 获取当前线程</span></span><br><span class="line">        ThreadLocal.<span class="type">ThreadLocalMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="built_in">this</span>.getMap(t); <span class="comment">// 获取当前线程的 ThreadLocalMap 对象变量 threadLocals</span></span><br><span class="line">        <span class="keyword">if</span> (map != <span class="literal">null</span>) &#123;</span><br><span class="line">            map.set(<span class="built_in">this</span>, value); <span class="comment">// 更新 ThreadLocalMap 中的 Entry 数组中的 Entry 对象，或添加一个 Entry 到 ThreadLocalMap 中</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.createMap(t, value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>set() 对应 ThreadLocalMap 的 set()：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ThreadLocal.java</span></span><br><span class="line"><span class="comment">// ThreadLocalMap.set()</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(ThreadLocal&lt;?&gt; key, Object value)</span> &#123;</span><br><span class="line">            ThreadLocal.ThreadLocalMap.Entry[] tab = <span class="built_in">this</span>.table;</span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> tab.length;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> key.threadLocalHashCode &amp; len - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(ThreadLocal.ThreadLocalMap.<span class="type">Entry</span> <span class="variable">e</span> <span class="operator">=</span> tab[i]; e != <span class="literal">null</span>; e = tab[i = nextIndex(i, len)]) &#123;</span><br><span class="line">                ThreadLocal&lt;?&gt; k = (ThreadLocal)e.get();</span><br><span class="line">                <span class="keyword">if</span> (k == key) &#123;</span><br><span class="line">                    e.value = value;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (k == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.replaceStaleEntry(key, value, i);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            tab[i] = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>.ThreadLocalMap.Entry(key, value);</span><br><span class="line">            <span class="type">int</span> <span class="variable">sz</span> <span class="operator">=</span> ++<span class="built_in">this</span>.size;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">this</span>.cleanSomeSlots(i, sz) &amp;&amp; sz &gt;= <span class="built_in">this</span>.threshold) &#123;</span><br><span class="line">                <span class="built_in">this</span>.rehash();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>大致意思就是 ThreadLocalMap 中有一个 Entry 对象数组，每个 Entry 对象是以 ThreadLocal 变量和一个 Object 类型的 value 构造而成，当调用 set() 时，会先遍历这个数组，看有没有和当前要 set 的 key 相同的 Entry，如果有，则更新 Entry.value 为要 set 的 value，否则以 key 和 value 新建一个 Entry 对象，并添加到 ThreadLocalMap 的 Entry 数组中；</p>
<h3 id="ThreadLocal-get"><a href="#ThreadLocal-get" class="headerlink" title="ThreadLocal.get()"></a>ThreadLocal.get()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ThreadLocal.java</span></span><br><span class="line"><span class="comment">// ThreadLocal.get()</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">        ThreadLocal.<span class="type">ThreadLocalMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="built_in">this</span>.getMap(t);</span><br><span class="line">        <span class="keyword">if</span> (map != <span class="literal">null</span>) &#123;</span><br><span class="line">            ThreadLocal.ThreadLocalMap.<span class="type">Entry</span> <span class="variable">e</span> <span class="operator">=</span> map.getEntry(<span class="built_in">this</span>);</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">T</span> <span class="variable">result</span> <span class="operator">=</span> e.value;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.setInitialValue();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>ThreadLocal.get() 则是获取 ThreadLocalMap.Entry 的 value 值；</p>
<p>每一个 Thread 中都有一个 ThreadLocalMap 变量，getMap() 就是获取线程中的 ThreadLocalMap 变量；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Thread.java</span></span><br><span class="line">ThreadLocalMap threadLocals;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ThreadLocal.java</span></span><br><span class="line"><span class="comment">// getMap()</span></span><br><span class="line">    ThreadLocal.ThreadLocalMap <span class="title function_">getMap</span><span class="params">(Thread t)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> t.threadLocals;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="同步屏障"><a href="#同步屏障" class="headerlink" title="同步屏障"></a>同步屏障</h2><h3 id="postSyncBarrier-添加屏障"><a href="#postSyncBarrier-添加屏障" class="headerlink" title="postSyncBarrier() 添加屏障"></a>postSyncBarrier() 添加屏障</h3><p>同步屏障是在消息队列中添加一个同步屏障消息，在此屏障后只有异步消息可以执行，同步屏障的插入在 MessageQueue 中定义：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// MessageQueue.java</span></span><br><span class="line">    <span class="meta">@UnsupportedAppUsage</span></span><br><span class="line">    <span class="meta">@TestApi</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">postSyncBarrier</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> postSyncBarrier(SystemClock.uptimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">postSyncBarrier</span><span class="params">(<span class="type">long</span> when)</span> &#123;</span><br><span class="line">        <span class="comment">// Enqueue a new sync barrier token.</span></span><br><span class="line">        <span class="comment">// We don&#x27;t need to wake the queue because the purpose of a barrier is to stall it.</span></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">token</span> <span class="operator">=</span> mNextBarrierToken++;</span><br><span class="line">            <span class="comment">// 生成同步屏障消息，同步屏障消息没有 target</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> Message.obtain();</span><br><span class="line">            msg.markInUse();</span><br><span class="line">            msg.when = when;</span><br><span class="line">            msg.arg1 = token; <span class="comment">// 把 token 赋给 msg 的 arg1</span></span><br><span class="line"></span><br><span class="line">            <span class="type">Message</span> <span class="variable">prev</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="type">Message</span> <span class="variable">p</span> <span class="operator">=</span> mMessages;</span><br><span class="line">            <span class="comment">// 根据时间顺序将屏障消息插入到消息链表中的适当位置</span></span><br><span class="line">            <span class="keyword">if</span> (when != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">while</span> (p != <span class="literal">null</span> &amp;&amp; p.when &lt;= when) &#123;</span><br><span class="line">                    prev = p;</span><br><span class="line">                    p = p.next;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (prev != <span class="literal">null</span>) &#123; <span class="comment">// invariant: p == prev.next</span></span><br><span class="line">                <span class="comment">// 消息队列不为空，插入同步屏障消息到消息队列中</span></span><br><span class="line">                msg.next = p;</span><br><span class="line">                prev.next = msg;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 消息队列为空，消息队列指针指向同步屏障</span></span><br><span class="line">                msg.next = p;</span><br><span class="line">                mMessages = msg;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 返回一个 token，以便调用 removeSyncBarrier(token) 来释放同步屏障</span></span><br><span class="line">            <span class="keyword">return</span> token;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>postSyncBarrier() 作用就是插入一个特殊的同步屏障消息到消息队列中，此消息和普通消息相比没有 target，即 <code>target = null</code>，因为普通消息需要把消息分发给对应的 target，但是同步屏障消息不需要被分发，它只是用来挡住同步消息从而保证异步消息优先处理；</p>
<p>把生成的同步屏障消息根据 when 值插入到消息队列的适当位置，最后返回一个 token，根据此 token 可以移除屏障；</p>
<p>postSyncBarrier() 标记了注解 <code>@UnsupportedAppUsage</code>，如果应用中要调用的话需要使用反射；</p>
<h3 id="removeSyncBarrier-移除屏障"><a href="#removeSyncBarrier-移除屏障" class="headerlink" title="removeSyncBarrier() 移除屏障"></a>removeSyncBarrier() 移除屏障</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// MessageQueue.java</span></span><br><span class="line">    <span class="meta">@UnsupportedAppUsage</span></span><br><span class="line">    <span class="meta">@TestApi</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeSyncBarrier</span><span class="params">(<span class="type">int</span> token)</span> &#123;</span><br><span class="line">        <span class="comment">// Remove a sync barrier token from the queue.</span></span><br><span class="line">        <span class="comment">// If the queue is no longer stalled by a barrier then wake it.</span></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">            <span class="type">Message</span> <span class="variable">prev</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="type">Message</span> <span class="variable">p</span> <span class="operator">=</span> mMessages;</span><br><span class="line">            <span class="comment">// 根据 token 查找同步屏障消息</span></span><br><span class="line">            <span class="keyword">while</span> (p != <span class="literal">null</span> &amp;&amp; (p.target != <span class="literal">null</span> || p.arg1 != token)) &#123;</span><br><span class="line">                prev = p;</span><br><span class="line">                p = p.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果这里为 null，说明这个 token 对应的同步屏障消息要么还没有添加到消息队列中；要么已经被移除掉了，抛出异常</span></span><br><span class="line">            <span class="keyword">if</span> (p == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;The specified message queue synchronization &quot;</span></span><br><span class="line">                        + <span class="string">&quot; barrier token has not been posted or has already been removed.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">boolean</span> needWake;</span><br><span class="line">            <span class="keyword">if</span> (prev != <span class="literal">null</span>) &#123; <span class="comment">// 从消息队列中移除同步屏障消息；当前消息循环已经在运行中，不需要再次唤醒</span></span><br><span class="line">                prev.next = p.next;</span><br><span class="line">                needWake = <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 同步屏障消息位于消息队列第一个，从消息队列中移除同步屏障</span></span><br><span class="line">                mMessages = p.next;</span><br><span class="line">                <span class="comment">// 当前消息循环为阻塞状态，如果下一个消息为null，或者下一个消息的 target 不为 null，则唤醒消息循环</span></span><br><span class="line">                needWake = mMessages == <span class="literal">null</span> || mMessages.target != <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            p.recycleUnchecked(); <span class="comment">// 回收 Message 消息，循环利用</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// If the loop is quitting then it is already awake.</span></span><br><span class="line">            <span class="comment">// We can assume mPtr != 0 when mQuitting is false.</span></span><br><span class="line">            <span class="keyword">if</span> (needWake &amp;&amp; !mQuitting) &#123;</span><br><span class="line">                nativeWake(mPtr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>removeSyncBarrier 就是从消息队列中找到同步屏障消息并移除；</p>
<p>在 MessageQueue.next() 中拿到消息后，会先判断此消息是否同步屏障消息，如果是，则从消息队列中跳过同步消息，找出异步消息进行处理，知道移除同步屏障后同步消息才会被处理；</p>
<h2 id="runWithScissors"><a href="#runWithScissors" class="headerlink" title="runWithScissors()"></a>runWithScissors()</h2><p><code>runWithScissors()</code>作用是同步运行指定的任务；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Handler.java</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">runWithScissors</span><span class="params">(<span class="meta">@NonNull</span> Runnable r, <span class="type">long</span> timeout)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (r == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;runnable must not be null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (timeout &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;timeout must be non-negative&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Looper.myLooper() == mLooper) &#123; <span class="comment">// Looper.myLooper 是当前线程 looper</span></span><br><span class="line">            r.run();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">BlockingRunnable</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BlockingRunnable</span>(r);</span><br><span class="line">        <span class="keyword">return</span> br.postAndWait(<span class="built_in">this</span>, timeout);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>如果当前线程与 Handler 所在线程相同，则 runnable 立即运行。否则把 runnable 包装成 BlockingRunnable，再调用其 <code>postAndWait()</code>；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Handler.java</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">BlockingRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Runnable mTask;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">boolean</span> mDone;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">BlockingRunnable</span><span class="params">(Runnable task)</span> &#123;</span><br><span class="line">            mTask = task; <span class="comment">// 把要运行的任务传递给 BlockingRunnable 的 mTask，等待后续被调用</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                mTask.run();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">                    mDone = <span class="literal">true</span>;</span><br><span class="line">                    notifyAll();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">postAndWait</span><span class="params">(Handler handler, <span class="type">long</span> timeout)</span> &#123;</span><br><span class="line">            <span class="comment">// 把封装了 runnable 的 BlockingRunnable 通过 Handler.post() 加入到消息队列</span></span><br><span class="line">            <span class="keyword">if</span> (!handler.post(<span class="built_in">this</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 如果 post 失败，表明 Looper 出问题了，返回 false</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (timeout &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">final</span> <span class="type">long</span> <span class="variable">expirationTime</span> <span class="operator">=</span> SystemClock.uptimeMillis() + timeout;</span><br><span class="line">                    <span class="keyword">while</span> (!mDone) &#123;</span><br><span class="line">                        <span class="type">long</span> <span class="variable">delay</span> <span class="operator">=</span> expirationTime - SystemClock.uptimeMillis();</span><br><span class="line">                        <span class="keyword">if</span> (delay &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// timeout 超时了，任务执行失败</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            wait(delay); <span class="comment">// 进入阻塞</span></span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">while</span> (!mDone) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            wait();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>在 <code>postAndWait()</code>中首先通过 <code>Handler.post()</code> 把封装一层 runnable 的 BlockingRunnable 加入到消息队列，如果 post 失败，则说明 Looper 出问题了，返回 false；</p>
<p>随后如果 <code>timeout &gt; 0</code>，则阻塞等待，如果超时被唤醒，则返回 false；</p>
<p>再看 <code>BlockingRunnable.run()</code>方法，当任务加入到消息队列成功，<code>BlockingRunnable.run()</code> 被 Handler 调度并在其线程执行，在其中调用 <code>mTask.run()</code>，即我们需要执行的 Runnable 任务，执行结束后配置 <code>mDone = true</code>并通过 <code>notifyAll()</code>唤醒 <code>postAndWait()</code> 中的阻塞等待，任务发起线程被唤醒后判断 mDone，如果为 true 则在结尾处返回 true 退出；</p>
<h3 id="可能存在的问题"><a href="#可能存在的问题" class="headerlink" title="可能存在的问题"></a>可能存在的问题</h3><p>当 timeout 超时时是直接返回 false 退出的，需要执行的 Runnable 任务还在目标线程的 MessageQueue 中，没有被移除掉，最终还是会被 Handler 线程调度执行，但是此时的执行已经不符合业务预期了；</p>
<p>而更严重的是使用 runWithScissors() 可能造成调用线程进入阻塞，而得不到唤醒，因为如果线程 Looper() 通过 <code>quit()</code>退出时，会清理掉还未执行的任务，那么此时发送线程就永远得不到唤醒了，所以要求 Handler 所在线程 Looper 不会退出，或者使用 <code>quitSafely()</code>方式退出，因为 <code>quitSafely()</code>只会清理掉当前时间点之后的任务；</p>
<p>如果当前持有别的锁，还会造成死锁；</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Handler 使用的整体流程：</p>
<ul>
<li>子线程通过 <code>Handler.sendMessage(Message)</code>调用 <code>MessageQueue.enqueueMessage()</code> 把消息插入到主线程 Looper 的 MessageQueue 中；</li>
<li>然后主线程 Looper 通过 <code>loop()</code>中的死循环不断的从 MessageQueue 中通过 <code>MessageQueue.next()</code>取出消息</li>
<li>通过 <code>Handler.dispatchMessage()</code> 分发消息，再调用 <code>Handler.handleMessage()</code> 处理消息，最后回收 Message；</li>
</ul>
<p>Handler 不仅仅能用于子线程向主线程发送消息，也能用于主线程向子线程、子线程向子线程发送消息，如果需要在子线程处理消息，就要先 <code>Looper.prepare()</code>，然后 <code>Looper.loop()</code> 才可以，之所以主线程不需要是因为在 APP 启动的时候，在 <code>ActivityThread.main()</code> 中已经做了这些工作；</p>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="子线程真的不能更新-UI-吗？"><a href="#子线程真的不能更新-UI-吗？" class="headerlink" title="子线程真的不能更新 UI 吗？"></a>子线程真的不能更新 UI 吗？</h3><p>任何线程都可以更新 UI，但是要满足如下 2 个条件之一：</p>
<ul>
<li>在 ViewRootImpl 还没创建出来之前：此时 UI 更新的操作没有线程限制，因为 checkThread 方法不会执行；</li>
<li>如果 ViewRootImpl 已经创建：<ul>
<li>保证<strong>创建 ViewRootImpl</strong> 和 <strong>UI 更新的操作</strong>在<strong>同一个线程</strong>即可，也就是说要在同一个线程调用 <code>ViewManager#addView</code> 和 <code>ViewManager#updateViewLayout</code> 方法（ViewManager 是一个接口，WindowManger 接口继承了这个接口，通常都是通过 WindowManager(具体实现为 WindowManagerImpl) 进行 View 的 add&#x2F;remove&#x2F;update 操作）；</li>
<li>对应的线程需要 Looper.prepare() 创建 Looper 并且调用 <code>Looper.loop()</code> 方法开启消息循环；</li>
</ul>
</li>
</ul>
<h3 id="如何在主线程中访问网络？"><a href="#如何在主线程中访问网络？" class="headerlink" title="如何在主线程中访问网络？"></a>如何在主线程中访问网络？</h3><p>Android 4.0 之后为防止 ANR 主线程不再允许访问网络，否则抛出 NetworkOnMainThreadException 异常，解决办法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StrictMode.<span class="type">ThreadPolicy</span> <span class="variable">policy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StrictMode</span>.ThreadPolicy.Builder().permitNetwork().build();</span><br><span class="line">StrictMode.setThreadPolicy(policy);</span><br></pre></td></tr></table></figure>

<p>把严苛模式的网络检测关闭即可，但是最好不要这么做；</p>
<h3 id="主线程-Looper-loop-死循环为什么不会导致-ANR？"><a href="#主线程-Looper-loop-死循环为什么不会导致-ANR？" class="headerlink" title="主线程 Looper.loop() 死循环为什么不会导致 ANR？"></a>主线程 Looper.loop() 死循环为什么不会导致 ANR？</h3><p>主线程负责 UI 更新，必须循环处理消息，否则应用就退出了；</p>
<p>主线程如果没有消息需要处理，会在 MessageQueue.next()#nativePollonce 中休眠，只有收到消息才会被唤醒然后处理，所以也不会占用太多系统资源；</p>
<p>ANR 是对主线程循环处理消息过程的监控机制，目的是避免某个消息处理时间太长导致阻塞其他消息的处理，而 <code>loop()</code> 死循环是主线程消息处理机制的组成环节，没有消息要处理时是休眠状态，并不是消息处理超时；</p>
<p><a href="https://www.bilibili.com/read/cv8323046/">https://www.bilibili.com/read/cv8323046/</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>Android - Binder机制(4)-线程池启动</title>
    <url>/2021/10/20/Android/AndroidDevelop_008_Binder04-ThreadPool/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>Binder 线程池启动分析；</p>
</blockquote>
<span id="more"></span>

<p>AOSP： <a href="https://android.googlesource.com/device/common/+/refs/tags/android-12.1.0_r4">android-12.1.0_r4</a>，kernel：<a href="https://android.googlesource.com/kernel/common/+/refs/heads/android12-5.10">android12-5.10</a></p>
<h1 id="1-zygoteInit"><a href="#1-zygoteInit" class="headerlink" title="1. zygoteInit()"></a>1. zygoteInit()</h1><p>不管是 fork system_server，还是 fork 普通 app，最后都会调用  Zygote.zygoteInit() 函数，我们来看一下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ZygoteInit.java</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Runnable <span class="title function_">zygoteInit</span><span class="params">(<span class="type">int</span> targetSdkVersion, <span class="type">long</span>[] disabledCompatChanges,</span></span><br><span class="line"><span class="params">            String[] argv, ClassLoader classLoader)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (RuntimeInit.DEBUG) &#123;</span><br><span class="line">            Slog.d(RuntimeInit.TAG, <span class="string">&quot;RuntimeInit: Starting application from zygote&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">&quot;ZygoteInit&quot;</span>);</span><br><span class="line">        RuntimeInit.redirectLogStreams();</span><br><span class="line"></span><br><span class="line">        RuntimeInit.commonInit();</span><br><span class="line">        ZygoteInit.nativeZygoteInit();</span><br><span class="line">        <span class="keyword">return</span> RuntimeInit.applicationInit(targetSdkVersion, disabledCompatChanges, argv,</span><br><span class="line">                classLoader);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">nativeZygoteInit</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>

<p>调用了 nativeZygoteInit() 这个 native 方法，在 <a href="https://rangerzhou.top/2021/11/01/Android/AndroidDevelop_010_SystemServer/#1-4-zygoteInit">SystemServer 启动流程 1.4 小节</a> 已经分析过，最终是调用 AppRuntime.onZygoteInit() 中，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app_main.cpp</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AppRuntime</span> : <span class="keyword">public</span> AndroidRuntime</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">onZygoteInit</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        sp&lt;ProcessState&gt; proc = ProcessState::<span class="built_in">self</span>(); <span class="comment">// 打开驱动</span></span><br><span class="line">        <span class="built_in">ALOGV</span>(<span class="string">&quot;App process: starting thread pool.\n&quot;</span>);</span><br><span class="line">        proc-&gt;<span class="built_in">startThreadPool</span>(); <span class="comment">// 启动线程池</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>ProcessState::self() 主要工作是打开 <em>&#x2F;dev&#x2F;binder</em> 驱动，再使用 mmap() 对把内核空间和用户空间映射到同一块物理内存，最后把 binder 驱动的文件描述符赋值给 ProcessState 的 mDriverFD 变量，ProcessState.startThreadPool() 从函数名可以看出是要启动一个线程池；</p>
<h1 id="2-startThreadPool"><a href="#2-startThreadPool" class="headerlink" title="2. startThreadPool()"></a>2. startThreadPool()</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ProcessState.cpp</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ProcessState::startThreadPool</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    AutoMutex _l(mLock);</span><br><span class="line">    <span class="keyword">if</span> (!mThreadPoolStarted) &#123;</span><br><span class="line">        mThreadPoolStarted = <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">spawnPooledThread</span>(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里调用 spawnPooledThread() 函数，传入的参数 <code>mThreadPoolStarted = true</code>，这个参数代表此次创建的是主线程，以及通过此变量值保证每个 app 进程只允许启动一个 binder 线程池，也就是说每次 fork 新进程都会启动一个 binder 线程池，且只允许启动一个 binder 线程池；</p>
<h1 id="3-spawnPooledThread"><a href="#3-spawnPooledThread" class="headerlink" title="3. spawnPooledThread()"></a>3. spawnPooledThread()</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ProcessState.cpp</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ProcessState::spawnPooledThread</span><span class="params">(<span class="type">bool</span> isMain)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mThreadPoolStarted) &#123;</span><br><span class="line">        String8 name = <span class="built_in">makeBinderThreadName</span>(); <span class="comment">// binder 线程名</span></span><br><span class="line">        <span class="built_in">ALOGV</span>(<span class="string">&quot;Spawning new pooled thread, name=%s\n&quot;</span>, name.<span class="built_in">string</span>());</span><br><span class="line">        sp&lt;Thread&gt; t = sp&lt;PoolThread&gt;::<span class="built_in">make</span>(isMain);</span><br><span class="line">        t-&gt;<span class="built_in">run</span>(name.<span class="built_in">string</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>makeBinderThreadName() 创建了一个线程名称，格式是 <code>Binder:pid_X</code>，X 为整数，每个进程中都是从 1 开始递增，只有通过 spawnPooledThread() 创建的线程才符合这个格式，直接通过 joinThreadPool() 加入线程池的线程不符合这个命名规则，然后创建了一个 PoolThread 线程对象，并执行 run() 启动线程，PoolThread 名字看起来是线程池，其实继承自 Thread，只是创建一个线程；</p>
<h1 id="4-PoolThread-threadLoop"><a href="#4-PoolThread-threadLoop" class="headerlink" title="4. PoolThread.threadLoop()"></a>4. PoolThread.threadLoop()</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ProcessState.cpp</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PoolThread</span> : <span class="keyword">public</span> Thread</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">PoolThread</span><span class="params">(<span class="type">bool</span> isMain)</span></span></span><br><span class="line"><span class="function">        : mIsMain(isMain)</span></span><br><span class="line"><span class="function">    &#123;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">bool</span> <span class="title">threadLoop</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        IPCThreadState::<span class="built_in">self</span>()-&gt;<span class="built_in">joinThreadPool</span>(mIsMain);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">bool</span> mIsMain;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>run() 方法最终会调用 threadLoop()，这里的 mIsMain 就是前面传入的 mThreadPoolStarted 值，为 true，接着进入 IPCThreadState.joinThreadPool()；</p>
<h1 id="5-joinThreadPool"><a href="#5-joinThreadPool" class="headerlink" title="5. joinThreadPool()"></a>5. joinThreadPool()</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// IPCThreadState.cpp</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">IPCThreadState::joinThreadPool</span><span class="params">(<span class="type">bool</span> isMain)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">LOG_THREADPOOL</span>(<span class="string">&quot;**** THREAD %p (PID %d) IS JOINING THE THREAD POOL\n&quot;</span>, (<span class="type">void</span>*)<span class="built_in">pthread_self</span>(), <span class="built_in">getpid</span>());</span><br><span class="line"></span><br><span class="line">    mOut.<span class="built_in">writeInt32</span>(isMain ? BC_ENTER_LOOPER : BC_REGISTER_LOOPER);</span><br><span class="line"></span><br><span class="line">    mIsLooper = <span class="literal">true</span>;</span><br><span class="line">    <span class="type">status_t</span> result;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="built_in">processPendingDerefs</span>(); <span class="comment">// 清除队列的引用</span></span><br><span class="line">        <span class="comment">// now get the next command to be processed, waiting if necessary</span></span><br><span class="line">        result = <span class="built_in">getAndExecuteCommand</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result &lt; NO_ERROR &amp;&amp; result != TIMED_OUT &amp;&amp; result != -ECONNREFUSED &amp;&amp; result != -EBADF) &#123;</span><br><span class="line">            <span class="built_in">LOG_ALWAYS_FATAL</span>(<span class="string">&quot;getAndExecuteCommand(fd=%d) returned unexpected error %d, aborting&quot;</span>,</span><br><span class="line">                  mProcess-&gt;mDriverFD, result);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Let this thread exit the thread pool if it is no longer</span></span><br><span class="line">        <span class="comment">// needed and it is not the main process thread.</span></span><br><span class="line">        <span class="keyword">if</span>(result == TIMED_OUT &amp;&amp; !isMain) &#123; <span class="comment">// 非主线程出现 TIMED_OUT 则线程退出</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (result != -ECONNREFUSED &amp;&amp; result != -EBADF);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">LOG_THREADPOOL</span>(<span class="string">&quot;**** THREAD %p (PID %d) IS LEAVING THE THREAD POOL err=%d\n&quot;</span>,</span><br><span class="line">        (<span class="type">void</span>*)<span class="built_in">pthread_self</span>(), <span class="built_in">getpid</span>(), result);</span><br><span class="line"></span><br><span class="line">    mOut.<span class="built_in">writeInt32</span>(BC_EXIT_LOOPER); <span class="comment">// 线程退出循环</span></span><br><span class="line">    mIsLooper = <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">talkWithDriver</span>(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于主线程，cmd 为 BC_ENTER_LOOPER，isMain 为 false 时 cmd 则为 BC_REGISTER_LOOPER，表示是由 Binder 驱动创建的线程；接下来调用 <code>getAndExecuteCommand() -&gt; talkWithDriver() -&gt; ioctl() -&gt; binder_ioctl() -&gt; binder_ioctl_write_read()</code>，先执行 binder_thread_write()：</p>
<h1 id="6-binder-thread-write"><a href="#6-binder-thread-write" class="headerlink" title="6. binder_thread_write()"></a>6. binder_thread_write()</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// binder.c</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">binder_thread_write</span><span class="params">(<span class="keyword">struct</span> binder_proc *proc,</span></span><br><span class="line"><span class="params">            <span class="keyword">struct</span> binder_thread *thread,</span></span><br><span class="line"><span class="params">            <span class="type">binder_uintptr_t</span> binder_buffer, <span class="type">size_t</span> size,</span></span><br><span class="line"><span class="params">            <span class="type">binder_size_t</span> *consumed)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">case</span> BC_ENTER_LOOPER:</span><br><span class="line">            binder_debug(BINDER_DEBUG_THREADS,</span><br><span class="line">                     <span class="string">&quot;%d:%d BC_ENTER_LOOPER\n&quot;</span>,</span><br><span class="line">                     proc-&gt;pid, thread-&gt;pid);</span><br><span class="line">            <span class="keyword">if</span> (thread-&gt;looper &amp; BINDER_LOOPER_STATE_REGISTERED) &#123; <span class="comment">// 0x01</span></span><br><span class="line">                thread-&gt;looper |= BINDER_LOOPER_STATE_INVALID; <span class="comment">// 0x08</span></span><br><span class="line">                binder_user_error(<span class="string">&quot;%d:%d ERROR: BC_ENTER_LOOPER called after BC_REGISTER_LOOPER\n&quot;</span>,</span><br><span class="line">                    proc-&gt;pid, thread-&gt;pid);</span><br><span class="line">            &#125;</span><br><span class="line">            thread-&gt;looper |= BINDER_LOOPER_STATE_ENTERED; <span class="comment">// 重设 looper 标志位</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure>

<p>处理 BC_ENTER_LOOPER 命令，设置 <code>thread-&gt;looper |= BINDER_LOOPER_STATE_ENTERED</code>，继续执行 binder_thread_read()：</p>
<h1 id="7-binder-thread-read"><a href="#7-binder-thread-read" class="headerlink" title="7. binder_thread_read()"></a>7. binder_thread_read()</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// binder.c</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">binder_thread_read</span><span class="params">(<span class="keyword">struct</span> binder_proc *proc,</span></span><br><span class="line"><span class="params">                  <span class="keyword">struct</span> binder_thread *thread,</span></span><br><span class="line"><span class="params">                  <span class="type">binder_uintptr_t</span> binder_buffer, <span class="type">size_t</span> size,</span></span><br><span class="line"><span class="params">                  <span class="type">binder_size_t</span> *consumed, <span class="type">int</span> non_block)</span></span><br><span class="line">&#123;</span><br><span class="line">    wait_for_proc_work = binder_available_for_proc_work_ilocked(thread);</span><br><span class="line">    <span class="keyword">if</span> (wait_for_proc_work) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(thread-&gt;looper &amp; (BINDER_LOOPER_STATE_REGISTERED |</span><br><span class="line">                    BINDER_LOOPER_STATE_ENTERED))) &#123; <span class="comment">// 0x01 | 0x02 = 0x03，0x10 &amp; 0x03 = 0x00</span></span><br><span class="line">            binder_user_error(<span class="string">&quot;%d:%d ERROR: Thread waiting for process work before calling BC_REGISTER_LOOPER or BC_ENTER_LOOPER (state %x)\n&quot;</span>,</span><br><span class="line">                proc-&gt;pid, thread-&gt;pid, thread-&gt;looper);</span><br><span class="line">            wait_event_interruptible(binder_user_error_wait,</span><br><span class="line">                         binder_stop_on_user_error &lt; <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        trace_android_vh_binder_restore_priority(<span class="literal">NULL</span>, current);</span><br><span class="line">        binder_restore_priority(current, proc-&gt;default_priority);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// non_block == filp-&gt;f_flags &amp; O_NONBLOCK，filp-&gt;f_flags 在 sm 打开 binder</span></span><br><span class="line">    <span class="comment">// 设备节点时(ProcessState.open_driver()) 传入的是 O_RDWR | OCLOEXEC，所以 non_block 为 false</span></span><br><span class="line">    <span class="keyword">if</span> (non_block) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!binder_has_work(thread, wait_for_proc_work))</span><br><span class="line">            ret = -EAGAIN;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ret = binder_wait_for_work(thread, wait_for_proc_work); <span class="comment">// 进程睡眠的地方</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">bool</span> <span class="title function_">binder_available_for_proc_work_ilocked</span><span class="params">(<span class="keyword">struct</span> binder_thread *thread)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> !thread-&gt;transaction_stack &amp;&amp;</span><br><span class="line">        binder_worklist_empty_ilocked(&amp;thread-&gt;todo) &amp;&amp;</span><br><span class="line">        (thread-&gt;looper &amp; (BINDER_LOOPER_STATE_ENTERED |</span><br><span class="line">                   BINDER_LOOPER_STATE_REGISTERED));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>wait_for_proc_work = binder_available_for_proc_work_ilocked()</code> 返回 true，进入 <code>binder_wait_for_work()</code>：</p>
<h2 id="7-1-binder-wait-for-work"><a href="#7-1-binder-wait-for-work" class="headerlink" title="7.1 binder_wait_for_work()"></a>7.1 binder_wait_for_work()</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// binder.c</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">binder_wait_for_work</span><span class="params">(<span class="keyword">struct</span> binder_thread *thread,</span></span><br><span class="line"><span class="params">                <span class="type">bool</span> do_proc_work)</span></span><br><span class="line">&#123;</span><br><span class="line">    DEFINE_WAIT(wait); <span class="comment">// 建立并初始化一个等待队列项 wait</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">binder_proc</span> *<span class="title">proc</span> =</span> thread-&gt;proc;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    freezer_do_not_count();</span><br><span class="line">    binder_inner_proc_lock(proc);</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123; <span class="comment">// 循环的作用是让线程被唤醒后再一次去检查一下condition是否满足</span></span><br><span class="line">        <span class="comment">// 将上面创建的 wait 队列的第一个元素添加到 thread-&gt;wait 等待队列的头部，并设置进程的状态为 TASK_INTERRUPTIBLE，此时进程还没有睡眠</span></span><br><span class="line">        prepare_to_wait(&amp;thread-&gt;wait, &amp;wait, TASK_INTERRUPTIBLE);</span><br><span class="line">        <span class="comment">// 唤醒条件 condition,如果满足则跳出循环，否则一直循环等待</span></span><br><span class="line">        <span class="keyword">if</span> (binder_has_work_ilocked(thread, do_proc_work))</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">// 如果是在等待处理本进程的todo队列的任务</span></span><br><span class="line">        <span class="keyword">if</span> (do_proc_work)</span><br><span class="line">            <span class="comment">// 把本线程的 waiting_thread_node 插入到所属进程的 waiting_threads 中</span></span><br><span class="line">            list_add(&amp;thread-&gt;waiting_thread_node,</span><br><span class="line">                 &amp;proc-&gt;waiting_threads);</span><br><span class="line">        trace_android_vh_binder_wait_for_work(do_proc_work, thread, proc);</span><br><span class="line">        binder_inner_proc_unlock(proc);</span><br><span class="line">        schedule(); <span class="comment">// 调用schedule()，让出cpu资源，开始休眠，进程真正睡眠的地方</span></span><br><span class="line">        binder_inner_proc_lock(proc);</span><br><span class="line">        list_del_init(&amp;thread-&gt;waiting_thread_node);</span><br><span class="line">        <span class="keyword">if</span> (signal_pending(current)) &#123;</span><br><span class="line">            ret = -EINTR;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 会有一个和队列 wait 相关的线程来唤醒队列 wait 中的线程</span></span><br><span class="line">    <span class="comment">// 进程被唤醒后，就把自己从队列 wait 中移出来，重新恢复状态为 TASK_RUNNING</span></span><br><span class="line">    finish_wait(&amp;thread-&gt;wait, &amp;wait); <span class="comment">// 执行清理工作</span></span><br><span class="line">    binder_inner_proc_unlock(proc);</span><br><span class="line">    freezer_count();</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先建立并初始化一个等待队列项 wait，然后调用 <code>prepare_to_wait()</code> 把上面创建的 wait 队列的第一个元素添加到 thread-&gt;wait 等待队列的头部，并设置进程状态为 TASK_INTERRUPTIBLE，此时还没有进入睡眠等待，  接下来检查 <code>binder_has_work_ilocked()</code> 是否满足，这里如果不检查，可能条件已经满足，直接去睡眠的话可能再也没有人来唤醒它，如果满足，则跳出循环，如果不满足，则继续往下执行，并在后面的 <code>schedule()</code> 中真正进入睡眠，如果有另外一个和函数开头创建的 wait 相关的线程唤醒了这个睡眠的线程，则回到 for 循环再次调用 <code>binder_has_work_ilocked()</code> 检查是否满足条件，满足则跳出循环，并把上面加入的 wait 从 thread-wait 中移除；</p>
<h2 id="7-2-binder-has-work-ilocked"><a href="#7-2-binder-has-work-ilocked" class="headerlink" title="7.2 binder_has_work_ilocked()"></a>7.2 binder_has_work_ilocked()</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// binder.c</span></span><br><span class="line"><span class="comment">// binder_has_work_ilocked()</span></span><br><span class="line"><span class="type">static</span> <span class="type">bool</span> <span class="title function_">binder_has_work_ilocked</span><span class="params">(<span class="keyword">struct</span> binder_thread *thread,</span></span><br><span class="line"><span class="params">                    <span class="type">bool</span> do_proc_work)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    trace_android_vh_binder_has_work_ilocked(thread, do_proc_work, &amp;ret);</span><br><span class="line">    <span class="keyword">if</span> (ret)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> thread-&gt;process_todo ||</span><br><span class="line">        thread-&gt;looper_need_return ||</span><br><span class="line">        (do_proc_work &amp;&amp;</span><br><span class="line">         !binder_worklist_empty_ilocked(&amp;thread-&gt;proc-&gt;todo));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在学习 <a href="http://rangerzhou.top/2021/10/01/Android/AndroidDevelop_005_Binder01-DriveAndJNI">Android - Binder 机制 (1)- 驱动 &#x2F; JNI</a> 中的 <code>binder_ioctl()</code> 函数时得知应用程序创建 binder 线程池时，主线程第一次调用到 <code>binder_ioctl()</code> 获取 binder_thread 时配置了<code>looper_need_return = true</code>，所以 <code>binder_has_work_ilocked()</code> 返回 true，所以此时 <code>binder_wait_for_work()</code> 通过 break 跳出了 for 循环，也就没有阻塞，同时也跳过了 <code>list_add(&amp;thread-&gt;waiting_thread_node, &amp;proc-&gt;waiting_threads)</code> ，<font color=red><strong>所以 <code>proc-&gt;waiting_threads</code> 还为空</strong></font>（关系到后续是否创建 binder 线程），继续回到 binder_thread_read()，</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// binder.c</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">binder_thread_read</span><span class="params">(...)</span></span><br><span class="line">    ...</span><br><span class="line">        ret = binder_wait_for_work(thread, wait_for_proc_work); <span class="comment">// 进程睡眠的地方</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!binder_worklist_empty_ilocked(&amp;thread-&gt;todo))</span><br><span class="line">            <span class="built_in">list</span> = &amp;thread-&gt;todo; <span class="comment">// 获取线程 todo 队列</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!binder_worklist_empty_ilocked(&amp;proc-&gt;todo) &amp;&amp;</span><br><span class="line">               wait_for_proc_work)</span><br><span class="line">            <span class="built_in">list</span> = &amp;proc-&gt;todo; <span class="comment">// 获取进程 todo 队列</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            binder_inner_proc_unlock(proc);</span><br><span class="line">            <span class="comment">/* no data added */</span></span><br><span class="line">            <span class="comment">// 若无数据且当前线程 looper_need_return 为false，则重试</span></span><br><span class="line">            <span class="keyword">if</span> (ptr - buffer == <span class="number">4</span> &amp;&amp; !thread-&gt;looper_need_return)</span><br><span class="line">                <span class="keyword">goto</span> retry;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>此时 <code>thread-&gt;todo</code> 和 <code>proc-&gt;todo</code> 都为空，所以进入最后的 else 分支，通过 break 跳出 while 循环，继续往下执行；</p>
<h2 id="7-3-驱动发出-BR-SPAWN-LOOPER-命令"><a href="#7-3-驱动发出-BR-SPAWN-LOOPER-命令" class="headerlink" title="7.3 驱动发出 BR_SPAWN_LOOPER 命令"></a>7.3 驱动发出 BR_SPAWN_LOOPER 命令</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// binder.c</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">binder_thread_read</span><span class="params">(...)</span></span><br><span class="line">done:</span><br><span class="line">    *consumed = ptr - buffer;</span><br><span class="line">    binder_inner_proc_lock(proc);</span><br><span class="line">    <span class="keyword">if</span> (proc-&gt;requested_threads == <span class="number">0</span> &amp;&amp;</span><br><span class="line">        list_empty(&amp;thread-&gt;proc-&gt;waiting_threads) &amp;&amp;</span><br><span class="line">        proc-&gt;requested_threads_started &lt; proc-&gt;max_threads &amp;&amp;</span><br><span class="line">        (thread-&gt;looper &amp; (BINDER_LOOPER_STATE_REGISTERED |</span><br><span class="line">         BINDER_LOOPER_STATE_ENTERED)) <span class="comment">/* the user-space code fails to */</span></span><br><span class="line">         <span class="comment">/*spawn a new thread if we leave this out */</span>) &#123;</span><br><span class="line">        proc-&gt;requested_threads++;</span><br><span class="line">        binder_inner_proc_unlock(proc);</span><br><span class="line">        binder_debug(BINDER_DEBUG_THREADS,</span><br><span class="line">                 <span class="string">&quot;%d:%d BR_SPAWN_LOOPER\n&quot;</span>,</span><br><span class="line">                 proc-&gt;pid, thread-&gt;pid);</span><br><span class="line">        <span class="keyword">if</span> (put_user(BR_SPAWN_LOOPER, (<span class="type">uint32_t</span> __user *)buffer))</span><br><span class="line">            <span class="keyword">return</span> -EFAULT;</span><br><span class="line">        binder_stat_br(proc, thread, BR_SPAWN_LOOPER);</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">        binder_inner_proc_unlock(proc);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>proc-&gt;requested_threaads &#x3D;&#x3D; 0：binder 驱动每次请求进程创建 binder 线程时都会 <code>requested_threads++</code>，当进程响应这个请求后则会 <code>requested_threads--</code>，同时 <code>requested_threads_started++</code>（binder_thread_write 处理 BC_REGISTER_LOOPER 时）， <font color=red><strong>所以 <code>requested_threads</code> 表示当前进程没有正在请求创建 binder 线程</strong></font>；</li>
<li>list_empty(&amp;thread-&gt;proc-&gt;waiting_threads)：当前进程的等待线程数为空，即当前进程中没有空闲的 binder 线程；</li>
<li>proc-&gt;requested_threads_started &lt; proc-&gt;max_threads：当前进程已启动线程数量小于最大线程数（ProcessState 中默认配置 15）；</li>
<li>thread-&gt;looper：当前处于 BINDER_LOOPER_STATE_REGISTERED 或者 BINDER_LOOPER_STATE_ENTERED状态；</li>
</ul>
<p>如果同时满足上述条件时会向用户空间传递 BR_SPAWN_LOOPER 命令，<strong>注意当有 binder 通信的时候，会唤醒服务端，当处理 BINDER_WORK_TRANSACTION 时会给 t 赋值，否则会在代码中 continue 重新循环，即只有 BR_TRANSACTION 和 BR_REPLY 时才能继续往下执行，最终会 break 跳出 binder_thread_read() 的 while 循环，进入 done 代码块；</strong></p>
<p>我们先来具体看一下当前的情况：</p>
<ul>
<li><p>首先第一个条件，此时驱动并没有请求创建 binder 线程，所以 <code>requested_threads == 0</code> 成立；</p>
</li>
<li><p>第二个条件，在上面分析 <code>binder_wait_for_work()</code> 时得知，waiting_thread 链表并没有插入节点（break 跳出循环了），所以 list_empty 判断链表为空（头指针的 next 指向自己）成立；</p>
</li>
<li><p>第三个条件显然也成立，binder 驱动还没有发出过创建 binder 线程命令，所以此时 requested_threads_started 为 0，max_threads 为15，成立；</p>
</li>
<li><p>第四个条件，此时 looper 为 BINDER_LOOPER_STATE_ENTERED；</p>
</li>
</ul>
<p>所以上述四个条件成立，向用户空间写入了 BR_SPAWN_LOOPER 命令，然后返回到 <code>binder_ioctl_write_read() -&gt; binder_ioctl()</code>，记住在 <code>binder_ioctl()</code>的结尾处设置了 <font color=red><strong><code>thread-&gt;looper_need_return = false;</code></strong></font>，然后再回到用户空间 <code>IPCThreadState.talkWithDriver() -&gt; getAndExecuteCommand()</code>；</p>
<h1 id="8-getAndExecuteCommand"><a href="#8-getAndExecuteCommand" class="headerlink" title="8. getAndExecuteCommand()"></a>8. getAndExecuteCommand()</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// IPCThreadState.cpp</span></span><br><span class="line"><span class="function"><span class="type">status_t</span> <span class="title">IPCThreadState::getAndExecuteCommand</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    result = <span class="built_in">talkWithDriver</span>();</span><br><span class="line">    <span class="keyword">if</span> (result &gt;= NO_ERROR) &#123;</span><br><span class="line">        cmd = mIn.<span class="built_in">readInt32</span>();</span><br><span class="line">        result = <span class="built_in">executeCommand</span>(cmd);</span><br></pre></td></tr></table></figure>

<p>调用 executeCommand() ;</p>
<h1 id="9-executeCommand"><a href="#9-executeCommand" class="headerlink" title="9. executeCommand"></a>9. executeCommand</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// IPCThreadState.cpp</span></span><br><span class="line"><span class="function"><span class="type">status_t</span> <span class="title">IPCThreadState::executeCommand</span><span class="params">(<span class="type">int32_t</span> cmd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> ((<span class="type">uint32_t</span>)cmd) &#123;</span><br><span class="line">    <span class="keyword">case</span> BR_SPAWN_LOOPER:</span><br><span class="line">        mProcess-&gt;<span class="built_in">spawnPooledThread</span>(<span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure>

<p>此处通过 <code>spawnPooledThread(false)</code> 创建 binder 非主线程，这里和前面 <strong>第三小节</strong> 分析一样，只不过参数变为了 false，代表 binder 非主线程，后续也是执行到 <code>joinThreadPool()</code> ，再通过 getAndExecuteCommand() 进入 binder 驱动，稍候分析；</p>
<p>那么 binder 主线程则在执行完 spawnPooledThread(false) 后回到 <code>joinThreadPool()</code> ，继续 do&#x2F;while 循环，又一次 <code>getAndExecuteCommand() -&gt; talkWithDriver()</code> ，只不过这次 <code>write_size = 0</code>，<code>read_size = 256</code>，进入 binder_thread_read()，只不过这次 <code>thread-&gt;looper_need_return = false</code>，导致 <code>binder_has_work_ilocked()</code> 返回 false，然后在 <code>binder_wait_for_work()</code> 的 schedule 处阻塞休眠了，<strong>并且 <code>proc-&gt;waiting_threads</code> 链表添加了节点</strong>；</p>
<p>接下来继续分析 binder 非主线程的创建；</p>
<h1 id="10-binder-非主线程创建"><a href="#10-binder-非主线程创建" class="headerlink" title="10. binder 非主线程创建"></a>10. binder 非主线程创建</h1><p><code>spawnPooledThread(false)</code> 创建 binder 非主线程后，进入 <code>joinThreadPool()</code>，因为是 binder 非主线程，向 mOut 写入了 <code>BC_REGISTER_LOOPER</code> 命令，然后 bwr.write_size &gt; 0，bwr.read_size &#x3D; 256，进入 binder_ioctl() 后流程和前面 <strong>[7.2 小节]</strong> 一样，先创建了 binder_thread，且 <code>looper_need_return=true</code>，然后进入 binder_thread_write()；</p>
<h2 id="10-1-binder-thread-write"><a href="#10-1-binder-thread-write" class="headerlink" title="10.1 binder_thread_write()"></a>10.1 binder_thread_write()</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// binder.c</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">binder_thread_write</span><span class="params">(...)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">case</span> BC_REGISTER_LOOPER:</span><br><span class="line">            binder_debug(BINDER_DEBUG_THREADS,</span><br><span class="line">                     <span class="string">&quot;%d:%d BC_REGISTER_LOOPER\n&quot;</span>,</span><br><span class="line">                     proc-&gt;pid, thread-&gt;pid);</span><br><span class="line">            binder_inner_proc_lock(proc);</span><br><span class="line">            <span class="keyword">if</span> (thread-&gt;looper &amp; BINDER_LOOPER_STATE_ENTERED) &#123; <span class="comment">// 该线程已经注册为 binder 主线程，不能重复注册</span></span><br><span class="line">                thread-&gt;looper |= BINDER_LOOPER_STATE_INVALID;</span><br><span class="line">                binder_user_error(<span class="string">&quot;%d:%d ERROR: BC_REGISTER_LOOPER called after BC_ENTER_LOOPER\n&quot;</span>,</span><br><span class="line">                    proc-&gt;pid, thread-&gt;pid);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (proc-&gt;requested_threads == <span class="number">0</span>) &#123; <span class="comment">// 没有请求创建新线程时不应该创建</span></span><br><span class="line">                thread-&gt;looper |= BINDER_LOOPER_STATE_INVALID;</span><br><span class="line">                binder_user_error(<span class="string">&quot;%d:%d ERROR: BC_REGISTER_LOOPER called without request\n&quot;</span>,</span><br><span class="line">                    proc-&gt;pid, thread-&gt;pid);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                proc-&gt;requested_threads--;</span><br><span class="line">                proc-&gt;requested_threads_started++;</span><br><span class="line">            &#125;</span><br><span class="line">            thread-&gt;looper |= BINDER_LOOPER_STATE_REGISTERED; <span class="comment">// 重设 looper 标志位</span></span><br><span class="line">            binder_inner_proc_unlock(proc);</span><br><span class="line">            trace_android_vh_binder_looper_state_registered(thread, proc);</span><br><span class="line">            <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure>

<p>处理 BC_REGISTER_LOOPER 命令，只是做了 <code>requested_threads--</code> 和 <code>requested_threads_started++</code>（<strong>对应 7.3 小节</strong>），并配置了 <code>thread-&gt;looper |= BINDER_LOOPER_STATE_REGISTERED</code>，然后继续执行 <code>binder_thread_read()</code>；</p>
<h2 id="10-2-binder-thread-read"><a href="#10-2-binder-thread-read" class="headerlink" title="10.2 binder_thread_read()"></a>10.2 binder_thread_read()</h2><p>这部分参考 <strong>第 7 小节</strong> ，只不过因为 <code>list_empty(&amp;thread-&gt;proc-&gt;waiting_threads)</code> 不成立（<strong>参考第 9 小节</strong>），所以直接回到用户空间的 <code>joinThreadPool()</code> 中，并再次循环到 <code>getAndExecuteCommand()</code> 进入内核空间，然后同样在 <code>binder_wait_for_work()</code> 中睡眠阻塞，和 binder 主线程基本一样，不再分析；</p>
<h1 id="11-Binder-通信数据结构"><a href="#11-Binder-通信数据结构" class="headerlink" title="11. Binder 通信数据结构"></a>11. Binder 通信数据结构</h1><p><a href="https://android.googlesource.com/kernel/common/+/refs/heads/android12-5.10/drivers/android/binder_internal.h">kernel-android12-5.10&#x2F;drivers&#x2F;android&#x2F;binder_internal.h</a></p>
<p><a href="https://android.googlesource.com/kernel/common/+/refs/heads/android12-5.10/drivers/android/binder_alloc.h">kernel-android12-5.10&#x2F;drivers&#x2F;android&#x2F;binder_alloc.h</a></p>
<p><a href="https://android.googlesource.com/kernel/common/+/refs/heads/android12-5.10/include/uapi/linux/android/binder.h">kernel-android12-5.10&#x2F;include&#x2F;uapi&#x2F;linux&#x2F;android&#x2F;binder.h</a></p>
<h2 id="11-1-Binder-进程描述-binder-proc"><a href="#11-1-Binder-进程描述-binder-proc" class="headerlink" title="11.1 Binder 进程描述 - binder_proc"></a>11.1 Binder 进程描述 - binder_proc</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// binder_internal.h</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">binder_proc</span> &#123;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">hlist_node</span> <span class="title">proc_node</span>;</span> <span class="comment">// 挂载在全局 binder_procs 链表中的节点</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">rb_root</span> <span class="title">threads</span>;</span> <span class="comment">// 使用红黑树来保存使用 Binder 机制通信的进程的 Binder 线程池的线程 ID</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">rb_root</span> <span class="title">nodes</span>;</span> <span class="comment">// 使用红黑树来保存使用 Binder 机制通信的进程内所有 Binder 实体对象 binder_node 的成员变量 ptr</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">rb_root</span> <span class="title">refs_by_desc</span>;</span> <span class="comment">// 使用红黑树来保存使用 Binder 机制通信的进程内所有 Binder 引用对象 binder_ref 的成员变量 desc</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">rb_root</span> <span class="title">refs_by_node</span>;</span> <span class="comment">// 使用红黑树来保存使用 Binder 机制通信的进程内所有 Binder 引用对象 binder_ref 的成员变量 node</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">waiting_threads</span>;</span></span><br><span class="line">	<span class="type">int</span> pid; <span class="comment">// 保存使用 Binder 机制通信的进程内的 pid</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">tsk</span>;</span> <span class="comment">// 保存使用 Binder 机制通信的进程信息</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">hlist_node</span> <span class="title">deferred_work_node</span>;</span> <span class="comment">// 挂载在全局延迟工作项链表 binder_deferred_list 中的节点</span></span><br><span class="line">	<span class="type">int</span> deferred_work; <span class="comment">// 描述延迟工作项的具体类型</span></span><br><span class="line">	<span class="type">int</span> outstanding_txns;</span><br><span class="line">	<span class="type">bool</span> is_dead;</span><br><span class="line">	<span class="type">bool</span> is_frozen;</span><br><span class="line">	<span class="type">bool</span> sync_recv;</span><br><span class="line">	<span class="type">bool</span> async_recv;</span><br><span class="line">	<span class="type">wait_queue_head_t</span> freeze_wait;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">todo</span>;</span> <span class="comment">// 进程待处理工作项队列</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">binder_stats</span> <span class="title">stats</span>;</span> <span class="comment">// 统计进程接收到的进程间通信请求次数</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">delivered_death</span>;</span> <span class="comment">// 死亡通知队列</span></span><br><span class="line">	<span class="type">int</span> max_threads; <span class="comment">// 保存 Binder 驱动程序最多可以主动请求进程注册的线程数量</span></span><br><span class="line">	<span class="type">int</span> requested_threads; <span class="comment">// 记录正在请求注册的线程个数</span></span><br><span class="line">	<span class="type">int</span> requested_threads_started; <span class="comment">// 记录响应请求注册的线程个数</span></span><br><span class="line">	<span class="type">int</span> tmp_ref;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">binder_priority</span> <span class="title">default_priority</span>;</span> <span class="comment">// 设置进程优先级</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">dentry</span> *<span class="title">debugfs_entry</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">binder_alloc</span> <span class="title">alloc</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">binder_context</span> *<span class="title">context</span>;</span></span><br><span class="line">	<span class="type">spinlock_t</span> inner_lock;</span><br><span class="line">	<span class="type">spinlock_t</span> outer_lock;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">dentry</span> *<span class="title">binderfs_entry</span>;</span></span><br><span class="line">	<span class="type">bool</span> oneway_spam_detection_enabled;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="11-2-Binder-线程描述-binder-thread"><a href="#11-2-Binder-线程描述-binder-thread" class="headerlink" title="11.2 Binder 线程描述 - binder_thread"></a>11.2 Binder 线程描述 - binder_thread</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// binder_internal.h</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">binder_thread</span> &#123;</span></span><br><span class="line">       <span class="class"><span class="keyword">struct</span> <span class="title">binder_proc</span> *<span class="title">proc</span>;</span> <span class="comment">// 线程所属的进程</span></span><br><span class="line">       <span class="class"><span class="keyword">struct</span> <span class="title">rb_node</span> <span class="title">rb_node</span>;</span> <span class="comment">// 挂载到宿主进程 binder_proc 的成员变量 threads 红黑树节点</span></span><br><span class="line">       <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">waiting_thread_node</span>;</span></span><br><span class="line">       <span class="type">int</span> pid; <span class="comment">// binder 线程 pid</span></span><br><span class="line">       <span class="type">int</span> looper; <span class="comment">// binder 线程运行状态</span></span><br><span class="line">       <span class="type">bool</span> looper_need_return;  </span><br><span class="line">       <span class="class"><span class="keyword">struct</span> <span class="title">binder_transaction</span> *<span class="title">transaction_stack</span>;</span> <span class="comment">// 需要线程处理的事务堆栈</span></span><br><span class="line">       <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">todo</span>;</span> <span class="comment">// binder 线程待处理队列</span></span><br><span class="line">       <span class="type">bool</span> process_todo;</span><br><span class="line">       <span class="class"><span class="keyword">struct</span> <span class="title">binder_error</span> <span class="title">return_error</span>;</span> <span class="comment">// write 失败后，返回的错误码</span></span><br><span class="line">       <span class="class"><span class="keyword">struct</span> <span class="title">binder_error</span> <span class="title">reply_error</span>;</span></span><br><span class="line">       <span class="type">wait_queue_head_t</span> wait; <span class="comment">// Binder 线程会睡眠在 wait 描述的等待队列中</span></span><br><span class="line">       <span class="class"><span class="keyword">struct</span> <span class="title">binder_stats</span> <span class="title">stats</span>;</span> <span class="comment">// 统计该 Binder 线程接收到的进程间通信请求次数</span></span><br><span class="line">       <span class="type">atomic_t</span> tmp_ref;</span><br><span class="line">       <span class="type">bool</span> is_dead;</span><br><span class="line">       <span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">task</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="11-3-Binder-实体对象-binder-node"><a href="#11-3-Binder-实体对象-binder-node" class="headerlink" title="11.3 Binder 实体对象 - binder_node"></a>11.3 Binder 实体对象 - binder_node</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// binder_internal.h</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">binder_node</span> &#123;</span></span><br><span class="line">	<span class="type">int</span> debug_id; <span class="comment">// 调试 id</span></span><br><span class="line">	<span class="type">spinlock_t</span> lock;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">binder_work</span> <span class="title">work</span>;</span> <span class="comment">// 描述一个待处理的工作项</span></span><br><span class="line">	<span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">		<span class="class"><span class="keyword">struct</span> <span class="title">rb_node</span> <span class="title">rb_node</span>;</span> <span class="comment">// 挂载到宿主进程 binder_proc 的成员变量 nodes 红黑树的节点</span></span><br><span class="line">		<span class="class"><span class="keyword">struct</span> <span class="title">hlist_node</span> <span class="title">dead_node</span>;</span> <span class="comment">// 当宿主进程死亡，该 binder 实体对象将挂载到全局 binder_dead_nodes 链表中</span></span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">binder_proc</span> *<span class="title">proc</span>;</span> <span class="comment">// 指向该 binder 线程的宿主进程</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">hlist_head</span> <span class="title">refs</span>;</span> <span class="comment">// 保存所有引用该 binder 实体对象的 binder 引用对象</span></span><br><span class="line">	<span class="type">int</span> internal_strong_refs; <span class="comment">// binder 实体对象的强引用计数</span></span><br><span class="line">	<span class="type">int</span> local_weak_refs; <span class="comment">// binder 实体对象的弱引用计数</span></span><br><span class="line">	<span class="type">int</span> local_strong_refs;</span><br><span class="line">	<span class="type">int</span> tmp_refs;</span><br><span class="line">	<span class="type">binder_uintptr_t</span> ptr; <span class="comment">// 指向用户空间 service 组件内部的引用计数对象 wekref_impl 的地址</span></span><br><span class="line">	<span class="type">binder_uintptr_t</span> cookie; <span class="comment">// 保存用户空间的 service 组件地址</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		 * bitfield elements protected by</span></span><br><span class="line"><span class="comment">		 * proc inner_lock</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		u8 has_strong_ref:<span class="number">1</span>;</span><br><span class="line">		u8 pending_strong_ref:<span class="number">1</span>;</span><br><span class="line">		u8 has_weak_ref:<span class="number">1</span>;</span><br><span class="line">		u8 pending_weak_ref:<span class="number">1</span>;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		 * invariant after initialization</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		u8 sched_policy:<span class="number">2</span>;</span><br><span class="line">		u8 inherit_rt:<span class="number">1</span>;</span><br><span class="line">		u8 accept_fds:<span class="number">1</span>;</span><br><span class="line">		u8 txn_security_ctx:<span class="number">1</span>;</span><br><span class="line">		u8 min_priority;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="type">bool</span> has_async_transaction;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">async_todo</span>;</span> <span class="comment">// 异步事务队列</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="11-4-Binder-引用对象-binder-ref"><a href="#11-4-Binder-引用对象-binder-ref" class="headerlink" title="11.4 Binder 引用对象 - binder_ref"></a>11.4 Binder 引用对象 - binder_ref</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// binder_internal.h</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">binder_ref</span> &#123;</span></span><br><span class="line">	<span class="comment">/* Lookups needed: */</span></span><br><span class="line">	<span class="comment">/*   node + proc =&gt; ref (transaction) */</span></span><br><span class="line">	<span class="comment">/*   desc + proc =&gt; ref (transaction, inc/dec ref) */</span></span><br><span class="line">	<span class="comment">/*   node =&gt; refs + procs (proc exit) */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">binder_ref_data</span> <span class="title">data</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">rb_node</span> <span class="title">rb_node_desc</span>;</span> <span class="comment">// 挂载到宿主对象 binder_proc 的红黑树 refs_by_desc 中的节点</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">rb_node</span> <span class="title">rb_node_node</span>;</span> <span class="comment">// 挂载到宿主对象 binder_proc 的红黑树 refs_by_node 中的节点</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">hlist_node</span> <span class="title">node_entry</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">binder_proc</span> *<span class="title">proc</span>;</span> <span class="comment">// Binder 引用对象的宿主进程 binder_proc</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">binder_node</span> *<span class="title">node</span>;</span> <span class="comment">// Binder 引用对象所引用的 Binder 实体对象</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">binder_ref_death</span> *<span class="title">death</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="11-5-内核缓冲区描述符-binder-buffer"><a href="#11-5-内核缓冲区描述符-binder-buffer" class="headerlink" title="11.5 内核缓冲区描述符 - binder_buffer"></a>11.5 内核缓冲区描述符 - binder_buffer</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// binder_alloc.h</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">binder_buffer</span> &#123;</span></span><br><span class="line">    <span class="comment">// binder_proc 成员变量 buffers 链表中的节点</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">entry</span>;</span> <span class="comment">/* free and allocated entries by address */</span></span><br><span class="line">    <span class="comment">// 根据该内核缓存区是否空闲来选择挂载到 binder_proc 的 free_buffers 和 allocated_buffers 红黑树上</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">rb_node</span> <span class="title">rb_node</span>;</span> <span class="comment">/* free entry by size or allocated entry */</span></span><br><span class="line">				<span class="comment">/* by address */</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="built_in">free</span>:<span class="number">1</span>; <span class="comment">// 标识该缓冲区是否空闲</span></span><br><span class="line">	<span class="type">unsigned</span> clear_on_free:<span class="number">1</span>;</span><br><span class="line">	<span class="type">unsigned</span> allow_user_free:<span class="number">1</span>; <span class="comment">// 标识内核缓冲区是否允许释放</span></span><br><span class="line">	<span class="type">unsigned</span> async_transaction:<span class="number">1</span>; <span class="comment">// 标识该内核缓冲区是否关联异步事务</span></span><br><span class="line">	<span class="type">unsigned</span> oneway_spam_suspect:<span class="number">1</span>;</span><br><span class="line">	<span class="type">unsigned</span> debug_id:<span class="number">27</span>;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">binder_transaction</span> *<span class="title">transaction</span>;</span> <span class="comment">// 描述该内核缓冲区所属的事务</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">binder_node</span> *<span class="title">target_node</span>;</span> <span class="comment">// 描述该内核缓冲区所属的 Binder 实体对象</span></span><br><span class="line">	<span class="type">size_t</span> data_size; <span class="comment">// 描述数据缓冲区的大小</span></span><br><span class="line">	<span class="type">size_t</span> offsets_size; <span class="comment">// Binder 对象偏移数组的大小</span></span><br><span class="line">	<span class="type">size_t</span> extra_buffers_size;</span><br><span class="line">	<span class="type">void</span> __user *user_data;</span><br><span class="line">	<span class="type">int</span>    pid;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="11-6-进程通信事务-binder-transaction"><a href="#11-6-进程通信事务-binder-transaction" class="headerlink" title="11.6 进程通信事务 - binder_transaction"></a>11.6 进程通信事务 - binder_transaction</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// binder_internal.h</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">binder_transaction</span> &#123;</span></span><br><span class="line">	<span class="type">int</span> debug_id;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">binder_work</span> <span class="title">work</span>;</span> <span class="comment">// 设置事务类型</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">binder_thread</span> *<span class="title">from</span>;</span> <span class="comment">// 描述发起事务的线程</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">binder_transaction</span> *<span class="title">from_parent</span>;</span> <span class="comment">// 该事务所依赖的事务</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">binder_proc</span> *<span class="title">to_proc</span>;</span> <span class="comment">// 负责处理该事务的进程</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">binder_thread</span> *<span class="title">to_thread</span>;</span> <span class="comment">// 负责处理该事务的线程</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">binder_transaction</span> *<span class="title">to_parent</span>;</span> <span class="comment">// 目标线程的下一个事务</span></span><br><span class="line">	<span class="type">unsigned</span> need_reply:<span class="number">1</span>; <span class="comment">// 区分同步或异步事务</span></span><br><span class="line">	<span class="comment">/* unsigned is_dead:1; */</span>	<span class="comment">/* not used at the moment */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">binder_buffer</span> *<span class="title">buffer</span>;</span> <span class="comment">// 指向为该事务分配的一块内核缓冲区</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span>	code; <span class="comment">// 进程通信代码</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span>	flags; <span class="comment">// 标志位，描述进程间通信行为的特征</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">binder_priority</span>	<span class="title">priority</span>;</span> <span class="comment">// 发起事务的线程优先级</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">binder_priority</span>	<span class="title">saved_priority</span>;</span> <span class="comment">// 保存处理该事务的线程原有优先级</span></span><br><span class="line">	<span class="type">bool</span>    set_priority_called;</span><br><span class="line">	<span class="type">kuid_t</span>	sender_euid; <span class="comment">// 发起事务的 euid</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">fd_fixups</span>;</span></span><br><span class="line">	<span class="type">binder_uintptr_t</span> security_ctx;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * @lock:  protects @from, @to_proc, and @to_thread</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * @from, @to_proc, and @to_thread can be set to NULL</span></span><br><span class="line"><span class="comment">	 * during thread teardown</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="type">spinlock_t</span> lock;</span><br><span class="line">	ANDROID_VENDOR_DATA(<span class="number">1</span>);</span><br><span class="line">	ANDROID_OEM_DATA_ARRAY(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="11-7-进程通信数据-binder-transaction-data"><a href="#11-7-进程通信数据-binder-transaction-data" class="headerlink" title="11.7 进程通信数据 - binder_transaction_data"></a>11.7 进程通信数据 - binder_transaction_data</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// binder.h</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">binder_transaction_data</span> &#123;</span></span><br><span class="line">	<span class="comment">/* The first two are only used for bcTRANSACTION and brTRANSACTION,</span></span><br><span class="line"><span class="comment">	 * identifying the target and contents of the transaction.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="class"><span class="keyword">union</span> &#123;</span> <span class="comment">// 用来描述目标 Binder 实体对象或者目标 Binder 引用对象</span></span><br><span class="line">		<span class="comment">/* target descriptor of command transaction */</span></span><br><span class="line">		__u32	handle;</span><br><span class="line">		<span class="comment">/* target descriptor of return transaction */</span></span><br><span class="line">		<span class="type">binder_uintptr_t</span> ptr;</span><br><span class="line">	&#125; target;</span><br><span class="line">    <span class="comment">// 目标 Binder 本地 Binder 对象 BBinder 的地址</span></span><br><span class="line">	<span class="type">binder_uintptr_t</span>	cookie;	<span class="comment">/* target object cookie */</span></span><br><span class="line">	__u32		code;		<span class="comment">/* transaction command */</span> <span class="comment">// 通信代码</span></span><br><span class="line">	<span class="comment">/* General information about the transaction. */</span></span><br><span class="line">	__u32	        flags; <span class="comment">// 通信标志位</span></span><br><span class="line">	<span class="type">pid_t</span>		sender_pid; <span class="comment">// 源进程的 pid</span></span><br><span class="line">	<span class="type">uid_t</span>		sender_euid; <span class="comment">// 源进程的 euid</span></span><br><span class="line">	<span class="type">binder_size_t</span>	data_size;	<span class="comment">/* number of bytes of data */</span> <span class="comment">// 数据缓存区大小</span></span><br><span class="line">	<span class="type">binder_size_t</span>	offsets_size;	<span class="comment">/* number of bytes of offsets */</span> <span class="comment">// 记录 Binder 实体对象偏移的数组大小</span></span><br><span class="line">	<span class="comment">/* If this transaction is inline, the data immediately</span></span><br><span class="line"><span class="comment">	 * follows here; otherwise, it ends with a pointer to</span></span><br><span class="line"><span class="comment">	 * the data buffer.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="class"><span class="keyword">union</span> &#123;</span> <span class="comment">//数据缓冲区</span></span><br><span class="line">		<span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">			<span class="comment">/* transaction data */</span></span><br><span class="line">			<span class="type">binder_uintptr_t</span>	buffer; <span class="comment">// 真正保存通信数据的缓冲区</span></span><br><span class="line">			<span class="comment">/* offsets from buffer to flat_binder_object structs */</span></span><br><span class="line">			<span class="type">binder_uintptr_t</span>	offsets; <span class="comment">// 记录 Binder 对象偏移的数组</span></span><br><span class="line">		&#125; ptr;</span><br><span class="line">		__u8	buf[<span class="number">8</span>];</span><br><span class="line">	&#125; data;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="11-8-binder-write-read"><a href="#11-8-binder-write-read" class="headerlink" title="11.8 binder_write_read"></a>11.8 binder_write_read</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// binder.h</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">binder_write_read</span> &#123;</span></span><br><span class="line">	<span class="type">binder_size_t</span>		write_size;	<span class="comment">/* bytes to write */</span></span><br><span class="line">	<span class="type">binder_size_t</span>		write_consumed;	<span class="comment">/* bytes consumed by driver */</span></span><br><span class="line">	<span class="type">binder_uintptr_t</span>	write_buffer;</span><br><span class="line">	<span class="type">binder_size_t</span>		read_size;	<span class="comment">/* bytes to read */</span></span><br><span class="line">	<span class="type">binder_size_t</span>		read_consumed;	<span class="comment">/* bytes consumed by driver */</span></span><br><span class="line">	<span class="type">binder_uintptr_t</span>	read_buffer;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h1 id="12-Binder常见问题"><a href="#12-Binder常见问题" class="headerlink" title="12. Binder常见问题"></a>12. Binder常见问题</h1><p><a href="https://vanelst.site/2020/08/07/binder-question/">参考</a></p>
<p><a href="https://blog.csdn.net/yangwen123/article/details/9100599">ref</a></p>
<p><a href="https://deepinout.com/linux-kernel-api">Linux 内核 API</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>Android - Binder机制(3)-addService</title>
    <url>/2021/10/15/Android/AndroidDevelop_007_Binder03-ServiceManager_addService/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>以 AMS 注册到 servicemanager 为例讲解服务注册到 SM 的流程。</p>
</blockquote>
<span id="more"></span>

<h1 id="相关代码路径"><a href="#相关代码路径" class="headerlink" title="相关代码路径"></a>相关代码路径</h1><table>
<thead>
<tr>
<th>Layer</th>
<th>path</th>
</tr>
</thead>
<tbody><tr>
<td><strong>framework 层</strong></td>
<td><a href="">frameworks&#x2F;base&#x2F;services&#x2F;core&#x2F;java&#x2F;com&#x2F;android&#x2F;server&#x2F;am&#x2F;ActivityManagerService.java</a></td>
</tr>
<tr>
<td></td>
<td><a href="">frameworks&#x2F;base&#x2F;core&#x2F;java&#x2F;android&#x2F;os&#x2F;ServiceManager.java</a></td>
</tr>
<tr>
<td></td>
<td><a href="https://android.googlesource.com/platform/frameworks/base/+/refs/tags/android-12.1.0_r4/core/java/android/os/ServiceManagerNative.java">frameworks&#x2F;base&#x2F;core&#x2F;java&#x2F;android&#x2F;os&#x2F;ServiceManagerNative.java</a></td>
</tr>
<tr>
<td></td>
<td><a href="https://android.googlesource.com/platform/frameworks/base/+/refs/tags/android-12.1.0_r4/core/java/android/os/BinderProxy.java">frameworks&#x2F;base&#x2F;core&#x2F;java&#x2F;android&#x2F;os&#x2F;BinderProxy.java</a></td>
</tr>
<tr>
<td></td>
<td><a href="https://android.googlesource.com/platform/frameworks/base/+/refs/tags/android-12.1.0_r4/core/java/android/os/IBinder.java">frameworks&#x2F;base&#x2F;core&#x2F;java&#x2F;android&#x2F;os&#x2F;IBinder.java</a></td>
</tr>
<tr>
<td></td>
<td><a href="https://android.googlesource.com/platform/frameworks/base/+/refs/tags/android-12.1.0_r4/core/java/android/os/Binder.java">frameworks&#x2F;base&#x2F;core&#x2F;java&#x2F;android&#x2F;os&#x2F;Binder.java</a></td>
</tr>
<tr>
<td></td>
<td><a href="https://android.googlesource.com/platform/frameworks/base/+/refs/tags/android-12.1.0_r4/core/java/android/os/IInterface.java">frameworks&#x2F;base&#x2F;core&#x2F;java&#x2F;android&#x2F;os&#x2F;IInterface.java</a></td>
</tr>
<tr>
<td></td>
<td><a href="https://android.googlesource.com/platform/frameworks/base/+/refs/tags/android-12.1.0_r4/core/java/com/android/internal/os/BinderInternal.java">frameworks&#x2F;base&#x2F;core&#x2F;java&#x2F;com&#x2F;android&#x2F;internal&#x2F;os&#x2F;BinderInternal.java</a></td>
</tr>
<tr>
<td><strong>JNI</strong></td>
<td><a href="">frameworks&#x2F;base&#x2F;core&#x2F;jni&#x2F;android_util_Binder.cpp</a></td>
</tr>
<tr>
<td></td>
<td>frameworks&#x2F;base&#x2F;core&#x2F;jni&#x2F;android_os_Parcel.cpp</td>
</tr>
<tr>
<td><strong>native 层</strong></td>
<td>frameworks&#x2F;native&#x2F;cmds&#x2F;servicemanager&#x2F;main.cpp</td>
</tr>
<tr>
<td></td>
<td><a href="">frameworks&#x2F;native&#x2F;libs&#x2F;binder&#x2F;BpBinder.cpp</a></td>
</tr>
<tr>
<td></td>
<td>frameworks&#x2F;native&#x2F;libs&#x2F;binder&#x2F;Binder.cpp</td>
</tr>
<tr>
<td></td>
<td>frameworks&#x2F;native&#x2F;libs&#x2F;binder&#x2F;ProcessState.cpp</td>
</tr>
<tr>
<td></td>
<td>frameworks&#x2F;native&#x2F;libs&#x2F;binder&#x2F;IPCThreadState.cpp</td>
</tr>
<tr>
<td></td>
<td>frameworks&#x2F;native&#x2F;libs&#x2F;binder&#x2F;aidl&#x2F;android&#x2F;os&#x2F;IServiceManager.aidl —— <font color=red><strong>生成 IServiceManager.cpp &#x2F; IServiceManager.h &#x2F; IServiceManager.java</strong></font></td>
</tr>
<tr>
<td></td>
<td>frameworks&#x2F;native&#x2F;libs&#x2F;binder&#x2F;IInterface.cpp</td>
</tr>
<tr>
<td><strong>kernel 层（版本5.10）</strong></td>
<td>kernel&#x2F;drivers&#x2F;android&#x2F;binder.c</td>
</tr>
<tr>
<td></td>
<td>kernel&#x2F;include&#x2F;uapi&#x2F;linux&#x2F;android&#x2F;binder.h</td>
</tr>
<tr>
<td><strong>out</strong></td>
<td>out&#x2F;soong&#x2F;.intermediates&#x2F;frameworks&#x2F;native&#x2F;libs&#x2F;binder&#x2F;libbinder&#x2F;android_native_bridge_arm64_armv8-a_shared&#x2F;gen&#x2F;aidl&#x2F;android&#x2F;os&#x2F;BnServiceManager.h</td>
</tr>
<tr>
<td></td>
<td>out&#x2F;soong&#x2F;.intermediates&#x2F;frameworks&#x2F;native&#x2F;libs&#x2F;binder&#x2F;libbinder&#x2F;android_native_bridge_arm64_armv8-a_shared&#x2F;gen&#x2F;aidl&#x2F;android&#x2F;os&#x2F;BnServiceManager.h</td>
</tr>
<tr>
<td></td>
<td>out&#x2F;soong&#x2F;.intermediates&#x2F;frameworks&#x2F;native&#x2F;libs&#x2F;binder&#x2F;libbinder&#x2F;android_native_bridge_arm64_armv8-a_shared&#x2F;gen&#x2F;aidl&#x2F;android&#x2F;os&#x2F;IServiceManager.h</td>
</tr>
<tr>
<td></td>
<td>out&#x2F;soong&#x2F;.intermediates&#x2F;frameworks&#x2F;native&#x2F;libs&#x2F;binder&#x2F;libbinder&#x2F;android_native_bridge_arm64_armv8-a_shared&#x2F;gen&#x2F;aidl&#x2F;android&#x2F;os&#x2F;IServiceManager.cpp</td>
</tr>
<tr>
<td></td>
<td><a href="https://cs.android.com/android/platform/superproject/+/master:out/soong/.intermediates/frameworks/base/framework-minus-apex-intdefs/android_common/xref33/srcjars.xref/android/os/IServiceManager.java">out&#x2F;soong&#x2F;.intermediates&#x2F;frameworks&#x2F;base&#x2F;framework-minus-apex-intdefs&#x2F;android_common&#x2F;xref33&#x2F;srcjars.xref&#x2F;android&#x2F;os&#x2F;IServiceManager.java</a></td>
</tr>
</tbody></table>
<h1 id="ServiceManager-addService"><a href="#ServiceManager-addService" class="headerlink" title="ServiceManager.addService()"></a>ServiceManager.addService()</h1><p>AMS 的注册是在 setSystemProcess() 函数中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ActivityManagerService.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSystemProcess</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServiceManager.addService(Context.ACTIVITY_SERVICE, <span class="built_in">this</span>, <span class="comment">/* allowIsolated= */</span> <span class="literal">true</span>,</span><br><span class="line">                    DUMP_FLAG_PRIORITY_CRITICAL | DUMP_FLAG_PRIORITY_NORMAL | DUMP_FLAG_PROTO);</span><br><span class="line">            ServiceManager.addService(ProcessStats.SERVICE_NAME, mProcessStats);</span><br><span class="line">            ServiceManager.addService(<span class="string">&quot;meminfo&quot;</span>, <span class="keyword">new</span> <span class="title class_">MemBinder</span>(<span class="built_in">this</span>), <span class="comment">/* allowIsolated= */</span> <span class="literal">false</span>,</span><br><span class="line">                    DUMP_FLAG_PRIORITY_HIGH);</span><br><span class="line">            ServiceManager.addService(<span class="string">&quot;gfxinfo&quot;</span>, <span class="keyword">new</span> <span class="title class_">GraphicsBinder</span>(<span class="built_in">this</span>));</span><br><span class="line">            ServiceManager.addService(<span class="string">&quot;dbinfo&quot;</span>, <span class="keyword">new</span> <span class="title class_">DbBinder</span>(<span class="built_in">this</span>));</span><br><span class="line">            <span class="keyword">if</span> (MONITOR_CPU_USAGE) &#123;</span><br><span class="line">                ServiceManager.addService(<span class="string">&quot;cpuinfo&quot;</span>, <span class="keyword">new</span> <span class="title class_">CpuBinder</span>(<span class="built_in">this</span>),</span><br><span class="line">                        <span class="comment">/* allowIsolated= */</span> <span class="literal">false</span>, DUMP_FLAG_PRIORITY_CRITICAL);</span><br><span class="line">            &#125;</span><br><span class="line">            ServiceManager.addService(<span class="string">&quot;permission&quot;</span>, <span class="keyword">new</span> <span class="title class_">PermissionController</span>(<span class="built_in">this</span>));</span><br><span class="line">            ServiceManager.addService(<span class="string">&quot;processinfo&quot;</span>, <span class="keyword">new</span> <span class="title class_">ProcessInfoService</span>(<span class="built_in">this</span>));</span><br><span class="line">            ServiceManager.addService(<span class="string">&quot;cacheinfo&quot;</span>, <span class="keyword">new</span> <span class="title class_">CacheBinder</span>(<span class="built_in">this</span>));</span><br></pre></td></tr></table></figure>

<p>通过调用 ServiceManager.addService 来注册服务到 ServiceManager。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ServiceManager.java</span></span><br><span class="line">	<span class="comment">// 此处是注册 AMS，所以 name 为 ACTIVITY_SERVICE = &quot;activity&quot;，service 为 new ActivityManagerService()</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">addService</span><span class="params">(String name, IBinder service, <span class="type">boolean</span> allowIsolated,</span></span><br><span class="line"><span class="params">            <span class="type">int</span> dumpPriority)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            getIServiceManager().addService(name, service, allowIsolated, dumpPriority);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">&quot;error in addService&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-1-getIServiceManager-获取-SMP"><a href="#1-1-getIServiceManager-获取-SMP" class="headerlink" title="1.1 getIServiceManager() - 获取 SMP"></a>1.1 getIServiceManager() - 获取 SMP</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ServiceManager.java</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> IServiceManager sServiceManager;</span><br><span class="line">	...</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> IServiceManager <span class="title function_">getIServiceManager</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (sServiceManager != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> sServiceManager;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Find the service manager</span></span><br><span class="line">        sServiceManager = ServiceManagerNative</span><br><span class="line">                .asInterface(Binder.allowBlocking(BinderInternal.getContextObject()));</span><br><span class="line">        <span class="keyword">return</span> sServiceManager;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-1-1-BinderInternal-getContextObject-获取封装有-sm-的BpBinder-的-BinderProxy"><a href="#1-1-1-BinderInternal-getContextObject-获取封装有-sm-的BpBinder-的-BinderProxy" class="headerlink" title="1.1.1 BinderInternal.getContextObject() - 获取封装有 sm 的BpBinder 的 BinderProxy"></a>1.1.1 BinderInternal.getContextObject() - 获取封装有 sm 的BpBinder 的 BinderProxy</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// BinderInternal.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">native</span> IBinder <span class="title function_">getContextObject</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>

<p>此处调用的是 native 函数，注册流程在 <a href="">Android_Binder进程间通信机制01</a> 中的第六小结已经讲过，再简单说下注册流程：</p>
<p>app_main.main() ——&gt; AndroidRuntime.start() ——&gt; AndroidRuntime.startReg() ——&gt; AndroidRuntime.register_jni_procs() ——&gt; android_util_Binder.register_android_os_Binder() ——&gt; android_util_Binder.int_register_android_os_BinderInternal(env) ——&gt; android_util_Binder.gBinderInternalMethods：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// android_util_Binder.cpp</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> JNINativeMethod gBinderInternalMethods[] = &#123;</span><br><span class="line">     <span class="comment">/* name, signature, funcPtr */</span></span><br><span class="line">    &#123; <span class="string">&quot;getContextObject&quot;</span>, <span class="string">&quot;()Landroid/os/IBinder;&quot;</span>, (<span class="type">void</span>*)android_os_BinderInternal_getContextObject &#125;,</span><br><span class="line">    &#123; <span class="string">&quot;joinThreadPool&quot;</span>, <span class="string">&quot;()V&quot;</span>, (<span class="type">void</span>*)android_os_BinderInternal_joinThreadPool &#125;,</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>可以看到实际调用的是 android_os_BinderInternal_getContextObject 方法：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// android_util_Binder.cpp</span></span><br><span class="line"><span class="function"><span class="type">static</span> jobject <span class="title">android_os_BinderInternal_getContextObject</span><span class="params">(JNIEnv* env, jobject clazz)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sp&lt;IBinder&gt; b = ProcessState::<span class="built_in">self</span>()-&gt;<span class="built_in">getContextObject</span>(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">javaObjectForIBinder</span>(env, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主要做了两件事：</p>
<ul>
<li>ProcessState::self()-&gt;getContextObject(NULL)：获取 handle 值为 0 的 <code>BpBinder</code>，BpBinder 是 native 层的 binder 对象，详见 <a href="">Android_Binder进程间通信机制02-ServiceManager_启动和获取</a> 第 2.2 小节；</li>
<li>javaObjectForIBinder(env, BpBinder)：将 IBinder 转为 java 对象，即 BinderProxy 对象，转换过程就是将 IBinder 的指针（long 类型）存储在 BinderProxy 的 mNativeData 中；</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// android_util_Binder.cpp</span></span><br><span class="line"><span class="function">jobject <span class="title">javaObjectForIBinder</span><span class="params">(JNIEnv* env, <span class="type">const</span> sp&lt;IBinder&gt;&amp; val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    BinderProxyNativeData* nativeData = <span class="keyword">new</span> <span class="built_in">BinderProxyNativeData</span>();</span><br><span class="line">    nativeData-&gt;mOrgue = <span class="keyword">new</span> DeathRecipientList;</span><br><span class="line">    <span class="comment">// 这个 mObject 是 BinderProxy 代理的本地 IBinder</span></span><br><span class="line">    nativeData-&gt;mObject = val; <span class="comment">// BpBinder 赋给 nativeData-&gt;mObject，nativeData 再传递给 BinderProxy 的 mNativeData 变量</span></span><br><span class="line"></span><br><span class="line">    jobject object = env-&gt;<span class="built_in">CallStaticObjectMethod</span>(gBinderProxyOffsets.mClass,</span><br><span class="line">            gBinderProxyOffsets.mGetInstance, (jlong) nativeData, (jlong) val.<span class="built_in">get</span>());</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>参数 val 是 BpBinder 对象的指针引用，赋值给 nativeData-&gt;mObject，而 nativeData 是一个指向 BinderProxyNativeData 结构体变量的指针，在后面会赋值给 BinderProxy 的 mNativeData 变量；</p>
<p>gBinderProxyOffsets 的赋值在 int_register_android_os_BinderProxy() 中：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// android_util_Binder.cpp</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* <span class="type">const</span> kBinderProxyPathName = <span class="string">&quot;android/os/BinderProxy&quot;</span>;</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">int_register_android_os_BinderProxy</span><span class="params">(JNIEnv* env)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    jclass clazz = <span class="built_in">FindClassOrDie</span>(env, kBinderProxyPathName); <span class="comment">// 查找 BinderProxy 所属类</span></span><br><span class="line">    gBinderProxyOffsets.mClass = <span class="built_in">MakeGlobalRefOrDie</span>(env, clazz); <span class="comment">// 将 java 层的 BinderProxy 类保存给 mClass 变量</span></span><br><span class="line">    gBinderProxyOffsets.mGetInstance = <span class="built_in">GetStaticMethodIDOrDie</span>(env, clazz, <span class="string">&quot;getInstance&quot;</span>,</span><br><span class="line">            <span class="string">&quot;(JJ)Landroid/os/BinderProxy;&quot;</span>); <span class="comment">// 将 java 层 BinderProxy 类的 getInstance 方法 ID 保存到 mGetInstance 变量</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 将 java 层 BinderProxy 类的 mNativeData 属性 ID 保存到 mNativeData 变量中</span></span><br><span class="line">    gBinderProxyOffsets.mNativeData = <span class="built_in">GetFieldIDOrDie</span>(env, clazz, <span class="string">&quot;mNativeData&quot;</span>, <span class="string">&quot;J&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">RegisterMethodsOrDie</span>(</span><br><span class="line">        env, kBinderProxyPathName,</span><br><span class="line">        gBinderProxyMethods, <span class="built_in">NELEM</span>(gBinderProxyMethods));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意此处获取了 BinderProxy 的 <code>mNativeData</code> 的属性 ID 给了 gBinderProxyOffsets.mNativeData；</p>
<p>所以 <code>env-&gt;CallStaticObjectMethod()</code> 就是调用 BinderProxy.java 的 getInstance 方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// BinderProxy.java</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> BinderProxy <span class="title function_">getInstance</span><span class="params">(<span class="type">long</span> nativeData, <span class="type">long</span> iBinder)</span> &#123;</span><br><span class="line">        BinderProxy result;</span><br><span class="line">        <span class="keyword">synchronized</span> (sProxyMap) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                result = sProxyMap.get(iBinder);</span><br><span class="line">                <span class="keyword">if</span> (result != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> result;</span><br><span class="line">                &#125;</span><br><span class="line">                result = <span class="keyword">new</span> <span class="title class_">BinderProxy</span>(nativeData);</span><br><span class="line">            ...</span><br><span class="line">            NoImagePreloadHolder.sRegistry.registerNativeAllocation(result, nativeData);</span><br><span class="line">            <span class="comment">// The registry now owns nativeData, even if registration threw an exception.</span></span><br><span class="line">            sProxyMap.set(iBinder, result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">BinderProxy</span><span class="params">(<span class="type">long</span> nativeData)</span> &#123;</span><br><span class="line">        mNativeData = nativeData;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> mNativeData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>BinderProxy 对象包含一个名为 sProxyMap 的 ProxyMap 对象，将 Native 层传入的 BpBinder 为 key，BinderProxy 为 value，存入这个 sProxyMap 对象中；</p>
<p>然后在 new BinderProxy(nativeData) 的时候，把从 Native 层传入的 nativeData 传给了 BinderProxy 对象的 mNativeData 变量，nativeData 是一个指向 BinderProxyNativeData 结构体变量的指针：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// android_util_Binder.cpp</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">BinderProxyNativeData</span> &#123;</span><br><span class="line">    sp&lt;IBinder&gt; mObject;</span><br><span class="line">    sp&lt;DeathRecipientList&gt; mOrgue;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>结构体中的 mObject 就是 BpBinder，所以拿到了 BinderProxy 对象，就拿到了 BpBinder 对象；</p>
<p>最终 javaObjectForIBinder() 返回一个 BinderProxy 对象，此对象封装了 handle 值为 0 的 BpBinder（BpBinder 赋给了 BinderProxy.mNativeData），即将 native 层的 binder 对象（BpBinder）封装成 Java 层的 binder 对象（BinderProxy）并返回给调用者；</p>
<h3 id="1-1-2-Binder-allowBlocking"><a href="#1-1-2-Binder-allowBlocking" class="headerlink" title="1.1.2 Binder.allowBlocking()"></a>1.1.2 Binder.allowBlocking()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Binder.java</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> IBinder <span class="title function_">allowBlocking</span><span class="params">(IBinder binder)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (binder <span class="keyword">instanceof</span> BinderProxy) &#123;</span><br><span class="line">                ((BinderProxy) binder).mWarnOnBlocking = <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (binder != <span class="literal">null</span> &amp;&amp; binder.getInterfaceDescriptor() != <span class="literal">null</span></span><br><span class="line">                    &amp;&amp; binder.queryLocalInterface(binder.getInterfaceDescriptor()) == <span class="literal">null</span>) &#123;</span><br><span class="line">                Log.w(TAG, <span class="string">&quot;Unable to allow blocking on interface &quot;</span> + binder);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException ignored) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> binder;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>传入的参数是 BinderProxy，所以直接 <code>((BinderProxy) binder).mWarnOnBlocking = false;</code>，仍然返回 BinderProxy 对象；</p>
<p><strong>所以 <code>Binder.allowBlocking(BinderInternal.getContextObject())</code> 最终返回一个封装了 BpBinder(handle &#x3D;&#x3D; 0) 的 BinderProxy 对象。</strong></p>
<h3 id="1-1-3-ServiceManagerNative-asInterface-以-BinderProxy-为参数构造-SMP"><a href="#1-1-3-ServiceManagerNative-asInterface-以-BinderProxy-为参数构造-SMP" class="headerlink" title="1.1.3 ServiceManagerNative.asInterface() - 以 BinderProxy 为参数构造 SMP"></a>1.1.3 ServiceManagerNative.asInterface() - 以 BinderProxy 为参数构造 SMP</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ServiceManagerNative.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ServiceManagerNative</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">ServiceManagerNative</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    ...</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> IServiceManager <span class="title function_">asInterface</span><span class="params">(IBinder obj)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ServiceManager is never local</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ServiceManagerProxy</span>(obj);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>这里返回了一个参数为 BinderProxy 对象的 ServiceManagerProxy 对象；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ServiceManagerNative.java</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ServiceManagerProxy</span> <span class="keyword">implements</span> <span class="title class_">IServiceManager</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServiceManagerProxy</span><span class="params">(IBinder remote)</span> &#123;</span><br><span class="line">        mRemote = remote;</span><br><span class="line">        mServiceManager = IServiceManager.Stub.asInterface(remote);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">private</span> IServiceManager mServiceManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 SMP 的构造函数中，传递 BinderProxy 对象，并把其赋值给 mRemote，再通过 <code>IServiceManager.Stub.asInterface</code> 初始化 mServiceManager 对象。</p>
<p>IServiceManager 是一个 AIDL 文件，在源码编译的时候会将其转换为 Java 和 C++ 代码，在生成的 IServiceManager.java 文件中有一个 Stub 类，其中的<code>IServiceManager.Stub.asInterface</code> 函数实现返回的是 Stub 的内部类 Proxy 对象，Proxy 类实现了 IServiceManager，Proxy 对象是 IServiceManager 的客户端，所以此处返回的 <strong>mServiceManager 对象也相当于是这个 Proxy 对象，是 IServiceManager 的客户端，而传入的 BinderProxy 参数是服务端</strong>，当调用 mServiceManager 对应的函数时，会先调用 <a href="https://cs.android.com/android/platform/superproject/+/master:out/soong/.intermediates/frameworks/base/framework-minus-apex-intdefs/android_common/xref33/srcjars.xref/android/os/IServiceManager.java"><font color=red><strong>AIDL 生成的 IServiceManager.java</strong></font></a> 中的 Proxy 中对应的函数，然后在其中又最终会通过 IServiceManager 的服务端将消息传递出去，即会调用 mRemote.transact() 函数（mRemote 即为服务端）。</p>
<p>所以 <code>getIServiceManager()</code> 就是获取 ServiceManagerProxy 对象，参数是封装了 BpBinder(handle &#x3D;&#x3D; 0) 的 BinderProxy。</p>
<h2 id="1-2-addService"><a href="#1-2-addService" class="headerlink" title="1.2 addService()"></a>1.2 addService()</h2><p>再来看 <code>getIServiceManager().addService()</code>，调用的就是 <code>ServiceManagerProxy.addService()</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ServiceManagerNative.java</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ServiceManagerProxy</span> <span class="keyword">implements</span> <span class="title class_">IServiceManager</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServiceManagerProxy</span><span class="params">(IBinder remote)</span> &#123;</span><br><span class="line">        mRemote = remote;</span><br><span class="line">        mServiceManager = IServiceManager.Stub.asInterface(remote);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addService</span><span class="params">(String name, IBinder service, <span class="type">boolean</span> allowIsolated, <span class="type">int</span> dumpPriority)</span></span><br><span class="line">            <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        mServiceManager.addService(name, service, allowIsolated, dumpPriority);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>这里又调用了 <code>mServiceManager.addService(name, service, allowIsolated, dumpPriority)</code>，前述 [1.1.3](#1.1.3 ServiceManagerNative.asInterface()) 小节已经分析得知，mServiceManager 作为客户端，调用 IServiceManager.java 中 Proxy 的 addService() 方法 <code>IServiceManager.Stub.Proxy.addService()</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AIDL 生成的 IServiceManager.java 中，</span></span><br><span class="line">	<span class="meta">@Override</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addService</span><span class="params">(java.lang.String name, android.os.IBinder service, <span class="type">boolean</span> allowIsolated, <span class="type">int</span> dumpPriority)</span> <span class="keyword">throws</span> android.os.RemoteException</span><br><span class="line">      &#123;</span><br><span class="line">        android.os.<span class="type">Parcel</span> <span class="variable">_data</span> <span class="operator">=</span> android.os.Parcel.obtain(); <span class="comment">// 传递数据的 data</span></span><br><span class="line">        android.os.<span class="type">Parcel</span> <span class="variable">_reply</span> <span class="operator">=</span> android.os.Parcel.obtain(); <span class="comment">// 获取回复的 reply</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          _data.writeInterfaceToken(DESCRIPTOR);</span><br><span class="line">          _data.writeString(name); <span class="comment">// 写入 String 对象，name = &quot;activity&quot;</span></span><br><span class="line">          _data.writeStrongBinder(service); <span class="comment">// 写入 Binder 对象，service = new AMS()</span></span><br><span class="line">          _data.writeBoolean(allowIsolated);</span><br><span class="line">          _data.writeInt(dumpPriority);</span><br><span class="line">          <span class="type">boolean</span> <span class="variable">_status</span> <span class="operator">=</span> mRemote.transact(Stub.TRANSACTION_addService, _data, _reply, <span class="number">0</span>);</span><br><span class="line">          _reply.readException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">          _reply.recycle();</span><br><span class="line">          _data.recycle();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<p>这里的 _data 是一个 Parcel 对象，<code>writeString(name)</code> 和 <code>writeStrongBinder(service)</code> 最终通过 JNI 调用到 frameworks&#x2F;base&#x2F;core&#x2F;jni&#x2F;android_os_Parcel.cpp 中的 <code>android_os_Parcel_writeString16()</code> 和 <code>android_os_Parcel_writeStrongBinder() -&gt; Parcel.writeStrongBinder() -&gt; flattenBinder() -&gt; writeObject()</code>，最终结果就是 <font color=red><strong>data.mData</strong></font> 指向数据 buffer，调用 write 接口写入的数据都依次存放在这块 buffer 中， <font color=red><strong>data.mObjects</strong></font> 指向一个动态分配的一维数组，存放的是 mData 的下标值，当数据 buffer 中写入了 binder 对象，就好在 mObjects 中存放一条下标记录，表示 binder 对象在数据 buffer 中的存放位置；</p>
<p>这里 mRemote 是 BinderProxy，就会调用服务端 BinderProxy 的 <code>transact()</code> 函数（注意：调用服务端的 transact 的时候，客户端会挂起等待），name, service 等参数会打包到 data 参数中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// BinderProxy.java</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">transact</span><span class="params">(<span class="type">int</span> code, Parcel data, Parcel reply, <span class="type">int</span> flags)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> transactNative(code, data, reply, flags);</span><br><span class="line">        &#125; ...</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">native</span> <span class="type">boolean</span> <span class="title function_">transactNative</span><span class="params">(<span class="type">int</span> code, Parcel data, Parcel reply, <span class="type">int</span> flags)</span> <span class="keyword">throws</span> RemoteException;</span><br></pre></td></tr></table></figure>

<p>传入的 code 为 <strong>ADD_SERVICE_TRANSACTION</strong>，传入的 flags 默认为 0，这里调用到了 transactNative 这个 native 方法，在 android_util_Binder.cpp 的 gBinderProxyMethods 中可以看出，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// android_util_Binder.cpp</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> JNINativeMethod gBinderProxyMethods[] = &#123;</span><br><span class="line">     <span class="comment">/* name, signature, funcPtr */</span></span><br><span class="line">    &#123;<span class="string">&quot;pingBinder&quot;</span>,          <span class="string">&quot;()Z&quot;</span>, (<span class="type">void</span>*)android_os_BinderProxy_pingBinder&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;isBinderAlive&quot;</span>,       <span class="string">&quot;()Z&quot;</span>, (<span class="type">void</span>*)android_os_BinderProxy_isBinderAlive&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;getInterfaceDescriptor&quot;</span>, <span class="string">&quot;()Ljava/lang/String;&quot;</span>, (<span class="type">void</span>*)android_os_BinderProxy_getInterfaceDescriptor&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;transactNative&quot;</span>,      <span class="string">&quot;(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z&quot;</span>, (<span class="type">void</span>*)android_os_BinderProxy_transact&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;linkToDeath&quot;</span>,         <span class="string">&quot;(Landroid/os/IBinder$DeathRecipient;I)V&quot;</span>, (<span class="type">void</span>*)android_os_BinderProxy_linkToDeath&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;unlinkToDeath&quot;</span>,       <span class="string">&quot;(Landroid/os/IBinder$DeathRecipient;I)Z&quot;</span>, (<span class="type">void</span>*)android_os_BinderProxy_unlinkToDeath&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;getNativeFinalizer&quot;</span>,  <span class="string">&quot;()J&quot;</span>, (<span class="type">void</span>*)android_os_BinderProxy_getNativeFinalizer&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;getExtension&quot;</span>,        <span class="string">&quot;()Landroid/os/IBinder;&quot;</span>, (<span class="type">void</span>*)android_os_BinderProxy_getExtension&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>实际调用的是 android_os_BinderProxy_transact 方法：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// android_util_Binder.cpp</span></span><br><span class="line"><span class="function"><span class="type">static</span> jboolean <span class="title">android_os_BinderProxy_transact</span><span class="params">(JNIEnv* env, jobject obj,</span></span></span><br><span class="line"><span class="params"><span class="function">        jint code, jobject dataObj, jobject replyObj, jint flags)</span> <span class="comment">// throws RemoteException</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 将 java 端的 Parcel 对象转为 native 的 Parcel</span></span><br><span class="line">    Parcel* data = <span class="built_in">parcelForJavaObject</span>(env, dataObj);</span><br><span class="line">    ...</span><br><span class="line">    Parcel* reply = <span class="built_in">parcelForJavaObject</span>(env, replyObj);</span><br><span class="line">    ...</span><br><span class="line">    IBinder* target = <span class="built_in">getBPNativeData</span>(env, obj)-&gt;mObject.<span class="built_in">get</span>(); <span class="comment">// 获取 BpBinder</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="type">status_t</span> err = target-&gt;<span class="built_in">transact</span>(code, *data, reply, flags); </span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (err == NO_ERROR) &#123;</span><br><span class="line">        <span class="keyword">return</span> JNI_TRUE;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (err == UNKNOWN_TRANSACTION) &#123;</span><br><span class="line">        <span class="keyword">return</span> JNI_FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">	...</span><br><span class="line">    <span class="keyword">return</span> JNI_FALSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先拿到传入的 data，然后调用 <code>IBinder* target = getBPNativeData(env, obj)-&gt;mObject.get()</code>：</p>
<h3 id="1-2-1-BpBinder-gt-transact"><a href="#1-2-1-BpBinder-gt-transact" class="headerlink" title="1.2.1 BpBinder-&gt;transact()"></a>1.2.1 BpBinder-&gt;transact()</h3><p><strong>getBPNativeData(env, obj)-&gt;mObject.get()</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">BinderProxyNativeData* <span class="title">getBPNativeData</span><span class="params">(JNIEnv* env, jobject obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (BinderProxyNativeData *) env-&gt;<span class="built_in">GetLongField</span>(obj, gBinderProxyOffsets.mNativeData);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述 [1.1.1](# 1.1.1 BinderInternal.getContextObject()) 小节中分析得知 gBinderProxyOffsets.mNativeData 存入的是 BinderProxy 的 mNativeData 属性 ID，所以此处 getBPNativeData 获取的就是指向 BinderProxyNativeData 结构体的指针，从 [1.1.1](# 1.1.1 BinderInternal.getContextObject()) 小节的 javaObjectForIBinder() 函数得知，这个结构体的 <code>mObject</code>就是 BpBinder 对象，所以后面的 <code>target-&gt;transact()</code> 则是调用 BpBinder-&gt;transact()。</p>
<p><strong>BpBinder-&gt;transact()</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// BpBinder.cpp</span></span><br><span class="line"><span class="function"><span class="type">status_t</span> <span class="title">BpBinder::transact</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">uint32_t</span> code, <span class="type">const</span> Parcel&amp; data, Parcel* reply, <span class="type">uint32_t</span> flags)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">        <span class="type">status_t</span> status;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">CC_UNLIKELY</span>(<span class="built_in">isRpcBinder</span>())) &#123;</span><br><span class="line">            status = <span class="built_in">rpcSession</span>()-&gt;<span class="built_in">transact</span>(<span class="built_in">rpcAddress</span>(), code, data, reply, flags);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            status = IPCThreadState::<span class="built_in">self</span>()-&gt;<span class="built_in">transact</span>(<span class="built_in">binderHandle</span>(), code, data, reply, flags);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">    &#125;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>CC_UNLICKLY 意思是告诉编译器执行 else 语句的可能性更大，减少性能的下降；这里又调用了 IPCThreadState 的 transact() 方法。</p>
<h3 id="1-2-2-IPCThreadState-self-gt-transact"><a href="#1-2-2-IPCThreadState-self-gt-transact" class="headerlink" title="1.2.2 IPCThreadState::self()-&gt;transact()"></a>1.2.2 IPCThreadState::self()-&gt;transact()</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// IPCThreadState.cpp</span></span><br><span class="line"><span class="function"><span class="type">status_t</span> <span class="title">IPCThreadState::transact</span><span class="params">(<span class="type">int32_t</span> handle,</span></span></span><br><span class="line"><span class="params"><span class="function">                                  <span class="type">uint32_t</span> code, <span class="type">const</span> Parcel&amp; data,</span></span></span><br><span class="line"><span class="params"><span class="function">                                  Parcel* reply, <span class="type">uint32_t</span> flags)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    flags |= TF_ACCEPT_FDS; <span class="comment">// 从 AIDL 中默认传入的 flags 是 0，此处或操作的 TF_ACCEPT_FDS 非异步，表示允许回复中包含文件描述符</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 将数据打包到 mOut 中，准备写入到 binder 驱动</span></span><br><span class="line">    err = <span class="built_in">writeTransactionData</span>(BC_TRANSACTION, flags, handle, code, data, <span class="literal">nullptr</span>);</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> ((flags &amp; TF_ONE_WAY) == <span class="number">0</span>) &#123; <span class="comment">// TF_ONE_WAY 是异步，此处非异步状态，需要等待回复</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// 等待回应</span></span><br><span class="line">        <span class="keyword">if</span> (reply) &#123;</span><br><span class="line">            err = <span class="built_in">waitForResponse</span>(reply);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Parcel fakeReply;</span><br><span class="line">            err = <span class="built_in">waitForResponse</span>(&amp;fakeReply);</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">        <span class="built_in">IF_LOG_TRANSACTIONS</span>() &#123;</span><br><span class="line">            TextOutput::Bundle _b(alog);</span><br><span class="line">            alog &lt;&lt; <span class="string">&quot;BR_REPLY thr &quot;</span> &lt;&lt; (<span class="type">void</span>*)<span class="built_in">pthread_self</span>() &lt;&lt; <span class="string">&quot; / hand &quot;</span></span><br><span class="line">                &lt;&lt; handle &lt;&lt; <span class="string">&quot;: &quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (reply) alog &lt;&lt; indent &lt;&lt; *reply &lt;&lt; dedent &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">else</span> alog &lt;&lt; <span class="string">&quot;(none requested)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        err = <span class="built_in">waitForResponse</span>(<span class="literal">nullptr</span>, <span class="literal">nullptr</span>); <span class="comment">// TF_ONE_WAY 状态，无需等待回复</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> err;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的 TF_ACCETP_FDS 表示允许回复中包含文件描述符，非异步，异步是 TF_ONEWAY，随后主要有两个函数比较重要：</p>
<ul>
<li>writeTransactionData()：将数据打包到 mOut 中，准备写入到 binder 驱动</li>
<li>waitForResponse()：实际执行写入到 binder 驱动</li>
</ul>
<h4 id="1-2-2-1-writeTransactionData-打包数据和命令到-mOut"><a href="#1-2-2-1-writeTransactionData-打包数据和命令到-mOut" class="headerlink" title="1.2.2.1 writeTransactionData - 打包数据和命令到 mOut"></a>1.2.2.1 writeTransactionData - 打包数据和命令到 mOut</h4><p><strong>writeTransactionData()</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// IPCThreadState.cpp</span></span><br><span class="line"><span class="function"><span class="type">status_t</span> <span class="title">IPCThreadState::writeTransactionData</span><span class="params">(<span class="type">int32_t</span> cmd, <span class="type">uint32_t</span> binderFlags,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">int32_t</span> handle, <span class="type">uint32_t</span> code, <span class="type">const</span> Parcel&amp; data, <span class="type">status_t</span>* statusBuffer)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    binder_transaction_data tr; <span class="comment">// 到驱动内部后会取出此结构体进行处理</span></span><br><span class="line"></span><br><span class="line">    tr.target.ptr = <span class="number">0</span>; <span class="comment">// binder_node 的地址</span></span><br><span class="line">    tr.target.handle = handle; <span class="comment">// 此处 handle 为 0，目标 server 的 binder 句柄，是 BpBinder(0) 传入的</span></span><br><span class="line">    tr.code = code; <span class="comment">// 此处 code 为 TRANSACTION_addService，getService() 的话就是 TRANSACTION_getService</span></span><br><span class="line">    tr.flags = binderFlags; <span class="comment">// flags 为 0（默认）</span></span><br><span class="line">    tr.cookie = <span class="number">0</span>;</span><br><span class="line">    tr.sender_pid = <span class="number">0</span>;</span><br><span class="line">    tr.sender_euid = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">status_t</span> err = data.<span class="built_in">errorCheck</span>(); <span class="comment">// 验证数据合理性</span></span><br><span class="line">    <span class="comment">// 将数据保存到 tr</span></span><br><span class="line">    <span class="keyword">if</span> (err == NO_ERROR) &#123;</span><br><span class="line">        tr.data_size = data.<span class="built_in">ipcDataSize</span>(); <span class="comment">// 传输数据大小</span></span><br><span class="line">        tr.data.ptr.buffer = data.<span class="built_in">ipcData</span>(); <span class="comment">// 传输的数据区 buffer 首地址</span></span><br><span class="line">        tr.offsets_size = data.<span class="built_in">ipcObjectsCount</span>()*<span class="built_in">sizeof</span>(<span class="type">binder_size_t</span>); <span class="comment">// 传递的 binder 对象个数 * 数据类型大小</span></span><br><span class="line">        tr.data.ptr.offsets = data.<span class="built_in">ipcObjects</span>(); <span class="comment">// 偏移数组，存储 binder 对象在 mData 中的下标值</span></span><br><span class="line">    &#125; ...</span><br><span class="line"></span><br><span class="line">    mOut.<span class="built_in">writeInt32</span>(cmd); <span class="comment">// 把命令写入到 mOut，传入的 cmd 是 BC_TRANSACTION</span></span><br><span class="line">    mOut.<span class="built_in">write</span>(&amp;tr, <span class="built_in">sizeof</span>(tr)); <span class="comment">// 把 tr 写入到 mOut，此时 mOut.data 包含 cmd 和 tr</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> NO_ERROR;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Parcel.cpp</span></span><br><span class="line"><span class="function"><span class="type">uintptr_t</span> <span class="title">Parcel::ipcData</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">reinterpret_cast</span>&lt;<span class="type">uintptr_t</span>&gt;(mData); <span class="comment">// 数据区 buffer 首地址，存放传输的数据（包括 binder 对象）</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">uintptr_t</span> <span class="title">Parcel::ipcObjects</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">reinterpret_cast</span>&lt;<span class="type">uintptr_t</span>&gt;(mObjects); <span class="comment">// 一维数组首地址，数组中存放 binder 对象在数据区 buffer 中的下标值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">status_t</span> <span class="title">Parcel::writeObject</span><span class="params">(<span class="type">const</span> flat_binder_object&amp; val, <span class="type">bool</span> nullMetaData)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        *<span class="built_in">reinterpret_cast</span>&lt;flat_binder_object*&gt;(mData+mDataPos) = val;</span><br><span class="line">        <span class="comment">// Need to write meta-data?</span></span><br><span class="line">        <span class="keyword">if</span> (nullMetaData || val.binder != <span class="number">0</span>) &#123;</span><br><span class="line">            mObjects[mObjectsSize] = mDataPos; <span class="comment">// mDataPos 是数据指针的当前位置，所以存放的是相对 mData 的偏移地址</span></span><br><span class="line">            <span class="built_in">acquire_object</span>(ProcessState::<span class="built_in">self</span>(), val, <span class="keyword">this</span>, &amp;mOpenAshmemSize);</span><br><span class="line">            mObjectsSize++;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>这里的 tr.data.ptr.buffer(就是 mData) 和 tr.data.ptr.offsets(就是mObjects) 存储的都是地址，buffer 指的是数据区的首地址，存放传输的数据（包括 binder 对象）；offsets 指的是偏移数组的首地址，用来描述数据区中每一个 IPC 对象（flat_binder_object）在数据区 buffer 中的位置，数组的每一项为一个 binder_size_t（其实就是 unsigned int 或者 unsigned long），这个值对应每一个 IPC 对象在 buffer 中相对于 mData 的偏移地址（理解为数组下标）；</p>
<p>这里的 <code>binder_transaction_data tr</code>，从名称上看就知道实际上就是要传递的数据，不过真正要传递的数据是 tr.data.ptr.buffer，传入的 cmd 参数是 BC_TRANSACTION，然后先后把这个 cmd 和传递的数据 tr 写入 mOut 中（这样当跳过 cmd 地址后就是数据 tr 的地址了），在后面 <code>talkWithDriver()</code> 中会把这个 mOut.data(指针值) 赋值给 binder_write_read.write_buffer 从而传递到驱动层。</p>
<p>BC 就是 Binder Command，是向驱动发送的命令，BR 就是 Binder Return，是从驱动返回的命令；</p>
<p>mIn 和 mOut 都是 IPCThreadState 中的 Parcel 对象，定义在 IPCThreadState.h 中:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// IPCThreadState.h</span></span><br><span class="line">Parcel              mIn; <span class="comment">// 存放从别处读取而来的数据</span></span><br><span class="line">Parcel              mOut; <span class="comment">// 存放要写入到别处的数据</span></span><br></pre></td></tr></table></figure>

<h4 id="1-2-2-2-waitForResponse-写入数据到-binder-驱动"><a href="#1-2-2-2-waitForResponse-写入数据到-binder-驱动" class="headerlink" title="1.2.2.2 waitForResponse - 写入数据到 binder 驱动"></a>1.2.2.2 waitForResponse - 写入数据到 binder 驱动</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// IPCThreadState.h</span></span><br><span class="line"><span class="function"><span class="type">status_t</span>            <span class="title">waitForResponse</span><span class="params">(Parcel *reply, <span class="type">status_t</span> *acquireResult=<span class="literal">nullptr</span>)</span></span>;</span><br><span class="line"><span class="comment">// IPCThreadState.cpp</span></span><br><span class="line"><span class="function"><span class="type">status_t</span> <span class="title">IPCThreadState::waitForResponse</span><span class="params">(Parcel *reply, <span class="type">status_t</span> *acquireResult)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint32_t</span> cmd;</span><br><span class="line">    <span class="type">int32_t</span> err;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 进一步调用 talkWithDriver 去执行写入数据到 binder 驱动</span></span><br><span class="line">        <span class="keyword">if</span> ((err=<span class="built_in">talkWithDriver</span>()) &lt; NO_ERROR) <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">// 检查数据有效性，如果驱动返回数据，会放入 mIn 中</span></span><br><span class="line">        err = mIn.<span class="built_in">errorCheck</span>();</span><br><span class="line">        ...</span><br><span class="line">        cmd = (<span class="type">uint32_t</span>)mIn.<span class="built_in">readInt32</span>(); <span class="comment">// 从 mIn 读取 binder 驱动返回的命令</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">switch</span> (cmd) &#123; <span class="comment">// 处理 binder 驱动发来的命令</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">case</span> BR_TRANSACTION_COMPLETE:</span><br><span class="line">            <span class="comment">// TF_ONE_WAY 模式时传入的 reply 和 acquireResult 是 nullptr，则直接 finish 退出循环，不再等待 binder 驱动的回复</span></span><br><span class="line">            <span class="keyword">if</span> (!reply &amp;&amp; !acquireResult) <span class="keyword">goto</span> finish;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">default</span>: <span class="comment">// 其他命令在 executeCommand 方法中处理</span></span><br><span class="line">            err = <span class="built_in">executeCommand</span>(cmd);</span><br><span class="line">            <span class="keyword">if</span> (err != NO_ERROR) <span class="keyword">goto</span> finish;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">    <span class="keyword">return</span> err;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>waitForResponse() 主要做了两件事：</p>
<ul>
<li>向 binder 驱动中写入数据：waitForResponse() 没有直接去执行写入数据到 binder 驱动，而是调用了 talkWithDriver() 去处理；</li>
<li>处理从 binder 驱动发送过来的命令：比如 BR_TRANSACTION_COMPLETE, BR_REPLY；</li>
</ul>
<h5 id="1-2-2-2-1-talkWithDriver-写入数据到-binder-驱动并把驱动返回数据放入-mIn-中"><a href="#1-2-2-2-1-talkWithDriver-写入数据到-binder-驱动并把驱动返回数据放入-mIn-中" class="headerlink" title="1.2.2.2.1 talkWithDriver() - 写入数据到 binder 驱动并把驱动返回数据放入 mIn 中"></a>1.2.2.2.1 talkWithDriver() - 写入数据到 binder 驱动并把驱动返回数据放入 mIn 中</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// IPCThreadState.h</span></span><br><span class="line"><span class="function"><span class="type">status_t</span>            <span class="title">talkWithDriver</span><span class="params">(<span class="type">bool</span> doReceive=<span class="literal">true</span>)</span></span>; <span class="comment">// 默认参数为 true</span></span><br><span class="line"><span class="comment">// IPCThreadState.cpp</span></span><br><span class="line"><span class="function"><span class="type">status_t</span> <span class="title">IPCThreadState::talkWithDriver</span><span class="params">(<span class="type">bool</span> doReceive)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    binder_write_read bwr; <span class="comment">// 1. binder 驱动使用的数据格式</span></span><br><span class="line">    <span class="comment">// mIn 还没有写入数据，因此值为初始值，那么 mIn.dataPosition()返回 mDataPos，值为 0</span></span><br><span class="line">    <span class="comment">// mIn.dataSize() 返回 mDataSize，初始值也为 0，因此 needRead 为 true</span></span><br><span class="line">    <span class="type">const</span> <span class="type">bool</span> needRead = mIn.<span class="built_in">dataPosition</span>() &gt;= mIn.<span class="built_in">dataSize</span>();</span><br><span class="line">    <span class="type">const</span> <span class="type">size_t</span> outAvail = (!doReceive || needRead) ? mOut.<span class="built_in">dataSize</span>() : <span class="number">0</span>;</span><br><span class="line">    bwr.write_size = outAvail; <span class="comment">// 要写入的数据量</span></span><br><span class="line">    <span class="comment">// 要写入的数据，把 mOut.data（包含了 cmd 和 binder_transaction_data tr）赋给 bwr.write_buffer</span></span><br><span class="line">    <span class="comment">// mOut.data() 返回的是指针，即 bwr.write_buffer 存入的是指针值，是要传输数据的地址</span></span><br><span class="line">    bwr.write_buffer = (<span class="type">uintptr_t</span>)mOut.<span class="built_in">data</span>();</span><br><span class="line">    <span class="comment">// This is what we&#x27;ll read.</span></span><br><span class="line">    <span class="keyword">if</span> (doReceive &amp;&amp; needRead) &#123;</span><br><span class="line">        bwr.read_size = mIn.<span class="built_in">dataCapacity</span>(); <span class="comment">// 256，IPCThreadState 初始化时设置的</span></span><br><span class="line">        bwr.read_buffer = (<span class="type">uintptr_t</span>)mIn.<span class="built_in">data</span>(); <span class="comment">// 同 bwr.write_buffer 是个地址值</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// needRead 为 false，进入 else 分支</span></span><br><span class="line">        bwr.read_size = <span class="number">0</span>;</span><br><span class="line">        bwr.read_buffer = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 如果读写的数据量都为 0，则直接返回</span></span><br><span class="line">    <span class="keyword">if</span> ((bwr.write_size == <span class="number">0</span>) &amp;&amp; (bwr.read_size == <span class="number">0</span>)) <span class="keyword">return</span> NO_ERROR;</span><br><span class="line"></span><br><span class="line">    bwr.write_consumed = <span class="number">0</span>; <span class="comment">// 表示 binder 驱动是否消耗了 mOut 中的数据（大于 0 消耗，否则未消耗）</span></span><br><span class="line">    bwr.read_consumed = <span class="number">0</span>; <span class="comment">// 表示 binder 驱动是否是否成功返回数据并写入 mIn（大于 0 成功）</span></span><br><span class="line">    <span class="type">status_t</span> err;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">       ...</span><br><span class="line">        <span class="comment">// 真正执行写入的地方，传入 bwr 的地址，bwr.xxx_buffer 中包含传递的命令和数据</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">ioctl</span>(mProcess-&gt;mDriverFD, BINDER_WRITE_READ, &amp;bwr) &gt;= <span class="number">0</span>)</span><br><span class="line">            err = NO_ERROR;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            err = -errno;</span><br><span class="line">        ...</span><br><span class="line">    &#125; <span class="keyword">while</span> (err == -EINTR); <span class="comment">// while 条件一般不成立，do 代码块只执行一次</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<p>talkWithDriver() 在 IPCThreadState.h 中定义的时候，doReceive 参数默认值为 true，在 waitForResponse() 中调用 talkWithDriver() 时没有传入参数，所以这里的 doReceive 为 true；mIn 还没有写入数据，因此值为初始值，那么 <code>mIn.dataPosition()</code> 返回 mDataPos，值为 0，<code>mIn.dataSize()</code> 返回 mDataSize，初始值也为 0，因此 needRead 为 true，bwr.read_size 则设置为 256，</p>
<p>talkWithDriver() 主要做了两个工作：</p>
<ul>
<li>准备 binder_write_read 数据，通过 ioctl 进入驱动，执行驱动层的 binder_ioctl()，binder_ioctl_write_read()，执行了 <code>binder_thread_write()</code> 写入数据，随后又执行了 <code>binder_thread_read()</code> 函数把 BR_NOOP 和 BR_TRANSACTION 两个命令写入用户空间（具体流程可以看 <a href="">Android_Binder进程间通信机制01</a> 的驱动层讲解）；</li>
<li>处理驱动的返回数据，放入 mIn 中供后续处理；</li>
</ul>
<p><strong>binder_ioctl_write_read()</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// binder.c</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">binder_ioctl_write_read</span><span class="params">(<span class="keyword">struct</span> file *filp,</span></span><br><span class="line"><span class="params">                <span class="type">unsigned</span> <span class="type">int</span> cmd, <span class="type">unsigned</span> <span class="type">long</span> arg,</span></span><br><span class="line"><span class="params">                <span class="keyword">struct</span> binder_thread *thread)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">binder_proc</span> *<span class="title">proc</span> =</span> filp-&gt;private_data;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> size = _IOC_SIZE(cmd);</span><br><span class="line">    <span class="comment">// arg 是用户空间 ioctl() 传入的 bwr 的地址，__user 表示这个地址是用户空间的</span></span><br><span class="line">    <span class="type">void</span> __user *ubuf = (<span class="type">void</span> __user *)arg;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">binder_write_read</span> <span class="title">bwr</span>;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// ubuf 就是用户空间 bwr 的地址，则是把用户空间 bwr 数据拷贝到内核 bwr 的地址</span></span><br><span class="line">    <span class="keyword">if</span> (copy_from_user(&amp;bwr, ubuf, <span class="keyword">sizeof</span>(bwr))) &#123;</span><br><span class="line">        ret = -EFAULT;</span><br><span class="line">        <span class="keyword">goto</span> out;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 当写缓存中有数据，则执行 binder 写操作</span></span><br><span class="line">    <span class="keyword">if</span> (bwr.write_size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        ret = binder_thread_write(proc, thread,</span><br><span class="line">                      bwr.write_buffer,</span><br><span class="line">                      bwr.write_size,</span><br><span class="line">                      &amp;bwr.write_consumed);</span><br><span class="line">        trace_binder_write_done(ret);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此处的 copy_from_user() 并非 binder 一次拷贝的地方，因为此处虽然是把用户空间 bwr 的数据拷贝到了内核 bwr 的地址，但是真实的传输数据是 bwr.write_buffer，bwr.write_buffer 是 mOut.data()，mOut.data() 返回的是一个地址值，所以此处拷贝的只是一个地址，并非真实传输的数据。</p>
<h6 id="a-binder-thread-write-找到目标进程-sm-并向其传递传输数据，唤醒-sm"><a href="#a-binder-thread-write-找到目标进程-sm-并向其传递传输数据，唤醒-sm" class="headerlink" title="a. binder_thread_write() - 找到目标进程 sm 并向其传递传输数据，唤醒 sm"></a>a. binder_thread_write() - 找到目标进程 sm 并向其传递传输数据，唤醒 sm</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// binder.c</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">binder_thread_write</span><span class="params">(<span class="keyword">struct</span> binder_proc *proc,</span></span><br><span class="line"><span class="params">            <span class="keyword">struct</span> binder_thread *thread,</span></span><br><span class="line"><span class="params">            <span class="type">binder_uintptr_t</span> binder_buffer, <span class="type">size_t</span> size,</span></span><br><span class="line"><span class="params">            <span class="type">binder_size_t</span> *consumed)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> cmd;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">binder_context</span> *<span class="title">context</span> =</span> proc-&gt;context;</span><br><span class="line">    <span class="comment">// 传入的 bwr.write_buffer，是一个地址值</span></span><br><span class="line">    <span class="type">void</span> __user *buffer = (<span class="type">void</span> __user *)(<span class="type">uintptr_t</span>)binder_buffer;</span><br><span class="line">    <span class="type">void</span> __user *ptr = buffer + *consumed; <span class="comment">// 数据起始地址</span></span><br><span class="line">    <span class="type">void</span> __user *end = buffer + size; <span class="comment">// 数据结束地址</span></span><br><span class="line">    <span class="comment">// 可能有多个命令及对应数据要处理，所以要循环</span></span><br><span class="line">    <span class="keyword">while</span> (ptr &lt; end &amp;&amp; thread-&gt;return_error.cmd == BR_OK) &#123;</span><br><span class="line">        <span class="type">int</span> ret;</span><br><span class="line">        <span class="keyword">if</span> (get_user(cmd, (<span class="type">uint32_t</span> __user *)ptr)) <span class="comment">// 从用户空间读取一个 cmd</span></span><br><span class="line">            <span class="keyword">return</span> -EFAULT;</span><br><span class="line">        ptr += <span class="keyword">sizeof</span>(<span class="type">uint32_t</span>); <span class="comment">// 跳过 cmd 所占的地址，指向要处理的数据</span></span><br><span class="line">        <span class="keyword">switch</span> (cmd) &#123;</span><br><span class="line">         ...</span><br><span class="line">        <span class="keyword">case</span> BC_TRANSACTION:</span><br><span class="line">        <span class="keyword">case</span> BC_REPLY: &#123;</span><br><span class="line">            <span class="comment">// 与 IPCThreadState.writeTransactionData() 中准备的数据结构体对应</span></span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">binder_transaction_data</span> <span class="title">tr</span>;</span></span><br><span class="line">            <span class="comment">// 前面 ptr 已经跳过了 cmd，所以现在的 ptr 指向数据地址，将其拷贝到内核空间的 tr 中</span></span><br><span class="line">            <span class="keyword">if</span> (copy_from_user(&amp;tr, ptr, <span class="keyword">sizeof</span>(tr)))</span><br><span class="line">                <span class="keyword">return</span> -EFAULT;</span><br><span class="line">            ptr += <span class="keyword">sizeof</span>(tr); <span class="comment">// ptr 跳过数据空间地址</span></span><br><span class="line">            <span class="comment">// cmd 此时是 BC_TRANSACTION，所以第四个参数为 false</span></span><br><span class="line">            binder_transaction(proc, thread, &amp;tr,</span><br><span class="line">                       cmd == BC_REPLY, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">         ...</span><br><span class="line">        <span class="comment">// 执行完 BC_TRANSACTION 后跳出 switch 语句，然后执行下面语句，</span></span><br><span class="line">        <span class="comment">// consumed 是被前面写入处理消耗的数据量，对应于用户空间的 bwr.write_consumed</span></span><br><span class="line">        <span class="comment">// ptr 现在已经跳过了 cmd 和 tr，而 buffer 是传入 binder_buffer 的起始地址，相减则是已消耗的数据量</span></span><br><span class="line">        *consumed = ptr - buffer;</span><br></pre></td></tr></table></figure>

<p>由小节 [1.2.2](#1.2.2 IPCThreadState::self()-&gt;transact()) 中得知，传递给 <code>writeTransactionData()</code> 函数的 cmd 是 BC_TRANSACTION，所以进入 BC_TRANSACTION 这个 case，调用 <code>binder_transaction</code> 方法，并且第四个参数 <code>cmd == BC_REPLY</code> 为 false。</p>
<p><strong>binder_transaction</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// binder.c</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">binder_transaction</span><span class="params">(<span class="keyword">struct</span> binder_proc *proc,</span></span></span><br><span class="line"><span class="params"><span class="function">                   <span class="keyword">struct</span> binder_thread *thread,</span></span></span><br><span class="line"><span class="params"><span class="function">                   <span class="keyword">struct</span> binder_transaction_data *tr, <span class="type">int</span> reply,</span></span></span><br><span class="line"><span class="params"><span class="function">                   <span class="type">binder_size_t</span> extra_buffers_size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">binder_transaction</span> *t; <span class="comment">// 用于描述本次 server 端要进行的 transaction</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">binder_work</span> *w;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">binder_work</span> *tcomplete; <span class="comment">// 用于描述当前线程未完成的 transaction</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">binder_proc</span> *target_proc = <span class="literal">NULL</span>; <span class="comment">// 目标进程</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">binder_thread</span> *target_thread = <span class="literal">NULL</span>; <span class="comment">// 目标线程</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">binder_node</span> *target_node = <span class="literal">NULL</span>; <span class="comment">// 目标 binder_node</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">binder_context</span> *context = proc-&gt;context; <span class="comment">// 全局唯一，存储了 sm 对应的 binder_node</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (reply) &#123; <span class="comment">// 第四个参数 reply 为 false</span></span><br><span class="line">        ...</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 处理 BC_TRANSACTION</span></span><br><span class="line">        <span class="keyword">if</span> (tr-&gt;target.handle) &#123; <span class="comment">// handle 不为 0 时的操作</span></span><br><span class="line">            ...</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// handle 为 0，目标进程是 sm</span></span><br><span class="line">            ...</span><br><span class="line">            <span class="comment">// 获取 sm 对应的 binder_node，target_node 即为 sm 的 binder 实体对象（binder_node）</span></span><br><span class="line">            target_node = context-&gt;binder_context_mgr_node;</span><br><span class="line">            <span class="keyword">if</span> (target_node)</span><br><span class="line">                <span class="comment">// target_node 里面存储了所属进程的 binder_proc 信息，所以此处直接获取</span></span><br><span class="line">                <span class="comment">// target_node-&gt;proc 给 target_proc</span></span><br><span class="line">                target_node = <span class="built_in">binder_get_node_refs_for_txn</span>(</span><br><span class="line">                        target_node, &amp;target_proc,</span><br><span class="line">                        &amp;return_error);</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">        w = <span class="built_in">list_first_entry_or_null</span>(&amp;thread-&gt;todo,</span><br><span class="line">                         <span class="keyword">struct</span> binder_work, entry); <span class="comment">// thread-&gt;todo 为空，所以 w 为空</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// 此时 binder_thread 还没有通信事务，所以跳过</span></span><br><span class="line">        <span class="keyword">if</span> (!(tr-&gt;flags &amp; TF_ONE_WAY) &amp;&amp; thread-&gt;transaction_stack) &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">binder_inner_proc_unlock</span>(proc);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 初始化 binder_transaction 对象 t，用于描述本次 server 端要进行的 transaction</span></span><br><span class="line">    t = <span class="built_in">kzalloc</span>(<span class="built_in">sizeof</span>(*t), GFP_KERNEL);</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 初始化 binder_work 对象 tcomplete，用于描述当前调用线程未完成的 transaction</span></span><br><span class="line">    tcomplete = <span class="built_in">kzalloc</span>(<span class="built_in">sizeof</span>(*tcomplete), GFP_KERNEL);</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (!reply &amp;&amp; !(tr-&gt;flags &amp; TF_ONE_WAY))</span><br><span class="line">        <span class="comment">// t-&gt;from 记录当前线程，用于 sm 返回结果时可以唤醒对应的请求进程</span></span><br><span class="line">        t-&gt;from = thread;</span><br><span class="line">    ...</span><br><span class="line">    t-&gt;sender_euid = <span class="built_in">task_euid</span>(proc-&gt;tsk);</span><br><span class="line">    t-&gt;to_proc = target_proc; <span class="comment">// 记录目标进程</span></span><br><span class="line">    t-&gt;to_thread = target_thread; <span class="comment">// 记录目标线程，目前还是 NULL</span></span><br><span class="line">    t-&gt;code = tr-&gt;code; <span class="comment">// 记录请求码，此时为 ADD_SERVICE_TRANSACTION</span></span><br><span class="line">    t-&gt;flags = tr-&gt;flags; <span class="comment">// flags 为 0</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 从 mmap 开辟的空间申请物理内存，这个 buffer 是共享空间，准备接收要传输的数据</span></span><br><span class="line">    t-&gt;buffer = <span class="built_in">binder_alloc_new_buf</span>(&amp;target_proc-&gt;alloc, tr-&gt;data_size,</span><br><span class="line">        tr-&gt;offsets_size, extra_buffers_size,</span><br><span class="line">        !reply &amp;&amp; (t-&gt;flags &amp; TF_ONE_WAY), current-&gt;tgid);</span><br><span class="line">    ...</span><br><span class="line">    t-&gt;buffer-&gt;debug_id = t-&gt;debug_id;</span><br><span class="line">    t-&gt;buffer-&gt;transaction = t;</span><br><span class="line">    t-&gt;buffer-&gt;target_node = target_node;</span><br><span class="line">    t-&gt;buffer-&gt;clear_on_free = !!(t-&gt;flags &amp; TF_CLEAR_BUF);</span><br><span class="line">    <span class="built_in">trace_binder_transaction_alloc_buf</span>(t-&gt;buffer);</span><br><span class="line">    <span class="comment">// 把数据从用户空间拷贝到上面的 buffer 共享内存区域，</span></span><br><span class="line">    <span class="comment">// 即 binder 真正一次拷贝有效数据的地方</span></span><br><span class="line">    <span class="comment">// 拷贝用户空间的 tr-&gt;data.ptr.buffer 到 t-&gt;buffer 对应的物理内存，拷贝的是 transact() 中 data 参数的非 IBinder 数据</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">binder_alloc_copy_user_to_buffer</span>(</span><br><span class="line">                &amp;target_proc-&gt;alloc,</span><br><span class="line">                t-&gt;buffer, <span class="number">0</span>,</span><br><span class="line">                (<span class="type">const</span> <span class="type">void</span> __user *)</span><br><span class="line">                    (<span class="type">uintptr_t</span>)tr-&gt;data.ptr.buffer,</span><br><span class="line">                tr-&gt;data_size)) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 拷贝用户空间的 tr-&gt;data.ptr.offsets 到 t-&gt;buffer 对应的物理内存，拷贝的是 transact() 中 data 参数的 IBinder 对象</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">binder_alloc_copy_user_to_buffer</span>(</span><br><span class="line">                &amp;target_proc-&gt;alloc,</span><br><span class="line">                t-&gt;buffer,</span><br><span class="line">                <span class="built_in">ALIGN</span>(tr-&gt;data_size, <span class="built_in">sizeof</span>(<span class="type">void</span> *)),</span><br><span class="line">                (<span class="type">const</span> <span class="type">void</span> __user *)</span><br><span class="line">                    (<span class="type">uintptr_t</span>)tr-&gt;data.ptr.offsets,</span><br><span class="line">                tr-&gt;offsets_size)) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 循环取出 Binder 服务，根据本地 Binder 对象还是代理对象做对应处理</span></span><br><span class="line">    <span class="keyword">for</span> (buffer_offset = off_start_offset; buffer_offset &lt; off_end_offset;</span><br><span class="line">         buffer_offset += <span class="built_in">sizeof</span>(<span class="type">binder_size_t</span>)) &#123;</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">if</span> (t-&gt;buffer-&gt;oneway_spam_suspect)</span><br><span class="line">        tcomplete-&gt;type = BINDER_WORK_TRANSACTION_ONEWAY_SPAM_SUSPECT;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        tcomplete-&gt;type = BINDER_WORK_TRANSACTION_COMPLETE;<span class="comment">// 发送给 client(就是当前进程)，让其挂起</span></span><br><span class="line">    t-&gt;work.type = BINDER_WORK_TRANSACTION;<span class="comment">// 发送给 sm，让其把 service 添加到 sm 中</span></span><br><span class="line">    <span class="keyword">if</span> (reply) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!(t-&gt;flags &amp; TF_ONE_WAY)) &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// 将 tcomplete 加入到当前调用线程待处理的任务队列 thread-&gt;todo 中</span></span><br><span class="line">        <span class="comment">// 相当于 list_add_tail(&amp;tcomplete-&gt;entry, target_list);</span></span><br><span class="line">        <span class="built_in">binder_enqueue_deferred_thread_work_ilocked</span>(thread, tcomplete);</span><br><span class="line">        t-&gt;need_reply = <span class="number">1</span>;</span><br><span class="line">        t-&gt;from_parent = thread-&gt;transaction_stack; <span class="comment">// 保存 thread -&gt;transaction_stack 方便 sm 找到客户端</span></span><br><span class="line">        <span class="comment">// 把此次创建的 binder_transaction 对象记录在当前线程的 transaction_stack</span></span><br><span class="line">        thread-&gt;transaction_stack = t;</span><br><span class="line">        <span class="built_in">binder_inner_proc_unlock</span>(proc);</span><br><span class="line">        <span class="comment">// 此时 target_thread 还是 NULL，进去后会从 target_proc 的 waiting_threads 链表取出一个空闲的 binder 线程赋值给 target_thread</span></span><br><span class="line">        <span class="comment">//  将 t 加入到 target_thread-&gt;todo 处理队列中，向目标进程发送事务 BINDER_WORK_TRANSACTION 并将其唤醒，</span></span><br><span class="line">        <span class="comment">// 并配置 target_thread-&gt;process_todo = true</span></span><br><span class="line">        return_error = <span class="built_in">binder_proc_transaction</span>(t,</span><br><span class="line">                target_proc, target_thread); </span><br><span class="line">        <span class="keyword">if</span> (return_error) &#123;</span><br><span class="line">            <span class="built_in">binder_inner_proc_lock</span>(proc);</span><br><span class="line">            <span class="built_in">binder_pop_transaction_ilocked</span>(thread, t);</span><br><span class="line">            <span class="built_in">binder_inner_proc_unlock</span>(proc);</span><br><span class="line">            <span class="keyword">goto</span> err_dead_proc_or_thread;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>调用 binder_proc_transaction() 向 sm 发送 BINDER_WORK_TRANSACTION 并将 sm 唤醒：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// binder.c</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">binder_proc_transaction</span><span class="params">(<span class="keyword">struct</span> binder_transaction *t,</span></span></span><br><span class="line"><span class="params"><span class="function">                    <span class="keyword">struct</span> binder_proc *proc,</span></span></span><br><span class="line"><span class="params"><span class="function">                    <span class="keyword">struct</span> binder_thread *thread)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">binder_node</span> *node = t-&gt;buffer-&gt;target_node;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">binder_priority</span> node_prio;</span><br><span class="line">    <span class="type">bool</span> oneway = !!(t-&gt;flags &amp; TF_ONE_WAY); <span class="comment">// 值为 false</span></span><br><span class="line">    <span class="type">bool</span> pending_async = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">bool</span> skip = <span class="literal">false</span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (oneway) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// thread 为 NULL，pending_async 为 false，skip 为 false，进入 if 分支</span></span><br><span class="line">    <span class="keyword">if</span> (!thread &amp;&amp; !pending_async &amp;&amp; !skip)</span><br><span class="line">        <span class="comment">// 在目标进程 target_proc 的 waiting_threads 链表里面取出一个空闲 binder 线程</span></span><br><span class="line">        thread = <span class="built_in">binder_select_thread_ilocked</span>(proc);</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (thread) &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// 将 t 加入到目标线程的target_thread 的 todo 链表中并配置 thread-&gt;process_todo = true</span></span><br><span class="line">        <span class="built_in">binder_enqueue_thread_work_ilocked</span>(thread, &amp;t-&gt;work);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!pending_async) &#123;</span><br><span class="line">        <span class="comment">// 如果上面 binder_thread 为空，则记录到 target_proc 的 todo 链表</span></span><br><span class="line">        <span class="built_in">binder_enqueue_work_ilocked</span>(&amp;t-&gt;work, &amp;proc-&gt;todo);</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (!pending_async)</span><br><span class="line">        <span class="comment">// 调用 wake_up_interruptible_sync() 唤醒 sm</span></span><br><span class="line">        <span class="built_in">binder_wakeup_thread_ilocked</span>(proc, thread, !oneway <span class="comment">/* sync */</span>); <span class="comment">// oneway 为 false</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span></span></span><br><span class="line"><span class="function"><span class="title">binder_enqueue_thread_work_ilocked</span><span class="params">(<span class="keyword">struct</span> binder_thread *thread,</span></span></span><br><span class="line"><span class="params"><span class="function">                   <span class="keyword">struct</span> binder_work *work)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">WARN_ON</span>(!<span class="built_in">list_empty</span>(&amp;thread-&gt;waiting_thread_node));</span><br><span class="line">    <span class="built_in">binder_enqueue_work_ilocked</span>(work, &amp;thread-&gt;todo);</span><br><span class="line">    thread-&gt;process_todo = <span class="literal">true</span>; <span class="comment">// 配置 process_todo = true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">binder_wakeup_thread_ilocked</span><span class="params">(<span class="keyword">struct</span> binder_proc *proc,</span></span></span><br><span class="line"><span class="params"><span class="function">                     <span class="keyword">struct</span> binder_thread *thread,</span></span></span><br><span class="line"><span class="params"><span class="function">                     <span class="type">bool</span> sync)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">assert_spin_locked</span>(&amp;proc-&gt;inner_lock);</span><br><span class="line">    <span class="keyword">if</span> (thread) &#123;</span><br><span class="line">        <span class="built_in">trace_android_vh_binder_wakeup_ilocked</span>(thread-&gt;task, sync, proc);</span><br><span class="line">        <span class="keyword">if</span> (sync) <span class="comment">// sync 为 true</span></span><br><span class="line">            <span class="built_in">wake_up_interruptible_sync</span>(&amp;thread-&gt;wait); <span class="comment">// 唤醒目标进程 sm</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">wake_up_interruptible</span>(&amp;thread-&gt;wait);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>这里要注意：binder_proc_transaction() -&gt; binder_enqueue_thread_work_ilocked() -&gt; binder_enqueue_thread_work_ilocked()， <font color=red><strong>在最后一步的时候配置了 process_todo &#x3D; true，这里的作用是在后面进入 binder_thread_read() 的时候线程不休眠</strong></font>， 最终还是调用 <code>wake_up_interruptible_sync()</code> 把 sm 唤醒，异步则调用 <code>wake_up_interruptible()</code>。</p>
<p>binder_transaction() 主要工作：</p>
<ul>
<li>获取 target_node，target_proc</li>
<li>拷贝数据到内核和目标进程映射的物理内存空间</li>
<li>binder_transaction_binder 转换成 binder_transaction_handle（<strong>这里判断是 BINDER_TYPE_BINDER 还是 BINDER_TYPE_HANDLE 是在 transact 之前的 <code>writeStrongBinder()</code> 数据序列化的时候处理的，因为我们传入在 addService 的是 ams 的服务端，所以 binder.localBinder() 不为空，所以传入的是 BBinder，那么就是 BINDER_TYPE_BINDER</strong>）</li>
<li>保存 <code>thread -&gt;transaction_stack</code> 方便 sm 找到客户端</li>
<li><code>t-&gt;work.type = BINDER_WORK_TRANSACTION</code>，发送到 sm 让其工作</li>
<li><code>tcomplete-type = BINDER_WORK_TRANSACTION_COMPLETE</code>，发送给 client</li>
<li><code>wake_up_interruptible_sync()</code> 唤醒 sm</li>
</ul>
<p><strong>为什么这里拷贝之前要通过 binder_alloc_new_buf() 申请内存呢？因为在 binder_mmap() 的时候虽然映射了 1M-8K 的虚拟内存，但却只申请了 1页(4K) 的物理页面，等到实际使用时再动态申请，也就是说在 binder_ioctl() 实际传输数据的时候再通过 binder_alloc_new_buf() 方法去申请物理内存。</strong></p>
<p>自此已经将要传输的数据拷贝到目标进程，目标进程可以直接读取到了，目标 sm 进程被唤醒，~~~在此之前 sm 是阻塞在 binder_thread_read() 中的~~~，接下来还有三件事要做：</p>
<ul>
<li><p>客户端调用线程进入休眠</p>
</li>
<li><p>目标进程直接拿到数据进行处理，处理完成后唤醒调用线程</p>
</li>
<li><p>客户端调用线程返回处理结果</p>
</li>
</ul>
<p>其中前两步没有时序上的限制，而是并行处理的，先来看看客户端调用线程。</p>
<p>binder_transaction 执行完后，那么 binder_thread_write 也就执行完了，返回到 binder_ioctl_write_read() 中继续执行：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// binder.c</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">binder_ioctl_write_read</span><span class="params">(<span class="keyword">struct</span> file *filp,</span></span><br><span class="line"><span class="params">				<span class="type">unsigned</span> <span class="type">int</span> cmd, <span class="type">unsigned</span> <span class="type">long</span> arg,</span></span><br><span class="line"><span class="params">				<span class="keyword">struct</span> binder_thread *thread)</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">	<span class="comment">// 当读缓存中有数据，则执行 binder 读操作</span></span><br><span class="line">    <span class="keyword">if</span> (bwr.read_size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        ret = binder_thread_read(proc, thread, bwr.read_buffer,</span><br><span class="line">                     bwr.read_size,</span><br><span class="line">                     &amp;bwr.read_consumed,</span><br><span class="line">                     filp-&gt;f_flags &amp; O_NONBLOCK);</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span> (!binder_worklist_empty_ilocked(&amp;proc-&gt;todo))</span><br><span class="line">            <span class="comment">// 进程 todo 队列不为空,则唤醒该队列中的线程</span></span><br><span class="line">            binder_wakeup_proc_ilocked(proc);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<p>因为 bwr.read_size &gt; 0，所以接着执行 binder_thread_read() 方法。</p>
<h6 id="b-binder-thread-read-客户端进程挂起"><a href="#b-binder-thread-read-客户端进程挂起" class="headerlink" title="b. binder_thread_read() - 客户端进程挂起"></a>b. binder_thread_read() - 客户端进程挂起</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// binder.c</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">binder_thread_read</span><span class="params">(<span class="keyword">struct</span> binder_proc *proc,</span></span><br><span class="line"><span class="params">			      <span class="keyword">struct</span> binder_thread *thread,</span></span><br><span class="line"><span class="params">			      <span class="type">binder_uintptr_t</span> binder_buffer, <span class="type">size_t</span> size,</span></span><br><span class="line"><span class="params">			      <span class="type">binder_size_t</span> *consumed, <span class="type">int</span> non_block)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 传入的 bwr.read_buffer，是一个地址值</span></span><br><span class="line">	<span class="type">void</span> __user *buffer = (<span class="type">void</span> __user *)(<span class="type">uintptr_t</span>)binder_buffer;</span><br><span class="line">	<span class="type">void</span> __user *ptr = buffer + *consumed; <span class="comment">// 数据起始地址</span></span><br><span class="line">	<span class="type">void</span> __user *end = buffer + size; <span class="comment">// 数据结束地址</span></span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> wait_for_proc_work;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (*consumed == <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="comment">// 向用户空间 ptr 地址添加 BR_NOOP 命令</span></span><br><span class="line">		<span class="keyword">if</span> (put_user(BR_NOOP, (<span class="type">uint32_t</span> __user *)ptr))</span><br><span class="line">			<span class="keyword">return</span> -EFAULT;</span><br><span class="line">		ptr += <span class="keyword">sizeof</span>(<span class="type">uint32_t</span>); <span class="comment">// 跳过 BR_NOOP 命令地址</span></span><br><span class="line">	&#125;</span><br><span class="line">...</span><br><span class="line">	wait_for_proc_work = binder_available_for_proc_work_ilocked(thread);</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (wait_for_proc_work) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// non_block == filp-&gt;f_flags &amp; O_NONBLOCK，filp-&gt;f_flags 在 sm 打开 binder</span></span><br><span class="line">    <span class="comment">// 设备节点时(ProcessState.open_driver()) 传入的是 O_RDWR | OCLOEXEC，所以 non_block 为 false</span></span><br><span class="line">    <span class="keyword">if</span> (non_block) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!binder_has_work(thread, wait_for_proc_work))</span><br><span class="line">            ret = -EAGAIN;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ret = binder_wait_for_work(thread, wait_for_proc_work);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 走到这里，证明已经被唤醒了，结束等待，需要去掉线程 looper 的等待状态</span></span><br><span class="line">    thread-&gt;looper &amp;= ~BINDER_LOOPER_STATE_WAITING;</span><br><span class="line">    ...</span><br><span class="line">｝</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断 wait_for_proc_work</span></span><br><span class="line"><span class="type">static</span> <span class="type">bool</span> <span class="title function_">binder_available_for_proc_work_ilocked</span><span class="params">(<span class="keyword">struct</span> binder_thread *thread)</span></span><br><span class="line">&#123; <span class="comment">// 判断 wait_for_proc_work</span></span><br><span class="line">    <span class="keyword">return</span> !thread-&gt;transaction_stack &amp;&amp;</span><br><span class="line">        binder_worklist_empty_ilocked(&amp;thread-&gt;todo) &amp;&amp;</span><br><span class="line">        (thread-&gt;looper &amp; (BINDER_LOOPER_STATE_ENTERED |</span><br><span class="line">                   BINDER_LOOPER_STATE_REGISTERED));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>consumed 就是用户空间的 bwr.read_consumed，此时值为 0，把 BR_NOOP 传递到了用户空间地址 ptr  中。</p>
<p>在 binder_transaction() 中将 server 端要处理的 transaction 记录到了当前调用线程 <code>thread-&gt;transaction_stack = t;</code>，所以 thread-&gt;transaction_stack !&#x3D; NULL，而且将 tcomplete 加入到当前调用线程待处理的任务队列 &amp;thread-&gt;todo，所以 &amp;thread-&gt;todo 也不为空，wait_for_proc_work 为 false，non_block 也为 false，进入 binder_wait_for_work()：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// binder.c</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">binder_wait_for_work</span><span class="params">(<span class="keyword">struct</span> binder_thread *thread,</span></span><br><span class="line"><span class="params">                <span class="type">bool</span> do_proc_work)</span></span><br><span class="line">&#123;</span><br><span class="line">    DEFINE_WAIT(wait); <span class="comment">// 建立并初始化一个等待队列项 wait</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123; <span class="comment">// 循环的作用是让线程被唤醒后再一次去检查一下 condition 是否满足</span></span><br><span class="line">        <span class="comment">// 将 wait 添加到等待队列头中，并设置进程的状态为 TASK_INTERRUPTIBLE，此时进程还没有睡眠</span></span><br><span class="line">        prepare_to_wait(&amp;thread-&gt;wait, &amp;wait, TASK_INTERRUPTIBLE);</span><br><span class="line">        <span class="comment">// 唤醒条件 condition,如果满足则跳出循环，否则一直循环等待</span></span><br><span class="line">        <span class="keyword">if</span> (binder_has_work_ilocked(thread, do_proc_work))</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">// 如果是在等待处理本进程的todo队列的任务</span></span><br><span class="line">        <span class="keyword">if</span> (do_proc_work)</span><br><span class="line">            <span class="comment">// 把本线程的 waiting_thread_node 添加到所属进程的 waiting_threads 中</span></span><br><span class="line">            list_add(&amp;thread-&gt;waiting_thread_node,</span><br><span class="line">                 &amp;proc-&gt;waiting_threads);</span><br><span class="line">        ...</span><br><span class="line">        schedule(); <span class="comment">// 调用schedule()，让出cpu资源，开始休眠，进程真正睡眠的地方</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="comment">// 会有一个和队列 A 相关的线程来唤醒队列 A 中的线程</span></span><br><span class="line">    <span class="comment">// 进程被唤醒后，就把自己从队列 A 中移出来，重新恢复状态为 TASK_RUNNING</span></span><br><span class="line">    finish_wait(&amp;thread-&gt;wait, &amp;wait);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最终还是在 binder_wait_for_work() 里面阻塞了，客户端进程挂起。接下来继续看 sm 做了什么。</p>
<h6 id="c-服务端进程处理数据"><a href="#c-服务端进程处理数据" class="headerlink" title="c. 服务端进程处理数据"></a>c. 服务端进程处理数据</h6><h6 id="c-1-sm-调用-handleEvent-去读取消息"><a href="#c-1-sm-调用-handleEvent-去读取消息" class="headerlink" title="c.1 sm 调用 handleEvent() 去读取消息"></a>c.1 sm 调用 handleEvent() 去读取消息</h6><p>sm 通过 epoll 机制对 binder_fd 进行监听，当监听到 binder_fd 可读时就会调用 handleEvent() 处理。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// frameworks/native/cmds/servicemanager/main.cpp</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinderCallback</span> : <span class="keyword">public</span> LooperCallback &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> sp&lt;BinderCallback&gt; <span class="title">setupTo</span><span class="params">(<span class="type">const</span> sp&lt;Looper&gt;&amp; looper)</span> </span>&#123;</span><br><span class="line">        ... <span class="comment">// 添加并监听文件描述符</span></span><br><span class="line">        <span class="type">int</span> ret = looper-&gt;<span class="built_in">addFd</span>(binder_fd, Looper::POLL_CALLBACK, Looper::EVENT_INPUT, cb, <span class="literal">nullptr</span> <span class="comment">/*data*/</span>);</span><br><span class="line">        <span class="keyword">return</span> cb;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">handleEvent</span><span class="params">(<span class="type">int</span> <span class="comment">/* fd */</span>, <span class="type">int</span> <span class="comment">/* events */</span>, <span class="type">void</span>* <span class="comment">/* data */</span>)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用 handlePolledCommands() 处理回调</span></span><br><span class="line">        IPCThreadState::<span class="built_in">self</span>()-&gt;<span class="built_in">handlePolledCommands</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;  <span class="comment">// Continue receiving callbacks.</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>调用 handlePolledCommands()</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// IPCThreadState.cpp</span></span><br><span class="line"><span class="function"><span class="type">status_t</span> <span class="title">IPCThreadState::handlePolledCommands</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">status_t</span> result;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        result = <span class="built_in">getAndExecuteCommand</span>();</span><br><span class="line">    &#125; <span class="keyword">while</span> (mIn.<span class="built_in">dataPosition</span>() &lt; mIn.<span class="built_in">dataSize</span>());</span><br><span class="line"></span><br><span class="line">    <span class="built_in">processPendingDerefs</span>();</span><br><span class="line">    <span class="built_in">flushCommands</span>();</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>handlePolledCommands() 是告诉 sm，binder 驱动有数据可读，调用 getAndExecuteCommand()</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// IPCThreadState.cpp</span></span><br><span class="line"><span class="function"><span class="type">status_t</span> <span class="title">IPCThreadState::getAndExecuteCommand</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">status_t</span> result;</span><br><span class="line">    <span class="type">int32_t</span> cmd;</span><br><span class="line"></span><br><span class="line">    result = <span class="built_in">talkWithDriver</span>();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看到熟悉的 talkWithDriver()</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// IPCThreadState.cpp</span></span><br><span class="line"><span class="function"><span class="type">status_t</span> <span class="title">IPCThreadState::talkWithDriver</span><span class="params">(<span class="type">bool</span> doReceive)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="type">const</span> <span class="type">bool</span> needRead = mIn.<span class="built_in">dataPosition</span>() &gt;= mIn.<span class="built_in">dataSize</span>();</span><br><span class="line">    <span class="comment">// doReceive 为 true，needRead 为 false，所以 outAvail = 0</span></span><br><span class="line">    <span class="type">const</span> <span class="type">size_t</span> outAvail = (!doReceive || needRead) ? mOut.<span class="built_in">dataSize</span>() : <span class="number">0</span>;</span><br><span class="line">    bwr.write_size = outAvail; <span class="comment">// // 要写入的数据量，bwr.write_size = 0</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (doReceive &amp;&amp; needRead) &#123; <span class="comment">// needRead 为 true</span></span><br><span class="line">        bwr.read_size = mIn.<span class="built_in">dataCapacity</span>(); <span class="comment">// 256，IPCThreadState 初始化时设置的</span></span><br><span class="line">        bwr.read_buffer = (<span class="type">uintptr_t</span>)mIn.<span class="built_in">data</span>(); <span class="comment">// 同 bwr.write_buffer 是个地址值</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure>

<p><del><font color=red><strong>sm 启动时，mIn .dataSize() &#x3D; 0，mOut.dataSize() &#x3D; 0，所以这里 needRead 为 true，bwr.read_size &#x3D; 256(默认值)，bwr.write_size &#x3D; 0，会进入驱动中进行读操作，sm 在 binder_thread_read() 里面的 binder_wait_for_work() 进入休眠。</strong></font>(此部分有误，参考下面)</del></p>
<p>此时 mIn 和 mOut 都没有数据，则 needRead 为 true，bwr.read_size &#x3D; 256，bwr.write_size &#x3D; 0，进入 binder_thread_read()；</p>
<h6 id="c-2-处理-BINDER-WORK-TRANSACTION，向用户空间传递-BR-TRANCACTION"><a href="#c-2-处理-BINDER-WORK-TRANSACTION，向用户空间传递-BR-TRANCACTION" class="headerlink" title="c.2 处理 BINDER_WORK_TRANSACTION，向用户空间传递 BR_TRANCACTION"></a>c.2 处理 BINDER_WORK_TRANSACTION，向用户空间传递 BR_TRANCACTION</h6><p>回忆一下在上面 binder_transaction() 的时候，我们配置了目标线程的 thread-&gt;process_todo &#x3D; true，所以<font color=red><strong>此时 sm 在 binder_wait_for_work() 中 sm 不会休眠</strong></font>，继续往下执行：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">binder_thread_read</span><span class="params">(</span></span><br><span class="line"><span class="params">    ...</span></span><br><span class="line"><span class="params">    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="params">        ret = binder_wait_for_work(thread, wait_for_proc_work); <span class="comment">// 因为 </span></span></span><br><span class="line"><span class="params">    &#125;</span></span><br><span class="line"><span class="params">    <span class="comment">// 走到这里，证明已经被唤醒了，结束等待，需要去掉线程 looper 的等待状态</span></span></span><br><span class="line"><span class="params">    thread-&gt;looper &amp;= ~BINDER_LOOPER_STATE_WAITING;</span></span><br><span class="line"><span class="params">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="params">        <span class="type">uint32_t</span> cmd;</span></span><br><span class="line"><span class="params">        <span class="keyword">struct</span> binder_transaction_data_secctx tr;</span></span><br><span class="line"><span class="params">        <span class="keyword">struct</span> binder_transaction_data *trd = &amp;tr.transaction_data;</span></span><br><span class="line"><span class="params">        <span class="keyword">struct</span> binder_work *w = <span class="literal">NULL</span>;</span></span><br><span class="line"><span class="params">        <span class="keyword">struct</span> list_head *<span class="built_in">list</span> = <span class="literal">NULL</span>;</span></span><br><span class="line"><span class="params">        <span class="keyword">struct</span> binder_transaction *t = <span class="literal">NULL</span>;</span></span><br><span class="line"><span class="params">        <span class="keyword">struct</span> binder_thread *t_from;</span></span><br><span class="line"><span class="params">        <span class="type">size_t</span> trsize =  (*trd);</span></span><br><span class="line"><span class="params">        ...</span></span><br><span class="line"><span class="params">        <span class="comment">// 优先处理本线程内部的 todo 队列，如果为空，则处理进程的 todo 队列</span></span></span><br><span class="line"><span class="params">        <span class="keyword">if</span> (!binder_worklist_empty_ilocked(&amp;thread-&gt;todo)) <span class="comment">// 判断 thread-&gt;todo 是否为空，此时不为空，条件为 true</span></span></span><br><span class="line"><span class="params">            <span class="built_in">list</span> = &amp;thread-&gt;todo; <span class="comment">// 获取线程 todo 队列</span></span></span><br><span class="line"><span class="params">        <span class="keyword">else</span> <span class="keyword">if</span> (!binder_worklist_empty_ilocked(&amp;proc-&gt;todo) &amp;&amp;</span></span><br><span class="line"><span class="params">               wait_for_proc_work) <span class="comment">// 如果 thread-&gt;todo 为空，判断 proc-&gt;todo</span></span></span><br><span class="line"><span class="params">            <span class="built_in">list</span> = &amp;proc-&gt;todo; <span class="comment">// 获取进程 todo 队列</span></span></span><br><span class="line"><span class="params">        ...</span></span><br><span class="line"><span class="params">        w = binder_dequeue_work_head_ilocked(<span class="built_in">list</span>); <span class="comment">// 从 sm 的 todo 队列获取 binder_work 对象</span></span></span><br><span class="line"><span class="params">        ...</span></span><br><span class="line"><span class="params">        <span class="keyword">switch</span> (w-&gt;type) &#123; <span class="comment">// 判断 binder_transaction() 时传入的 binder_work 的类型</span></span></span><br><span class="line"><span class="params">        <span class="keyword">case</span> BINDER_WORK_TRANSACTION: &#123;</span></span><br><span class="line"><span class="params">            binder_inner_proc_unlock(proc);</span></span><br><span class="line"><span class="params">            t = container_of(w, <span class="keyword">struct</span> binder_transaction, work); <span class="comment">// 通过 w 获取 binder_transaction 事务</span></span></span><br><span class="line"><span class="params">        &#125; <span class="keyword">break</span>;</span></span><br><span class="line"><span class="params">        ...</span></span><br><span class="line"><span class="params">        <span class="comment">// 以上我们已经拿到了从客户端发送过来的 binder_transaction 事务，接下来解析这个事务</span></span></span><br><span class="line"><span class="params">        <span class="keyword">if</span> (t-&gt;buffer-&gt;target_node) &#123; <span class="comment">// 是否存在目标节点，这里 target_node 为 sm 的 binder_node</span></span></span><br><span class="line"><span class="params">            <span class="keyword">struct</span> binder_node *target_node = t-&gt;buffer-&gt;target_node;</span></span><br><span class="line"><span class="params">            <span class="keyword">struct</span> binder_priority node_prio;</span></span><br><span class="line"><span class="params">            <span class="comment">// 非常重要，把 Binder 实体的弱引用地址赋值给 trd-&gt;target.ptr，sm 的binder 实体地址是什么呢？</span></span></span><br><span class="line"><span class="params">            <span class="comment">// trd 地址中存的是 binder_transaction_data</span></span></span><br><span class="line"><span class="params">            trd-&gt;target.ptr = target_node-&gt;ptr;</span></span><br><span class="line"><span class="params">            <span class="comment">// 非常重要，Binder 实体的 cookie 赋值给 trd-&gt;target.cookie</span></span></span><br><span class="line"><span class="params">            trd-&gt;cookie =  target_node-&gt;cookie;</span></span><br><span class="line"><span class="params">            node_prio.sched_policy = target_node-&gt;sched_policy;</span></span><br><span class="line"><span class="params">            node_prio.prio = target_node-&gt;min_priority;</span></span><br><span class="line"><span class="params">            binder_transaction_priority(current, t, node_prio,</span></span><br><span class="line"><span class="params">                            target_node-&gt;inherit_rt);</span></span><br><span class="line"><span class="params">            cmd = BR_TRANSACTION; <span class="comment">// 记录 BR_TRANSACTION，要传递到用户空间的</span></span></span><br><span class="line"><span class="params">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="params">            trd-&gt;target.ptr = <span class="number">0</span>;</span></span><br><span class="line"><span class="params">            trd-&gt;cookie = <span class="number">0</span>;</span></span><br><span class="line"><span class="params">            cmd = BR_REPLY;</span></span><br><span class="line"><span class="params">        &#125;</span></span><br><span class="line"><span class="params">        trd-&gt;code = t-&gt;code; <span class="comment">// 添加服务时为 ADD_SERVICE_TRANSACTION</span></span></span><br><span class="line"><span class="params">        trd-&gt;flags = t-&gt;flags; <span class="comment">// 0</span></span></span><br><span class="line"><span class="params">        trd-&gt;sender_euid = from_kuid(current_user_ns(), t-&gt;sender_euid);</span></span><br><span class="line"><span class="params">        t_from = binder_get_txn_from(t); <span class="comment">// 通过 t 获取客户端线程 t-&gt;from</span></span></span><br><span class="line"><span class="params">        <span class="keyword">if</span> (t_from) &#123;</span></span><br><span class="line"><span class="params">            <span class="keyword">struct</span> task_struct *sender = t_from-&gt;proc-&gt;tsk;</span></span><br><span class="line"><span class="params">            trd-&gt;sender_pid =</span></span><br><span class="line"><span class="params">                task_tgid_nr_ns(sender,</span></span><br><span class="line"><span class="params">                        task_active_pid_ns(current));</span></span><br><span class="line"><span class="params">            trace_android_vh_sync_txn_recvd(thread-&gt;task, t_from-&gt;task);</span></span><br><span class="line"><span class="params">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="params">            trd-&gt;sender_pid = <span class="number">0</span>;</span></span><br><span class="line"><span class="params">        &#125;</span></span><br><span class="line"><span class="params">        ...</span></span><br><span class="line"><span class="params">        trd-&gt;data_size = t-&gt;buffer-&gt;data_size; <span class="comment">// 数据大小</span></span></span><br><span class="line"><span class="params">        trd-&gt;offsets_size = t-&gt;buffer-&gt;offsets_size; <span class="comment">// 数据中对象的偏移数组的大小(即对象的个数)</span></span></span><br><span class="line"><span class="params">        trd-&gt;data.ptr.buffer = (<span class="type">uintptr_t</span>)t-&gt;buffer-&gt;user_data;</span></span><br><span class="line"><span class="params">        trd-&gt;data.ptr.offsets = trd-&gt;data.ptr.buffer +</span></span><br><span class="line"><span class="params">                    ALIGN(t-&gt;buffer-&gt;data_size,</span></span><br><span class="line"><span class="params">                        <span class="keyword">sizeof</span>(<span class="type">void</span> *));</span></span><br><span class="line"><span class="params">        tr.secctx = t-&gt;security_ctx;</span></span><br><span class="line"><span class="params">        <span class="keyword">if</span> (t-&gt;security_ctx) &#123;</span></span><br><span class="line"><span class="params">            cmd = BR_TRANSACTION_SEC_CTX;</span></span><br><span class="line"><span class="params">            trsize = <span class="keyword">sizeof</span>(tr);</span></span><br><span class="line"><span class="params">        &#125;</span></span><br><span class="line"><span class="params">        <span class="comment">// 把 BR_TRANSACTION 命令拷贝到用户空间</span></span></span><br><span class="line"><span class="params">        <span class="keyword">if</span> (put_user(cmd, (<span class="type">uint32_t</span> __user *)ptr)) &#123;</span></span><br><span class="line"><span class="params">            <span class="keyword">if</span> (t_from)</span></span><br><span class="line"><span class="params">                binder_thread_dec_tmpref(t_from);</span></span><br><span class="line"><span class="params">            binder_cleanup_transaction(t, <span class="string">&quot;put_user failed&quot;</span>,</span></span><br><span class="line"><span class="params">                           BR_FAILED_REPLY);</span></span><br><span class="line"><span class="params">            <span class="keyword">return</span> -EFAULT;</span></span><br><span class="line"><span class="params">        &#125;</span></span><br><span class="line"><span class="params">        ptr += <span class="keyword">sizeof</span>(<span class="type">uint32_t</span>);</span></span><br><span class="line"><span class="params">        <span class="comment">// 把 binder_transaction_data_secctx tr 数据拷贝到用户空间</span></span></span><br><span class="line"><span class="params">        <span class="keyword">if</span> (copy_to_user(ptr, &amp;tr, trsize)) &#123;</span></span><br><span class="line"><span class="params">            <span class="keyword">if</span> (t_from)</span></span><br><span class="line"><span class="params">                binder_thread_dec_tmpref(t_from);</span></span><br><span class="line"><span class="params">            binder_cleanup_transaction(t, <span class="string">&quot;copy_to_user failed&quot;</span>,</span></span><br><span class="line"><span class="params">                           BR_FAILED_REPLY);</span></span><br><span class="line"><span class="params">            <span class="keyword">return</span> -EFAULT;</span></span><br><span class="line"><span class="params">        &#125;</span></span><br><span class="line"><span class="params">        ptr += trsize;</span></span><br></pre></td></tr></table></figure>

<p>主要工作有：</p>
<ul>
<li>获取 sm 的 thread-&gt;todo 队列；</li>
<li>从 thread-&gt;todo 队列获取 binder_work 对象 w；</li>
<li>根据 w-&gt;type(BINDER_WORK_TRANSACTION) ，通过 w 获取传输数据 binder_transaction 对象 t；</li>
<li>记录命令 TR_TRANSACTION;</li>
<li>把 t 中的数据放入 binder_transaction_data trd 中，而 trd 是 binder_transaction_data_secctx tr 的一个属性，指向 binder_transaction_data；</li>
<li>把 Binder 实体的地址赋值给 <code>trd-&gt;target.ptr = target_node-&gt;ptr;</code>，这里的 target_node 是 sm 的 binder_node，target_node-&gt;ptr 指向的是 binder 实体在宿主进程中的首地址，<font color=red><strong>sm 在注册为大管家的时候在 <code>binder_init_node_ilocked()</code> 通过 <code>binder_uintptr_t ptr = fp ? fp-&gt;binder : 0</code> 配置了 ptr 为 0，所以此处的 <code>target_node-&gt;ptr</code> 其实为 0，cookie 也为 0</strong></font>，尽管客户端在 writeTransactionData 中赋值了一个 <code>tr.target.ptr = 0</code>，但是在 <code>binder_transaction()</code> 中并未将 <code>tr.target.ptr</code> 赋值给 <code>target_node-&gt;ptr</code>；</li>
<li>把 TR_TRANSACTION 和 tr 传递到用户空间 ptr 地址中；</li>
</ul>
<p>binder_thread_read() 执行完后回到 sm 进程用户空间。</p>
<h6 id="c-3-处理-BR-TRANCACTION"><a href="#c-3-处理-BR-TRANCACTION" class="headerlink" title="c.3 处理 BR_TRANCACTION"></a>c.3 处理 BR_TRANCACTION</h6><p>先返回到 talkWithDriver() ，在其中后续未做重要的工作，再返回到 getAndExecuteCommand() 获取驱动发来的 TR_TRANSACTION 命令：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// IPCThreadState.cpp</span></span><br><span class="line"><span class="function"><span class="type">status_t</span> <span class="title">IPCThreadState::getAndExecuteCommand</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    result = <span class="built_in">talkWithDriver</span>();</span><br><span class="line">    <span class="keyword">if</span> (result &gt;= NO_ERROR) &#123;</span><br><span class="line">        <span class="type">size_t</span> IN = mIn.<span class="built_in">dataAvail</span>();</span><br><span class="line">        <span class="keyword">if</span> (IN &lt; <span class="built_in">sizeof</span>(<span class="type">int32_t</span>)) <span class="keyword">return</span> result;</span><br><span class="line">        cmd = mIn.<span class="built_in">readInt32</span>(); <span class="comment">// 获取 TR_TRANSACTION 命令</span></span><br><span class="line">        ...</span><br><span class="line">        result = <span class="built_in">executeCommand</span>(cmd);</span><br><span class="line">	...</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>把前面 binder_transaction() 中传递到用户空间的 TR_TRANSACTION 命令取出来，调用 executeCommand(cmd)：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// IPCThreadState.cpp</span></span><br><span class="line"><span class="function"><span class="type">status_t</span> <span class="title">IPCThreadState::executeCommand</span><span class="params">(<span class="type">int32_t</span> cmd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BBinder* obj;</span><br><span class="line">    RefBase::weakref_type* refs;</span><br><span class="line">    <span class="type">status_t</span> result = NO_ERROR;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> ((<span class="type">uint32_t</span>)cmd) &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">case</span> BR_TRANSACTION: <span class="comment">// 处理 BR_TRANCACTION</span></span><br><span class="line">        &#123;</span><br><span class="line">            ...</span><br><span class="line">            <span class="keyword">if</span> (cmd == (<span class="type">int</span>) BR_TRANSACTION_SEC_CTX) &#123;</span><br><span class="line">                result = mIn.<span class="built_in">read</span>(&amp;tr_secctx, <span class="built_in">sizeof</span>(tr_secctx));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result = mIn.<span class="built_in">read</span>(&amp;tr, <span class="built_in">sizeof</span>(tr)); <span class="comment">// 读取传递过来的数据</span></span><br><span class="line">                tr_secctx.secctx = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ...</span><br><span class="line">            Parcel reply; <span class="comment">// Parcel 对象，用于写入 sm.addService 返回结果</span></span><br><span class="line">            ...</span><br><span class="line">            <span class="comment">// tr.target.ptr 指向 binder 实体在宿主进程的首地址，由驱动在写回数据时赋值的</span></span><br><span class="line">            <span class="keyword">if</span> (tr.target.ptr) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">reinterpret_cast</span>&lt;RefBase::weakref_type*&gt;(</span><br><span class="line">                        tr.target.ptr)-&gt;<span class="built_in">attemptIncStrong</span>(<span class="keyword">this</span>)) &#123;</span><br><span class="line">                    <span class="comment">// 使用 tr.cookie 强转成指针，然后调用 transact() 方法</span></span><br><span class="line">                    error = <span class="built_in">reinterpret_cast</span>&lt;BBinder*&gt;(tr.cookie)-&gt;<span class="built_in">transact</span>(tr.code, buffer,</span><br><span class="line">                            &amp;reply, tr.flags);</span><br><span class="line">                    <span class="built_in">reinterpret_cast</span>&lt;BBinder*&gt;(tr.cookie)-&gt;<span class="built_in">decStrong</span>(<span class="keyword">this</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    error = UNKNOWN_TRANSACTION;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 对于 sm 执行此分支，因为 tr.target.ptr = 0，the_context_object 是一个 BBinder 对象</span></span><br><span class="line">                error = the_context_object-&gt;<span class="built_in">transact</span>(tr.code, buffer, &amp;reply, tr.flags);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>

<p>这个 tr.target.ptr 指向的是 binder 实体(binder_node)在宿主进程的首地址，由驱动在写回数据时赋值的（<code>binder_thread_read()</code> 中），但是此时进程是 sm，sm 在注册为大管家的时候，在 <code>binder_init_node_ilocked()</code> 通过 <code>binder_uintptr_t ptr = fp ? fp-&gt;binder : 0</code> 配置了 ptr 为 0（**具体见 binder.c -&gt; binder_ioctl_set_ctx_mgr()**），所以 sm 进程在 binder_thread_read() 中写回数据时写的是个 0 值，而别的 iBinder 对象则会有值，所以此时进入 else 分支；</p>
<h6 id="c-4-服务端处理-IPC-数据-trancact-gt-onTrancact-gt-TRANSACTION-addService"><a href="#c-4-服务端处理-IPC-数据-trancact-gt-onTrancact-gt-TRANSACTION-addService" class="headerlink" title="c.4 服务端处理 IPC 数据 - trancact-&gt;onTrancact-&gt; TRANSACTION_addService"></a>c.4 服务端处理 IPC 数据 - trancact-&gt;onTrancact-&gt; TRANSACTION_addService</h6><p>the_context_object 是一个 BBinder 对象，在 sm 启动时（main.cpp）传入的是 sm 对象，sm 继承了 BnServiceManager，BnServiceManager 继承 BnInterface，而 BnInterface 又继承了 BBinder &amp; IServiceManager；</p>
<figure class="highlight h"><table><tr><td class="code"><pre><span class="line"><span class="comment">// frameworks/native/cmds/servicemanager/ServiceManager.cpp</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ServiceManager</span> :</span> public os::BnServiceManager</span><br><span class="line"><span class="comment">// out/soong/.intermediates/frameworks/native/libs/binder/libbinder/android_native_bridge_arm64_armv8-a_shared/gen/aidl/android/os/BnServiceManager.h</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BnServiceManager</span> :</span> public ::android::BnInterface&lt;IServiceManager&gt; &#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BnInterface</span> :</span> public INTERFACE, public BBinder</span><br></pre></td></tr></table></figure>

<p>所以 <code>the_context_object-&gt;transact()</code> 最终执行的是 <code>BBinder::transact()</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// frameworks/native/libs/binder/Binder.cpp</span></span><br><span class="line"><span class="function"><span class="type">status_t</span> <span class="title">BBinder::transact</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">uint32_t</span> code, <span class="type">const</span> Parcel&amp; data, Parcel* reply, <span class="type">uint32_t</span> flags)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    data.<span class="built_in">setDataPosition</span>(<span class="number">0</span>);</span><br><span class="line">...</span><br><span class="line">    <span class="type">status_t</span> err = NO_ERROR;</span><br><span class="line">    <span class="keyword">switch</span> (code) &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            err = <span class="built_in">onTransact</span>(code, data, reply, flags);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进入 default 分支，这里的 onTransact() 调用的是 JavaBBinder 中的 onTransact()，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// android_util_Binder.cpp</span></span><br><span class="line">    <span class="function"><span class="type">status_t</span> <span class="title">onTransact</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="type">uint32_t</span> code, <span class="type">const</span> Parcel&amp; data, Parcel* reply, <span class="type">uint32_t</span> flags = <span class="number">0</span>)</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        jboolean res = env-&gt;<span class="built_in">CallBooleanMethod</span>(mObject, gBinderOffsets.mExecTransact,</span><br><span class="line">            code, <span class="built_in">reinterpret_cast</span>&lt;jlong&gt;(&amp;data), <span class="built_in">reinterpret_cast</span>&lt;jlong&gt;(reply), flags);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (env-&gt;<span class="built_in">ExceptionCheck</span>()) &#123;</span><br><span class="line">            <span class="function">ScopedLocalRef&lt;jthrowable&gt; <span class="title">excep</span><span class="params">(env, env-&gt;ExceptionOccurred())</span></span>;</span><br><span class="line">            <span class="built_in">binder_report_exception</span>(env, excep.<span class="built_in">get</span>(),</span><br><span class="line">                                    <span class="string">&quot;*** Uncaught remote exception!  &quot;</span></span><br><span class="line">                                    <span class="string">&quot;(Exceptions are not yet supported across processes.)&quot;</span>);</span><br><span class="line">            res = JNI_FALSE;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>又通过 CallBooleanMethod() 继续调用 Binder.java 的 execTransact() 方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Binder.java</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">execTransact</span><span class="params">(<span class="type">int</span> code, <span class="type">long</span> dataObj, <span class="type">long</span> replyObj,</span></span><br><span class="line"><span class="params">            <span class="type">int</span> flags)</span> &#123;</span><br><span class="line">        <span class="comment">// At that point, the parcel request headers haven&#x27;t been parsed so we do not know what</span></span><br><span class="line">        <span class="comment">// WorkSource the caller has set. Use calling uid as the default.</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">callingUid</span> <span class="operator">=</span> Binder.getCallingUid();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">long</span> <span class="variable">origWorkSource</span> <span class="operator">=</span> ThreadLocalWorkSource.setUid(callingUid);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> execTransactInternal(code, dataObj, replyObj, flags, callingUid);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            ThreadLocalWorkSource.restore(origWorkSource);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>继续到 execTransactInternal()：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Binder.java</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">execTransactInternal</span><span class="params">(<span class="type">int</span> code, <span class="type">long</span> dataObj, <span class="type">long</span> replyObj, <span class="type">int</span> flags,</span></span><br><span class="line"><span class="params">            <span class="type">int</span> callingUid)</span> &#123;</span><br><span class="line">		...</span><br><span class="line">                    res = onTransact(code, data, reply, flags);</span><br></pre></td></tr></table></figure>

<p>然后这里的 onTransact() 就是调用 IServiceManager.java 中的 <code>BnServiceManager::onTransact()</code> ，BnServiceManager 继承了 BBinder，重写了 BBinder 中 onTransact() 这个虚函数，在 AIDL 生成的 IServiceManager.cpp 文件中（<font color=red><strong>这部分调用流程还存在疑惑，</strong><a href="https://juejin.cn/post/6990152454058803213">此文解释了为什么会调用到 JavaBBinder.onTransact()，学习 java 层 Binder 对象的初始过程</a></font>。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// out/.../gen/aidl/android/os/IServiceManager.cpp</span></span><br><span class="line">::<span class="function">android::<span class="type">status_t</span> <span class="title">BnServiceManager::onTransact</span><span class="params">(<span class="type">uint32_t</span> _aidl_code, <span class="type">const</span> ::android::Parcel&amp; _aidl_data, ::android::</span></span></span><br><span class="line"><span class="params"><span class="function">Parcel* _aidl_reply, <span class="type">uint32_t</span> _aidl_flags)</span> </span>&#123;</span><br><span class="line">  ::android::<span class="type">status_t</span> _aidl_ret_status = ::android::OK;</span><br><span class="line">  <span class="keyword">switch</span> (_aidl_code) &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">case</span> BnServiceManager::TRANSACTION_addService:</span><br><span class="line">  &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 调用真正的 ServiceManager.cpp 中的实现</span></span><br><span class="line">    ::android::binder::Status _aidl_status(<span class="built_in">addService</span>(in_name, in_service, in_allowIsolated, in_dumpPriority));</span><br><span class="line">    <span class="comment">// addService 返回一个 Status 对象状态值，写到 Parcel 对象 _aidl_reply 中</span></span><br><span class="line">    _aidl_ret_status = _aidl_status.<span class="built_in">writeToParcel</span>(_aidl_reply);</span><br><span class="line">    <span class="keyword">if</span> (((_aidl_ret_status) != (::android::OK))) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!_aidl_status.<span class="built_in">isOk</span>()) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure>

<p>addService 返回一个 Status 对象状态值，写到 Parcel 对象 _aidl_reply 中，上面说 ServiceManager 间接继承了 IServiceManager，同时也实现了 addService() 这个虚函数：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ServiceManager.h</span></span><br><span class="line">    ServiceMap mNameToService;</span><br><span class="line"><span class="comment">// ServiceManager.cpp</span></span><br><span class="line"><span class="function">Status <span class="title">ServiceManager::addService</span><span class="params">(<span class="type">const</span> std::string&amp; name, <span class="type">const</span> sp&lt;IBinder&gt;&amp; binder, <span class="type">bool</span> allowIsolated, <span class="type">int32_t</span> dumpPriority)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> ctx = mAccess-&gt;<span class="built_in">getCallingContext</span>();</span><br><span class="line">    ...</span><br><span class="line">	<span class="comment">// 新增一个结构体到 map 中</span></span><br><span class="line">    <span class="comment">// Overwrite the old service if it exists</span></span><br><span class="line">    mNameToService[name] = Service &#123;</span><br><span class="line">        .binder = binder,</span><br><span class="line">        .allowIsolated = allowIsolated,</span><br><span class="line">        .dumpPriority = dumpPriority,</span><br><span class="line">        .debugPid = ctx.debugPid,</span><br><span class="line">    &#125;;</span><br><span class="line">...</span><br><span class="line">    <span class="keyword">return</span> Status::<span class="built_in">ok</span>(); <span class="comment">// 这里返回了 Status，后面会写入 reply</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>sm 通过 nNameToService 这个 map 保存服务及其对应的信息，服务名 name 为 key，value 是一个 Service 结构体；<code>Status::ok()</code> 返回 Status 的默认构造函数 <code>Status()</code>。</p>
<p><font color=red><strong>到这里 sm 就保存了服务和对应的 binder</strong></font>，现在返回 IPCThreadState.executeCommand() 中继续执行：</p>
<h6 id="c-5-sendReply-服务端向驱动写入-BC-REPLY"><a href="#c-5-sendReply-服务端向驱动写入-BC-REPLY" class="headerlink" title="c.5 sendReply() - 服务端向驱动写入 BC_REPLY"></a>c.5 sendReply() - 服务端向驱动写入 BC_REPLY</h6><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// IPCThreadState.cpp</span></span><br><span class="line"><span class="function"><span class="type">status_t</span> <span class="title">IPCThreadState::executeCommand</span><span class="params">(<span class="type">int32_t</span> cmd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// the_context_object 是一个 BBinder 对象</span></span><br><span class="line">                error = the_context_object-&gt;<span class="built_in">transact</span>(tr.code, buffer, &amp;reply, tr.flags);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((tr.flags &amp; TF_ONE_WAY) == <span class="number">0</span>) &#123;</span><br><span class="line">                ...</span><br><span class="line">                <span class="keyword">constexpr</span> <span class="type">uint32_t</span> kForwardReplyFlags = TF_CLEAR_BUF;</span><br><span class="line">                <span class="built_in">sendReply</span>(reply, (tr.flags &amp; kForwardReplyFlags));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br></pre></td></tr></table></figure>

<p>这里的 tr.flags 还是 0，进入 if 分支，调用 <code>sendReply()</code> 将 reply 发送给请求方客户端：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// IPCThreadState.cpp</span></span><br><span class="line"><span class="function"><span class="type">status_t</span> <span class="title">IPCThreadState::sendReply</span><span class="params">(<span class="type">const</span> Parcel&amp; reply, <span class="type">uint32_t</span> flags)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">status_t</span> err;</span><br><span class="line">    <span class="type">status_t</span> statusBuffer;</span><br><span class="line">    err = <span class="built_in">writeTransactionData</span>(BC_REPLY, flags, <span class="number">-1</span>, <span class="number">0</span>, reply, &amp;statusBuffer);</span><br><span class="line">    <span class="keyword">if</span> (err &lt; NO_ERROR) <span class="keyword">return</span> err;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">waitForResponse</span>(<span class="literal">nullptr</span>, <span class="literal">nullptr</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>writeTransactionData()</code> 参见 [1.2.2.1](# 1.2.2.1 writeTransactionData - 打包数据和命令到 mOut) 小结，打包 <font color=red><strong>BC_REPLY</strong></font> 命令和 reply 数据到 mOut 中； 进入 waitForResponse() 继续执行（流程参考 [1.2.2.2 小结](# 1.2.2.2 waitForResponse - 写入数据到 binder 驱动)），通过 <code>talkWithDriver()</code> 与驱动沟通，因为此时 mOut 有数据，mIn 中无数据，所以在 talkWithDriver() 时 write_size 和 read_size 都大于 0，通过 ioctl() 向驱动写入和读取数据：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// binder.c</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">binder_thread_write</span><span class="params">(<span class="keyword">struct</span> binder_proc *proc,</span></span><br><span class="line"><span class="params">            <span class="keyword">struct</span> binder_thread *thread,</span></span><br><span class="line"><span class="params">            <span class="type">binder_uintptr_t</span> binder_buffer, <span class="type">size_t</span> size,</span></span><br><span class="line"><span class="params">            <span class="type">binder_size_t</span> *consumed)</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">        <span class="keyword">case</span> BC_TRANSACTION:</span><br><span class="line">        <span class="keyword">case</span> BC_REPLY: &#123;</span><br><span class="line">            <span class="comment">// 与 IPCThreadState.writeTransactionData() 中准备的数据结构体对应</span></span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">binder_transaction_data</span> <span class="title">tr</span>;</span></span><br><span class="line">            <span class="comment">// 前面 ptr 已经跳过了 cmd，所以现在的 ptr 指向数据地址，将其拷贝到内核空间的 tr 中</span></span><br><span class="line">            <span class="keyword">if</span> (copy_from_user(&amp;tr, ptr, <span class="keyword">sizeof</span>(tr)))</span><br><span class="line">                <span class="keyword">return</span> -EFAULT;</span><br><span class="line">            ptr += <span class="keyword">sizeof</span>(tr); <span class="comment">// ptr 跳过数据空间地址</span></span><br><span class="line">            <span class="comment">// cmd 此时是 BC_REPLY，所以第四个参数为 true</span></span><br><span class="line">            binder_transaction(proc, thread, &amp;tr,</span><br><span class="line">                       cmd == BC_REPLY, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>此时的 cmd 为 BC_REPLY，所以 <code>binder_transaction()</code>的第四个参数为 true。</p>
<h6 id="c-6-服务端处理-BC-REPLY，唤醒客户端"><a href="#c-6-服务端处理-BC-REPLY，唤醒客户端" class="headerlink" title="c.6 服务端处理 BC_REPLY，唤醒客户端"></a>c.6 服务端处理 BC_REPLY，唤醒客户端</h6><p>分别向自身和客户端 todo 队列添加 BINDER_WORK_TRANCACTION_COMPLETE 和 BINDER_WORK_TRANCACTION，然后唤醒客户端。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// binder.c</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">binder_transaction</span><span class="params">(<span class="keyword">struct</span> binder_proc *proc,</span></span><br><span class="line"><span class="params">                   <span class="keyword">struct</span> binder_thread *thread,</span></span><br><span class="line"><span class="params">                   <span class="keyword">struct</span> binder_transaction_data *tr, <span class="type">int</span> reply, <span class="comment">// 此时 reply 为 true</span></span></span><br><span class="line"><span class="params">                   <span class="type">binder_size_t</span> extra_buffers_size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">binder_transaction</span> *<span class="title">t</span>;</span> <span class="comment">// 用于描述本次 server 端要进行的 transaction</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">binder_work</span> *<span class="title">w</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">binder_work</span> *<span class="title">tcomplete</span>;</span> <span class="comment">// 用于描述当前线程未完成的 transaction</span></span><br><span class="line">    <span class="type">binder_size_t</span> buffer_offset = <span class="number">0</span>;</span><br><span class="line">    <span class="type">binder_size_t</span> off_start_offset, off_end_offset;</span><br><span class="line">    <span class="type">binder_size_t</span> off_min;</span><br><span class="line">    <span class="type">binder_size_t</span> sg_buf_offset, sg_buf_end_offset;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">binder_proc</span> *<span class="title">target_proc</span> =</span> <span class="literal">NULL</span>; <span class="comment">// 目标进程</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">binder_thread</span> *<span class="title">target_thread</span> =</span> <span class="literal">NULL</span>; <span class="comment">// 目标线程</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">binder_node</span> *<span class="title">target_node</span> =</span> <span class="literal">NULL</span>; <span class="comment">// 目标 binder_node</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">binder_transaction</span> *<span class="title">in_reply_to</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">binder_transaction_log_entry</span> *<span class="title">e</span>;</span></span><br><span class="line">    <span class="type">uint32_t</span> return_error = <span class="number">0</span>;</span><br><span class="line">    <span class="type">uint32_t</span> return_error_param = <span class="number">0</span>;</span><br><span class="line">    <span class="type">uint32_t</span> return_error_line = <span class="number">0</span>;</span><br><span class="line">    <span class="type">binder_size_t</span> last_fixup_obj_off = <span class="number">0</span>;</span><br><span class="line">    <span class="type">binder_size_t</span> last_fixup_min_off = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">binder_context</span> *<span class="title">context</span> =</span> proc-&gt;context; <span class="comment">// 全局唯一，存储了 sm 对应的 binder_node</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (reply) &#123; <span class="comment">// reply 为 true</span></span><br><span class="line">        binder_inner_proc_lock(proc);</span><br><span class="line">        in_reply_to = thread-&gt;transaction_stack;</span><br><span class="line">        ...</span><br><span class="line">        thread-&gt;transaction_stack = in_reply_to-&gt;to_parent;</span><br><span class="line">        binder_inner_proc_unlock(proc);</span><br><span class="line">        target_thread = binder_get_txn_from_and_acq_inner(in_reply_to);</span><br><span class="line">        ...</span><br><span class="line">        target_proc = target_thread-&gt;proc; <span class="comment">// 获取目标进程</span></span><br><span class="line">        target_proc-&gt;tmp_ref++;</span><br><span class="line">        binder_inner_proc_unlock(target_thread-&gt;proc);</span><br><span class="line">        ...</span><br><span class="line">    &#125; <span class="keyword">else</span>...</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 初始化 binder_transaction 对象 t，用于描述本次 server 端要进行的 transaction</span></span><br><span class="line">    t = kzalloc(<span class="keyword">sizeof</span>(*t), GFP_KERNEL);</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 初始化 binder_work 对象 tcomplete，用于描述当前调用线程未完成的 transaction</span></span><br><span class="line">    tcomplete = kzalloc(<span class="keyword">sizeof</span>(*tcomplete), GFP_KERNEL);</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 从 mmap 开辟的空间申请物理内存，这个 buffer 是共享空间，准备接收要传输的数据</span></span><br><span class="line">    t-&gt;buffer = binder_alloc_new_buf(&amp;target_proc-&gt;alloc, tr-&gt;data_size,</span><br><span class="line">    ...</span><br><span class="line">    t-&gt;buffer-&gt;target_node = target_node; <span class="comment">// 前面 target_node 并未赋值，为 null</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 把数据从用户空间拷贝到上面的 buffer 共享内存区域，</span></span><br><span class="line">    <span class="comment">// 即 binder 真正一次拷贝有效数据的地方</span></span><br><span class="line">    <span class="comment">// 拷贝用户空间的 tr-&gt;data.ptr.buffer 到 t-&gt;buffer 对应的物理内存</span></span><br><span class="line">    <span class="keyword">if</span> (binder_alloc_copy_user_to_buffer(</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 拷贝用户空间的 tr-&gt;data.ptr.offsets 到 t-&gt;buffer 对应的物理内存</span></span><br><span class="line">    <span class="keyword">if</span> (binder_alloc_copy_user_to_buffer(</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (t-&gt;buffer-&gt;oneway_spam_suspect)</span><br><span class="line">        tcomplete-&gt;type = BINDER_WORK_TRANSACTION_ONEWAY_SPAM_SUSPECT;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        tcomplete-&gt;type = BINDER_WORK_TRANSACTION_COMPLETE;<span class="comment">// 发送给 client(就是当前调用进程 sm)，让其挂起</span></span><br><span class="line">    t-&gt;work.type = BINDER_WORK_TRANSACTION;<span class="comment">// 发送给目标进程（前面和 sm 通信的进程）</span></span><br><span class="line">    <span class="keyword">if</span> (reply) &#123;</span><br><span class="line">        <span class="comment">// 将 tcomplete 加入到当前调用线程(sm)待处理的任务队列，并配置 process_todo = true</span></span><br><span class="line">        binder_enqueue_thread_work(thread, tcomplete);</span><br><span class="line">        binder_inner_proc_lock(target_proc);</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// 将 t 加入到目标(和 sm 通信的 client)的处理队列中，并配置 process_todo = true</span></span><br><span class="line">        binder_enqueue_thread_work_ilocked(target_thread, &amp;t-&gt;work);</span><br><span class="line">        ...</span><br><span class="line">        wake_up_interruptible_sync(&amp;target_thread-&gt;wait); <span class="comment">// 唤醒客户端进程</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!(t-&gt;flags &amp; TF_ONE_WAY)) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这里和前文的 binder_transaction() 分析一样，只不过是走了不同的分支，<font color=red><strong>注意这里的 binder_enqueue_thread_work() 中会对当前调用线程配置 <code>thread-&gt;process_todo = true;</code></strong></font>，binder_transaction() 完成后返回到 binder_ioctl_write_read()，继续执行 binder_thread_read()。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// binder.c</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">binder_thread_read</span><span class="params">(<span class="keyword">struct</span> binder_proc *proc,</span></span><br><span class="line"><span class="params">                  <span class="keyword">struct</span> binder_thread *thread,</span></span><br><span class="line"><span class="params">                  <span class="type">binder_uintptr_t</span> binder_buffer, <span class="type">size_t</span> size,</span></span><br><span class="line"><span class="params">                  <span class="type">binder_size_t</span> *consumed, <span class="type">int</span> non_block)</span></span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">    wait_for_proc_work = binder_available_for_proc_work_ilocked(thread);</span><br><span class="line">...</span><br><span class="line">    <span class="keyword">if</span> (wait_for_proc_work) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// non_block == filp-&gt;f_flags &amp; O_NONBLOCK，filp-&gt;f_flags 在 sm 打开 binder 设备节点时</span></span><br><span class="line">    <span class="comment">// (ProcessState.open_driver()) 传入的是 O_RDWR | OCLOEXEC，所以 non_block 为 false</span></span><br><span class="line">    <span class="keyword">if</span> (non_block) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ret = binder_wait_for_work(thread, wait_for_proc_work); <span class="comment">// 进程睡眠的地方</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>thread-&gt;todo 不为空，所以wait_for_proc_work 为 false，进入 binder_wait_for_work()：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// binder.c</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">binder_wait_for_work</span><span class="params">(<span class="keyword">struct</span> binder_thread *thread,</span></span></span><br><span class="line"><span class="params"><span class="function">                <span class="type">bool</span> do_proc_work)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">DEFINE_WAIT</span>(wait); <span class="comment">// 建立并初始化一个等待队列项 wait</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">binder_proc</span> *proc = thread-&gt;proc;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">freezer_do_not_count</span>();</span><br><span class="line">    <span class="built_in">binder_inner_proc_lock</span>(proc);</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123; <span class="comment">// 循环的作用是让线程被唤醒后再一次去检查一下condition是否满足</span></span><br><span class="line">        <span class="comment">// 将 wait 添加到等待队列头中，并设置进程的状态为 TASK_INTERRUPTIBLE，此时进程还没有睡眠</span></span><br><span class="line">        <span class="built_in">prepare_to_wait</span>(&amp;thread-&gt;wait, &amp;wait, TASK_INTERRUPTIBLE);</span><br><span class="line">        <span class="comment">// 唤醒条件 condition,如果满足则跳出循环，否则一直循环等待</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">binder_has_work_ilocked</span>(thread, do_proc_work))</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        ...</span><br><span class="line">        <span class="built_in">schedule</span>(); <span class="comment">// 调用schedule()，让出cpu资源，开始休眠，进程真正睡眠的地方</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>是否休眠取决于 binder_has_work_ilocked() 是否返回 true，返回 true 的话就直接跳出循环，进程不休眠，看一下 binder_has_work_ilocked()：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// binder.c</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">bool</span> <span class="title">binder_has_work_ilocked</span><span class="params">(<span class="keyword">struct</span> binder_thread *thread,</span></span></span><br><span class="line"><span class="params"><span class="function">                    <span class="type">bool</span> do_proc_work)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> thread-&gt;process_todo ||</span><br><span class="line">        thread-&gt;looper_need_return ||</span><br><span class="line">        (do_proc_work &amp;&amp;</span><br><span class="line">         !<span class="built_in">binder_worklist_empty_ilocked</span>(&amp;thread-&gt;proc-&gt;todo));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为在 binder_trancaction() 中配置了当前调用线程的 <code>thread-&gt;process_todo = true;</code>，<font color=red><strong>所以 binder_has_work_ilocked() 返回 true，此次 binder_wait_for_work() 中暂时并未休眠</strong></font>，继续往下执行处理 BINDER_WORK_TRANCACTION_COMPLETE，向 sm 用户空间传递 BR_TRANSACTION_COMPLETE 命令，</p>
<h6 id="c-7-服务端处理-BR-TRANSACTION-COMPLETE-命令"><a href="#c-7-服务端处理-BR-TRANSACTION-COMPLETE-命令" class="headerlink" title="c.7 服务端处理 BR_TRANSACTION_COMPLETE 命令"></a>c.7 服务端处理 BR_TRANSACTION_COMPLETE 命令</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// binder.c</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">binder_thread_read</span><span class="params">(...)</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">        w = binder_dequeue_work_head_ilocked(<span class="built_in">list</span>); <span class="comment">// 从 sm 的 todo 队列获取 binder_work 对象</span></span><br><span class="line">        <span class="comment">// 取出 binder_work 对象后，如果为空，thread-&gt;process_todo 置为 false</span></span><br><span class="line">        <span class="keyword">if</span> (binder_worklist_empty_ilocked(&amp;thread-&gt;todo))</span><br><span class="line">            thread-&gt;process_todo = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">case</span> BINDER_WORK_TRANSACTION_COMPLETE:</span><br><span class="line">    		...</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                cmd = BR_TRANSACTION_COMPLETE;</span><br><span class="line">    ...</span><br><span class="line">        <span class="comment">// 把 BR_TRANSACTION_COMPLETE 命令拷贝到用户空间</span></span><br><span class="line">        <span class="keyword">if</span> (put_user(cmd, (<span class="type">uint32_t</span> __user *)ptr)) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意，从 todo 队列取出 binder_work 对象后，todo 队列就会删除这个 binder_work 对象，此时 todo 队列就一个 binder_work 对象，<font color=red><strong>所以 binder_worklist_empty_ilocked() 返回 true，thread-&gt;process_todo &#x3D; false</strong></font>，binder_thread_read() 执行完后就返回到了用户空间，回忆一下，前面 sm 在通过 waitForResponse() -&gt; talkWithDriver() 向驱动发送 BC_REPLY 的时候进入的驱动，所以回到 talkWithDriver()，但是并没有做重要的事，继续返回到 waitForResponse()，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// IPCThreadState.cpp</span></span><br><span class="line"><span class="function"><span class="type">status_t</span> <span class="title">IPCThreadState::waitForResponse</span><span class="params">(Parcel *reply, <span class="type">status_t</span> *acquireResult)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((err=<span class="built_in">talkWithDriver</span>()) &lt; NO_ERROR) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">switch</span> (cmd) &#123;  <span class="comment">// 处理 binder 驱动发来的命令</span></span><br><span class="line">        <span class="keyword">case</span> BR_TRANSACTION_COMPLETE:</span><br><span class="line">            <span class="comment">// TF_ONE_WAY 模式时传入的 reply 和 acquireResult 是 nullptr，</span></span><br><span class="line">            <span class="comment">// 则直接 finish 退出循环，不再等待 binder 驱动的回复</span></span><br><span class="line">            <span class="keyword">if</span> (!reply &amp;&amp; !acquireResult) <span class="keyword">goto</span> finish;</span><br><span class="line">            <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure>

<p>处理 BR_TRANCACTION_COMPLETE 命令，也没有重要工作，再回到 while 循环，又进入 talkWithDriver()，mIn.size &#x3D; 256，mOut.size &#x3D; 0，进入驱动执行 binder_thread_read()。</p>
<h6 id="c-8-服务端挂起"><a href="#c-8-服务端挂起" class="headerlink" title="c.8 服务端挂起"></a>c.8 服务端挂起</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// binder.c</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">binder_thread_read</span><span class="params">(<span class="keyword">struct</span> binder_proc *proc,</span></span><br><span class="line"><span class="params">                  <span class="keyword">struct</span> binder_thread *thread,</span></span><br><span class="line"><span class="params">                  <span class="type">binder_uintptr_t</span> binder_buffer, <span class="type">size_t</span> size,</span></span><br><span class="line"><span class="params">                  <span class="type">binder_size_t</span> *consumed, <span class="type">int</span> non_block)</span></span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">    wait_for_proc_work = binder_available_for_proc_work_ilocked(thread);</span><br><span class="line">...</span><br><span class="line">    <span class="keyword">if</span> (wait_for_proc_work) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (non_block) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ret = binder_wait_for_work(thread, wait_for_proc_work); <span class="comment">// 进程睡眠的地方</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">binder_wait_for_work</span><span class="params">(<span class="keyword">struct</span> binder_thread *thread,</span></span><br><span class="line"><span class="params">                <span class="type">bool</span> do_proc_work)</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123; <span class="comment">// 循环的作用是让线程被唤醒后再一次去检查一下condition是否满足</span></span><br><span class="line">        prepare_to_wait(&amp;thread-&gt;wait, &amp;wait, TASK_INTERRUPTIBLE);</span><br><span class="line">        <span class="comment">// 唤醒条件 condition,如果满足则跳出循环，否则一直循环等待</span></span><br><span class="line">        <span class="comment">// thread-&gt;process_todo = true 时 binder_has_work_ilocked </span></span><br><span class="line">        <span class="keyword">if</span> (binder_has_work_ilocked(thread, do_proc_work))</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        ...</span><br><span class="line">        schedule(); <span class="comment">// 调用schedule()，让出cpu资源，开始休眠，进程真正睡眠的地方</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>wait_for_proc_work &#x3D; false，进入 binder_wait_for_work()，回忆一下[c.7 小节](# c.7 服务端处理 BR_TRANSACTION_COMPLETE 命令) 中 <code>thread-&gt;process_todo = false</code> ，<font color=red><strong>所以 sm 在此处挂起！！！</strong></font>具体逻辑可参考 [c.6 小节](# c.6 唤醒客户端)。</p>
<p>主要做了三件事：</p>
<ul>
<li><strong>将 tcomplete 加入到当前调用线程(sm)待处理的任务队列</strong></li>
<li><strong>将 t 加入到目标(和 sm 通信的 client)的处理队列中</strong></li>
<li><strong>wake_up_interruptible_sync()：唤醒客户端进程</strong></li>
</ul>
<p>接下来继续看 client 进程，从前文分析得知，client 进程也是在 binder_wait_for_work() 出挂起，唤醒后继续往下执行。</p>
<h6 id="d-客户端继续执行-把-BR-TRANSACTION-COMPLETE-x2F-BR-REPLY-写入用户空间"><a href="#d-客户端继续执行-把-BR-TRANSACTION-COMPLETE-x2F-BR-REPLY-写入用户空间" class="headerlink" title="d. 客户端继续执行  - 把  BR_TRANSACTION_COMPLETE&#x2F;BR_REPLY 写入用户空间"></a>d. 客户端继续执行  - 把  BR_TRANSACTION_COMPLETE&#x2F;BR_REPLY 写入用户空间</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// binder.c</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">binder_thread_read</span><span class="params">(<span class="keyword">struct</span> binder_proc *proc,...)</span></span><br><span class="line">...</span><br><span class="line">        ret = binder_wait_for_work(thread, wait_for_proc_work); <span class="comment">// 进程睡眠的地方</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">	...</span><br><span class="line">        w = binder_dequeue_work_head_ilocked(<span class="built_in">list</span>); <span class="comment">// 从客户端的 todo 队列获取 binder_work 对象</span></span><br><span class="line">        <span class="keyword">switch</span> (w-&gt;type) &#123; <span class="comment">// 判断 binder_transaction() 时传入的 binder_work 的类型</span></span><br><span class="line">        <span class="keyword">case</span> BINDER_WORK_TRANSACTION: &#123;</span><br><span class="line">            binder_inner_proc_unlock(proc);</span><br><span class="line">            t = container_of(w, <span class="keyword">struct</span> binder_transaction, work); <span class="comment">// 通过 w 获取 binder_transaction 事务</span></span><br><span class="line">        &#125; <span class="keyword">break</span>;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">case</span> BINDER_WORK_TRANSACTION_COMPLETE:</span><br><span class="line">        <span class="keyword">case</span> BINDER_WORK_TRANSACTION_ONEWAY_SPAM_SUSPECT: &#123;</span><br><span class="line">            <span class="keyword">if</span> (proc-&gt;oneway_spam_detection_enabled &amp;&amp;</span><br><span class="line">                   w-&gt;type == BINDER_WORK_TRANSACTION_ONEWAY_SPAM_SUSPECT)</span><br><span class="line">                cmd = BR_ONEWAY_SPAM_SUSPECT;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                cmd = BR_TRANSACTION_COMPLETE; <span class="comment">// 返回到用户空间的命令</span></span><br><span class="line">            ...</span><br><span class="line">            kfree(w);</span><br><span class="line">            binder_stats_deleted(BINDER_STAT_TRANSACTION_COMPLETE);</span><br><span class="line">            <span class="keyword">if</span> (put_user(cmd, (<span class="type">uint32_t</span> __user *)ptr)) <span class="comment">// 把命令写入用户空间的 ptr（read_buffer）</span></span><br><span class="line">                <span class="keyword">return</span> -EFAULT;</span><br><span class="line">            ptr += <span class="keyword">sizeof</span>(<span class="type">uint32_t</span>); <span class="comment">// ptr 跳过上述命令的地址空间</span></span><br><span class="line">            ...</span><br><span class="line">        &#125; <span class="keyword">break</span>;</span><br><span class="line">        ...</span><br><span class="line">        &#125; <span class="comment">// end switch w-&gt;type</span></span><br><span class="line">        <span class="keyword">if</span> (!t)</span><br><span class="line">            <span class="keyword">continue</span>; <span class="comment">// 处理 BINDER_WORK_TRANSACTION_COMPLETE 时走到这里 continue，回到循环</span></span><br><span class="line">        <span class="keyword">if</span> (t-&gt;buffer-&gt;target_node) &#123; <span class="comment">// 是否存在目标节点，这里 target_node 为 sm 的 binder_node</span></span><br><span class="line">            ...</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            trd-&gt;target.ptr = <span class="number">0</span>;</span><br><span class="line">            trd-&gt;cookie = <span class="number">0</span>;</span><br><span class="line">            cmd = BR_REPLY;</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// 把 BR_REPLY 命令拷贝到用户空间</span></span><br><span class="line">        <span class="keyword">if</span> (put_user(cmd, (<span class="type">uint32_t</span> __user *)ptr)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (t_from)</span><br><span class="line">                binder_thread_dec_tmpref(t_from);</span><br><span class="line">            binder_cleanup_transaction(t, <span class="string">&quot;put_user failed&quot;</span>,</span><br><span class="line">                           BR_FAILED_REPLY);</span><br><span class="line">            <span class="keyword">return</span> -EFAULT;</span><br><span class="line">        &#125;</span><br><span class="line">        ptr += <span class="keyword">sizeof</span>(<span class="type">uint32_t</span>);</span><br><span class="line">        <span class="comment">// 把 binder_transaction_data_secctx 数据拷贝到用户空间</span></span><br><span class="line">        <span class="keyword">if</span> (copy_to_user(ptr, &amp;tr, trsize)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (t_from)</span><br><span class="line">                binder_thread_dec_tmpref(t_from);</span><br><span class="line">            binder_cleanup_transaction(t, <span class="string">&quot;copy_to_user failed&quot;</span>,</span><br><span class="line">                           BR_FAILED_REPLY);</span><br><span class="line">            <span class="keyword">return</span> -EFAULT;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>客户端调用 binder_transaction() 时，客户端的 todo 队列添加了 BINDER_WORK_TRANSACTION_COMPLETE 命令，</p>
<p>sm 处理完数据向驱动发送 BC_REPLY 命令时也调用了 binder_transaction()，又向目标进程（之前和 sm 通信的进程，也就是客户端）的 todo 队列添加了 BINDER_WORK_TRANSACTION，所以现在客户端的 todo 链表有两个 binder_work，BINDER_WORK_TRANSACTION_COMPLETE 和 BINDER_WORK_TRANSACTION，在处理 BINDER_WORK_TRANSACTION_COMPLETE  时，t 还是 NULL，执行完 switch 语句后，直接就 continue 返回循环执行下一条 binder_work了，也就是 BINDER_WORK_TRANSACTION；</p>
<p>sm 执行 binder_transaction() 时并未给 target_node 赋值，所以这次 t-&gt;buffer-&gt;target_node 就是空值了，进入 else 分支，传递 BR_REPLY 给 cmd，接下来把 BR_REPLY 写入用户空间的 ptr(read_buffer)，把 binder_transaction_data_secctx 拷贝到用户空间的 ptr(read_buffer)，总结下来就是三件事：</p>
<ul>
<li>把 BR_TRANSACTION_COMPLETE 写入 read_buffer</li>
<li>把 BR_REPLY 写入 read_buffer</li>
<li>把 binder_transaction_data_secctx 写入 read_buffer</li>
</ul>
<p>到这里客户端的 binder_ioctl_write_read() 就执行完了，回到 talkWithDriver()，talkWithDriver() 没做什么有用的事，继续回到 waitForResponse()。</p>
<h5 id="1-2-2-2-2-处理-binder-驱动发来的命令-BR-TRANSACTION-COMPLETE-x2F-BR-REPLY"><a href="#1-2-2-2-2-处理-binder-驱动发来的命令-BR-TRANSACTION-COMPLETE-x2F-BR-REPLY" class="headerlink" title="1.2.2.2.2 处理 binder 驱动发来的命令 - BR_TRANSACTION_COMPLETE&#x2F;BR_REPLY"></a>1.2.2.2.2 处理 binder 驱动发来的命令 - BR_TRANSACTION_COMPLETE&#x2F;BR_REPLY</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// IPCThreadState.cpp</span></span><br><span class="line"><span class="function"><span class="type">status_t</span> <span class="title">IPCThreadState::waitForResponse</span><span class="params">(Parcel *reply, <span class="type">status_t</span> *acquireResult)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint32_t</span> cmd;</span><br><span class="line">    <span class="type">int32_t</span> err;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 进一步调用 talkWithDriver 去执行写入数据到 binder 驱动</span></span><br><span class="line">        <span class="keyword">if</span> ((err=<span class="built_in">talkWithDriver</span>()) &lt; NO_ERROR) <span class="keyword">break</span>;</span><br><span class="line">        ...</span><br><span class="line">        cmd = (<span class="type">uint32_t</span>)mIn.<span class="built_in">readInt32</span>(); <span class="comment">// 从 mIn 读取 binder 驱动返回的命令</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">switch</span> (cmd) &#123;  <span class="comment">// 处理 binder 驱动发来的命令</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">case</span> BR_TRANSACTION_COMPLETE:</span><br><span class="line">            <span class="comment">// TF_ONE_WAY 模式时传入的 reply 和 acquireResult 是 nullptr，则直接 finish 退出循环，不再等待 binder 驱动的回复</span></span><br><span class="line">            <span class="keyword">if</span> (!reply &amp;&amp; !acquireResult) <span class="keyword">goto</span> finish;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            ...</span><br><span class="line">        <span class="keyword">case</span> BR_REPLY:</span><br><span class="line">            &#123;</span><br><span class="line">                binder_transaction_data tr;</span><br><span class="line">                err = mIn.<span class="built_in">read</span>(&amp;tr, <span class="built_in">sizeof</span>(tr));</span><br><span class="line">                ...</span><br><span class="line">                <span class="keyword">if</span> (reply) &#123; <span class="comment">// reply 不为空</span></span><br><span class="line">                    <span class="keyword">if</span> ((tr.flags &amp; TF_STATUS_CODE) == <span class="number">0</span>) &#123; <span class="comment">// flags 还是 0</span></span><br><span class="line">                        reply-&gt;<span class="built_in">ipcSetDataReference</span>(</span><br><span class="line">                            <span class="built_in">reinterpret_cast</span>&lt;<span class="type">const</span> <span class="type">uint8_t</span>*&gt;(tr.data.ptr.buffer),</span><br><span class="line">                            tr.data_size,</span><br><span class="line">                            <span class="built_in">reinterpret_cast</span>&lt;<span class="type">const</span> <span class="type">binder_size_t</span>*&gt;(tr.data.ptr.offsets),</span><br><span class="line">                            tr.offsets_size/<span class="built_in">sizeof</span>(<span class="type">binder_size_t</span>),</span><br><span class="line">                            freeBuffer);</span><br><span class="line">                    &#125; ...</span><br></pre></td></tr></table></figure>

<p>非 ONEWAY 模式，BR_TRANSACTION_COMPLETE 分支什么也没做，BR_REPLY 分支调用了 Parcel.ipcSetDataReference()，主要作用就是根据参数的值重新初始化 Parcel 的数据和对象，客户端后续就可以使用 Parcel 提供的函数从中读取数据。</p>
<p>到这里 AMS 注册到 SM 的过程就结束了。</p>
<h1 id="2-IPC-命令流程图"><a href="#2-IPC-命令流程图" class="headerlink" title="2. IPC 命令流程图"></a>2. IPC 命令流程图</h1><p><a href="https://raw.githubusercontent.com/rangerzhou/ImageHosting/master/blog_resource/2022/Binder_trancaction_command.png">IPC 命令流程图</a></p>
<p><img src="https://raw.githubusercontent.com/rangerzhou/ImageHosting/master/blog_resource/2022/Binder_trancaction_command.png" alt="Binder_trancaction_command" title="IPC 命令流程"></p>
<h1 id="3-AMS-注册时序图"><a href="#3-AMS-注册时序图" class="headerlink" title="3. AMS 注册时序图"></a>3. AMS 注册时序图</h1><p><a href="https://raw.githubusercontent.com/rangerzhou/ImageHosting/master/blog_resource/2022/Binder_AMS%E6%B3%A8%E5%86%8C%E6%97%B6%E5%BA%8F%E5%9B%BE.png">Binder_AMS注册时序图</a></p>
<p><img src="https://raw.githubusercontent.com/rangerzhou/ImageHosting/master/blog_resource/2022/Binder_AMS%E6%B3%A8%E5%86%8C%E6%97%B6%E5%BA%8F%E5%9B%BE.png" alt="Binder_AMS注册时序图" title="AMS 注册时序图"></p>
<h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h1><p><strong>getIServiceManager() 主要工作：</strong></p>
<ul>
<li>BinderInternal.getContextObject()：返回一个封装了 BpBinder(handle &#x3D;&#x3D; 0) 的 BinderProxy 对象，BinderProxy 对象包含一个 mNativeData 的 long 型地址，其对应 native 层的 BinderProxyNativeData 结构体变量指针，这个结构体第一个参数是 mObject，指向 BpBinder(handle &#x3D;&#x3D; 0)；</li>
<li>ServiceManagerNative.asInterface()：获取 ServiceManagerProxy 对象，参数是 BinderProxy。</li>
</ul>
<p><strong>addService() 主要工作：</strong></p>
<ul>
<li>writeTransactionData：打包数据和命令到 mOut；</li>
<li>waitForResponse：写入数据和 <font color=green><strong>BC_TRANSACTION</strong></font> 命令到 binder 驱动<ul>
<li>talkWithDriver()：根据 mIn.size 和 mOut.size 判断是否要执行 ioctl<ul>
<li>客户端 binder_thread_write()：处理 BC_TRANSACTION 命令，</li>
<li>客户端 binder_transaction()：找到目标进程 sm 并向其传递传输 BINDER_WORK_TRANSACTION 命令和数据，向调用线程（客户端）传递 BINDER_WORK_TRANSACTION_COMPLETE 命令，<font color=red><strong>唤醒 sm</strong></font>；</li>
<li>a. 客户端 binder_thread_read()：<font color=red><strong>客户端进程挂起</strong></font>；</li>
<li>b. 服务端 binder_thread_read()：服务端处理命令 BINDER_WORK_TRANSACTION，驱动向服务端用户空间传递 <font color=green><strong>BR_TRANSACTION</strong></font> 命令；</li>
<li>服务端 handleEvent()：获取并处理 BR_TRANSACTION 命令；</li>
<li>服务端 transact()&#x2F;onTransact()：处理 TRANSACTION_addService 并返回 reply；</li>
<li>服务端 sendReply()：向驱动发送 <font color=green><strong>BC_REPLY</strong></font>；</li>
<li>服务端 binder_thread_write()：处理 BC_REPLY 命令；</li>
<li>服务端 binder_transaction()：找到客户端进程并向其传递 BINDER_WORK_TRANSACTION 命令和数据，向调用线程（sm）传递 BINDER_WORK_TRANSACTION_COMPLETE 命令，<font color=red><strong>唤醒客户端进程</strong></font>；</li>
<li>服务端 binder_thread_read()：处理 BINDER_WORK_TRANSACTION_COMPLETE，驱动向 sm 用户空间发送 <font color=green><strong>BR_TRANCACTION_COMPLETE</strong></font> 命令</li>
<li>服务端 waitForResponse()：处理 BR_TRANCACTION_COMPLETE 命令</li>
<li>c. 服务端 binder_thread_read()：<font color=red><strong>服务端挂起</strong></font>；</li>
<li>d. 客户端 binder_thread_read()：客户端处理命令 BINDER_WORK_TRANSACTION_COMPLETE 和 BINDER_WORK_TRANSACTION 命令，驱动向客户端用户空间传递 <font color=green><strong>BR_TRANSACTION_COMPLETE</strong></font> 和 <font color=green><strong>BR_REPLY</strong></font> 命令；</li>
</ul>
</li>
<li>客户端 waitForResponse()：处理 BR_TRANSACTION_COMPLETE 和 BR_REPLY 命令；</li>
</ul>
</li>
</ul>
<p>a 和 b 同时进行，c 和 d 同时进行，无先后顺序；</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>Android - Binder机制(2)-ServiceManager启动和获取</title>
    <url>/2021/10/12/Android/AndroidDevelop_006_Binder02-ServiceManager-BootAndGet/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>ServiceManager 启动和获取（Native 层），源码基于 android-12.1.0</p>
</blockquote>
<span id="more"></span>

<p>相关代码路径：</p>
<table>
<thead>
<tr>
<th>Layer</th>
<th>Path</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td><a href="https://android.googlesource.com/platform/system/core/+/refs/tags/android-12.1.0_r4/rootdir/init.rc">system&#x2F;core&#x2F;rootdir&#x2F;init.rc</a></td>
</tr>
<tr>
<td></td>
<td><a href="https://android.googlesource.com/platform/frameworks/native/+/refs/tags/android-12.1.0_r4/cmds/servicemanager/servicemanager.rc">frameworks&#x2F;native&#x2F;cmds&#x2F;servicemanager&#x2F;servicemanager.rc</a></td>
</tr>
<tr>
<td></td>
<td><a href="https://android.googlesource.com/platform/frameworks/native/+/refs/tags/android-12.1.0_r4/cmds/servicemanager/main.cpp">frameworks&#x2F;native&#x2F;cmds&#x2F;servicemanager&#x2F;main.cpp</a></td>
</tr>
<tr>
<td></td>
<td><a href="https://android.googlesource.com/platform/frameworks/native/+/refs/tags/android-12.1.0_r4/libs/binder/ProcessState.cpp">frameworks&#x2F;native&#x2F;libs&#x2F;binder&#x2F;ProcessState.cpp</a></td>
</tr>
<tr>
<td></td>
<td><a href="">system&#x2F;core&#x2F;libutils&#x2F;Looper.cpp</a></td>
</tr>
<tr>
<td></td>
<td><a href="https://android.googlesource.com/platform/frameworks/native/+/refs/tags/android-12.1.0_r4/libs/binder/IServiceManager.cpp">frameworks&#x2F;native&#x2F;libs&#x2F;binder&#x2F;IServiceManager.cpp</a></td>
</tr>
</tbody></table>
<p>之所以从 servicemanager开始分析，是因为他比较特殊，即是 Client 和 Server 通信的中间人，Client 要先去servicemanager中寻找 Server 的 Binder 地址，同时也是一个特殊的 Server 端，作为一个特殊的 Server，他的功能很单一，就是返回指定 Server 的 Binder 地址。</p>
<h2 id="1-servicemanager-启动注册"><a href="#1-servicemanager-启动注册" class="headerlink" title="1. servicemanager 启动注册"></a>1. servicemanager 启动注册</h2><p><a href="https://android.googlesource.com/platform/system/core/+/refs/tags/android-12.1.0_r4/rootdir/init.rc">system&#x2F;core&#x2F;rootdir&#x2F;init.rc</a></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">on init</span><br><span class="line">    # Start essential services.</span><br><span class="line">    start servicemanager <span class="comment">// 启动 servicemanager</span></span><br><span class="line">    start hwservicemanager</span><br><span class="line">    start vndservicemanager</span><br></pre></td></tr></table></figure>

<p><a href="https://android.googlesource.com/platform/frameworks/native/+/refs/tags/android-12.1.0_r4/cmds/servicemanager/servicemanager.rc">frameworks&#x2F;native&#x2F;cmds&#x2F;servicemanager&#x2F;servicemanager.rc</a></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">service servicemanager /system/bin/servicemanager</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">core</span> <span class="title">animation</span></span></span><br><span class="line"><span class="class">    <span class="title">user</span> <span class="title">system</span></span></span><br><span class="line"><span class="class">    <span class="title">group</span> <span class="title">system</span> <span class="title">readproc</span></span></span><br><span class="line"><span class="class">    <span class="title">critical</span> // 说明 <span class="title">servicemanager</span> 是系统中的关键服务，关键服务是不会退出的，如果退出了，系统就会重启</span></span><br><span class="line"><span class="class">    <span class="title">onrestart</span> <span class="title">restart</span> <span class="title">apexd</span></span></span><br><span class="line"><span class="class">    <span class="title">onrestart</span> <span class="title">restart</span> <span class="title">audioserver</span></span></span><br><span class="line"><span class="class">    <span class="title">onrestart</span> <span class="title">restart</span> <span class="title">gatekeeperd</span></span></span><br><span class="line"><span class="class">    <span class="title">onrestart</span> <span class="title">class_restart</span> <span class="title">main</span></span></span><br><span class="line"><span class="class">    <span class="title">onrestart</span> <span class="title">class_restart</span> <span class="title">hal</span></span></span><br><span class="line"><span class="class">    <span class="title">onrestart</span> <span class="title">class_restart</span> <span class="title">early_hal</span></span></span><br><span class="line"><span class="class">    <span class="title">writepid</span> /<span class="title">dev</span>/<span class="title">cpuset</span>/<span class="title">system</span>-<span class="title">background</span>/<span class="title">tasks</span></span></span><br><span class="line"><span class="class">    <span class="title">shutdown</span> <span class="title">critical</span></span></span><br></pre></td></tr></table></figure>

<p>servicemanager 的源码入口在 <a href="https://android.googlesource.com/platform/frameworks/native/+/refs/tags/android-12.1.0_r4/cmds/servicemanager/main.cpp">frameworks&#x2F;native&#x2F;cmds&#x2F;servicemanager&#x2F;main.cpp</a></p>
<p>main.cpp.main()</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 默认 /dev/binder，如果 argc == 2，则使用 /dev/vndbinder，这是供应商进程之间可以使用的 binder</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* driver = argc == <span class="number">2</span> ? argv[<span class="number">1</span>] : <span class="string">&quot;/dev/binder&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. open(), mmap()</span></span><br><span class="line">    sp&lt;ProcessState&gt; ps = ProcessState::<span class="built_in">initWithDriver</span>(driver);</span><br><span class="line">    ps-&gt;<span class="built_in">setThreadPoolMaxThreadCount</span>(<span class="number">0</span>);</span><br><span class="line">    ps-&gt;<span class="built_in">setCallRestriction</span>(ProcessState::CallRestriction::FATAL_IF_NOT_ONEWAY);</span><br><span class="line">    <span class="comment">// 实例化 ServiceManager</span></span><br><span class="line">    sp&lt;ServiceManager&gt; manager = sp&lt;ServiceManager&gt;::<span class="built_in">make</span>(std::<span class="built_in">make_unique</span>&lt;Access&gt;());</span><br><span class="line">    <span class="comment">// 将自身注册到 ServiceManager 中</span></span><br><span class="line">    <span class="keyword">if</span> (!manager-&gt;<span class="built_in">addService</span>(<span class="string">&quot;manager&quot;</span>, manager, <span class="literal">false</span> <span class="comment">/*allowIsolated*/</span>, IServiceManager::DUMP_FLAG_PRIORITY_DEFAULT).<span class="built_in">isOk</span>()) &#123;</span><br><span class="line">        <span class="built_in">LOG</span>(ERROR) &lt;&lt; <span class="string">&quot;Could not self register servicemanager&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将 ServiceManager 设置给 IPCThreadState 的全局变量</span></span><br><span class="line">    IPCThreadState::<span class="built_in">self</span>()-&gt;<span class="built_in">setTheContextObject</span>(manager);</span><br><span class="line">    <span class="comment">// 2. 注册到驱动，成为 Binder 管理员，handle 是 0</span></span><br><span class="line">    ps-&gt;<span class="built_in">becomeContextManager</span>(<span class="literal">nullptr</span>, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="comment">// 准备 looper</span></span><br><span class="line">    sp&lt;Looper&gt; looper = Looper::<span class="built_in">prepare</span>(<span class="literal">false</span> <span class="comment">/*allowNonCallbacks*/</span>);</span><br><span class="line">    <span class="comment">// 通知驱动 BC_ENTER_LOOPER ，监听驱动 fd ，有消息时回调到 handleEvent 处理 binder 调用</span></span><br><span class="line">    BinderCallback::<span class="built_in">setupTo</span>(looper);</span><br><span class="line">    ClientCallbackCallback::<span class="built_in">setupTo</span>(looper, manager); <span class="comment">// 服务的注册监听相关</span></span><br><span class="line">    <span class="comment">// 3. 无限循环等消息</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        looper-&gt;<span class="built_in">pollAll</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// should not be reached</span></span><br><span class="line">    <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主要做了三件事：</p>
<ul>
<li>ProcessState::initWithDriver(driver)：打开并初始化驱动设备；</li>
<li>ps-&gt;becomeContextManager(nullptr, nullptr)：把 servicemanager 注册到驱动，成为 Binder 管理员（即设置为大管家），handle 是 0；</li>
<li>looper-&gt;pollAll(-1)：进入循环等消息；</li>
</ul>
<h3 id="1-1-打开驱动，内存映射"><a href="#1-1-打开驱动，内存映射" class="headerlink" title="1.1 打开驱动，内存映射"></a>1.1 打开驱动，内存映射</h3><p><a href="https://android.googlesource.com/platform/frameworks/native/+/refs/tags/android-12.1.0_r4/libs/binder/ProcessState.cpp">frameworks&#x2F;native&#x2F;libs&#x2F;binder&#x2F;ProcessState.cpp</a></p>
<p><strong>initWithDriver(driver)</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// initWithDriver()</span></span><br><span class="line"><span class="function">sp&lt;ProcessState&gt; <span class="title">ProcessState::initWithDriver</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* driver)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">init</span>(driver, <span class="literal">true</span> <span class="comment">/*requireDefault*/</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// init()</span></span><br><span class="line"><span class="function">sp&lt;ProcessState&gt; <span class="title">ProcessState::init</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *driver, <span class="type">bool</span> requireDefault)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    [[clang::no_destroy]] <span class="type">static</span> std::once_flag gProcessOnce;</span><br><span class="line">    std::<span class="built_in">call_once</span>(gProcessOnce, [&amp;]()&#123;</span><br><span class="line">        ...</span><br><span class="line">        std::lock_guard&lt;std::mutex&gt; <span class="built_in">l</span>(gProcessMutex);</span><br><span class="line">        gProcess = sp&lt;ProcessState&gt;::<span class="built_in">make</span>(driver); <span class="comment">// 等同于 new ProcessState(driver)</span></span><br><span class="line">    &#125;);</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> gProcess;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建一个 ProcessState 对象，参数 driver 值是 <code>/dev/binder</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> BINDER_VM_SIZE ((1 * 1024 * 1024) - sysconf(_SC_PAGE_SIZE) * 2)</span></span><br><span class="line">ProcessState::<span class="built_in">ProcessState</span>(<span class="type">const</span> <span class="type">char</span> *driver)</span><br><span class="line">    : <span class="built_in">mDriverName</span>(<span class="built_in">String8</span>(driver))</span><br><span class="line">    , <span class="built_in">mDriverFD</span>(<span class="built_in">open_driver</span>(driver)) <span class="comment">// 打开驱动</span></span><br><span class="line">    , <span class="built_in">mVMStart</span>(MAP_FAILED)</span><br><span class="line">    , <span class="built_in">mThreadCountLock</span>(PTHREAD_MUTEX_INITIALIZER)</span><br><span class="line">    , <span class="built_in">mThreadCountDecrement</span>(PTHREAD_COND_INITIALIZER)</span><br><span class="line">    , <span class="built_in">mExecutingThreadsCount</span>(<span class="number">0</span>)</span><br><span class="line">    , <span class="built_in">mWaitingForThreads</span>(<span class="number">0</span>)</span><br><span class="line">    , <span class="built_in">mMaxThreads</span>(DEFAULT_MAX_BINDER_THREADS)</span><br><span class="line">    , <span class="built_in">mStarvationStartTimeMs</span>(<span class="number">0</span>)</span><br><span class="line">    , <span class="built_in">mThreadPoolStarted</span>(<span class="literal">false</span>)</span><br><span class="line">    , <span class="built_in">mThreadPoolSeq</span>(<span class="number">1</span>)</span><br><span class="line">    , <span class="built_in">mCallRestriction</span>(CallRestriction::NONE)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (mDriverFD &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// mmap the binder, providing a chunk of virtual address space to receive transactions.</span></span><br><span class="line">        <span class="comment">// 内存映射，BINDER_VM_SIZE 设置为 1M - 8K</span></span><br><span class="line">        mVMStart = <span class="built_in">mmap</span>(<span class="literal">nullptr</span>, BINDER_VM_SIZE, PROT_READ, MAP_PRIVATE | MAP_NORESERVE, mDriverFD, <span class="number">0</span>);</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先通过 open_driver() 函数调用 open() 打开驱动，它会创建<code>binder_proc</code>对象，并将进程等相关信息保存到<code>binder_proc</code>对象中，并返回<code>fd</code>文件描述符，然后调用 mmap() 把内核空间虚拟内存和用户空间虚拟内存映射到同一块物理内存中；</p>
<p>其中 ProcessState 的成员变量 mDriverFD 记录 binder 驱动的 fd，用于访问 binder 设备；</p>
<p>open() 实际上调用的是 binder 驱动启动时注册的文件操作函数，在 <a href="http://androidxref.com/kernel_3.18/xref/drivers/staging/android/binder.c">kernel&#x2F;drivers&#x2F;staging&#x2F;android&#x2F;binder.c</a> 中可以找到定义的 binder_fops 查看对应关系，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="keyword">struct</span> <span class="title class_">file_operations</span> binder_fops = &#123;</span><br><span class="line">	.owner = THIS_MODULE,</span><br><span class="line">	.poll = binder_poll,</span><br><span class="line">	.unlocked_ioctl = binder_ioctl,</span><br><span class="line">	.compat_ioctl = binder_ioctl,</span><br><span class="line">	.mmap = binder_mmap,</span><br><span class="line">	.open = binder_open,</span><br><span class="line">	.flush = binder_flush,</span><br><span class="line">	.release = binder_release,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>即 open 对应 binder_open，mmap 对应 binder_mmap，ioctl 对应 binder_ioctl；</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> DEFAULT_MAX_BINDER_THREADS 15</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">open_driver</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *driver)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 打开 binder 驱动</span></span><br><span class="line">    <span class="type">int</span> fd = <span class="built_in">open</span>(driver, O_RDWR | O_CLOEXEC);</span><br><span class="line">    <span class="keyword">if</span> (fd &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">int</span> vers = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 获取当前 binder 版本</span></span><br><span class="line">        <span class="type">status_t</span> result = <span class="built_in">ioctl</span>(fd, BINDER_VERSION, &amp;vers);</span><br><span class="line">        ...</span><br><span class="line">        <span class="type">size_t</span> maxThreads = DEFAULT_MAX_BINDER_THREADS;</span><br><span class="line">        <span class="comment">// 设置 binder 最大线程数</span></span><br><span class="line">        result = <span class="built_in">ioctl</span>(fd, BINDER_SET_MAX_THREADS, &amp;maxThreads);</span><br><span class="line">        ...</span><br><span class="line">        <span class="type">uint32_t</span> enable = DEFAULT_ENABLE_ONEWAY_SPAM_DETECTION;</span><br><span class="line">        <span class="comment">// BINDER_ENABLE_ONEWAY_SPAM_DETECTION</span></span><br><span class="line">        result = <span class="built_in">ioctl</span>(fd, BINDER_ENABLE_ONEWAY_SPAM_DETECTION, &amp;enable);</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">return</span> fd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>open_driver() 主要干了三件事：</p>
<ul>
<li>调用  open 打开驱动，open 函数会经过系统调用，最终执行 binder 驱动程序中的 binder_open 函数；</li>
<li>调用 ioctl 获取 BINDER_VERSION；</li>
<li>调用 ioctl 设置当前进程最大的 Binder 线程数量，这里设置的线程数是 15 个（15 是 binder 非主线程的数量，还有个 binder 主线程，所以最大线程数是 15 +1 +其他没有调用 spawnPooledThread()，直接调用 joinThreadPool() 将当前线程直接加入 binder 线程队列的线程）；</li>
</ul>
<p><strong>总结</strong></p>
<ul>
<li>通过 open_driver() 函数 调用 open() 打开驱动；</li>
<li>调用 mmap() 把内核空间虚拟内存和用户空间虚拟内存映射到同一块物理内存中（在 Android 11之前，SM 映射的虚拟内存分配空间是 128K，现在和普通应用一样都是 1M - 8K 了，在 BINDER_VM_SIZE 中定义）；</li>
</ul>
<h3 id="1-2-设置上下文管理者"><a href="#1-2-设置上下文管理者" class="headerlink" title="1.2 设置上下文管理者"></a>1.2 设置上下文管理者</h3><p><a href="https://android.googlesource.com/platform/frameworks/native/+/refs/tags/android-12.1.0_r4/libs/binder/ProcessState.cpp">frameworks&#x2F;native&#x2F;libs&#x2F;binder&#x2F;ProcessState.cpp</a></p>
<p><strong>becomeContextManager()</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">ProcessState::becomeContextManager</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    AutoMutex _l(mLock);</span><br><span class="line"></span><br><span class="line">    flat_binder_object obj &#123;</span><br><span class="line">        .flags = FLAT_BINDER_FLAG_TXN_SECURITY_CTX,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">status_t</span> result = <span class="built_in">ioctl</span>(mDriverFD, BINDER_SET_CONTEXT_MGR_EXT, &amp;obj);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// fallback to original method</span></span><br><span class="line">    <span class="keyword">if</span> (result != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">android_errorWriteLog</span>(<span class="number">0x534e4554</span>, <span class="string">&quot;121035042&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> unused = <span class="number">0</span>;</span><br><span class="line">        result = <span class="built_in">ioctl</span>(mDriverFD, BINDER_SET_CONTEXT_MGR, &amp;unused);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (result == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">ALOGE</span>(<span class="string">&quot;Binder ioctl to become context manager failed: %s\n&quot;</span>, <span class="built_in">strerror</span>(errno));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注册 servicemanager 为 binder 机制守护进程 ，其实就是把 0 号的 handler 给 servicemanager 使用，以后只要访问 0 号的 handler，binder 驱动就知道是与 servicemanager 进行交互。 </p>
<p>Android 10 新增 BINDER_SET_CONTEXT_MGR_EXT 命令来设置安全的上下文管理者，如果设置失败，则传入原有的 BINDER_SET_CONTEXT_MGR 命令设置上下文管理者，两者区别在于是否携带参数；</p>
<h3 id="1-3-进入循环"><a href="#1-3-进入循环" class="headerlink" title="1.3 进入循环"></a>1.3 进入循环</h3><p><a href="">system&#x2F;core&#x2F;libutils&#x2F;Looper.cpp</a></p>
<p><strong>looper-&gt;pollAll()</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Looper::pollAll</span><span class="params">(<span class="type">int</span> timeoutMillis, <span class="type">int</span>* outFd, <span class="type">int</span>* outEvents, <span class="type">void</span>** outData)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (timeoutMillis &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">int</span> result;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            result = <span class="built_in">pollOnce</span>(timeoutMillis, outFd, outEvents, outData);</span><br><span class="line">        &#125; <span class="keyword">while</span> (result == POLL_CALLBACK);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="type">int</span> result = <span class="built_in">pollOnce</span>(timeoutMillis, outFd, outEvents, outData);</span><br><span class="line">            <span class="keyword">if</span> (result != POLL_CALLBACK) &#123;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">            ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>之前是 binder_loop() 死循环接收驱动的消息，现在通过 looper 监听 fd 来 handleEvent。</p>
<p><strong>BinderCallback::setupTo(looper)</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.cpp</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinderCallback</span> : <span class="keyword">public</span> LooperCallback &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> sp&lt;BinderCallback&gt; <span class="title">setupTo</span><span class="params">(<span class="type">const</span> sp&lt;Looper&gt;&amp; looper)</span> </span>&#123;</span><br><span class="line">        sp&lt;BinderCallback&gt; cb = sp&lt;BinderCallback&gt;::<span class="built_in">make</span>(); <span class="comment">// 实例化 BinderCallback</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> binder_fd = <span class="number">-1</span>;</span><br><span class="line">        <span class="comment">// 获取 binder_fd，向 binder 驱动发送 BC_ENTER_LOOPER</span></span><br><span class="line">        IPCThreadState::<span class="built_in">self</span>()-&gt;<span class="built_in">setupPolling</span>(&amp;binder_fd);</span><br><span class="line">        <span class="built_in">LOG_ALWAYS_FATAL_IF</span>(binder_fd &lt; <span class="number">0</span>, <span class="string">&quot;Failed to setupPolling: %d&quot;</span>, binder_fd);</span><br><span class="line">        <span class="comment">// 添加监听目标，通过 epoll 机制监听驱动的文件描述符 binder_fd，当 binder_fd</span></span><br><span class="line">        <span class="comment">// 可读时就会调用后面的 handleEvent()</span></span><br><span class="line">        <span class="type">int</span> ret = looper-&gt;<span class="built_in">addFd</span>(binder_fd,</span><br><span class="line">                                Looper::POLL_CALLBACK,</span><br><span class="line">                                Looper::EVENT_INPUT,</span><br><span class="line">                                cb,</span><br><span class="line">                                <span class="literal">nullptr</span> <span class="comment">/*data*/</span>);</span><br><span class="line">        <span class="built_in">LOG_ALWAYS_FATAL_IF</span>(ret != <span class="number">1</span>, <span class="string">&quot;Failed to add binder FD to Looper&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cb;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">handleEvent</span><span class="params">(<span class="type">int</span> <span class="comment">/* fd */</span>, <span class="type">int</span> <span class="comment">/* events */</span>, <span class="type">void</span>* <span class="comment">/* data */</span>)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用 handlePolledCommands() 处理回调</span></span><br><span class="line">        IPCThreadState::<span class="built_in">self</span>()-&gt;<span class="built_in">handlePolledCommands</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;  <span class="comment">// Continue receiving callbacks.</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>setupPolling(), flushCommands()</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// IPCThreadState.cpp</span></span><br><span class="line"><span class="function"><span class="type">status_t</span> <span class="title">IPCThreadState::setupPolling</span><span class="params">(<span class="type">int</span>* fd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mProcess-&gt;mDriverFD &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> -EBADF;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 开启 sm 的循环，开始工作把 BC_ENTER_LOOPER 命令放入 mOut 中</span></span><br><span class="line">    mOut.<span class="built_in">writeInt32</span>(BC_ENTER_LOOPER);</span><br><span class="line">    <span class="built_in">flushCommands</span>(); <span class="comment">// 将 BC_ENTER_LOOPER 传递到驱动 binder_thread_write()</span></span><br><span class="line">    *fd = mProcess-&gt;mDriverFD;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">IPCThreadState::flushCommands</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="built_in">talkWithDriver</span>(<span class="literal">false</span>);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>setupPolling()</code> 向 IPCThreadState.mOut（mOut 就是需要向驱动写入的数据，是一个 Parcel 对象） 中写入命令 BC_ENTER_LOOPER，然后将 BinderCallback 里面的 binder_fd 指向 open(“&#x2F;dev&#x2F;binder”) 是 binder 设备文件对应的 fd。</p>
<p><code>setupPolling()</code> 和 <code>flushCommands()</code> 一起就是告诉 binder 驱动 sm 已经进入循环模式，可以处理数据了。<code>addFd()</code> 是 Looper 中的方法，实现是通过 epoll 机制监听 binder 对应的 fd，当可读时就会调用 handleEvent()。至此 sm 的准备工作完成，可以接收客户端的调用了。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.cpp</span></span><br><span class="line"><span class="function"><span class="type">status_t</span> <span class="title">IPCThreadState::handlePolledCommands</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">status_t</span> result;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        result = <span class="built_in">getAndExecuteCommand</span>();</span><br><span class="line">    &#125; <span class="keyword">while</span> (mIn.<span class="built_in">dataPosition</span>() &lt; mIn.<span class="built_in">dataSize</span>());</span><br><span class="line"></span><br><span class="line">    <span class="built_in">processPendingDerefs</span>();</span><br><span class="line">    <span class="built_in">flushCommands</span>();</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>sm 通过 epoll 机制在 binder_fd 有变化时执行 <code>handleEvent()</code>，此方法调用了 <code>handlePolledCommands()</code>，这个方法是告诉 sm，binder 有数据可读，具体需要再次从 binder 读取。</p>
<p>此部分参考：<a href="https://www.cnblogs.com/rongmiao/p/16067971.html">参考1</a>，<a href="https://juejin.cn/post/6986839034232799240">参考2</a></p>
<h2 id="2-获取-servicemanager（native-层）"><a href="#2-获取-servicemanager（native-层）" class="headerlink" title="2. 获取 servicemanager（native 层）"></a>2. 获取 servicemanager（native 层）</h2><p>获取 servicemanager 的情况有两种：</p>
<ul>
<li>注册服务到 sm 时：addService()；</li>
<li>通过 sm 获取服务时：getService()；</li>
</ul>
<p>最终都会调用到 IServiceManager.cpp.defaultServiceManager()</p>
<p><a href="https://android.googlesource.com/platform/frameworks/native/+/refs/tags/android-12.1.0_r4/libs/binder/IServiceManager.cpp">frameworks&#x2F;native&#x2F;libs&#x2F;binder&#x2F;IServiceManager.cpp</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">sp&lt;IServiceManager&gt; <span class="title">defaultServiceManager</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::<span class="built_in">call_once</span>(gSmOnce, []() &#123;</span><br><span class="line">        sp&lt;AidlServiceManager&gt; sm = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">while</span> (sm == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="comment">// 获取 AidlServiceManager</span></span><br><span class="line">            sm = <span class="built_in">interface_cast</span>&lt;AidlServiceManager&gt;(ProcessState::<span class="built_in">self</span>()-&gt;<span class="built_in">getContextObject</span>(<span class="literal">nullptr</span>));</span><br><span class="line">            <span class="keyword">if</span> (sm == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                <span class="built_in">ALOGE</span>(<span class="string">&quot;Waiting 1s on context object on %s.&quot;</span>, ProcessState::<span class="built_in">self</span>()-&gt;<span class="built_in">getDriverName</span>().<span class="built_in">c_str</span>());</span><br><span class="line">                <span class="built_in">sleep</span>(<span class="number">1</span>); <span class="comment">// 没有获取到 AidlServiceManager 则休眠 1 秒</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        gDefaultServiceManager = <span class="keyword">new</span> <span class="built_in">ServiceManagerShim</span>(sm);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> gDefaultServiceManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://android.googlesource.com/platform/frameworks/native/+/refs/tags/android-12.1.0_r4/libs/binder/ProcessState.cpp">frameworks&#x2F;native&#x2F;libs&#x2F;binder&#x2F;ProcessState.cpp</a></p>
<h3 id="2-1-ProcessState-self"><a href="#2-1-ProcessState-self" class="headerlink" title="2.1 ProcessState::self()"></a>2.1 ProcessState::self()</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">sp&lt;ProcessState&gt; <span class="title">ProcessState::self</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">init</span>(kDefaultDriver, <span class="literal">false</span> <span class="comment">/*requireDefault*/</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ProcessState::self() 和小结 1.1 一样，都是调用 init() 创建一个 ProcessState 对象，打开 binder 驱动，并调用 mmap() 把内核空间虚拟内存和用户空间虚拟内存映射到同一块物理内存中。</p>
<h3 id="2-2-getContextObject"><a href="#2-2-getContextObject" class="headerlink" title="2.2 getContextObject()"></a>2.2 getContextObject()</h3><p><a href="https://raw.githubusercontent.com/rangerzhou/ImageHosting/master/blog_resource/2022/ProcessState_getContextObject.png">getContextObject() 函数调用</a></p>
<p><img src="https://raw.githubusercontent.com/rangerzhou/ImageHosting/master/blog_resource/2022/ProcessState_getContextObject.png" alt="getContextObject 调用" title="getContextObject 调用"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">sp&lt;IBinder&gt; <span class="title">ProcessState::getContextObject</span><span class="params">(<span class="type">const</span> sp&lt;IBinder&gt;&amp; <span class="comment">/*caller*/</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sp&lt;IBinder&gt; context = <span class="built_in">getStrongProxyForHandle</span>(<span class="number">0</span>); <span class="comment">// 获取 handle=0 的 IBinder</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> context;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>获取 handle 值为 0 的对应代理对象，返回了一个 IBinder 对象；</p>
<p><strong>getStrongProxyForHandle()</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">sp&lt;IBinder&gt; <span class="title">ProcessState::getStrongProxyForHandle</span><span class="params">(<span class="type">int32_t</span> handle)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sp&lt;IBinder&gt; result;</span><br><span class="line">    AutoMutex _l(mLock);</span><br><span class="line">    handle_entry* e = <span class="built_in">lookupHandleLocked</span>(handle); <span class="comment">// 查找 handle 对应的资源项</span></span><br><span class="line">    <span class="keyword">if</span> (e != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        IBinder* b = e-&gt;binder;</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="literal">nullptr</span> || !e-&gt;refs-&gt;<span class="built_in">attemptIncWeak</span>(<span class="keyword">this</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (handle == <span class="number">0</span>) &#123;</span><br><span class="line">                IPCThreadState* ipc = IPCThreadState::<span class="built_in">self</span>();</span><br><span class="line">                CallRestriction originalCallRestriction = ipc-&gt;<span class="built_in">getCallRestriction</span>();</span><br><span class="line">                ipc-&gt;<span class="built_in">setCallRestriction</span>(CallRestriction::NONE);</span><br><span class="line">                Parcel data;</span><br><span class="line">                <span class="comment">// 通过 ping 操作测试 binder 是否准备就绪</span></span><br><span class="line">                <span class="type">status_t</span> status = ipc-&gt;<span class="built_in">transact</span>(</span><br><span class="line">                        <span class="number">0</span>, IBinder::PING_TRANSACTION, data, <span class="literal">nullptr</span>, <span class="number">0</span>);</span><br><span class="line">                ipc-&gt;<span class="built_in">setCallRestriction</span>(originalCallRestriction);</span><br><span class="line">                <span class="keyword">if</span> (status == DEAD_OBJECT)</span><br><span class="line">                   <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">            &#125;s</span><br><span class="line">            <span class="comment">// 当 handle 值所对应的 IBinder 不存在或弱引用无效时，则创建 BpBinder 对象</span></span><br><span class="line">            sp&lt;BpBinder&gt; b = BpBinder::<span class="built_in">create</span>(handle);</span><br><span class="line">            e-&gt;binder = b.<span class="built_in">get</span>();</span><br><span class="line">            <span class="keyword">if</span> (b) e-&gt;refs = b-&gt;<span class="built_in">getWeakRefs</span>();</span><br><span class="line">            result = b;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>lookupHandleLocked() 函数作用是根据 handle 值来查找对应的 <code>handle_entry</code>,<code>handle_entry</code> 是一个结构体，里面记录 IBinder 和 weakref_type 两个指针。</p>
<p>所以 getContextObject() 的主要工作就是<strong>当 handle 值所对应的 IBinder 不存在或弱引用无效时会创建 BpBinder，否则直接获取</strong>。 针对 handle&#x3D;&#x3D;0 的特殊情况，通过 PING_TRANSACTION 来判断是否准备就绪。如果在 context manager 还未生效前，一个 BpBinder 的本地引用就已经被创建，那么驱动将无法提供 context manager 的引用。创建 BpBinder 对象中会将 handle 相对应 Binder 的弱引用增加 1。</p>
<h3 id="2-3-interface-cast"><a href="#2-3-interface-cast" class="headerlink" title="2.3 interface_cast()"></a>2.3 interface_cast()</h3><p><a href="https://android.googlesource.com/platform/frameworks/native/+/refs/tags/android-12.1.0_r4/libs/binder/include/binder/IInterface.h">frameworks&#x2F;native&#x2F;libs&#x2F;binder&#x2F;include&#x2F;binder&#x2F;IInterface.h</a></p>
<p><strong>interface_cast()</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> INTERFACE&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> sp&lt;INTERFACE&gt; <span class="title">interface_cast</span><span class="params">(<span class="type">const</span> sp&lt;IBinder&gt;&amp; obj)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> INTERFACE::<span class="built_in">asInterface</span>(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>interface_cast</code> 是一个模板方法，针对于 <code>interface_cast&lt;AidlServiceManager&gt;(BpBinder::create(0));</code> ，转换代码即为：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> sp&lt;AidlServiceManager&gt; <span class="title">interface_cast</span><span class="params">(<span class="type">const</span> sp&lt;IBinder&gt;&amp; obj)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> AidlServiceManager::<span class="built_in">asInterface</span>(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>AidlServiceManager 定义为：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> AidlServiceManager = android::os::IServiceManager;</span><br></pre></td></tr></table></figure>

<p>也就是说，这个对象实际上就是 <code>android::os::IServiceManager</code> 对象，那么 <code>asInterface()</code> 函数定义在哪里呢？<strong>此处需要注意的是</strong>：</p>
<ul>
<li>在 <a href="https://android.googlesource.com/platform/frameworks/native/+/refs/tags/android-12.1.0_r4/libs/binder/include/binder/IServiceManager.h">frameworks&#x2F;native&#x2F;libs&#x2F;binder&#x2F;include&#x2F;binder&#x2F;IServiceManager.h</a> 中定义的  IServiceManager 的 namespace 是 <code>android::IServiceManager</code>；</li>
<li>而上面的 <code>android::os::IServiceManager</code> 定义在 <a href="https://android.googlesource.com/platform/frameworks/native/+/refs/tags/android-12.1.0_r4/libs/binder/aidl/android/os/IServiceManager.aidl">frameworks&#x2F;native&#x2F;libs&#x2F;binder&#x2F;aidl&#x2F;android&#x2F;os&#x2F;IServiceManager.aidl</a> 中；</li>
</ul>
<p>在 IServiceManager.aidl 编译出来的 <a href="">out&#x2F;soong&#x2F;.intermediates&#x2F;frameworks&#x2F;native&#x2F;libs&#x2F;binder&#x2F;libbinder&#x2F;android_arm64_armv8-a_shared&#x2F;gen&#x2F;aidl&#x2F;android&#x2F;os&#x2F;IServiceManager.cpp</a> 和 <code>IServiceManager.h</code> 头文件中可以看到如下代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//位于IServiceManager.h文件</span></span><br><span class="line"><span class="built_in">DECLARE_META_INTERFACE</span>(ServiceManager)</span><br><span class="line"><span class="comment">//位于IServiceManager.cpp文件</span></span><br><span class="line"><span class="built_in">DO_NOT_DIRECTLY_USE_ME_IMPLEMENT_META_INTERFACE</span>(ServiceManager, <span class="string">&quot;android.os.IServiceManager&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>而 Android 旧版本中会分别在 <a href="">frameworks&#x2F;native&#x2F;libs&#x2F;binder&#x2F;include&#x2F;binder&#x2F;IServiceManager.h</a> 和 <a href="">frameworks&#x2F;native&#x2F;libs&#x2F;binder&#x2F;IServiceManager.cpp</a> 中定义如上两行代码调用模板函数。</p>
<p>所以传入的 INTERFACE 就是 ServiceManager，对应的 IInterface.h 中的定义为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> DECLARE_META_INTERFACE(INTERFACE)                               \</span></span><br><span class="line"><span class="meta">public:                                                                 \</span></span><br><span class="line"><span class="meta">    static const ::android::String16 descriptor;                        \</span></span><br><span class="line"><span class="meta">    static ::android::sp<span class="string">&lt;I##INTERFACE&gt;</span> asInterface(                     \</span></span><br><span class="line"><span class="meta">            const ::android::sp<span class="string">&lt;::android::IBinder&gt;</span>&amp; obj);              \</span></span><br><span class="line"><span class="meta">    ...</span></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">const</span> std::unique_ptr&lt;I##INTERFACE&gt;&amp; <span class="title">getDefaultImpl</span><span class="params">()</span></span>;  </span><br></pre></td></tr></table></figure>

<p>DECLARE_META_INTERFACE 部分只是声明，略过，接下来看实现部分（也是在 IInterface.h 中）：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> IMPLEMENT_META_INTERFACE(INTERFACE, NAME)                       \</span></span><br><span class="line"><span class="meta">    DO_NOT_DIRECTLY_USE_ME_IMPLEMENT_META_INTERFACE(INTERFACE, NAME)    \</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DO_NOT_DIRECTLY_USE_ME_IMPLEMENT_META_INTERFACE(INTERFACE, NAME)\</span></span><br><span class="line"><span class="meta">    ...                                                                   \</span></span><br><span class="line"><span class="meta">    ::android::sp<span class="string">&lt;I##INTERFACE&gt;</span> I##INTERFACE::asInterface(              \</span></span><br><span class="line"><span class="meta">            const ::android::sp<span class="string">&lt;::android::IBinder&gt;</span>&amp; obj)               \</span></span><br><span class="line"><span class="meta">    &#123;                                                                   \</span></span><br><span class="line"><span class="meta">        ::android::sp<span class="string">&lt;I##INTERFACE&gt;</span> intr;                               \</span></span><br><span class="line"><span class="meta">        <span class="keyword">if</span> (obj != nullptr) &#123;                                           \</span></span><br><span class="line"><span class="meta">            intr = ::android::sp<span class="string">&lt;I##INTERFACE&gt;</span>::cast(                   \</span></span><br><span class="line"><span class="meta">                obj-&gt;queryLocalInterface(I##INTERFACE::descriptor));    \</span></span><br><span class="line"><span class="meta">            <span class="keyword">if</span> (intr == nullptr) &#123;                                      \</span></span><br><span class="line"><span class="meta">                intr = ::android::sp<span class="string">&lt;Bp##INTERFACE&gt;</span>::make(obj);         \</span></span><br><span class="line"><span class="meta">            &#125;                                                           \</span></span><br><span class="line"><span class="meta">        &#125;                                                               \</span></span><br><span class="line"><span class="meta">        return intr;                                                    \</span></span><br><span class="line"><span class="meta">    &#125;   </span></span><br></pre></td></tr></table></figure>

<p>把 ServiceManager 代入 INTERFACE：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">::<span class="function">android::sp&lt;IServiceManager&gt; <span class="title">IServiceManager::asInterface</span><span class="params">(              \</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="type">const</span> ::android::sp&lt;::android::IBinder&gt;&amp; obj)</span>               \</span></span><br><span class="line"><span class="function"></span>&#123;                                                                   \</span><br><span class="line">    ::android::sp&lt;IServiceManager&gt; intr;                               \</span><br><span class="line">    <span class="keyword">if</span> (obj != <span class="literal">nullptr</span>) &#123;                                           \</span><br><span class="line">        intr = ::android::sp&lt;IServiceManager&gt;::<span class="built_in">cast</span>(                   \</span><br><span class="line">            obj-&gt;<span class="built_in">queryLocalInterface</span>(IServiceManager::descriptor));    \</span><br><span class="line">        <span class="keyword">if</span> (intr == <span class="literal">nullptr</span>) &#123;                                      \</span><br><span class="line">            intr = ::android::sp&lt;BpServiceManager&gt;::<span class="built_in">make</span>(obj);         \</span><br><span class="line">        &#125;                                                           \</span><br><span class="line">    &#125;                                                               \</span><br><span class="line">    <span class="keyword">return</span> intr;                                                    \</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>obj 是 BpBinder，<strong>所以 interface_cast() 最后就是返回一个 BpServiceManager 对象</strong>，</p>
<ul>
<li>在旧版本（Android 11 以前）中 BpServiceManager 是在 frameworks&#x2F;native&#x2F;libs&#x2F;binder&#x2F;IServiceManager.cpp 中手写实现；</li>
<li>新版本（Android 11 开始）是通过 AIDL 实现，生成到 out 目录中<a href="http://aospxref.com/android-12.0.0_r3/xref/prebuilts/vndk/v30/arm/include/out/soong/.intermediates/frameworks/native/libs/binder/libbinder/android_vendor.30_arm_armv7-a-neon_shared/gen/aidl/android/os/BpServiceManager.h">out&#x2F;soong&#x2F;.intermediates&#x2F;frameworks&#x2F;native&#x2F;libs&#x2F;binder&#x2F;libbinder&#x2F;XXX_shared&#x2F;gen&#x2F;aidl&#x2F;android&#x2F;os&#x2F;BpServiceManager.h</a>，具体实现是在 <a href="">out&#x2F;soong&#x2F;.intermediates&#x2F;frameworks&#x2F;native&#x2F;libs&#x2F;binder&#x2F;libbinder&#x2F;XXX_shared&#x2F;gen&#x2F;aidl&#x2F;android&#x2F;os&#x2F;IServiceManager.cpp</a>；</li>
</ul>
<p>Android 11 以前版本：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BpServiceManager</span> : <span class="keyword">public</span> BpInterface&lt;IServiceManager&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">BpServiceManager</span><span class="params">(<span class="type">const</span> sp&lt;IBinder&gt;&amp; impl)</span></span></span><br><span class="line"><span class="function">        : BpInterface&lt;IServiceManager&gt;(impl)</span></span><br><span class="line"><span class="function">    &#123;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> sp&lt;IBinder&gt; <span class="title">getService</span><span class="params">(<span class="type">const</span> String16&amp; name)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">	...</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">status_t</span> <span class="title">addService</span><span class="params">(<span class="type">const</span> String16&amp; name, <span class="type">const</span> sp&lt;IBinder&gt;&amp; service,</span></span></span><br><span class="line"><span class="params"><span class="function">                                <span class="type">bool</span> allowIsolated, <span class="type">int</span> dumpsysPriority)</span> </span>&#123;</span><br><span class="line">        Parcel data, reply;</span><br><span class="line">        data.<span class="built_in">writeInterfaceToken</span>(IServiceManager::<span class="built_in">getInterfaceDescriptor</span>());</span><br><span class="line">        data.<span class="built_in">writeString16</span>(name);</span><br><span class="line">        data.<span class="built_in">writeStrongBinder</span>(service);</span><br><span class="line">        data.<span class="built_in">writeInt32</span>(allowIsolated ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">        data.<span class="built_in">writeInt32</span>(dumpsysPriority);</span><br><span class="line">        <span class="type">status_t</span> err = <span class="built_in">remote</span>()-&gt;<span class="built_in">transact</span>(ADD_SERVICE_TRANSACTION, data, &amp;reply);</span><br><span class="line">        <span class="keyword">return</span> err == NO_ERROR ? reply.<span class="built_in">readExceptionCode</span>() : err;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>Android 11 开始版本：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BpServiceManager</span> : <span class="keyword">public</span> ::android::BpInterface&lt;IServiceManager&gt; &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">explicit</span> <span class="title">BpServiceManager</span><span class="params">(<span class="type">const</span> ::android::sp&lt;::android::IBinder&gt;&amp; _aidl_impl)</span></span>;</span><br><span class="line">  <span class="keyword">virtual</span> ~<span class="built_in">BpServiceManager</span>() = <span class="keyword">default</span>;</span><br><span class="line">  ::android::<span class="function">binder::Status <span class="title">getService</span><span class="params">(<span class="type">const</span> ::std::string&amp; name, ::android::sp&lt;::android::IBinder&gt;* _aidl_return)</span> <span class="keyword">override</span></span>;</span><br><span class="line">  ...</span><br><span class="line">  ::android::<span class="function">binder::Status <span class="title">addService</span><span class="params">(<span class="type">const</span> ::std::string&amp; name, <span class="type">const</span> ::android::sp&lt;::android::IBinder&gt;&amp; service, <span class="type">bool</span> allowIsolated, <span class="type">int32_t</span> dumpPriority)</span> <span class="keyword">override</span></span>;</span><br><span class="line">  ...</span><br><span class="line">&#125;;  <span class="comment">// class BpServiceManager</span></span><br></pre></td></tr></table></figure>

<p>看到 BpServiceManager 父类是 BpInterface<IServiceManager>，看一下 BpServiceManager 的构造函数：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">BpServiceManager</span><span class="params">(<span class="type">const</span> sp&lt;IBinder&gt;&amp; impl)</span></span></span><br><span class="line"><span class="function">        : BpInterface&lt;IServiceManager&gt;(impl)</span></span><br><span class="line"><span class="function">    &#123;</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>在构造函数的 <strong>初始化列表</strong> 中调用了基类的 BpInterface 的构造函数：</p>
<p><a href="">frameworks&#x2F;native&#x2F;libs&#x2F;binder&#x2F;include&#x2F;binder&#x2F;IInterface.h</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> INTERFACE&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BpInterface</span> : <span class="keyword">public</span> INTERFACE, <span class="keyword">public</span> BpRefBase</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span>                    <span class="title">BpInterface</span><span class="params">(<span class="type">const</span> sp&lt;IBinder&gt;&amp; remote)</span></span>;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> INTERFACE&gt;</span><br><span class="line"><span class="keyword">inline</span> BpInterface&lt;INTERFACE&gt;::<span class="built_in">BpInterface</span>(<span class="type">const</span> sp&lt;IBinder&gt;&amp; remote)</span><br><span class="line">    : <span class="built_in">BpRefBase</span>(remote)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>BpInterface 调用了基类 BpRefBase 的构造函数，该构造函数位于 Binder.cpp 中；</p>
<p><a href="">frameworks&#x2F;native&#x2F;libs&#x2F;binder&#x2F;include&#x2F;binder&#x2F;Binder.h</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BpRefBase</span> : <span class="keyword">public</span> <span class="keyword">virtual</span> RefBase</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span>                <span class="title">BpRefBase</span><span class="params">(<span class="type">const</span> sp&lt;IBinder&gt;&amp; o)</span></span>;</span><br><span class="line">    <span class="keyword">virtual</span>                 ~<span class="built_in">BpRefBase</span>();</span><br></pre></td></tr></table></figure>

<p>看一下构造函数实现：</p>
<p><a href="">frameworks&#x2F;native&#x2F;libs&#x2F;binder&#x2F;Binder.cpp</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">BpRefBase::<span class="built_in">BpRefBase</span>(<span class="type">const</span> sp&lt;IBinder&gt;&amp; o)</span><br><span class="line">    : <span class="built_in">mRemote</span>(o.<span class="built_in">get</span>()), <span class="built_in">mRefs</span>(<span class="literal">nullptr</span>), <span class="built_in">mState</span>(<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">extendObjectLifetime</span>(OBJECT_LIFETIME_WEAK);</span><br><span class="line">    <span class="keyword">if</span> (mRemote) &#123;</span><br><span class="line">        mRemote-&gt;<span class="built_in">incStrong</span>(<span class="keyword">this</span>);           <span class="comment">// Removed on first IncStrong().</span></span><br><span class="line">        mRefs = mRemote-&gt;<span class="built_in">createWeak</span>(<span class="keyword">this</span>);  <span class="comment">// Held for our entire lifetime.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 BpRefBase 的初始化列表中 mRemote(o.get()), 最终就是mRemote &#x3D; new BpBinder(0)，即 BpServiceManager 对象初始化过程中，比较重要工作的是类 BpRefBase 的 mRemote 指向小结 2.2 getContextObject() 的 <code>BpBinder::create(0);</code> ，从而 BpServiceManager 能够利用 Binder 进行通信。</p>
<h3 id="2-4-ServiceManagerShim"><a href="#2-4-ServiceManagerShim" class="headerlink" title="2.4 ServiceManagerShim"></a>2.4 ServiceManagerShim</h3><p>在 defaultServiceManager 函数中，通过 new 的方式直接初始化一个 ServiceManagerShim 指针对象，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// frameworks/native/libs/binder/IServiceManager.cpp</span></span><br><span class="line">[[clang::no_destroy]] <span class="type">static</span> sp&lt;IServiceManager&gt; gDefaultServiceManager;</span><br><span class="line"><span class="function">sp&lt;IServiceManager&gt; <span class="title">defaultServiceManager</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::<span class="built_in">call_once</span>(gSmOnce, []() &#123;</span><br><span class="line">        sp&lt;AidlServiceManager&gt; sm = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">while</span> (sm == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="comment">// 获取 AidlServiceManager</span></span><br><span class="line">            sm = <span class="built_in">interface_cast</span>&lt;AidlServiceManager&gt;(ProcessState::<span class="built_in">self</span>()-&gt;<span class="built_in">getContextObject</span>(<span class="literal">nullptr</span>));</span><br><span class="line">            ...</span><br><span class="line"></span><br><span class="line">        gDefaultServiceManager = <span class="keyword">new</span> <span class="built_in">ServiceManagerShim</span>(sm);</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看一下 ServiceManagerShim 的定义：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// frameworks/native/libs/binder/IServiceManager.cpp</span></span><br><span class="line"><span class="comment">// From the old libbinder IServiceManager interface to IServiceManager.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ServiceManagerShim</span> : <span class="keyword">public</span> IServiceManager</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">ServiceManagerShim</span> <span class="params">(<span class="type">const</span> sp&lt;AidlServiceManager&gt;&amp; impl)</span></span>;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：此处的父类 IServiceManager 并非 <a href="https://android.googlesource.com/platform/frameworks/native/+/refs/tags/android-12.1.0_r4/libs/binder/IServiceManager.cpp">frameworks&#x2F;native&#x2F;libs&#x2F;binder&#x2F;IServiceManager.cpp</a>，和小结 2.3 所述一样，应该是 namespace 为 <code>android::os::IServiceManager</code> 的  <a href="https://android.googlesource.com/platform/frameworks/native/+/refs/tags/android-12.1.0_r4/libs/binder/aidl/android/os/IServiceManager.aidl">frameworks&#x2F;native&#x2F;libs&#x2F;binder&#x2F;aidl&#x2F;android&#x2F;os&#x2F;IServiceManager.aidl</a> 生成的 IServiceManager.cpp；</p>
<p>再来看一下 ServiceManagerShim 的构造函数：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// frameworks/native/libs/binder/IServiceManager.cpp</span></span><br><span class="line">ServiceManagerShim::<span class="built_in">ServiceManagerShim</span>(<span class="type">const</span> sp&lt;AidlServiceManager&gt;&amp; impl)</span><br><span class="line"> : <span class="built_in">mTheRealServiceManager</span>(impl)</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure>

<p><code>mTheRealServiceManager</code> 也是 <code>android::os::IServiceManager</code> 类型的实例，也是在 IServiceManager.aidl 生成的 IServiceManager.cpp 中定义的，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    sp&lt;AidlServiceManager&gt; mTheRealServiceManager;</span><br></pre></td></tr></table></figure>

<p>可以看出 mTheRealServiceManager 就是一个 AidlServiceManager 实例，并且在 ServiceManagerShim 实例化时赋值；</p>
<p>那么 ServiceManagerShim 什么时候实例化呢？是在文中所述的 defaultServiceManager() 中：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">sp&lt;IServiceManager&gt; <span class="title">defaultServiceManager</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">            sm = <span class="built_in">interface_cast</span>&lt;AidlServiceManager&gt;(ProcessState::<span class="built_in">self</span>()-&gt;<span class="built_in">getContextObject</span>(<span class="literal">nullptr</span>));</span><br><span class="line">            ...</span><br><span class="line">        gDefaultServiceManager = sp&lt;ServiceManagerShim&gt;::<span class="built_in">make</span>(sm);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从小结 2.3 可知，此处的 sm 相当于 <code>new BpServiceManager(new BpBinder(0))</code>，因此可知，在最终返回的这个 ServiceManagerShim 对象中，有一个指针参数 mTheRealServiceManager 是指向 new BpServiceManager(new BpBinder(0)) 的；</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// frameworks/native/libs/binder/IServiceManager.cpp</span></span><br><span class="line">ServiceManagerShim::<span class="built_in">ServiceManagerShim</span>(<span class="type">const</span> sp&lt;AidlServiceManager&gt;&amp; impl)</span><br><span class="line"> : <span class="built_in">mTheRealServiceManager</span>(impl)</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-4-总结"><a href="#2-4-总结" class="headerlink" title="2.4 总结"></a>2.4 总结</h3><p><strong>ProcessState::self()</strong> 主要工作：</p>
<ul>
<li>调用 init() 创建一个 ProcessState 对象；</li>
<li>在 ProcessState 构造函数中调用 open() 打开 binder 驱动；</li>
<li>调用 mmap() 把内核空间虚拟内存和用户空间虚拟内存映射到同一块物理内存中；</li>
<li>设置当前进程最大的 Binder 线程数量 为 15；</li>
</ul>
<p><strong>getContextObject()</strong> 主要工作：</p>
<ul>
<li>当 handle 值（此处值为 0）所对应的 IBinder 不存在或弱引用无效时会创建 BpBinder，否则直接获取；</li>
</ul>
<p><strong>interface_cast()</strong> 主要工作：</p>
<ul>
<li>返回一个 BpServiceManager 对象；</li>
<li>BpServiceManager 通过继承接口 <code>IServiceManager</code> 实现了接口中的业务逻辑函数；</li>
<li>通过成员变量<code>mRemote</code>&#x3D; new BpBinder(0) 进行 Binder 通信工作；</li>
<li>BpBinder 通过 handler 来指向所对应 BBinder, 在整个 Binder 系统中 <code>handle=0</code> 代表 ServiceManager 所对应的 BBinder；</li>
</ul>
<p><strong>ServiceManagerShim()</strong> 主要工作：</p>
<ul>
<li>有一个指针参数 mTheRealServiceManager 指向 BpServiceManager；</li>
</ul>
<p><strong>defaultServiceManager</strong> 函数主要：</p>
<ul>
<li>返回一个 ServiceManagerShim 对象指针，这个对象指针继承自 android::IServiceManager；</li>
<li>这个 ServiceManagerShim 对象指针中，有一个指针参数 mTheRealServiceManager ，其实质是一个 aidl 对象android::os::IServiceManager 对象，此处是 BpServiceManager 对象指针；</li>
<li>BpServiceManager 对象指针初始化的时候，是以 new BpBinder(0) 为参数的，在 BpServiceManager 对象中表现为一个 mRemote 指针对象；</li>
</ul>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>Android - Binder机制(1)-驱动/JNI</title>
    <url>/2021/10/01/Android/AndroidDevelop_005_Binder01-DriverAndJNI/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>Binder 驱动分析以及 JNI 注册。</p>
</blockquote>
<span id="more"></span>

<h2 id="1-Binder-是什么？"><a href="#1-Binder-是什么？" class="headerlink" title="1. Binder 是什么？"></a>1. Binder 是什么？</h2><ul>
<li>机制：Binder 是一种进程间通信机制；</li>
<li>驱动：Binder 是一个虚拟物理设备驱动；</li>
<li>应用层：Binder 是一个能发起通信的 Binder.java 类；</li>
<li>Framework&#x2F;Native：Binder 连接了 Client、Server、ServiceManager 和 Binder 驱动程序，形成一套 C&#x2F;S 的通信架构；</li>
</ul>
<h2 id="2-Binder-有什么优势？"><a href="#2-Binder-有什么优势？" class="headerlink" title="2. Binder 有什么优势？"></a>2. Binder 有什么优势？</h2><p>Linux 进程间通信机制有：管道（匿名管道PIPE、命名管道FIFO）、信号、共享内存（无需拷贝，性能最好）、信号量（signal）、消息队列、socket（拷贝2次）；</p>
<p><a href="https://blog.csdn.net/tyuiof/article/details/108290327">更多 IPC 了解</a></p>
<table>
<thead>
<tr>
<th></th>
<th>Binder</th>
<th>共享内存</th>
<th>Socket</th>
</tr>
</thead>
<tbody><tr>
<td>性能</td>
<td>拷贝一次</td>
<td>无需拷贝</td>
<td>拷贝两次</td>
</tr>
<tr>
<td>特点</td>
<td>基于C&#x2F;S架构，易用性高，稳定性好</td>
<td>控制复杂，易用性差</td>
<td>基于C&#x2F;S架构，作为一款通用接口，其传输效率低，开销大</td>
</tr>
<tr>
<td>安全性</td>
<td>为每个APP分配UID，同时支持实名和匿名</td>
<td>依赖上层协议，访问接入点是开放的，不安全</td>
<td>依赖上层协议，访问接入点是开放的，不安全</td>
</tr>
</tbody></table>
<h3 id="2-1-传统-IPC-传输数据"><a href="#2-1-传统-IPC-传输数据" class="headerlink" title="2.1 传统 IPC 传输数据"></a>2.1 传统 IPC 传输数据</h3><p><a href="https://raw.githubusercontent.com/rangerzhou/ImageHosting/master/blog_resource/2022//IPC_Triditional.png">传统 IPC 机制</a></p>
<p><img src="https://raw.githubusercontent.com/rangerzhou/ImageHosting/master/blog_resource/2022//IPC_Triditional.png" alt="TriditionalIPC" title="传统IPC机制"></p>
<p><strong>数据传输流程</strong></p>
<ul>
<li>发送数据</li>
<li><strong>第一次 copy</strong>：通过系统调用 copy_from_user() 将数据从用户空间 copy 到内核空间</li>
<li><strong>第二次 copy</strong>：通过系统调用 copy_to_user() 将数据从内核空间 copy 到用户空间</li>
<li>接收数据</li>
</ul>
<h3 id="2-2-Binder-传输数据"><a href="#2-2-Binder-传输数据" class="headerlink" title="2.2 Binder 传输数据"></a>2.2 Binder 传输数据</h3><p><a href="https://raw.githubusercontent.com/rangerzhou/ImageHosting/master/blog_resource/2022//IPC_Binder.png">IPC_Binder</a></p>
<p><img src="https://raw.githubusercontent.com/rangerzhou/ImageHosting/master/blog_resource/2022//IPC_Binder.png" alt="IPC_Binder" title="Binder 进程间通信"></p>
<p><strong>数据传输流程</strong></p>
<ul>
<li>发送数据</li>
<li>一次 copy：通过系统调用 copy_from_user() 将数据从用户空间 copy 到内核空间，因为内核和接收方通过 mmap() 函数有一块共享内存区域，所以接收方可以直接接收数据；</li>
<li>接收数据</li>
</ul>
<h2 id="3-Linux-基础知识"><a href="#3-Linux-基础知识" class="headerlink" title="3. Linux 基础知识"></a>3. Linux 基础知识</h2><h3 id="3-1-用户空间和内核空间"><a href="#3-1-用户空间和内核空间" class="headerlink" title="3.1 用户空间和内核空间"></a>3.1 用户空间和内核空间</h3><p>内存被操作系统划分成两块：<strong>用户空间</strong>和<strong>内核空间</strong>，用户空间是用户程序代码运行的地方，内核空间是内核代码运行的地方，内核空间是所有进程共享的。为了安全，它们是隔离的，即使用户的程序崩溃了，内核也不受影响；</p>
<p><a href="https://raw.githubusercontent.com/rangerzhou/ImageHosting/master/blog_resource/2022//UserSpaceAndKernelSpace.png">用户空间和内核空间</a></p>
<p><img src="https://raw.githubusercontent.com/rangerzhou/ImageHosting/master/blog_resource/2022//UserSpaceAndKernelSpace.png" alt="UserSpaceAndKernelSpace" title="用户空间和内核空间"></p>
<p>32位系统，即2^32，即总共可访问地址为4G。内核空间为1G，用户空间为3G，在用户态下运行时，内核的1GB是不可见的，但是当进程陷入到内核时是可以访问的；</p>
<p>64位系统，低位：0～47位才是有效的可变地址（寻址空间256T），高位：48～63位全补0或全补1。一般高位全补0对应的地址空间是用户空间。高位全补1对应的是内核空间；</p>
<h3 id="3-2-mmap-内存映射"><a href="#3-2-mmap-内存映射" class="headerlink" title="3.2 mmap 内存映射"></a>3.2 mmap 内存映射</h3><p>mmap 可以将一个文件或者其它对象映射进进程的用户空间，这种情况下，可以像使用自己进程的内存一样使用这段内存。Linux 系统的 mmap 函数原型是这样的：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> *<span class="title">mmap</span><span class="params">(<span class="type">void</span> *addr,<span class="type">size_t</span> length,<span class="type">int</span> prot,<span class="type">int</span> flags,<span class="type">int</span> fd, <span class="type">off_t</span> offset)</span></span>;</span><br><span class="line"><span class="comment">// 参数addr指向欲映射的内存起始地址，通常设为 NULL，代表让系统自动选定地址，映射成功后返回该地址。</span></span><br><span class="line"><span class="comment">// 参数length表示将文件中多大的部分映射到内存</span></span><br><span class="line"><span class="comment">// 参数prot指定映射区域的读写权限</span></span><br><span class="line"><span class="comment">// 参数flags指定映射时的特性，如是否允许其他进程映射这段内存</span></span><br><span class="line"><span class="comment">// 参数fd指定映射内存的文件描述符</span></span><br><span class="line"><span class="comment">// 参数offset指定映射位置的偏移量，一般为0</span></span><br></pre></td></tr></table></figure>

<p>非 mmap 或者内存共享的 Linux IPC 机制常用的通信方式如下，数据发送进程的用户空间数据通过 copy_from_user，复制到内核空间，由于内核空间是所有进程共享，所以内核通过调用 copy_to_user 将数据写入到数据接收进程，通过两次拷贝的方式，完成了 IPC 的通信。</p>
<p>通过 mmap 或者内存共享的 Linux IPC 机制，直接将同一段内存映射到数据发送进程和数据接收进程的用户空间，这样数据发送进程只需要将数据拷贝到共享的内存区域，数据接收进程就可以直接使用数据了。</p>
<h3 id="3-3-Linux-设备驱动"><a href="#3-3-Linux-设备驱动" class="headerlink" title="3.3 Linux 设备驱动"></a>3.3 Linux 设备驱动</h3><p>这里为什么要介绍 Linux 的设备驱动相关的知识呢？因为 Binder 的重要组成部分就是 Binder 驱动设备，为了更好的理解 Binder，我们需要知道什么是 Linux 的设备驱动。</p>
<p>Linux 的设备，主要包括字符设备（如键盘，鼠标，触摸屏等），块设备（硬盘，内存，U盘等）和网络接口（网卡，蓝牙等）等，都需要驱动程序才能和系统进行通信。这些驱动程序，都挂载在 dev 目录下，如硬盘的驱动挂载在 <code>dev/sda</code> 上，内存的驱动挂载在 <code>/dev/ram</code> 上。</p>
<p>块设备和字符设备的驱动程序一般都要实现 open、close、read 和 write 等系统调用函数，这些函数都属于系统 I&#x2F;O 函数，我们就可以直接通过 open 或者 read 等 I&#x2F;O 函数，读写设备的数据。而且 dev 目录下不仅仅是挂载真实的物理设备驱动，还可以挂载<strong>虚拟设备</strong>的驱动。虚拟设备的设计主要用来实现系统的功能，虽然虚拟设备没有具体的物理设备，但是我们依然需要在驱动程序中实现 I&#x2F;O 函数，只不过虚拟设备驱动的 I&#x2F;O 函数不是对物理设备的操作，而是功能逻辑操作。网桥就是 Linux 的一个虚拟设备，Binder 也是一个挂载在 <code>dev/binder</code> 下的虚拟设备。</p>
<h2 id="4-Binder-架构设计"><a href="#4-Binder-架构设计" class="headerlink" title="4. Binder 架构设计"></a>4. Binder 架构设计</h2><p><a href="https://raw.githubusercontent.com/rangerzhou/ImageHosting/master/blog_resource/2022//binder_arch.png">Binder 驱动</a></p>
<p><img src="https://raw.githubusercontent.com/rangerzhou/ImageHosting/master/blog_resource/2022//binder_arch.png" alt="binder_driver" title="Binder 驱动"></p>
<p>Binder主要由这几部分组成：</p>
<ul>
<li>Binder 驱动设备</li>
<li>Client 端，数据发送端</li>
<li>Server 端，数据接收端</li>
<li>ServiceManager</li>
</ul>
<h3 id="4-1-Binder-驱动设备"><a href="#4-1-Binder-驱动设备" class="headerlink" title="4.1 Binder 驱动设备"></a>4.1 Binder 驱动设备</h3><p>Binder 驱动设备是真正分配内存空间用来存放通信数据的部分，在 Binder 的架构中，Clinet 端发送的数据拷贝到 Binder 驱动设备分配的内存空间中，Server 会通过 mmap 将 Binder 驱动设备中分配的内存映射到自己进程的用户空间中，映射完成后，Server 在用户空间就可以直接读取 Binder 驱动中存放数据的这段内存了。</p>
<h3 id="4-2-Client-端"><a href="#4-2-Client-端" class="headerlink" title="4.2 Client 端"></a>4.2 Client 端</h3><p>Client 端是数据发送方，它会通过 I&#x2F;O 函数，ioctl 陷入内核，通知 binder 驱动将 client 端的数据通过 copy_from_user 函数拷贝过来，并存放在 binder 驱动的内存中。</p>
<h3 id="4-3-Server-端"><a href="#4-3-Server-端" class="headerlink" title="4.3 Server 端"></a>4.3 Server 端</h3><p>Server 端是数据接收方，它接收数据的方式是映射 Binder 驱动中存放 Clinet 端数据的内存到自己的用户空间，这样就可以直接使用这段内存了。</p>
<h3 id="4-4-ServiceManager"><a href="#4-4-ServiceManager" class="headerlink" title="4.4 ServiceManager"></a>4.4 ServiceManager</h3><p>ServiceManager 是专门用来管理 Server 端的，Client 端想要和 Server 通信，必须知道 Server 的映射的内存地址，这样才能往这段内存中拷贝数据，但是我们不可能知道所有 Server 端的地址，所以这个时候，我们只需要知道 ServiceManager 的地址，在 ServiceManager 中寻找其他 Server 的地址就可以了，所以 ServiceManager 有点类似 DNS 服务器。</p>
<h2 id="5-Binder-驱动设备"><a href="#5-Binder-驱动设备" class="headerlink" title="5. Binder 驱动设备"></a>5. Binder 驱动设备</h2><p>Binder 是一个驱动，是一个 misc 设备，没有具体的硬件，本质就是一块内存，对于 Linux 来说，驱动就是一个文件（对于 Linux 一切皆文件），mmap() 函数即是把虚拟内存和物理内存（文件也是物理内存）联系起来，所以可以通过 mmap() 函数把虚拟内存和 binder 驱动联系起来。</p>
<p><a href="https://raw.githubusercontent.com/rangerzhou/ImageHosting/master/blog_resource/2022//binder_driver.png">Binder 驱动设备</a></p>
<p><img src="https://raw.githubusercontent.com/rangerzhou/ImageHosting/master/blog_resource/2022//binder_driver.png" alt="binder_driver" title="Binder 驱动"></p>
<h3 id="5-1-binder-init"><a href="#5-1-binder-init" class="headerlink" title="5.1 binder_init()"></a>5.1 binder_init()</h3><p><a href="http://androidxref.com/kernel_3.18/xref/drivers/staging/android/binder.c">kernel&#x2F;drivers&#x2F;staging&#x2F;android&#x2F;binder.c</a></p>
<p>binder 驱动和所有其他的设备驱动一样，Binder 驱动也是随着 Linux 的内核启动而一起启动的。在内核启动的过程中，只要位于 deriver 目录下的驱动程序在代码中按照规定的方式添加了初始化函数，这个驱动程序就会被内核自动加载，那么这个规定的方式是怎么样的呢？它的方式定义在 <a href="http://androidxref.com/kernel_3.18/xref/include/linux/init.h">&#x2F;include&#x2F;linux&#x2F;init.h</a> 文件中。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rootfs_initcall(fn)		__define_initcall(fn, rootfs)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> device_initcall(fn)		__define_initcall(fn, 6)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> device_initcall_sync(fn)	__define_initcall(fn, 6s)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> late_initcall(fn)		__define_initcall(fn, 7)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> late_initcall_sync(fn)		__define_initcall(fn, 7s)</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>可以看到，里面有很多 xxx_initcall 的宏定义函数，如 core_initcall，device_initcall 等，这些宏定义都按照了优先级的顺序定义的，想要内核在启动的时候，能够启动驱动程序，只需要在驱动程序的代码里面加上 xxx_initcall 的宏定义方法，就能按照优先级被内核动态加载。</p>
<p>我们看看 Binder 驱动的源码，它位于 <code>/drivers/staging/</code> 目录下，我们知道 Linux 的 drivers 目录就是专门用来存放系统驱动程序的目录，它的源码里就可以看到 **device_initcall ** 这行代码，device_initcall 是最常用的一个 initcall 函数，于是内核在启动的过程中，就会自动的去加载 binder.c 驱动程序中的 binder_init 初始化函数。</p>
<p>入口函数是 device_initcall，调用到 binder_init()</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> __init <span class="title function_">binder_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> ret;</span><br><span class="line">	<span class="type">char</span> *device_name, *device_names;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">binder_device</span> *<span class="title">device</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">hlist_node</span> *<span class="title">tmp</span>;</span></span><br><span class="line">	<span class="comment">// 创建名为 binder 的单线程的工作队列</span></span><br><span class="line">	binder_deferred_workqueue = create_singlethread_workqueue(<span class="string">&quot;binder&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (!binder_deferred_workqueue)</span><br><span class="line">		<span class="keyword">return</span> -ENOMEM;</span><br><span class="line"></span><br><span class="line">	binder_debugfs_dir_entry_root = debugfs_create_dir(<span class="string">&quot;binder&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="keyword">if</span> (binder_debugfs_dir_entry_root)</span><br><span class="line">		binder_debugfs_dir_entry_proc = debugfs_create_dir(<span class="string">&quot;proc&quot;</span>,</span><br><span class="line">						 binder_debugfs_dir_entry_root);</span><br><span class="line"></span><br><span class="line">	...</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * Copy the module_parameter string, because we don&#x27;t want to</span></span><br><span class="line"><span class="comment">	 * tokenize it in-place.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	device_names = kzalloc(<span class="built_in">strlen</span>(binder_devices_param) + <span class="number">1</span>, GFP_KERNEL);</span><br><span class="line">	<span class="keyword">if</span> (!device_names) &#123;</span><br><span class="line">		ret = -ENOMEM;</span><br><span class="line">		<span class="keyword">goto</span> err_alloc_device_names_failed;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">// 从 kernel/drivers/staging/android/Kconfig 文件中读取 ANDROID_BINDER_DEVICE 信息（&quot;binder&quot;）给到 device_name</span></span><br><span class="line">	<span class="built_in">strcpy</span>(device_names, binder_devices_param);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> ((device_name = strsep(&amp;device_names, <span class="string">&quot;,&quot;</span>))) &#123;</span><br><span class="line">		ret = init_binder_device(device_name); <span class="comment">// 初始化 binder</span></span><br><span class="line">		<span class="keyword">if</span> (ret)</span><br><span class="line">			<span class="keyword">goto</span> err_init_binder_device_failed;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">device_initcall(binder_init); <span class="comment">// 设备驱动入口函数</span></span><br></pre></td></tr></table></figure>

<p><strong>init_binder_device</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> __init <span class="title function_">init_binder_device</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *name)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> ret;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">binder_device</span> *<span class="title">binder_device</span>;</span></span><br><span class="line"></span><br><span class="line">	binder_device = kzalloc(<span class="keyword">sizeof</span>(*binder_device), GFP_KERNEL); <span class="comment">// 为 binder 设备分配内存(虚拟内存)</span></span><br><span class="line">	<span class="keyword">if</span> (!binder_device)</span><br><span class="line">		<span class="keyword">return</span> -ENOMEM;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 初始化设备</span></span><br><span class="line">	binder_device-&gt;miscdev.fops = &amp;binder_fops; <span class="comment">// 设备的文件操作结构，这是 file_operations 结构</span></span><br><span class="line">	binder_device-&gt;miscdev.minor = MISC_DYNAMIC_MINOR; <span class="comment">// 次设备号 动态分配</span></span><br><span class="line">	binder_device-&gt;miscdev.name = name; <span class="comment">// 设备名, &quot;binder&quot;</span></span><br><span class="line"></span><br><span class="line">	binder_device-&gt;context.binder_context_mgr_uid = INVALID_UID;</span><br><span class="line">	binder_device-&gt;context.name = name;</span><br><span class="line"></span><br><span class="line">	ret = misc_register(&amp;binder_device-&gt;miscdev); <span class="comment">// 注册 binder 为 misc 设备驱动</span></span><br><span class="line">	<span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">		kfree(binder_device);</span><br><span class="line">		<span class="keyword">return</span> ret;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 将 hlist 节点添加到 binder_devices 为表头的设备链表</span></span><br><span class="line">	hlist_add_head(&amp;binder_device-&gt;hlist, &amp;binder_devices);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在前面讲 Linux 设备时，提到过 Linux 设备主要有字符设备，块设备等，杂项设备也属于 Linux 的一种设备类型，它是嵌入设系统用的比较多的一种设备。</p>
<p><strong>binder_fops</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">binder_fops</span> =</span> &#123;</span><br><span class="line">	.owner = THIS_MODULE,</span><br><span class="line">	.poll = binder_poll,</span><br><span class="line">	.unlocked_ioctl = binder_ioctl,</span><br><span class="line">	.compat_ioctl = binder_ioctl,</span><br><span class="line">	.mmap = binder_mmap,</span><br><span class="line">	.open = binder_open,</span><br><span class="line">	.flush = binder_flush,</span><br><span class="line">	.release = binder_release,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>miscdev 定义了当前的驱动名为 binder，并指定了 open，mmap，unlocked_ioctl，compat_ioctl 等 I&#x2F;O 函数的实现函数。</p>
<p>binder_foops 是代码从 native 层调到 kernel 层的函数对应关系，比如 native 层调用 mmap() 函数，kernel 层对应的函数就是 binder_mmap()；</p>
<p>应用程序在调用 <code>ioctl</code> 进行设备控制时，最后会调用到设备注册 <code>struct file_operations</code> 结构体对象时的 <code>unlocked_ioctl</code> 或者 <code>compat_ioctl</code> 两个钩子上，具体是调用哪个钩子判断标准如下：</p>
<ul>
<li><code>compat_ioctl</code> : 32位的应用运行在64位的内核上，这个钩子被调用。</li>
<li><code>unlocked_ioctl</code>: 64位的应用运行在64位的内核或者32位的应用运行在32位的内核上，则调用这个钩子。<br>Binder 做为 Android 中进程间高效通信的核心组件，其底层是以 misc 设备驱动的形式实现的，但它本身并没有实现 <code>read</code>,<code>write</code> 操作，所有的控制都是通过 <code>ioctl</code> 操作来实现。在 Binder 驱动的 <code>struct file_operations</code> 定义中可见，它的 <code>compat_ioctl</code> 和 <code>unlocked_ioctl</code> 两个钩子的的实现都是对应到 <code>binder_ioctl</code> 上的。</li>
</ul>
<p><strong>binder_device</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">binder_device</span> &#123;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">hlist_node</span> <span class="title">hlist</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">miscdevice</span> <span class="title">miscdev</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">binder_context</span> <span class="title">context</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="5-2-binder-open"><a href="#5-2-binder-open" class="headerlink" title="5.2 binder_open()"></a>5.2 binder_open()</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">binder_open</span><span class="params">(<span class="keyword">struct</span> inode *nodp, <span class="keyword">struct</span> file *filp)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">binder_proc</span> *<span class="title">proc</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">binder_device</span> *<span class="title">binder_dev</span>;</span></span><br><span class="line"></span><br><span class="line">	binder_debug(BINDER_DEBUG_OPEN_CLOSE, <span class="string">&quot;binder_open: %d:%d\n&quot;</span>,</span><br><span class="line">		     current-&gt;group_leader-&gt;pid, current-&gt;pid);</span><br><span class="line"></span><br><span class="line">	proc = kzalloc(<span class="keyword">sizeof</span>(*proc), GFP_KERNEL); <span class="comment">// 为 binder_proc 结构体在 kernel 分配内存空间</span></span><br><span class="line">	<span class="keyword">if</span> (proc == <span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span> -ENOMEM;</span><br><span class="line">	get_task_struct(current); <span class="comment">// 将当前进程(调用 binder_open 的进程)的 task 保存到 binder 进程的 tsk</span></span><br><span class="line">	proc-&gt;tsk = current;</span><br><span class="line">	INIT_LIST_HEAD(&amp;proc-&gt;todo); <span class="comment">// 初始化 todo 列表（目标任务）</span></span><br><span class="line">	init_waitqueue_head(&amp;proc-&gt;wait); <span class="comment">// 初始化 wait 队列（当前进程处理的任务）</span></span><br><span class="line">	proc-&gt;default_priority = task_nice(current); <span class="comment">// 将当前进程的 nice 值转换为进程优先级</span></span><br><span class="line">	binder_dev = container_of(filp-&gt;private_data, <span class="keyword">struct</span> binder_device,</span><br><span class="line">				  miscdev);</span><br><span class="line">	proc-&gt;context = &amp;binder_dev-&gt;context;</span><br><span class="line"></span><br><span class="line">	binder_lock(__func__); <span class="comment">// 同步锁，因为 binder 支持多线程访问</span></span><br><span class="line"></span><br><span class="line">	binder_stats_created(BINDER_STAT_PROC); <span class="comment">// binder_proc 对象创建数加1</span></span><br><span class="line">	hlist_add_head(&amp;proc-&gt;proc_node, &amp;binder_procs); <span class="comment">// 将 proc_node 节点添加到 binder_procs 的队列头部</span></span><br><span class="line">	proc-&gt;pid = current-&gt;group_leader-&gt;pid; <span class="comment">// 进程 pid</span></span><br><span class="line">	INIT_LIST_HEAD(&amp;proc-&gt;delivered_death);  <span class="comment">// 初始化已分发的死亡通知列表</span></span><br><span class="line">	filp-&gt;private_data = proc; <span class="comment">// 将 binder_proc 与 filp 关联起来，这样下次通过 filp 就能找到这个 proc 了</span></span><br><span class="line"></span><br><span class="line">	binder_unlock(__func__); <span class="comment">// 释放同步锁</span></span><br><span class="line">	...</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>binder_proc</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">binder_proc</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">hlist_node</span> <span class="title">proc_node</span>;</span> <span class="comment">// 进程节点</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rb_root</span> <span class="title">threads</span>;</span> <span class="comment">// binder_thread红黑树的根节点</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rb_root</span> <span class="title">nodes</span>;</span> <span class="comment">// binder_node红黑树的根节点</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rb_root</span> <span class="title">refs_by_desc</span>;</span> <span class="comment">// binder_ref红黑树的根节点(以 handle为 key)</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rb_root</span> <span class="title">refs_by_node</span>;</span> <span class="comment">// binder_ref红黑树的根节点（以 ptr为 key）</span></span><br><span class="line">    <span class="type">int</span> pid; <span class="comment">// 相应进程 id</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">vm_area_struct</span> *<span class="title">vma</span>;</span> <span class="comment">// 指向进程虚拟地址空间的指针</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mm_struct</span> *<span class="title">vma_vm_mm</span>;</span> <span class="comment">// 相应进程的内存结构体</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">tsk</span>;</span> <span class="comment">// 相应进程的 task结构体</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">files_struct</span> *<span class="title">files</span>;</span> <span class="comment">// 相应进程的文件结构体</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">hlist_node</span> <span class="title">deferred_work_node</span>;</span></span><br><span class="line">    <span class="type">int</span> deferred_work;</span><br><span class="line">    <span class="type">void</span> *buffer; <span class="comment">// 内核空间的起始地址</span></span><br><span class="line">    <span class="type">ptrdiff_t</span> user_buffer_offset; <span class="comment">// 内核空间与用户空间的地址偏移量</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">buffers</span>;</span> <span class="comment">// 所有的 buffer</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rb_root</span> <span class="title">free_buffers</span>;</span> <span class="comment">// 空闲的 buffer</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rb_root</span> <span class="title">allocated_buffers</span>;</span> <span class="comment">// 已分配的 buffer</span></span><br><span class="line">    <span class="type">size_t</span> free_async_space; <span class="comment">// 异步的可用空闲空间大小</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">page</span> **<span class="title">pages</span>;</span> <span class="comment">// 指向物理内存页指针的指针</span></span><br><span class="line">    <span class="type">size_t</span> buffer_size; <span class="comment">// 映射的内核空间大小</span></span><br><span class="line">    <span class="type">uint32_t</span> buffer_free; <span class="comment">// 可用内存总大小</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">todo</span>;</span> <span class="comment">// 进程将要做的事</span></span><br><span class="line">    <span class="type">wait_queue_head_t</span> wait; <span class="comment">// 等待队列</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">binder_stats</span> <span class="title">stats</span>;</span> <span class="comment">// binder统计信息</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">delivered_death</span>;</span> <span class="comment">// 已分发的死亡通知</span></span><br><span class="line">    <span class="type">int</span> max_threads; <span class="comment">// 最大线程数</span></span><br><span class="line">    <span class="type">int</span> requested_threads; <span class="comment">// 请求的线程数</span></span><br><span class="line">    <span class="type">int</span> requested_threads_started; <span class="comment">// 已启动的请求线程数</span></span><br><span class="line">    <span class="type">int</span> ready_threads; <span class="comment">// 准备就绪的线程个数</span></span><br><span class="line">    <span class="type">long</span> default_priority; <span class="comment">// 默认优先级</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dentry</span> *<span class="title">debugfs_entry</span>;</span> <span class="class"><span class="keyword">struct</span> <span class="title">binder_context</span> *<span class="title">context</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="5-3-binder-mmap"><a href="#5-3-binder-mmap" class="headerlink" title="5.3 binder_mmap()"></a>5.3 binder_mmap()</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">binder_mmap</span><span class="params">(<span class="keyword">struct</span> file *filp, <span class="keyword">struct</span> vm_area_struct *vma)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> ret;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">vm_struct</span> *<span class="title">area</span>;</span> <span class="comment">// 内核的虚拟内存，vma 是进程的虚拟内存</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">binder_proc</span> *<span class="title">proc</span> =</span> filp-&gt;private_data;</span><br><span class="line">	<span class="type">const</span> <span class="type">char</span> *failure_string;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">binder_buffer</span> *<span class="title">buffer</span>;</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (proc-&gt;tsk != current)</span><br><span class="line">		<span class="keyword">return</span> -EINVAL;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 保证映射内存大小不超过 4M（是驱动定的，实际上应用层定的是 1M-8K）</span></span><br><span class="line">	<span class="keyword">if</span> ((vma-&gt;vm_end - vma-&gt;vm_start) &gt; SZ_4M)</span><br><span class="line">		vma-&gt;vm_end = vma-&gt;vm_start + SZ_4M;</span><br><span class="line">	...</span><br><span class="line">	mutex_lock(&amp;binder_mmap_lock); <span class="comment">// 同步锁，保证一次只有一个进程分配内存，保证多进程间的并发访问</span></span><br><span class="line">	<span class="comment">// 是否已经做过映射，执行过则进入 if，goto 跳转，释放同步锁后结束 binder_mmap 方法</span></span><br><span class="line">    <span class="keyword">if</span> (proc-&gt;buffer) &#123;</span><br><span class="line">		ret = -EBUSY;</span><br><span class="line">		failure_string = <span class="string">&quot;already mapped&quot;</span>;</span><br><span class="line">		<span class="keyword">goto</span> err_already_mapped;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 采用 VM_IOREMAP方式，分配一个连续的内核虚拟内存，与进程虚拟内存大小一致</span></span><br><span class="line">	area = get_vm_area(vma-&gt;vm_end - vma-&gt;vm_start, VM_IOREMAP);</span><br><span class="line">	<span class="keyword">if</span> (area == <span class="literal">NULL</span>) &#123; <span class="comment">// 内存分配不成功直接报错</span></span><br><span class="line">		ret = -ENOMEM;</span><br><span class="line">		failure_string = <span class="string">&quot;get_vm_area&quot;</span>;</span><br><span class="line">		<span class="keyword">goto</span> err_get_vm_area_failed;</span><br><span class="line">	&#125;</span><br><span class="line">	proc-&gt;buffer = area-&gt;addr; <span class="comment">// 将 proc 中的 buffer 指针指向这块内核的虚拟内存</span></span><br><span class="line">	<span class="comment">// 计算出用户空间和内核空间的地址偏移量。地址偏移量 = 用户虚拟内存地址 - 内核虚拟内存地址</span></span><br><span class="line">	proc-&gt;user_buffer_offset = vma-&gt;vm_start - (<span class="type">uintptr_t</span>)proc-&gt;buffer;</span><br><span class="line">	mutex_unlock(&amp;binder_mmap_lock); <span class="comment">// 释放锁</span></span><br><span class="line">	...</span><br><span class="line">	<span class="comment">// 分配物理页的指针数组，数组大小为 vma 的等效 page 个数</span></span><br><span class="line">	proc-&gt;pages = kzalloc(<span class="keyword">sizeof</span>(proc-&gt;pages[<span class="number">0</span>]) * ((vma-&gt;vm_end - vma-&gt;vm_start) / PAGE_SIZE), GFP_KERNEL);</span><br><span class="line">	<span class="keyword">if</span> (proc-&gt;pages == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		ret = -ENOMEM;</span><br><span class="line">		failure_string = <span class="string">&quot;alloc page array&quot;</span>;</span><br><span class="line">		<span class="keyword">goto</span> err_alloc_pages_failed;</span><br><span class="line">	&#125;</span><br><span class="line">	proc-&gt;buffer_size = vma-&gt;vm_end - vma-&gt;vm_start;</span><br><span class="line"></span><br><span class="line">	vma-&gt;vm_ops = &amp;binder_vm_ops;</span><br><span class="line">	vma-&gt;vm_private_data = proc;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 分配物理页面，同时映射到内核空间和进程空间，先分配 1 个物理页</span></span><br><span class="line">	<span class="keyword">if</span> (binder_update_page_range(proc, <span class="number">1</span>, proc-&gt;buffer, proc-&gt;buffer + PAGE_SIZE, vma)) &#123;</span><br><span class="line">		ret = -ENOMEM;</span><br><span class="line">		failure_string = <span class="string">&quot;alloc small buf&quot;</span>;</span><br><span class="line">		<span class="keyword">goto</span> err_alloc_small_buf_failed;</span><br><span class="line">	&#125;</span><br><span class="line">	buffer = proc-&gt;buffer;</span><br><span class="line">	INIT_LIST_HEAD(&amp;proc-&gt;buffers);</span><br><span class="line">	list_add(&amp;buffer-&gt;entry, &amp;proc-&gt;buffers); <span class="comment">// 将 buffer 连入 buffers 链表中</span></span><br><span class="line">	<span class="comment">// 上面 binder_update_page_range 已经分配内存了，此处表示此内存可用</span></span><br><span class="line">    buffer-&gt;<span class="built_in">free</span> = <span class="number">1</span>;</span><br><span class="line">	binder_insert_free_buffer(proc, buffer); <span class="comment">// 将 buffer 插入 proc-&gt;free_buffers 链表中</span></span><br><span class="line">	proc-&gt;free_async_space = proc-&gt;buffer_size / <span class="number">2</span>; <span class="comment">// 异步的可用空闲空间大小</span></span><br><span class="line">	barrier();</span><br><span class="line">	proc-&gt;files = get_files_struct(current);</span><br><span class="line">	proc-&gt;vma = vma;</span><br><span class="line">	proc-&gt;vma_vm_mm = vma-&gt;vm_mm;</span><br><span class="line"></span><br><span class="line">	...</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>struct vm_area_struct *vma： 表示用户空间的一段虚拟内存区域；</li>
<li>struct vm_struct *area：表示内核空间的一段连续的虚拟内存区域；</li>
</ul>
<p>新版本内核代码 4.19 已经不再此处映射了：<a href="https://zhuanlan.zhihu.com/p/159189816">https://zhuanlan.zhihu.com/p/159189816</a></p>
<p><strong>binder_update_page_range</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">binder_update_page_range</span><span class="params">(<span class="keyword">struct</span> binder_proc *proc, <span class="type">int</span> allocate,</span></span><br><span class="line"><span class="params">				    <span class="type">void</span> *start, <span class="type">void</span> *end,</span></span><br><span class="line"><span class="params">				    <span class="keyword">struct</span> vm_area_struct *vma)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">void</span> *page_addr;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> user_page_addr;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">page</span> **<span class="title">page</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">mm_struct</span> *<span class="title">mm</span>;</span></span><br><span class="line">	...</span><br><span class="line">	<span class="comment">// allocate 为 1，代表分配内存过程；如果为 0 则代表释放内存过程</span></span><br><span class="line">	<span class="keyword">if</span> (allocate == <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">goto</span> free_range;</span><br><span class="line">	...</span><br><span class="line">	<span class="keyword">for</span> (page_addr = start; page_addr &lt; end; page_addr += PAGE_SIZE) &#123;</span><br><span class="line">		<span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">		page = &amp;proc-&gt;pages[(page_addr - proc-&gt;buffer) / PAGE_SIZE];</span><br><span class="line"></span><br><span class="line">		BUG_ON(*page);</span><br><span class="line">        <span class="comment">// 分配一个 page(4K) 的物理内存</span></span><br><span class="line">		*page = alloc_page(GFP_KERNEL | __GFP_HIGHMEM | __GFP_ZERO);</span><br><span class="line">		<span class="keyword">if</span> (*page == <span class="literal">NULL</span>) &#123;</span><br><span class="line">			pr_err(<span class="string">&quot;%d: binder_alloc_buf failed for page at %p\n&quot;</span>,</span><br><span class="line">				proc-&gt;pid, page_addr);</span><br><span class="line">			<span class="keyword">goto</span> err_alloc_page_failed;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 把内核空间的虚拟内存映射到上面分配的 4K 物理内存</span></span><br><span class="line">		ret = map_kernel_range_noflush((<span class="type">unsigned</span> <span class="type">long</span>)page_addr,</span><br><span class="line">					PAGE_SIZE, PAGE_KERNEL, page);</span><br><span class="line">		...</span><br><span class="line">		user_page_addr =</span><br><span class="line">			(<span class="type">uintptr_t</span>)page_addr + proc-&gt;user_buffer_offset;</span><br><span class="line">		<span class="comment">// 把用户空间的虚拟内存映射到上面分配的 4K 物理内存</span></span><br><span class="line">		ret = vm_insert_page(vma, user_page_addr, page[<span class="number">0</span>]);</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-4-binder-ioctl"><a href="#5-4-binder-ioctl" class="headerlink" title="5.4 binder_ioctl"></a>5.4 binder_ioctl</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">long</span> <span class="title function_">binder_ioctl</span><span class="params">(<span class="keyword">struct</span> file *filp, <span class="type">unsigned</span> <span class="type">int</span> cmd, <span class="type">unsigned</span> <span class="type">long</span> arg)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> ret;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">binder_proc</span> *<span class="title">proc</span> =</span> filp-&gt;private_data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">binder_thread</span> *<span class="title">thread</span>;</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> size = _IOC_SIZE(cmd);</span><br><span class="line">	<span class="type">void</span> __user *ubuf = (<span class="type">void</span> __user *)arg;</span><br><span class="line">	...</span><br><span class="line">    <span class="comment">// 进入休眠状态，直到中断唤醒</span></span><br><span class="line">	ret = wait_event_interruptible(binder_user_error_wait, binder_stop_on_user_error &lt; <span class="number">2</span>); </span><br><span class="line">	<span class="keyword">if</span> (ret)</span><br><span class="line">		<span class="keyword">goto</span> err_unlocked;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 根据当前进程的 pid，从 binder_proc 中查找 binder_thread, </span></span><br><span class="line">	<span class="comment">// 如果当前线程已经加入到 proc 的线程队列则直接返回，如果不存在则创建 binder_thread，并将当前线程添加到当前的 proc</span></span><br><span class="line">	thread = binder_get_thread(proc);</span><br><span class="line">	<span class="keyword">if</span> (thread == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		ret = -ENOMEM;</span><br><span class="line">		<span class="keyword">goto</span> err;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 进行 binder 的读写操作</span></span><br><span class="line">	<span class="keyword">switch</span> (cmd) &#123;</span><br><span class="line">    <span class="comment">// BINDER_WRITE_READ 这个用的比较多，比较重要</span></span><br><span class="line">	<span class="keyword">case</span> BINDER_WRITE_READ:</span><br><span class="line">		ret = binder_ioctl_write_read(filp, cmd, arg, thread);</span><br><span class="line">		<span class="keyword">if</span> (ret)</span><br><span class="line">			<span class="keyword">goto</span> err;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> BINDER_SET_MAX_THREADS: &#123;</span><br><span class="line">        <span class="type">int</span> max_threads;</span><br><span class="line">        <span class="keyword">if</span> (copy_from_user(&amp;max_threads, ubuf,</span><br><span class="line">                   <span class="keyword">sizeof</span>(max_threads))) &#123;</span><br><span class="line">            ret = -EINVAL;</span><br><span class="line">            <span class="keyword">goto</span> err;</span><br><span class="line">        &#125;</span><br><span class="line">        binder_inner_proc_lock(proc);</span><br><span class="line">        proc-&gt;max_threads = max_threads;</span><br><span class="line">        binder_inner_proc_unlock(proc);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> BINDER_SET_CONTEXT_MGR_EXT: &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">flat_binder_object</span> <span class="title">fbo</span>;</span></span><br><span class="line">        <span class="keyword">if</span> (copy_from_user(&amp;fbo, ubuf, <span class="keyword">sizeof</span>(fbo))) &#123;</span><br><span class="line">            ret = -EINVAL;</span><br><span class="line">            <span class="keyword">goto</span> err;</span><br><span class="line">        &#125;</span><br><span class="line">        ret = binder_ioctl_set_ctx_mgr(filp, &amp;fbo);</span><br><span class="line">        <span class="keyword">if</span> (ret)</span><br><span class="line">            <span class="keyword">goto</span> err;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> BINDER_SET_CONTEXT_MGR:</span><br><span class="line">        ret = binder_ioctl_set_ctx_mgr(filp, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span> (ret)</span><br><span class="line">            <span class="keyword">goto</span> err;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> BINDER_THREAD_EXIT:</span><br><span class="line">		binder_debug(BINDER_DEBUG_THREADS, <span class="string">&quot;%d:%d exit\n&quot;</span>,</span><br><span class="line">			     proc-&gt;pid, thread-&gt;pid);</span><br><span class="line">		binder_free_thread(proc, thread);</span><br><span class="line">		thread = <span class="literal">NULL</span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> BINDER_VERSION: &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">binder_version</span> __<span class="title">user</span> *<span class="title">ver</span> =</span> ubuf;</span><br><span class="line">        <span class="keyword">if</span> (size != <span class="keyword">sizeof</span>(<span class="keyword">struct</span> binder_version)) &#123;</span><br><span class="line">            ret = -EINVAL;</span><br><span class="line">            <span class="keyword">goto</span> err;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (put_user(BINDER_CURRENT_PROTOCOL_VERSION,</span><br><span class="line">                 &amp;ver-&gt;protocol_version)) &#123;</span><br><span class="line">            ret = -EINVAL;</span><br><span class="line">            <span class="keyword">goto</span> err;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;...</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		ret = -EINVAL;</span><br><span class="line">		<span class="keyword">goto</span> err;</span><br><span class="line">	&#125;</span><br><span class="line">err:</span><br><span class="line">    <span class="keyword">if</span> (thread)</span><br><span class="line">        thread-&gt;looper_need_return = <span class="literal">false</span>; <span class="comment">// 注意此处又把 looper_need_return 设置为了 true</span></span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>__user：<code>__user</code> 是一个宏，它告诉编译器不应该解除这个指针的引用（因为在当前地址空间中它是没有意义的），<code>(void __user *)arg</code> 表示 <code>arg</code> 是一个用户空间地址，不能直接进行拷贝，必须使用 <code>copy_from_user/copy_to_user</code> 等函数拷贝；</li>
<li>wait_event_interruptible：也是一个宏，它是用来挂起进程直到满足判断条件的，<code>binder_stop_on_user_error</code> 是一个全局变量，它的初始值为 0，<code>binder_user_error_wait</code> 是一个等待队列，在正常情况下，<code>binder_stop_on_user_error &lt; 2</code> 这个条件是成立的，所以不会进入挂起状态，而当<code>binder</code> 因为错误而停止后，调用 <code>binder_ioctl</code>，则会挂起进程，直到其他进程通过 <code>wake_up_interruptible</code> 来唤醒 <code>binder_user_error_wait</code> 队列，并且满足 <code>binder_stop_on_user_error &lt; 2</code> 这个条件，<code>binder_ioctl</code> 才会继续往后运行；</li>
</ul>
<p><code>接着来看一下 binder_get_thread()</code>；</p>
<h4 id="binder-get-thread"><a href="#binder-get-thread" class="headerlink" title="binder_get_thread()"></a>binder_get_thread()</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// binder.c</span></span><br><span class="line"><span class="type">static</span> <span class="keyword">struct</span> binder_thread *<span class="title function_">binder_get_thread</span><span class="params">(<span class="keyword">struct</span> binder_proc *proc)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">binder_thread</span> *<span class="title">thread</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">binder_thread</span> *<span class="title">new_thread</span>;</span></span><br><span class="line">    binder_inner_proc_lock(proc);</span><br><span class="line">    thread = binder_get_thread_ilocked(proc, <span class="literal">NULL</span>);</span><br><span class="line">    binder_inner_proc_unlock(proc);</span><br><span class="line">    <span class="keyword">if</span> (!thread) &#123;</span><br><span class="line">        new_thread = kzalloc(<span class="keyword">sizeof</span>(*thread), GFP_KERNEL);</span><br><span class="line">        <span class="keyword">if</span> (new_thread == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        binder_inner_proc_lock(proc);</span><br><span class="line">        thread = binder_get_thread_ilocked(proc, new_thread);</span><br><span class="line">        binder_inner_proc_unlock(proc);</span><br><span class="line">        <span class="keyword">if</span> (thread != new_thread)</span><br><span class="line">            kfree(new_thread);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> thread;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>先调用 <code>binder_get_thread_ilocked()</code> 获取线程，如果获取不到，则通过 <code>kzalloc()</code> 分配内存并把所分配内存对象的引用传递给 new_thread，然后再次通过<code>binder_get_thread_ilocked(proc, new_thread)</code>来获取 thread，</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// binder.c</span></span><br><span class="line"><span class="type">static</span> <span class="keyword">struct</span> binder_thread *<span class="title function_">binder_get_thread_ilocked</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="keyword">struct</span> binder_proc *proc, <span class="keyword">struct</span> binder_thread *new_thread)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">binder_thread</span> *<span class="title">thread</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rb_node</span> *<span class="title">parent</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rb_node</span> **<span class="title">p</span> =</span> &amp;proc-&gt;threads.rb_node;</span><br><span class="line">    <span class="keyword">while</span> (*p) &#123;</span><br><span class="line">        parent = *p;</span><br><span class="line">        thread = rb_entry(parent, <span class="keyword">struct</span> binder_thread, rb_node);</span><br><span class="line">        <span class="keyword">if</span> (current-&gt;pid &lt; thread-&gt;pid)</span><br><span class="line">            p = &amp;(*p)-&gt;rb_left;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (current-&gt;pid &gt; thread-&gt;pid)</span><br><span class="line">            p = &amp;(*p)-&gt;rb_right;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> thread;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!new_thread)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    thread = new_thread;</span><br><span class="line">    binder_stats_created(BINDER_STAT_THREAD);</span><br><span class="line">    thread-&gt;proc = proc;</span><br><span class="line">    thread-&gt;pid = current-&gt;pid;</span><br><span class="line">    get_task_struct(current);</span><br><span class="line">    thread-&gt;task = current;</span><br><span class="line">    <span class="type">atomic_set</span>(&amp;thread-&gt;tmp_ref, <span class="number">0</span>);</span><br><span class="line">    init_waitqueue_head(&amp;thread-&gt;wait);</span><br><span class="line">    INIT_LIST_HEAD(&amp;thread-&gt;todo);</span><br><span class="line">    rb_link_node(&amp;thread-&gt;rb_node, parent, p);</span><br><span class="line">    rb_insert_color(&amp;thread-&gt;rb_node, &amp;proc-&gt;threads);</span><br><span class="line">    thread-&gt;looper_need_return = <span class="literal">true</span>; <span class="comment">// 此处配置了 looper_need_return 为 true</span></span><br><span class="line">    thread-&gt;return_error.work.type = BINDER_WORK_RETURN_ERROR;</span><br><span class="line">    thread-&gt;return_error.cmd = BR_OK;</span><br><span class="line">    thread-&gt;reply_error.work.type = BINDER_WORK_RETURN_ERROR;</span><br><span class="line">    thread-&gt;reply_error.cmd = BR_OK;</span><br><span class="line">    INIT_LIST_HEAD(&amp;new_thread-&gt;waiting_thread_node); <span class="comment">// 初始化链表（next/prev 指针都指向自己）</span></span><br><span class="line">    <span class="keyword">return</span> thread;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到函数先是根据 proc 获取对应红黑树上的节点，如果获取不到则返回 thread（为 NULL），分配内存后再次进入此函数，执行 <code>while()</code> 循环后面的代码，把 new_thread 传递给 thread，并初始化了一些参数，<font color=red><strong>注意此处 <code>looper_need_return = true</code></strong></font>，这个参数在 <code>binder_thread_read()</code>判断是否休眠时会用到，不过<font color=red><strong>在 <code>binder_ioctl()</code> 的结尾处又把 looper_need_return 配置为了 false</strong></font>，所以应用程序在刚启动创建 binder 线程池时，先启动了一个 binder 主线程，在主线程第一次调用 binder_ioctl 时是不会阻塞在 binder_thread_read() 的，另外也初始化了 todo 和 waiting_thread_node 这两个链表；</p>
<p>继续回到 <code>binder_ioctl()</code> 函数中，BINDER_WRITE_READ 这个 case 比较重要，因为应用程序是通过 <code>ioctl(mDriverFD, BINDER_WRITE_READ, &amp;bwr)</code> 这样调用，然后就调用到了 binder_ioctl 的 BINDER_WRITE_READ 这个 case；</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">binder_ioctl_write_read</span><span class="params">(<span class="keyword">struct</span> file *filp,</span></span><br><span class="line"><span class="params">				<span class="type">unsigned</span> <span class="type">int</span> cmd, <span class="type">unsigned</span> <span class="type">long</span> arg,</span></span><br><span class="line"><span class="params">				<span class="keyword">struct</span> binder_thread *thread)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">binder_proc</span> *<span class="title">proc</span> =</span> filp-&gt;private_data;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> size = _IOC_SIZE(cmd);</span><br><span class="line">	<span class="type">void</span> __user *ubuf = (<span class="type">void</span> __user *)arg;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">binder_write_read</span> <span class="title">bwr</span>;</span></span><br><span class="line">	...</span><br><span class="line">	<span class="comment">// 把用户空间数据 ubuf 拷贝到 bwr(此次拷贝的是数据头，而非有效数据)</span></span><br><span class="line">    <span class="comment">// 这里的 copy_from_user() 方法并没有拷贝要传输的数据，而仅是拷贝了持有传输数据内存地址的 bwr https://www.bilibili.com/read/cv7592830/</span></span><br><span class="line">	<span class="keyword">if</span> (copy_from_user(&amp;bwr, ubuf, <span class="keyword">sizeof</span>(bwr))) &#123;</span><br><span class="line">		ret = -EFAULT;</span><br><span class="line">		<span class="keyword">goto</span> out;</span><br><span class="line">	&#125;</span><br><span class="line">	...</span><br><span class="line">	<span class="comment">// 当写缓存中有数据，则执行 binder 写操作</span></span><br><span class="line">	<span class="keyword">if</span> (bwr.write_size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">		ret = binder_thread_write(proc, thread,</span><br><span class="line">					  bwr.write_buffer,</span><br><span class="line">					  bwr.write_size,</span><br><span class="line">					  &amp;bwr.write_consumed);</span><br><span class="line">		trace_binder_write_done(ret);</span><br><span class="line">		<span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">			bwr.read_consumed = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">if</span> (copy_to_user(ubuf, &amp;bwr, <span class="keyword">sizeof</span>(bwr)))</span><br><span class="line">				ret = -EFAULT;</span><br><span class="line">			<span class="keyword">goto</span> out;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 当读缓存中有数据，则执行 binder 读操作</span></span><br><span class="line">	<span class="keyword">if</span> (bwr.read_size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">		ret = binder_thread_read(proc, thread, bwr.read_buffer,</span><br><span class="line">					 bwr.read_size,</span><br><span class="line">					 &amp;bwr.read_consumed,</span><br><span class="line">					 filp-&gt;f_flags &amp; O_NONBLOCK);</span><br><span class="line">		trace_binder_read_done(ret);</span><br><span class="line">		<span class="comment">// 进程 todo 队列不为空,则唤醒该队列中的线程</span></span><br><span class="line">		<span class="keyword">if</span> (!list_empty(&amp;proc-&gt;todo))</span><br><span class="line">			wake_up_interruptible(&amp;proc-&gt;wait);</span><br><span class="line">		<span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (copy_to_user(ubuf, &amp;bwr, <span class="keyword">sizeof</span>(bwr)))</span><br><span class="line">				ret = -EFAULT;</span><br><span class="line">			<span class="keyword">goto</span> out;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	...</span><br><span class="line">    <span class="comment">// 把内核空间数据 bwr 拷贝到 ubuf</span></span><br><span class="line">    <span class="keyword">if</span> (copy_to_user(ubuf, &amp;bwr, <span class="keyword">sizeof</span>(bwr))) &#123;</span><br><span class="line">		ret = -EFAULT;</span><br><span class="line">		<span class="keyword">goto</span> out;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此处的 copy_from_user 拷贝的并不是真正的有效数据，而是数据头，真正的有效数据是在其他地方拷贝的；</p>
<p>binder_ioctl_write_read 流程</p>
<ul>
<li>首先把用户空间的数据拷贝到内核空间 bwr</li>
<li>其次当 bwr 写缓存中有数据，则执行 binder 写操作。如果写失败，则再将 bwr 数据写回用户空间，并退出</li>
<li>再次当 bwr 读缓存中有数据，则执行 binder 读缓存；当读失败，再将 bwr 数据写回用户空间，并退出</li>
<li>最后把内核数据拷贝到用户空间</li>
</ul>
<h3 id="5-5-总结"><a href="#5-5-总结" class="headerlink" title="5.5 总结"></a>5.5 总结</h3><p><strong>binder_init()</strong> 主要工作：</p>
<ul>
<li>kzalloc：分配内存；</li>
<li>初始化设备；</li>
<li>hlist_add_head：将 binder_device 的 hlist 节点添加到 binder_devices 为表头的设备链表；</li>
</ul>
<p><strong>binder_open()</strong> 主要工作：</p>
<ul>
<li>为调用 binder_open 的进程创建一个 binder_proc 结构体对象 proc；</li>
<li>将当前进程信息（调用 binder_open 的进程）保存到 proc；</li>
<li>把 proc 的 proc_node 添加到 binder_procs 链表中；</li>
<li>filp-&gt;private_data &#x3D; proc：把 proc 和 filp 关联，以便下次通过 filp 找到 proc；</li>
</ul>
<p><strong>binder_mmap()</strong> 主要工作：</p>
<ul>
<li>根据用户空间的虚拟内存大小，分配一块内核的虚拟内存；</li>
<li>分配一块物理内存（4K，之所以这么小是因为现在还没有通信，等到真正通信的时候再增加，以免浪费内存）；</li>
<li>把分配的物理内存分别映射到内核空间虚拟内存和用户空间虚拟内存；</li>
</ul>
<p><strong>binder_ioctl()</strong> 主要工作：</p>
<ul>
<li>binder_ioctl() 函数负责在两个进程间收发 IPC 数据和 IPC reply 数据；</li>
</ul>
<h2 id="6-binder-JNI-注册"><a href="#6-binder-JNI-注册" class="headerlink" title="6. binder JNI 注册"></a>6. binder JNI 注册</h2><p><a href="">frameworks&#x2F;base&#x2F;cmds&#x2F;app_process&#x2F;app_main.cpp</a></p>
<p><strong>app_main.main()</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* <span class="type">const</span> argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (zygote) &#123;</span><br><span class="line">        runtime.<span class="built_in">start</span>(<span class="string">&quot;com.android.internal.os.ZygoteInit&quot;</span>, args, zygote);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (className) &#123;</span><br><span class="line">        runtime.<span class="built_in">start</span>(<span class="string">&quot;com.android.internal.os.RuntimeInit&quot;</span>, args, zygote);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><a href="">frameworks&#x2F;base&#x2F;core&#x2F;jni&#x2F;AndroidRuntime.cpp</a></p>
<p><strong>AndroidRuntime.start()</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">AndroidRuntime::start</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* className, <span class="type">const</span> Vector&lt;String8&gt;&amp; options, <span class="type">bool</span> zygote)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Register android functions.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">startReg</span>(env) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">ALOGE</span>(<span class="string">&quot;Unable to register all android natives\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>AndroidRuntime.startReg()</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*static*/</span> <span class="function"><span class="type">int</span> <span class="title">AndroidRuntime::startReg</span><span class="params">(JNIEnv* env)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">register_jni_procs</span>(gRegJNI, <span class="built_in">NELEM</span>(gRegJNI), env) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        env-&gt;<span class="built_in">PopLocalFrame</span>(<span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<p><strong>AndroidRuntime.register_jni_procs()</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">register_jni_procs</span><span class="params">(<span class="type">const</span> RegJNIRec array[], <span class="type">size_t</span> count, JNIEnv* env)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (array[i].<span class="built_in">mProc</span>(env) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">		   ...</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> RegJNIRec gRegJNI[] = &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="built_in">REG_JNI</span>(register_android_os_SystemProperties),</span><br><span class="line">        <span class="built_in">REG_JNI</span>(register_android_os_Binder),</span><br></pre></td></tr></table></figure>

<p><a href="">frameworks&#x2F;base&#x2F;core&#x2F;jni&#x2F;android_util_Binder.cpp</a></p>
<p><strong>android_util_Binder.register_android_os_Binder()</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">register_android_os_Binder</span><span class="params">(JNIEnv* env)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">int_register_android_os_Binder</span>(env) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">int_register_android_os_BinderInternal</span>(env) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">int_register_android_os_BinderProxy</span>(env) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p><strong>android_util_Binder.int_register_android_os_Binder()</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">const</span> JNINativeMethod gBinderMethods[] = &#123;</span><br><span class="line">    &#123; <span class="string">&quot;getCallingPid&quot;</span>, <span class="string">&quot;()I&quot;</span>, (<span class="type">void</span>*)android_os_Binder_getCallingPid &#125;,</span><br><span class="line">    &#123; <span class="string">&quot;getCallingUid&quot;</span>, <span class="string">&quot;()I&quot;</span>, (<span class="type">void</span>*)android_os_Binder_getCallingUid &#125;,</span><br><span class="line">    ...</span><br><span class="line">    &#123; <span class="string">&quot;getExtension&quot;</span>, <span class="string">&quot;()Landroid/os/IBinder;&quot;</span>, (<span class="type">void</span>*)android_os_Binder_getExtension &#125;,</span><br><span class="line">    &#123; <span class="string">&quot;setExtension&quot;</span>, <span class="string">&quot;(Landroid/os/IBinder;)V&quot;</span>, (<span class="type">void</span>*)android_os_Binder_setExtension &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* <span class="type">const</span> kBinderPathName = <span class="string">&quot;android/os/Binder&quot;</span>;</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">int_register_android_os_Binder</span><span class="params">(JNIEnv* env)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 查找文件 kBinderPathName = &quot;android/os/Binder&quot;，返回对应 Class 对象</span></span><br><span class="line">    jclass clazz = <span class="built_in">FindClassOrDie</span>(env, kBinderPathName);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过 gBinderOffsets 结构体，保存 Java 层 Binder 类的信息，为 native 层访问 Java 层提供通道</span></span><br><span class="line">    gBinderOffsets.mClass = <span class="built_in">MakeGlobalRefOrDie</span>(env, clazz);</span><br><span class="line">    gBinderOffsets.mExecTransact = <span class="built_in">GetMethodIDOrDie</span>(env, clazz, <span class="string">&quot;execTransact&quot;</span>, <span class="string">&quot;(IJJI)Z&quot;</span>);</span><br><span class="line">    gBinderOffsets.mGetInterfaceDescriptor = <span class="built_in">GetMethodIDOrDie</span>(env, clazz, <span class="string">&quot;getInterfaceDescriptor&quot;</span>,</span><br><span class="line">        <span class="string">&quot;()Ljava/lang/String;&quot;</span>);</span><br><span class="line">    gBinderOffsets.mObject = <span class="built_in">GetFieldIDOrDie</span>(env, clazz, <span class="string">&quot;mObject&quot;</span>, <span class="string">&quot;J&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过 RegisterMethodsOrDie，将为 gBinderMethods 数组完成映射关系，从而为 Java 层访问 JNI 层提供通道</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">RegisterMethodsOrDie</span>(</span><br><span class="line">        env, kBinderPathName,</span><br><span class="line">        gBinderMethods, <span class="built_in">NELEM</span>(gBinderMethods));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>int_register_android_os_Binder 的作用就是让 Java 层和 native 层能够互相调用；</p>
<h2 id="7-Binder-常见对象区别"><a href="#7-Binder-常见对象区别" class="headerlink" title="7. Binder 常见对象区别"></a>7. Binder 常见对象区别</h2><p>初见 BinderProxy、BpBinder、binder_ref、binder_node、BBinder、Binder 简直一脸懵逼，头都 TMD 绕晕了，有什么区别呢？</p>
<table>
<thead>
<tr>
<th>概念</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>BpBinder —— Binder 代理对象</td>
<td>在用户空间创建，且执行在 Client 进程中，会被 Client 进程中的其他对象引用，另外会<strong>引用 Binder 驱动程序中的 Binder 引用对象</strong></td>
</tr>
<tr>
<td>binder_ref —— Binder 引用对象</td>
<td>在 Binder 驱动程序中创建，<strong>被 Binder 代理对象引用</strong></td>
</tr>
<tr>
<td>binder_node —— Binder 实体对象</td>
<td>在 Binder 驱动程序中创建，<strong>被 Binder 引用对象所引用</strong></td>
</tr>
<tr>
<td>BBinder —— Binder 本地对象</td>
<td>在用户空间创建，且执行在 Server 进程中，<strong>会被 Server 进程中其他对象引用，还会被 Binder 实体对象引用</strong></td>
</tr>
</tbody></table>
<p>Binder 实体（binder_node）：是各个 Server 以及 ServiceManager 在内核中的存在形式。实际上是内核中 binder_node 结构体的对象 ，它的作用是在内核中保存 Server 和 ServiceManager 的信息(例如，Binder 实体中保存了 Server 对象在用户空间的地址)。简言之，Binder 实体是 Server 在 Binder 驱动中的存在形式，内核通过 Binder 实体可以找到用户空间的 Server 对象。  </p>
<p>Binder 引用&#x2F;代理（binder_ref）：所谓 Binder 引用，实际上是内核中 binder_ref 结构体的对象，它的作用是在表示<code>Binder 实体</code>的引用。换句话说，每一个 Binder 引用都是某一个 Binder 实体的引用，通过 Binder 引用可以在内核中找到它对应的Binder实体。</p>
<p>Binder 实体和 Binder 引用都是内核（Binder 驱动）中的数据结构。每一个 Server 在内核中就表现为一个 Binder 实体，在每一个 Client 中则表现为一个 Binder 引用。这样，每个 Binder 引用都对应一个 Binder 实体，而每个 Binder 实体则可以多个 Binder 引用。</p>
<p>引用关系：BpBinder ——&gt; binder_ref ——&gt; binder_node ——&gt; BBinder</p>
<h2 id="8-Binder-相关的类"><a href="#8-Binder-相关的类" class="headerlink" title="8. Binder 相关的类"></a>8. Binder 相关的类</h2><p><a href="https://raw.githubusercontent.com/rangerzhou/ImageHosting/master/blog_resource/2022/Binder_%E6%B6%89%E5%8F%8A%E7%B1%BB.png">Binder_涉及类</a></p>
<p><img src="https://raw.githubusercontent.com/rangerzhou/ImageHosting/master/blog_resource/2022/Binder_%E6%B6%89%E5%8F%8A%E7%B1%BB.png" alt="Binder_涉及类" title="Binder 涉及类"></p>
<h2 id="9-Binder-类图"><a href="#9-Binder-类图" class="headerlink" title="9. Binder 类图"></a>9. Binder 类图</h2><p><a href="https://raw.githubusercontent.com/rangerzhou/ImageHosting/master/blog_resource/2022/Binder_%E7%B1%BB%E5%9B%BE.png">Binder_类图</a></p>
<p><img src="https://raw.githubusercontent.com/rangerzhou/ImageHosting/master/blog_resource/2022/Binder_%E7%B1%BB%E5%9B%BE.png" alt="Binder_类图" title="Binder 类图"></p>
<ul>
<li>Binder(Java) 对象持有的 mObject 是 JavaBBinderHolder 的引用；</li>
<li>JavaBBinderHolder 对象持有一个 mBinder 弱引用，promote 为强引用后指向 JavaBBinder 对象；</li>
<li>JavaBBinder 对象持有的 mObject 是 Binder 对象的 GlobalRef（将 Binder 对象加入到 art::globals_ 列表中，这样 Binder 对象在每次 GC 时都会被标记为 GC Root，也便无法被回收，只有当 JavaBBinder 对象销毁时，Binder 对象才能从 art::globals_ 中清除，才能被销毁）；</li>
</ul>
<p>补充待整理：</p>
<p>BinderProxy 就是 BpBinder，”BpBinder” 中的 “p” 即 Proxy，只不过 BpBinder 是 Native 层的，BinderProxy 是 Java 层的。BinderProxy 和 BpBinder 分别继承自 Java 和 Native 层的 IBinder 接口，即 IBinder.h 和 IBinder.java，它们可以看作同一个接口，都定义了 transact 等方法。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>Android - Zygote 进程启动</title>
    <url>/2021/08/01/Android/AndroidDevelop_004_Zygote/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>Zygote 进程启动。</p>
</blockquote>
<span id="more"></span>

<h2 id="1-触发-Zygote-启动"><a href="#1-触发-Zygote-启动" class="headerlink" title="1. 触发 Zygote 启动"></a>1. 触发 Zygote 启动</h2><h3 id="1-1-触发-late-init"><a href="#1-1-触发-late-init" class="headerlink" title="1.1 触发 late-init"></a>1.1 触发 late-init</h3><p>system&#x2F;core&#x2F;init.cpp</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">SecondStageMain</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// Don&#x27;t mount filesystems or start core system services in charger mode.</span></span><br><span class="line">    std::string bootmode = <span class="built_in">GetProperty</span>(<span class="string">&quot;ro.bootmode&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (bootmode == <span class="string">&quot;charger&quot;</span>) &#123;</span><br><span class="line">        am.<span class="built_in">QueueEventTrigger</span>(<span class="string">&quot;charger&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        am.<span class="built_in">QueueEventTrigger</span>(<span class="string">&quot;late-init&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>在 SecondsStageMain 中加入了 <code>late-init</code>的 trigger</p>
<p>system&#x2F;core&#x2F;rootdir&#x2F;init.rc</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"># Mount filesystems <span class="keyword">and</span> start core system services.</span><br><span class="line">on late-init</span><br><span class="line">    ...</span><br><span class="line">    # Now we can start zygote <span class="keyword">for</span> devices with file based encryption</span><br><span class="line">    trigger zygote-start</span><br></pre></td></tr></table></figure>

<h3 id="1-2-触发-zygote-start"><a href="#1-2-触发-zygote-start" class="headerlink" title="1.2 触发 zygote-start"></a>1.2 触发 zygote-start</h3><p>当 <code>late-init</code>触发时，会触发 <code>zygote-start</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"># It is recommended to put unnecessary data/ initialization from post-fs-data</span><br><span class="line"><span class="meta"># to start-zygote in device<span class="string">&#x27;s init.rc to unblock zygote start.</span></span></span><br><span class="line"><span class="string"><span class="meta">on zygote-start &amp;&amp; property:ro.crypto.state=unencrypted</span></span></span><br><span class="line"><span class="string"><span class="meta">    # A/B update verifier that marks a successful boot.</span></span></span><br><span class="line"><span class="string"><span class="meta">    exec_start update_verifier_nonencrypted</span></span></span><br><span class="line"><span class="string"><span class="meta">    start statsd</span></span></span><br><span class="line"><span class="string"><span class="meta">    start netd</span></span></span><br><span class="line"><span class="string"><span class="meta">    start zygote</span></span></span><br><span class="line"><span class="string"><span class="meta">    start zygote_secondary</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">on zygote-start &amp;&amp; property:ro.crypto.state=unsupported</span></span></span><br><span class="line"><span class="string"><span class="meta">    # A/B update verifier that marks a successful boot.</span></span></span><br><span class="line"><span class="string"><span class="meta">    exec_start update_verifier_nonencrypted</span></span></span><br><span class="line"><span class="string"><span class="meta">    start statsd</span></span></span><br><span class="line"><span class="string"><span class="meta">    start netd</span></span></span><br><span class="line"><span class="string"><span class="meta">    start zygote</span></span></span><br><span class="line"><span class="string"><span class="meta">    start zygote_secondary</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">on zygote-start &amp;&amp; property:ro.crypto.state=encrypted &amp;&amp; property:ro.crypto.type=file</span></span></span><br><span class="line"><span class="string"><span class="meta">    # A/B update verifier that marks a successful boot.</span></span></span><br><span class="line"><span class="string"><span class="meta">    exec_start update_verifier_nonencrypted</span></span></span><br><span class="line"><span class="string"><span class="meta">    start statsd</span></span></span><br><span class="line"><span class="string"><span class="meta">    start netd</span></span></span><br><span class="line"><span class="string"><span class="meta">    start zygote</span></span></span><br><span class="line"><span class="string"><span class="meta">    start zygote_secondary</span></span></span><br></pre></td></tr></table></figure>

<h3 id="1-3-执行-start-zygote-command"><a href="#1-3-执行-start-zygote-command" class="headerlink" title="1.3 执行 start zygote command"></a>1.3 执行 start zygote command</h3><p>start zygote 就是启动 zygote 的 command，在 <em>system&#x2F;core&#x2F;init&#x2F;action.cpp</em> 的 <code>AddCommand</code> 函数中指出要从 function_map_ 中 Find 对应 args 的执行函数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">Result&lt;<span class="type">void</span>&gt; <span class="title">Action::AddCommand</span><span class="params">(std::vector&lt;std::string&gt;&amp;&amp; args, <span class="type">int</span> line)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!function_map_) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Error</span>() &lt;&lt; <span class="string">&quot;no function map available&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">auto</span> map_result = function_map_-&gt;<span class="built_in">Find</span>(args);</span><br><span class="line">    <span class="keyword">if</span> (!map_result.<span class="built_in">ok</span>()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Error</span>() &lt;&lt; map_result.<span class="built_in">error</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    commands_.<span class="built_in">emplace_back</span>(map_result-&gt;function, map_result-&gt;run_in_subcontext, std::<span class="built_in">move</span>(args),</span><br><span class="line">                           line);</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>function_map_  在 <a href="">system&#x2F;core&#x2F;init&#x2F;action.h</a> 中定义，通过 set_function_map 函数赋值</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">set_function_map</span><span class="params">(<span class="type">const</span> BuiltinFunctionMap* function_map)</span> </span>&#123;</span><br><span class="line">        function_map_ = function_map;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> BuiltinFunctionMap* function_map_;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>set_function_map 函数在 init.cpp 中调用，传递的参数通过 GetBuiltinFunctionMap 获取</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">SecondStageMain</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="type">const</span> BuiltinFunctionMap&amp; function_map = <span class="built_in">GetBuiltinFunctionMap</span>();</span><br><span class="line">    Action::<span class="built_in">set_function_map</span>(&amp;function_map);</span><br></pre></td></tr></table></figure>

<p>GetBuiltinFunctionMap 函数在 <em><a href="http://aospxref.com/android-11.0.0_r21/xref/system/core/init/builtins.h">system&#x2F;core&#x2F;init&#x2F;builtins.cpp</a></em> 中定义，可知 start 对应的是 do_start 函数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Builtin-function-map start</span></span><br><span class="line"><span class="function"><span class="type">const</span> BuiltinFunctionMap&amp; <span class="title">GetBuiltinFunctionMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constexpr</span> std::<span class="type">size_t</span> kMax = std::numeric_limits&lt;std::<span class="type">size_t</span>&gt;::<span class="built_in">max</span>();</span><br><span class="line">    <span class="comment">// clang-format off</span></span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> BuiltinFunctionMap builtin_functions = &#123;</span><br><span class="line">        &#123;<span class="string">&quot;bootchart&quot;</span>,               &#123;<span class="number">1</span>,     <span class="number">1</span>,    &#123;<span class="literal">false</span>,  do_bootchart&#125;&#125;&#125;,</span><br><span class="line">        ...</span><br><span class="line">        &#123;<span class="string">&quot;update_linker_config&quot;</span>,    &#123;<span class="number">0</span>,     <span class="number">0</span>,    &#123;<span class="literal">false</span>,  do_update_linker_config&#125;&#125;&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;readahead&quot;</span>,               &#123;<span class="number">1</span>,     <span class="number">2</span>,    &#123;<span class="literal">true</span>,   do_readahead&#125;&#125;&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;remount_userdata&quot;</span>,        &#123;<span class="number">0</span>,     <span class="number">0</span>,    &#123;<span class="literal">false</span>,  do_remount_userdata&#125;&#125;&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;restart&quot;</span>,                 &#123;<span class="number">1</span>,     <span class="number">1</span>,    &#123;<span class="literal">false</span>,  do_restart&#125;&#125;&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;restorecon&quot;</span>,              &#123;<span class="number">1</span>,     kMax, &#123;<span class="literal">true</span>,   do_restorecon&#125;&#125;&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;restorecon_recursive&quot;</span>,    &#123;<span class="number">1</span>,     kMax, &#123;<span class="literal">true</span>,   do_restorecon_recursive&#125;&#125;&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;rm&quot;</span>,                      &#123;<span class="number">1</span>,     <span class="number">1</span>,    &#123;<span class="literal">true</span>,   do_rm&#125;&#125;&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;rmdir&quot;</span>,                   &#123;<span class="number">1</span>,     <span class="number">1</span>,    &#123;<span class="literal">true</span>,   do_rmdir&#125;&#125;&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;setprop&quot;</span>,                 &#123;<span class="number">2</span>,     <span class="number">2</span>,    &#123;<span class="literal">true</span>,   do_setprop&#125;&#125;&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;setrlimit&quot;</span>,               &#123;<span class="number">3</span>,     <span class="number">3</span>,    &#123;<span class="literal">false</span>,  do_setrlimit&#125;&#125;&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;start&quot;</span>,                   &#123;<span class="number">1</span>,     <span class="number">1</span>,    &#123;<span class="literal">false</span>,  do_start&#125;&#125;&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;stop&quot;</span>,                    &#123;<span class="number">1</span>,     <span class="number">1</span>,    &#123;<span class="literal">false</span>,  do_stop&#125;&#125;&#125;,</span><br><span class="line">        ...</span><br><span class="line">        &#123;<span class="string">&quot;write&quot;</span>,                   &#123;<span class="number">2</span>,     <span class="number">2</span>,    &#123;<span class="literal">true</span>,   do_write&#125;&#125;&#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// clang-format on</span></span><br><span class="line">    <span class="keyword">return</span> builtin_functions;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-4-执行-do-start"><a href="#1-4-执行-do-start" class="headerlink" title="1.4 执行 do_start"></a>1.4 执行 do_start</h3><p><a href="">system&#x2F;core&#x2F;init&#x2F;builtins.cpp</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> Result&lt;<span class="type">void</span>&gt; <span class="title">do_start</span><span class="params">(<span class="type">const</span> BuiltinArguments&amp; args)</span> </span>&#123;</span><br><span class="line">    Service* svc = ServiceList::<span class="built_in">GetInstance</span>().<span class="built_in">FindService</span>(args[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span> (!svc) <span class="keyword">return</span> <span class="built_in">Error</span>() &lt;&lt; <span class="string">&quot;service &quot;</span> &lt;&lt; args[<span class="number">1</span>] &lt;&lt; <span class="string">&quot; not found&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">auto</span> result = svc-&gt;<span class="built_in">Start</span>(); !result.<span class="built_in">ok</span>()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">ErrorIgnoreEnoent</span>() &lt;&lt; <span class="string">&quot;Could not start service: &quot;</span> &lt;&lt; result.<span class="built_in">error</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>do_start 作用是通过 FindService 函数根据名字从 ServiceList 中找出对应的 service，然后调用 Start() 函数；</p>
<h3 id="1-5-Service-Start-创建-zygote-进程"><a href="#1-5-Service-Start-创建-zygote-进程" class="headerlink" title="1.5 Service::Start() 创建 zygote 进程"></a>1.5 Service::Start() 创建 zygote 进程</h3><p>platform&#x2F;system&#x2F;core&#x2F;init&#x2F;service.cpp</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">Result&lt;<span class="type">void</span>&gt; <span class="title">Service::Start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="built_in">LOG</span>(INFO) &lt;&lt; <span class="string">&quot;starting service &#x27;&quot;</span> &lt;&lt; name_ &lt;&lt; <span class="string">&quot;&#x27;...&quot;</span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="type">pid_t</span> pid = <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">// 这个标记当 service 定义了namespace 时会赋值为 CLONE_NEWPID|CLONE_NEWNS</span></span><br><span class="line">    <span class="keyword">if</span> (namespaces_.flags) &#123;</span><br><span class="line">        <span class="comment">// 以 clone 方式在新的 namespace 创建子进程</span></span><br><span class="line">        pid = <span class="built_in">clone</span>(<span class="literal">nullptr</span>, <span class="literal">nullptr</span>, namespaces_.flags | SIGCHLD, <span class="literal">nullptr</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        pid = fork(); <span class="comment">// 以 fork 方式创建子进程</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;<span class="comment">// pid == 0 表示创建子进程成功</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// ExpandArgsAndExecv 会调用 execv 执行系统调用，即执行配置的二进制文件，把参数传进去</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">ExpandArgsAndExecv</span>(args_, sigstop_)) &#123;</span><br><span class="line">            <span class="built_in">PLOG</span>(ERROR) &lt;&lt; <span class="string">&quot;cannot execv(&#x27;&quot;</span> &lt;&lt; args_[<span class="number">0</span>]</span><br><span class="line">                        &lt;&lt; <span class="string">&quot;&#x27;). See the &#x27;Debugging init&#x27; section of init&#x27;s README.md for tips&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        _exit(<span class="number">127</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pid &lt; <span class="number">0</span>) &#123; <span class="comment">// 子进程创建失败</span></span><br><span class="line">        pid_ = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">ErrnoError</span>() &lt;&lt; <span class="string">&quot;Failed to fork&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Start 函数主要就是 fork 出一个新进程，然后执行 service 对应的二进制文件，并将参数传递进去；</p>
<h3 id="1-6-init-ro-zygote-rc"><a href="#1-6-init-ro-zygote-rc" class="headerlink" title="1.6 init.${ro.zygote}.rc"></a>1.6 init.${ro.zygote}.rc</h3><p>从 init.zygote64_32.rc 中看出 zygote 对应的二进制文件是 <em>&#x2F;system&#x2F;bin&#x2F;app_process64</em></p>
<p>&#x2F;<a href="http://aospxref.com/android-11.0.0_r21/xref/system/">system</a>&#x2F;<a href="http://aospxref.com/android-11.0.0_r21/xref/system/core/">core</a>&#x2F;<a href="http://aospxref.com/android-11.0.0_r21/xref/system/core/rootdir/">rootdir</a>&#x2F;<a href="">init.zygote64_32.rc</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 进程名称是 zygote，运行的二进制文件在 /system/bin/app_process64</span></span><br><span class="line"><span class="comment">// 启动参数是 -Xzygote /system/bin --zygote --start-system-server --socket-name=zygote</span></span><br><span class="line">service zygote /system/bin/app_process64 -Xzygote /system/bin --zygote --start-system-server --socket-name=zygote</span><br><span class="line">    <span class="comment">// zygote 所属的 class 为 main，同类的 service 还有比如 storaged，installd</span></span><br><span class="line">    <span class="keyword">class</span> main</span><br><span class="line">    <span class="comment">// 进程优先级最高（-20）</span></span><br><span class="line">    priority <span class="number">-20</span></span><br><span class="line">    <span class="comment">// 启动服务前，将用户切换为 root 用户</span></span><br><span class="line">    user root</span><br><span class="line">    <span class="comment">// 启动服务前，将用户组切换为 root 用户组</span></span><br><span class="line">    group root readproc reserved_disk</span><br><span class="line">    <span class="comment">// 以 TCP 形式创建一个名叫 /dev/socket/zygote 的 socket</span></span><br><span class="line">    <span class="comment">// socket 类型，分为 stream-tcp、dgram-udp、seqpacket</span></span><br><span class="line">    <span class="comment">// socket 权限为 660，后面是 user 和 group</span></span><br><span class="line">    socket zygote stream <span class="number">660</span> root system</span><br><span class="line">    socket usap_pool_primary stream <span class="number">660</span> root system</span><br><span class="line">    <span class="comment">// onrestart 指当进程重启时执行后面的命令</span></span><br><span class="line">    onrestart exec_background - system system -- /system/bin/vdc volume abort_fuse</span><br><span class="line">    onrestart write /sys/power/state on</span><br><span class="line">    onrestart restart audioserver</span><br><span class="line">    onrestart restart cameraserver</span><br><span class="line">    onrestart restart media</span><br><span class="line">    onrestart restart netd</span><br><span class="line">    onrestart restart wificond</span><br><span class="line">    <span class="comment">// 等价于 writepid /dev/cpuctl/top-app/tasks，即将进程的 PID 写入 dev/cpuctl/top-app/tasks</span></span><br><span class="line">    <span class="comment">// task_profiles 在 Android 12 及更高版本使用</span></span><br><span class="line">    task_profiles ProcessCapacityHigh MaxPerformance</span><br><span class="line"></span><br><span class="line">service zygote_secondary /system/bin/app_process32 -Xzygote /system/bin --zygote --socket-name=zygote_secondary --enable-lazy-preload</span><br><span class="line">    <span class="keyword">class</span> main</span><br><span class="line">    priority <span class="number">-20</span></span><br><span class="line">    user root</span><br><span class="line">    group root readproc reserved_disk</span><br><span class="line">    socket zygote_secondary stream <span class="number">660</span> root system</span><br><span class="line">    socket usap_pool_secondary stream <span class="number">660</span> root system</span><br><span class="line">    onrestart restart zygote</span><br><span class="line">    task_profiles ProcessCapacityHigh MaxPerformance</span><br></pre></td></tr></table></figure>

<p>app_process64 源码位置在 frameworks&#x2F;base&#x2F;cmds&#x2F;app_process&#x2F;app_main.cpp</p>
<h2 id="2-app-main"><a href="#2-app-main" class="headerlink" title="2. app_main"></a>2. app_main</h2><p><a href="">frameworks&#x2F;base&#x2F;cmds&#x2F;app_process&#x2F;app_main.cpp</a></p>
<p>app_main.main() 是 zygote 进程中执行的第一个方法，主要做的事情就是参数解析，根据参数决定启动 zygote 模式还是 application 模式；</p>
<h3 id="2-1-初始化-AndroidRuntime"><a href="#2-1-初始化-AndroidRuntime" class="headerlink" title="2.1 初始化 AndroidRuntime"></a>2.1 初始化 AndroidRuntime</h3><p>创建 AppRuntime 对象，AppRuntime 继承自 AndroidRuntime，AndriodRuntime 是 android 运行时环境</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AppRuntime</span> : <span class="keyword">public</span> AndroidRuntime</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">AppRuntime</span>(<span class="type">char</span>* argBlockStart, <span class="type">const</span> <span class="type">size_t</span> argBlockLength)</span><br><span class="line">        : <span class="built_in">AndroidRuntime</span>(argBlockStart, argBlockLength)</span><br><span class="line">        , <span class="built_in">mClass</span>(<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="comment">// /system/bin/app_process64 -Xzygote /system/bin --zygote --start-system-server --socket-name=zygote</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* <span class="type">const</span> argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function">AppRuntime <span class="title">runtime</span><span class="params">(argv[<span class="number">0</span>], computeArgBlockSize(argc, argv))</span></span>; <span class="comment">// 创建 AndroidRuntime</span></span><br></pre></td></tr></table></figure>

<p>argc：是 argument count 的缩写，保存运行时传递给 main 函数的参数个数；</p>
<p>argv：是 argument vector 的缩写，保存运行时传递 main 函数的参数，类型是一个字符指针数组，每个元素是一个字符指针，指向一个命令行参数；</p>
<p>argv[0]：指向程序运行时的全路径名，即 <code>/system/bin/app_process64</code> ；</p>
<h3 id="2-2-设置-zygote-启动模式"><a href="#2-2-设置-zygote-启动模式" class="headerlink" title="2.2 设置 zygote 启动模式"></a>2.2 设置 zygote 启动模式</h3><p>有两种启动模式，zygote 模式和 application 模式；</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">    <span class="keyword">while</span> (i &lt; argc) &#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">char</span>* arg = argv[i++];</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(arg, <span class="string">&quot;--zygote&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            zygote = <span class="literal">true</span>;</span><br><span class="line">            niceName = ZYGOTE_NICE_NAME;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(arg, <span class="string">&quot;--start-system-server&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            startSystemServer = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(arg, <span class="string">&quot;--application&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            application = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strncmp</span>(arg, <span class="string">&quot;--nice-name=&quot;</span>, <span class="number">12</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            niceName.<span class="built_in">setTo</span>(arg + <span class="number">12</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strncmp</span>(arg, <span class="string">&quot;--&quot;</span>, <span class="number">2</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">            className.<span class="built_in">setTo</span>(arg);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            --i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p> –zygote : 以 zygote 模式启动</p>
<p>–start-system-server : 启动 system_server</p>
<p>–application : 以应用程序模式启动</p>
<p>–nice-name : 进程的名字</p>
<p>在此处根据传递进来的参数 <code>zygote == true</code> 设置 zygote 启动模式，并配置 <code>startSystemServer = true</code></p>
<h3 id="2-3-配置-runtime-start-函数的-args"><a href="#2-3-配置-runtime-start-函数的-args" class="headerlink" title="2.3 配置 runtime.start() 函数的 args"></a>2.3 配置 runtime.start() 函数的 args</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Vector&lt;String8&gt; args;</span><br><span class="line">    <span class="keyword">if</span> (!className.<span class="built_in">isEmpty</span>()) &#123;</span><br><span class="line">        <span class="comment">// We&#x27;re not in zygote mode, the only argument we need to pass</span></span><br><span class="line">        <span class="comment">// to RuntimeInit is the application argument.</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// The Remainder of args get passed to startup class main(). Make</span></span><br><span class="line">        <span class="comment">// copies of them before we overwrite them with the process name.</span></span><br><span class="line">        args.<span class="built_in">add</span>(application ? <span class="built_in">String8</span>(<span class="string">&quot;application&quot;</span>) : <span class="built_in">String8</span>(<span class="string">&quot;tool&quot;</span>));</span><br><span class="line">        ...</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span> (startSystemServer) &#123;</span><br><span class="line">            args.<span class="built_in">add</span>(<span class="built_in">String8</span>(<span class="string">&quot;start-system-server&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">        <span class="function">String8 <span class="title">abiFlag</span><span class="params">(<span class="string">&quot;--abi-list=&quot;</span>)</span></span>;</span><br><span class="line">        abiFlag.<span class="built_in">append</span>(prop);</span><br><span class="line">        args.<span class="built_in">add</span>(abiFlag);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// In zygote mode, pass all remaining arguments to the zygote</span></span><br><span class="line">        <span class="comment">// main() method.</span></span><br><span class="line">        <span class="keyword">for</span> (; i &lt; argc; ++i) &#123;</span><br><span class="line">            args.<span class="built_in">add</span>(<span class="built_in">String8</span>(argv[i]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>args 是后面调用的 runtime.start() 函数的参数；</p>
<h3 id="2-4-调用-runtime-start-启动-Android-运行时"><a href="#2-4-调用-runtime-start-启动-Android-运行时" class="headerlink" title="2.4 调用 runtime.start 启动 Android 运行时"></a>2.4 调用 runtime.start 启动 Android 运行时</h3><p>在 main 函数的最后，调用 <code>runtime.start()</code> 函数启动 android 运行时环境</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">    <span class="keyword">if</span> (zygote) &#123;</span><br><span class="line">        runtime.<span class="built_in">start</span>(<span class="string">&quot;com.android.internal.os.ZygoteInit&quot;</span>, args, zygote);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (className) &#123;</span><br><span class="line">        runtime.<span class="built_in">start</span>(<span class="string">&quot;com.android.internal.os.RuntimeInit&quot;</span>, args, zygote);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Error: no class name or --zygote supplied.\n&quot;</span>);</span><br><span class="line">        <span class="built_in">app_usage</span>();</span><br><span class="line">        <span class="built_in">LOG_ALWAYS_FATAL</span>(<span class="string">&quot;app_process: no class name or --zygote supplied.&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-启动运行时-AndroidRuntime-start"><a href="#3-启动运行时-AndroidRuntime-start" class="headerlink" title="3. 启动运行时-AndroidRuntime.start()"></a>3. 启动运行时-AndroidRuntime.start()</h2><p><a href="">frameworks&#x2F;base&#x2F;core&#x2F;jni&#x2F;AndroidRuntime.cpp</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">AndroidRuntime::start</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* className, <span class="type">const</span> Vector&lt;String8&gt;&amp; options, <span class="type">bool</span> zygote)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">/* start the virtual machine */</span></span><br><span class="line">    JniInvocation jni_invocation;</span><br><span class="line">    jni_invocation.<span class="built_in">Init</span>(<span class="literal">NULL</span>); <span class="comment">// 初始化 JNI,加载 libart.so</span></span><br><span class="line">    JNIEnv* env;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">startVm</span>(&amp;mJavaVM, &amp;env, zygote, primary_zygote) != <span class="number">0</span>) &#123; <span class="comment">// 创建启动虚拟机</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">onVmCreated</span>(env); <span class="comment">// 虚拟机创建完成，函数对于 zygote 启动来说是空实现</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Register android functions.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">startReg</span>(env) &lt; <span class="number">0</span>) &#123; <span class="comment">// 注册 JNI</span></span><br><span class="line">        <span class="built_in">ALOGE</span>(<span class="string">&quot;Unable to register all android natives\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * We want to call main() with a String array with arguments in it.</span></span><br><span class="line"><span class="comment">     * At present we have two arguments, the class name and an option string.</span></span><br><span class="line"><span class="comment">     * Create an array to hold them.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    jclass stringClass;</span><br><span class="line">    jobjectArray strArray;</span><br><span class="line">    jstring classNameStr;</span><br><span class="line"></span><br><span class="line">    stringClass = env-&gt;<span class="built_in">FindClass</span>(<span class="string">&quot;java/lang/String&quot;</span>);</span><br><span class="line">    <span class="built_in">assert</span>(stringClass != <span class="literal">NULL</span>);</span><br><span class="line">    strArray = env-&gt;<span class="built_in">NewObjectArray</span>(options.<span class="built_in">size</span>() + <span class="number">1</span>, stringClass, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">assert</span>(strArray != <span class="literal">NULL</span>);</span><br><span class="line">    classNameStr = env-&gt;<span class="built_in">NewStringUTF</span>(className);</span><br><span class="line">    <span class="built_in">assert</span>(classNameStr != <span class="literal">NULL</span>);</span><br><span class="line">    env-&gt;<span class="built_in">SetObjectArrayElement</span>(strArray, <span class="number">0</span>, classNameStr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; options.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        jstring optionsStr = env-&gt;<span class="built_in">NewStringUTF</span>(options.<span class="built_in">itemAt</span>(i).<span class="built_in">string</span>());</span><br><span class="line">        <span class="built_in">assert</span>(optionsStr != <span class="literal">NULL</span>);</span><br><span class="line">        env-&gt;<span class="built_in">SetObjectArrayElement</span>(strArray, i + <span class="number">1</span>, optionsStr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Start VM.  This thread becomes the main thread of the VM, and will</span></span><br><span class="line"><span class="comment">     * not return until the VM exits.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// 将传递过来的 className 参数（com.android.internal.os.ZygoteInit）转换为 com/android/internal/os/ZygoteInit</span></span><br><span class="line">    <span class="type">char</span>* slashClassName = <span class="built_in">toSlashClassName</span>(className != <span class="literal">NULL</span> ? className : <span class="string">&quot;&quot;</span>);</span><br><span class="line">    jclass startClass = env-&gt;<span class="built_in">FindClass</span>(slashClassName);</span><br><span class="line">    <span class="keyword">if</span> (startClass == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">ALOGE</span>(<span class="string">&quot;JavaVM unable to locate class &#x27;%s&#x27;\n&quot;</span>, slashClassName);</span><br><span class="line">        <span class="comment">/* keep going */</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        jmethodID startMeth = env-&gt;<span class="built_in">GetStaticMethodID</span>(startClass, <span class="string">&quot;main&quot;</span>,</span><br><span class="line">            <span class="string">&quot;([Ljava/lang/String;)V&quot;</span>); <span class="comment">// 找到 startClass 的 main 方法</span></span><br><span class="line">        <span class="keyword">if</span> (startMeth == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">ALOGE</span>(<span class="string">&quot;JavaVM unable to find main() in &#x27;%s&#x27;\n&quot;</span>, className);</span><br><span class="line">            <span class="comment">/* keep going */</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            env-&gt;<span class="built_in">CallStaticVoidMethod</span>(startClass, startMeth, strArray); <span class="comment">// 跳到 JAVA 世界</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>runtime.start 主要做了三件事：</p>
<ul>
<li>startVm()：加载 libart.so，创建启动虚拟机，此处不再赘述</li>
<li>startReg：注册 JNI 方法</li>
<li>CallStaticVoidMethod：使用 JNI 调用 ZygoteInit 的 main 函数，进入 java 世界</li>
</ul>
<p>本文讲述 zygote 启动，startVm 和 startReg 就不再深入；</p>
<h3 id="3-1-startVm"><a href="#3-1-startVm" class="headerlink" title="3.1  startVm()"></a>3.1  startVm()</h3><p>加载 libart.so，创建启动虚拟机</p>
<h3 id="3-2-startReg"><a href="#3-2-startReg" class="headerlink" title="3.2 startReg()"></a>3.2 startReg()</h3><p>注册 JNI 方法</p>
<h3 id="3-3-CallStaticVoidMethod-调用-ZygoteInit-main"><a href="#3-3-CallStaticVoidMethod-调用-ZygoteInit-main" class="headerlink" title="3.3 CallStaticVoidMethod 调用 ZygoteInit.main()"></a>3.3 CallStaticVoidMethod 调用 ZygoteInit.main()</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span>* slashClassName = <span class="built_in">toSlashClassName</span>(className != <span class="literal">NULL</span> ? className : <span class="string">&quot;&quot;</span>);</span><br><span class="line">   jclass startClass = env-&gt;<span class="built_in">FindClass</span>(slashClassName); <span class="comment">// 找到 ZygoteInit 类</span></span><br><span class="line">   <span class="keyword">if</span> (startClass == <span class="literal">NULL</span>) &#123;</span><br><span class="line">       <span class="built_in">ALOGE</span>(<span class="string">&quot;JavaVM unable to locate class &#x27;%s&#x27;\n&quot;</span>, slashClassName);</span><br><span class="line">       <span class="comment">/* keep going */</span></span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="comment">// 找到 ZygoteInit 类后继续找其中 main 方法对应的 MethodID</span></span><br><span class="line">       jmethodID startMeth = env-&gt;<span class="built_in">GetStaticMethodID</span>(startClass, <span class="string">&quot;main&quot;</span>,</span><br><span class="line">           <span class="string">&quot;([Ljava/lang/String;)V&quot;</span>);</span><br><span class="line">       <span class="keyword">if</span> (startMeth == <span class="literal">NULL</span>) &#123;</span><br><span class="line">           <span class="built_in">ALOGE</span>(<span class="string">&quot;JavaVM unable to find main() in &#x27;%s&#x27;\n&quot;</span>, className);</span><br><span class="line">           <span class="comment">/* keep going */</span></span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           env-&gt;<span class="built_in">CallStaticVoidMethod</span>(startClass, startMeth, strArray);</span><br></pre></td></tr></table></figure>

<ul>
<li>GetStaticMethodID：找到 startClass 的 main 方法，startClass 即前面 runtime.start 时传入的参数 <code>com.android.internal.os.ZygoteInit</code>，即找到 ZygoteInit 的 main 方法；</li>
<li>CallStaticVoidMethod 调用 ZygoteInit 的 main 方法；</li>
</ul>
<p>此处是从 native 进入到 java 的入口，所以需要使用 JNI</p>
<h2 id="4-ZygoteInit"><a href="#4-ZygoteInit" class="headerlink" title="4. ZygoteInit"></a>4. ZygoteInit</h2><p><a href="">frameworks&#x2F;base&#x2F;core&#x2F;java&#x2F;com&#x2F;android&#x2F;internal&#x2F;os&#x2F;ZygoteInit.java</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String argv[])</span> &#123;</span><br><span class="line">    <span class="type">ZygoteServer</span> <span class="variable">zygoteServer</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; argv.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;start-system-server&quot;</span>.equals(argv[i])) &#123;</span><br><span class="line">                startSystemServer = <span class="literal">true</span>;</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="comment">// In some configurations, we avoid preloading resources and classes eagerly.</span></span><br><span class="line">        <span class="comment">// In such cases, we will preload things prior to our first fork.</span></span><br><span class="line">        <span class="keyword">if</span> (!enableLazyPreload) &#123;</span><br><span class="line">            bootTimingsTraceLog.traceBegin(<span class="string">&quot;ZygotePreload&quot;</span>);</span><br><span class="line">            EventLog.writeEvent(LOG_BOOT_PROGRESS_PRELOAD_START,</span><br><span class="line">                    SystemClock.uptimeMillis());</span><br><span class="line">            preload(bootTimingsTraceLog); <span class="comment">// 1.预加载资源</span></span><br><span class="line">            EventLog.writeEvent(LOG_BOOT_PROGRESS_PRELOAD_END,</span><br><span class="line">                    SystemClock.uptimeMillis());</span><br><span class="line">            bootTimingsTraceLog.traceEnd(); <span class="comment">// ZygotePreload</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        zygoteServer = <span class="keyword">new</span> <span class="title class_">ZygoteServer</span>(isPrimaryZygote); <span class="comment">// 2. 创建 zygote 的 socket 服务</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (startSystemServer) &#123;</span><br><span class="line">            <span class="comment">// 3.fork 创建 system_server 进程</span></span><br><span class="line">            <span class="type">Runnable</span> <span class="variable">r</span> <span class="operator">=</span> forkSystemServer(abiList, zygoteSocketName, zygoteServer);</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Log.i(TAG, <span class="string">&quot;Accepting command socket connections&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// The select loop returns early in the child process after a fork and</span></span><br><span class="line">        <span class="comment">// loops forever in the zygote.</span></span><br><span class="line">        caller = zygoteServer.runSelectLoop(abiList); <span class="comment">// 4.zygote 进入无限循环</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ZygoteInit 的 main 函数主要做了四件事：<code>preload()</code>, <code>new ZygoteServer()</code>, <code>forkSystemServer()</code>, <code>runSelectLoop()</code>。</p>
<h3 id="4-1-preload"><a href="#4-1-preload" class="headerlink" title="4.1 preload()"></a>4.1 preload()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">preload</span><span class="params">(TimingsTraceLog bootTimingsTraceLog)</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    beginPreload();</span><br><span class="line">    ...</span><br><span class="line">    preloadClasses(); <span class="comment">// 预加载位于 /system/etc/preloaded-classes 文件中的类</span></span><br><span class="line">    ...</span><br><span class="line">    cacheNonBootClasspathClassLoaders();</span><br><span class="line">    ...</span><br><span class="line">    preloadResources(); <span class="comment">// 预加载资源，包含 drawable 和 color 资源</span></span><br><span class="line">    ...</span><br><span class="line">    nativePreloadAppProcessHALs();</span><br><span class="line">    ...</span><br><span class="line">    maybePreloadGraphicsDriver();</span><br><span class="line">    ...</span><br><span class="line">    preloadSharedLibraries();</span><br><span class="line">    preloadTextResources();</span><br><span class="line">    ...</span><br><span class="line">    endPreload();</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    sPreloadComplete = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>preload() 工作是预加载一部分 framework 资源和常用的 java 类，以便后期 fork 应用进程时可以直接 copy 过去，加快了应用的启动速度；</p>
<h3 id="4-2-new-ZygoteServer"><a href="#4-2-new-ZygoteServer" class="headerlink" title="4.2 new ZygoteServer()"></a>4.2 new ZygoteServer()</h3><p>创建 zygote 的 socket 服务用于在 runSelectLoop() 中与 AMS 通信；</p>
<p>为什么不用 binder 通讯呢，一是因为此时 binder 还没有初始化，二是因为 binder 是多线程通讯，fork 是写时拷贝（内容发生改变时才 copy），如果用 binder 通信 fork 容易发生死锁；</p>
<h3 id="4-3-forkSystemServer"><a href="#4-3-forkSystemServer" class="headerlink" title="4.3 forkSystemServer()"></a>4.3 forkSystemServer()</h3><p>fork 创建 system_server 进程，下一篇中详解；</p>
<h3 id="4-4-runSelectLoop"><a href="#4-4-runSelectLoop" class="headerlink" title="4.4 runSelectLoop()"></a>4.4 runSelectLoop()</h3><p>zygote 进入无限循环，等待 AMS 发来信息创建进程；</p>
<h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><p>解析 init.${ro.zygote}.rc 中的参数，zygote 通过 app_process 启动，进入 app_main.cpp 的 main() 方法中：</p>
<ul>
<li>初始化 AndroidRuntime</li>
<li>设置 zygote 启动模式</li>
<li>调用 runtime.start() 启动 Android 运行时<ul>
<li>创建虚拟机</li>
<li>注册 JNI 方法</li>
<li>使用 JNI 调用 ZygoteInit 的 main() 函数，进入 java 世界<ul>
<li>preload 预加载framework 资源和常用 java 类</li>
<li>创建 zygote 的 socket 服务用于在 runSelectLoop() 中与 AMS 通信</li>
<li>fork 创建 system_server 进程</li>
<li>zygote 进入无限循环，等待 AMS 发来信息创建进程</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>Android - init 进程启动</title>
    <url>/2021/07/10/Android/AndroidDevelop_003_kernel_init/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>init 进程启动分为两部分，第一部分是在内核启动，主要完成创建和内核初始化工作；第二部分是在用户空间启动，主要完成 Android 系统的初始化工作。</p>
</blockquote>
<span id="more"></span>

<h3 id="1-内核空间"><a href="#1-内核空间" class="headerlink" title="1. 内核空间"></a>1. 内核空间</h3><p><a href="https://android.googlesource.com/kernel/msm/+/refs/tags/android-11.0.0_r0.25/init/main.c">kernel&#x2F;msm&#x2F;init&#x2F;main.c</a></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">asmlinkage __visible <span class="type">void</span> __init <span class="title function_">start_kernel</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">	rest_init();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> noinline <span class="type">void</span> __ref <span class="title function_">rest_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	...</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * We need to spawn init first so that it obtains pid 1, however</span></span><br><span class="line"><span class="comment">	 * the init task will end up wanting to create kthreads, which, if</span></span><br><span class="line"><span class="comment">	 * we schedule it before we create kthreadd, will OOPS.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	pid = kernel_thread(kernel_init, <span class="literal">NULL</span>, CLONE_FS);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 kernel_thread 创建 init 进程，并回调执行 kernel_init 函数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> __ref <span class="title function_">kernel_init</span><span class="params">(<span class="type">void</span> *unused)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> ret;</span><br><span class="line">	kernel_init_freeable();</span><br><span class="line">	<span class="comment">/* need to finish all async __init code before freeing the memory */</span></span><br><span class="line">	async_synchronize_full();</span><br><span class="line">	ftrace_free_init_mem();</span><br><span class="line">	free_initmem();</span><br><span class="line">	mark_readonly();</span><br><span class="line">	system_state = SYSTEM_RUNNING;</span><br><span class="line">	numa_default_policy();</span><br><span class="line">	rcu_end_inkernel_boot();</span><br><span class="line">	place_marker(<span class="string">&quot;M - DRIVER Kernel Boot Done&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (ramdisk_execute_command) &#123;</span><br><span class="line">		ret = run_init_process(ramdisk_execute_command);</span><br><span class="line">		<span class="keyword">if</span> (!ret)</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		pr_err(<span class="string">&quot;Failed to execute %s (error %d)\n&quot;</span>,</span><br><span class="line">		       ramdisk_execute_command, ret);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * We try each of these until one succeeds.</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * The Bourne shell can be used instead of init if we are</span></span><br><span class="line"><span class="comment">	 * trying to recover a really broken machine.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">if</span> (execute_command) &#123;</span><br><span class="line">		ret = run_init_process(execute_command);</span><br><span class="line">		<span class="keyword">if</span> (!ret)</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		panic(<span class="string">&quot;Requested init %s failed (error %d).&quot;</span>,</span><br><span class="line">		      execute_command, ret);</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">// ramdisk_execute_command 和 execute_command 定义的程序没找到，则从如下目录寻找 init 进行启动</span></span><br><span class="line">	<span class="keyword">if</span> (!try_to_run_init_process(<span class="string">&quot;/sbin/init&quot;</span>) ||</span><br><span class="line">	    !try_to_run_init_process(<span class="string">&quot;/etc/init&quot;</span>) ||</span><br><span class="line">	    !try_to_run_init_process(<span class="string">&quot;/bin/init&quot;</span>) ||</span><br><span class="line">	    !try_to_run_init_process(<span class="string">&quot;/bin/sh&quot;</span>)) <span class="comment">// try_to_run_init_process 最终也是调用 run_init_process 函数</span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	panic(<span class="string">&quot;No working init found.  Try passing init= option to kernel. &quot;</span></span><br><span class="line">	      <span class="string">&quot;See Linux Documentation/admin-guide/init.rst for guidance.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ramdisk_execute_command 和 execute_command 的值是通过 bootloader 传递过来的参数设置的，ramdisk_execute_command 通过 <code>rdinit</code> 参数赋值，execute_command 通过 <code>init</code> 参数赋值，这两个参数会在 BoardConfig.mk 中的 BOARD_KERNEL_CMDLINE 中定义：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">BOARD_KERNEL_CMDLINE += init=/init</span><br></pre></td></tr></table></figure>

<p>ramdisk_execute_command 如果没有被赋值，kernel_init_freeable 函数会赋一个初始值 “&#x2F;init”：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> noinline <span class="type">void</span> __init <span class="title function_">kernel_init_freeable</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (!ramdisk_execute_command)</span><br><span class="line">		ramdisk_execute_command = <span class="string">&quot;/init&quot;</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>找到 init 程序后，执行 run_init_process 函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">try_to_run_init_process</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *init_filename)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> ret;</span><br><span class="line">	ret = run_init_process(init_filename);</span><br><span class="line">	<span class="keyword">if</span> (ret &amp;&amp; ret != -ENOENT) &#123;</span><br><span class="line">		pr_err(<span class="string">&quot;Starting init: %s exists but couldn&#x27;t execute it (error %d)\n&quot;</span>,</span><br><span class="line">		       init_filename, ret);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">run_init_process</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *init_filename)</span></span><br><span class="line">&#123;</span><br><span class="line">	argv_init[<span class="number">0</span>] = init_filename;</span><br><span class="line">	<span class="keyword">return</span> do_execve(getname_kernel(init_filename),</span><br><span class="line">		(<span class="type">const</span> <span class="type">char</span> __user *<span class="type">const</span> __user *)argv_init,</span><br><span class="line">		(<span class="type">const</span> <span class="type">char</span> __user *<span class="type">const</span> __user *)envp_init);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>do_execve 就是执行一个可执行文件。</p>
<p>内核空间的 init 主要工作是做一些 init 的初始化工作，去系统根目录寻找 ramdisk_execute_command 和 execute_command 定义的程序，如果找不到，就寻找 <em>&#x2F;sbin&#x2F;init</em>, <em>&#x2F;etc&#x2F;init</em>, <em>&#x2F;bin&#x2F;init</em>, <em>&#x2F;bin&#x2F;sh</em> 这四个程序进行启动，如果都找不到，则输出 panic 异常。</p>
<p>接下来进入用户空间，分析 Android 系统的 init 进程启动流程。</p>
<h3 id="2-用户空间"><a href="#2-用户空间" class="headerlink" title="2. 用户空间"></a>2. 用户空间</h3><p>init 可执行文件的源码在 <a href="https://android.googlesource.com/platform/system/core/+/refs/tags/android-11.0.0_r25/init/">system&#x2F;core&#x2F;init&#x2F;</a> 目录下</p>
<h4 id="2-1-init-进程入口"><a href="#2-1-init-进程入口" class="headerlink" title="2.1 init 进程入口"></a>2.1 init 进程入口</h4><p><a href="https://android.googlesource.com/platform/system/core/+/refs/tags/android-11.0.0_r25/init/main.cpp">system&#x2F;core&#x2F;init&#x2F;main.cpp</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> __has_feature(address_sanitizer)</span></span><br><span class="line">    __asan_set_error_report_callback(AsanReportCallback);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(<span class="built_in">basename</span>(argv[<span class="number">0</span>]), <span class="string">&quot;ueventd&quot;</span>)) &#123;</span><br><span class="line">        <span class="comment">// init 进程创建子进程 ueventd，负责设备节点的创建、权限设定等一系列工作</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">ueventd_main</span>(argc, argv);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当传入的参数个数大于 1 时</span></span><br><span class="line">    <span class="keyword">if</span> (argc &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// strcmp 是字符串比较函数，相等则返回 0</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">&quot;subcontext&quot;</span>)) &#123;</span><br><span class="line">            android::base::<span class="built_in">InitLogging</span>(argv, &amp;android::base::KernelLogger);</span><br><span class="line">            <span class="type">const</span> BuiltinFunctionMap&amp; function_map = <span class="built_in">GetBuiltinFunctionMap</span>();</span><br><span class="line">            <span class="comment">// 参数为 subcontext，初始化日志系统</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">SubcontextMain</span>(argc, argv, &amp;function_map);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">&quot;selinux_setup&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">// 参数为 selinux_setup，启动 Selinux 安全策略</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">SetupSelinux</span>(argv);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">&quot;second_stage&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">// 参数为 second_stage，执行 init 进程第二阶段启动</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">SecondStageMain</span>(argc, argv);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认执行 init 进程第一阶段启动</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">FirstStageMain</span>(argc, argv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>init 进程创建子进程 ueventd ，将创建节点文件的任务交给 ueventd，由上面分析可知，通过 <a href="https://android.googlesource.com/kernel/msm/+/refs/tags/android-11.0.0_r0.25/init/main.c">kernel&#x2F;msm&#x2F;init&#x2F;main.c</a> 执行 init 程序，无参数，则进入第一阶段启动。</p>
<h4 id="2-2-FirstStageMain"><a href="#2-2-FirstStageMain" class="headerlink" title="2.2 FirstStageMain"></a>2.2 FirstStageMain</h4><p><a href="https://android.googlesource.com/platform/system/core/+/refs/tags/android-11.0.0_r25/init/first_stage_init.cpp">system&#x2F;core&#x2F;init&#x2F;first_stage_init.cpp</a></p>
<p><a href="https://android.googlesource.com/platform/system/core/+/refs/tags/android-11.0.0_r25/init/first_stage_init.cpp">system&#x2F;core&#x2F;init&#x2F;first_stage_init.cpp</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">FirstStageMain</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (REBOOT_BOOTLOADER_ON_PANIC) &#123;</span><br><span class="line">        <span class="comment">// 处理 init crash 的情况，初始化重启系统的处理信号，将 SIGABRT,SIGBUS 等行为设置为 SA_RESTART，当监听到该信号时重启系统到 bootloader</span></span><br><span class="line">        <span class="built_in">InstallRebootSignalHandlers</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    boot_clock::time_point start_time = boot_clock::<span class="built_in">now</span>(); <span class="comment">// 记录启动时间</span></span><br><span class="line"></span><br><span class="line">    std::vector&lt;std::pair&lt;std::string, <span class="type">int</span>&gt;&gt; errors;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECKCALL(x) \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span> ((x) != 0) errors.emplace_back(#x <span class="string">&quot; failed&quot;</span>, errno);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Clear the umask.</span></span><br><span class="line">    <span class="built_in">umask</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">CHECKCALL</span>(<span class="built_in">clearenv</span>());</span><br><span class="line">    <span class="built_in">CHECKCALL</span>(<span class="built_in">setenv</span>(<span class="string">&quot;PATH&quot;</span>, _PATH_DEFPATH, <span class="number">1</span>));</span><br><span class="line">    <span class="comment">// Get the basic filesystem setup we need put together in the initramdisk</span></span><br><span class="line">    <span class="comment">// on / and then we&#x27;ll let the rc file figure out the rest.</span></span><br><span class="line">    <span class="built_in">CHECKCALL</span>(<span class="built_in">mount</span>(<span class="string">&quot;tmpfs&quot;</span>, <span class="string">&quot;/dev&quot;</span>, <span class="string">&quot;tmpfs&quot;</span>, MS_NOSUID, <span class="string">&quot;mode=0755&quot;</span>)); <span class="comment">// 挂载 tmpfs 文件系统</span></span><br><span class="line">    <span class="built_in">CHECKCALL</span>(<span class="built_in">mkdir</span>(<span class="string">&quot;/dev/pts&quot;</span>, <span class="number">0755</span>)); <span class="comment">// 创建目录</span></span><br><span class="line">    <span class="built_in">CHECKCALL</span>(<span class="built_in">mkdir</span>(<span class="string">&quot;/dev/socket&quot;</span>, <span class="number">0755</span>));</span><br><span class="line">    <span class="built_in">CHECKCALL</span>(<span class="built_in">mount</span>(<span class="string">&quot;devpts&quot;</span>, <span class="string">&quot;/dev/pts&quot;</span>, <span class="string">&quot;devpts&quot;</span>, <span class="number">0</span>, <span class="literal">NULL</span>)); <span class="comment">// 挂载 devpts 文件系统</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAKE_STR(x) __STRING(x)</span></span><br><span class="line">    <span class="built_in">CHECKCALL</span>(<span class="built_in">mount</span>(<span class="string">&quot;proc&quot;</span>, <span class="string">&quot;/proc&quot;</span>, <span class="string">&quot;proc&quot;</span>, <span class="number">0</span>, <span class="string">&quot;hidepid=2,gid=&quot;</span> <span class="built_in">MAKE_STR</span>(AID_READPROC))); <span class="comment">// 挂载 proc 文件系统</span></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> MAKE_STR</span></span><br><span class="line">    <span class="comment">// Don&#x27;t expose the raw commandline to unprivileged processes.</span></span><br><span class="line">    <span class="built_in">CHECKCALL</span>(<span class="built_in">chmod</span>(<span class="string">&quot;/proc/cmdline&quot;</span>, <span class="number">0440</span>));</span><br><span class="line">    std::string cmdline;</span><br><span class="line">    android::base::<span class="built_in">ReadFileToString</span>(<span class="string">&quot;/proc/cmdline&quot;</span>, &amp;cmdline);</span><br><span class="line">    <span class="type">gid_t</span> groups[] = &#123;AID_READPROC&#125;;</span><br><span class="line">    <span class="built_in">CHECKCALL</span>(<span class="built_in">setgroups</span>(<span class="built_in">arraysize</span>(groups), groups));</span><br><span class="line">    <span class="built_in">CHECKCALL</span>(<span class="built_in">mount</span>(<span class="string">&quot;sysfs&quot;</span>, <span class="string">&quot;/sys&quot;</span>, <span class="string">&quot;sysfs&quot;</span>, <span class="number">0</span>, <span class="literal">NULL</span>)); <span class="comment">// 挂载 sysfs 文件系统</span></span><br><span class="line">    <span class="built_in">CHECKCALL</span>(<span class="built_in">mount</span>(<span class="string">&quot;selinuxfs&quot;</span>, <span class="string">&quot;/sys/fs/selinux&quot;</span>, <span class="string">&quot;selinuxfs&quot;</span>, <span class="number">0</span>, <span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">CHECKCALL</span>(<span class="built_in">mknod</span>(<span class="string">&quot;/dev/kmsg&quot;</span>, S_IFCHR | <span class="number">0600</span>, <span class="built_in">makedev</span>(<span class="number">1</span>, <span class="number">11</span>))); <span class="comment">// 提前创建 kmsg 设备节点文件，用于输出 log 信息</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">if</span> <span class="title">constexpr</span> <span class="params">(WORLD_WRITABLE_KMSG)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">CHECKCALL</span>(<span class="built_in">mknod</span>(<span class="string">&quot;/dev/kmsg_debug&quot;</span>, S_IFCHR | <span class="number">0622</span>, <span class="built_in">makedev</span>(<span class="number">1</span>, <span class="number">11</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">CHECKCALL</span>(<span class="built_in">mknod</span>(<span class="string">&quot;/dev/random&quot;</span>, S_IFCHR | <span class="number">0666</span>, <span class="built_in">makedev</span>(<span class="number">1</span>, <span class="number">8</span>)));</span><br><span class="line">    <span class="built_in">CHECKCALL</span>(<span class="built_in">mknod</span>(<span class="string">&quot;/dev/urandom&quot;</span>, S_IFCHR | <span class="number">0666</span>, <span class="built_in">makedev</span>(<span class="number">1</span>, <span class="number">9</span>)));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This is needed for log wrapper, which gets called before ueventd runs.</span></span><br><span class="line">    <span class="built_in">CHECKCALL</span>(<span class="built_in">mknod</span>(<span class="string">&quot;/dev/ptmx&quot;</span>, S_IFCHR | <span class="number">0666</span>, <span class="built_in">makedev</span>(<span class="number">5</span>, <span class="number">2</span>)));</span><br><span class="line">    <span class="built_in">CHECKCALL</span>(<span class="built_in">mknod</span>(<span class="string">&quot;/dev/null&quot;</span>, S_IFCHR | <span class="number">0666</span>, <span class="built_in">makedev</span>(<span class="number">1</span>, <span class="number">3</span>)));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// These below mounts are done in first stage init so that first stage mount can mount</span></span><br><span class="line">    <span class="comment">// subdirectories of /mnt/&#123;vendor,product&#125;/.  Other mounts, not required by first stage mount,</span></span><br><span class="line">    <span class="comment">// should be done in rc files.</span></span><br><span class="line">    <span class="comment">// Mount staging areas for devices managed by vold</span></span><br><span class="line">    <span class="comment">// See storage config details at http://source.android.com/devices/storage/</span></span><br><span class="line">    <span class="built_in">CHECKCALL</span>(<span class="built_in">mount</span>(<span class="string">&quot;tmpfs&quot;</span>, <span class="string">&quot;/mnt&quot;</span>, <span class="string">&quot;tmpfs&quot;</span>, MS_NOEXEC | MS_NOSUID | MS_NODEV,</span><br><span class="line">                    <span class="string">&quot;mode=0755,uid=0,gid=1000&quot;</span>));</span><br><span class="line">    <span class="comment">// /mnt/vendor is used to mount vendor-specific partitions that can not be</span></span><br><span class="line">    <span class="comment">// part of the vendor partition, e.g. because they are mounted read-write.</span></span><br><span class="line">    <span class="built_in">CHECKCALL</span>(<span class="built_in">mkdir</span>(<span class="string">&quot;/mnt/vendor&quot;</span>, <span class="number">0755</span>)); <span class="comment">// 创建 vendor 目录</span></span><br><span class="line">    <span class="comment">// /mnt/product is used to mount product-specific partitions that can not be</span></span><br><span class="line">    <span class="comment">// part of the product partition, e.g. because they are mounted read-write.</span></span><br><span class="line">    <span class="built_in">CHECKCALL</span>(<span class="built_in">mkdir</span>(<span class="string">&quot;/mnt/product&quot;</span>, <span class="number">0755</span>)); <span class="comment">// 创建 product 目录</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// /debug_ramdisk is used to preserve additional files from the debug ramdisk</span></span><br><span class="line">    <span class="built_in">CHECKCALL</span>(<span class="built_in">mount</span>(<span class="string">&quot;tmpfs&quot;</span>, <span class="string">&quot;/debug_ramdisk&quot;</span>, <span class="string">&quot;tmpfs&quot;</span>, MS_NOEXEC | MS_NOSUID | MS_NODEV,</span><br><span class="line">                    <span class="string">&quot;mode=0755,uid=0,gid=0&quot;</span>));</span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> CHECKCALL</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">SetStdioToDevNull</span>(argv); <span class="comment">// 把标准输入、标准输出和标准错误重定向到空设备文件 &quot;/dev/null&quot;</span></span><br><span class="line">    <span class="comment">// Now that tmpfs is mounted on /dev and we have /dev/kmsg, we can actually</span></span><br><span class="line">    <span class="comment">// talk to the outside world...</span></span><br><span class="line">    <span class="built_in">InitKernelLogging</span>(argv); <span class="comment">// 初始化 kernel log 系统</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="built_in">LOG</span>(INFO) &lt;&lt; <span class="string">&quot;init first stage started!&quot;</span>;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">DoFirstStageMount</span>()) &#123; <span class="comment">// DoFirstStageMount：初始化特定设备并挂载</span></span><br><span class="line">        <span class="built_in">LOG</span>(FATAL) &lt;&lt; <span class="string">&quot;Failed to mount required partitions early ...&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// Android Verified Boot，AVB 主要用于防止系统文件本身被篡改，还包含了防止系统回滚的功能 </span></span><br><span class="line">    <span class="built_in">SetInitAvbVersionInRecovery</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* path = <span class="string">&quot;/system/bin/init&quot;</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* args[] = &#123;path, <span class="string">&quot;selinux_setup&quot;</span>, <span class="literal">nullptr</span>&#125;;</span><br><span class="line">    <span class="keyword">auto</span> fd = <span class="built_in">open</span>(<span class="string">&quot;/dev/kmsg&quot;</span>, O_WRONLY | O_CLOEXEC);</span><br><span class="line">    <span class="built_in">dup2</span>(fd, STDOUT_FILENO);</span><br><span class="line">    <span class="built_in">dup2</span>(fd, STDERR_FILENO);</span><br><span class="line">    <span class="built_in">close</span>(fd);</span><br><span class="line">    <span class="built_in">execv</span>(path, <span class="built_in">const_cast</span>&lt;<span class="type">char</span>**&gt;(args));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// execv() only returns if an error happened, in which case we</span></span><br><span class="line">    <span class="comment">// panic and never fall through this conditional.</span></span><br><span class="line">    <span class="built_in">PLOG</span>(FATAL) &lt;&lt; <span class="string">&quot;execv(\&quot;&quot;</span> &lt;&lt; path &lt;&lt; <span class="string">&quot;\&quot;) failed&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>FirstStageMain() 主要工作：</p>
<ul>
<li><p>InstallRebootSignalHandlers()：处理 init crash 的情况，初始化重启系统的处理信号，将 SIGABRT, SIGBUS, SIGFPE, SIGILL, SIGSEGV, SIGSTKFLT, SIGSYS, SIGTRAP 等行为设置为 SA_RESTART，当监听到该信号时重启系统到 bootloader</p>
</li>
<li><p>umask(0)：设置允许当前进程创建文件或者目录最大可操作的权限 0777</p>
</li>
<li><p>CHECKALL()：检查创建&#x2F;挂载相关节点，如 <em>&#x2F;dev&#x2F;kmsg</em>、*&#x2F;proc<em>、</em>&#x2F;mnt&#x2F;vendor* 等</p>
<ul>
<li><p>mount 函数原型</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* source：将要挂上的文件系统，通常是一个设备名</span></span><br><span class="line"><span class="comment"> * target：文件系统所要挂载的目标目录。</span></span><br><span class="line"><span class="comment"> * filesystemtype：文件系统的类型，可以是&quot;ext2&quot;，&quot;msdos&quot;，&quot;proc&quot;，&quot;ntfs&quot;，&quot;iso9660&quot;</span></span><br><span class="line"><span class="comment"> * mountflags：指定文件系统的读写访问标志</span></span><br><span class="line"><span class="comment"> * data：文件系统特有的参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">mount</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *source, <span class="type">const</span> <span class="type">char</span> *target, <span class="type">const</span> <span class="type">char</span> *filesystemtype,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">unsigned</span> <span class="type">long</span> mountflags, <span class="type">const</span> <span class="type">void</span> *data)</span></span>;</span><br></pre></td></tr></table></figure>

<p>分别挂载了 <code>tmpfs, devpts, proc, sysfs, selinuxfs</code> 五类<strong>文件系统</strong>，</p>
<ul>
<li><strong>tmpfs</strong>：一种<code>虚拟内存文件系统</code>，它会将所有的文件存储在虚拟内存中，如果你将 tmpfs 文件系统卸载后，那么其下的所有的内容将不复存在。tmpfs 既可以使用 RAM，也可以使用交换分区，会根据你的实际需要而改变大小。tmpfs 的速度非常快，因为它是驻留在 RAM 中的，即使用了交换分区，性能仍然非常卓越。由于tmpfs是驻留在 RAM 的，因此它的内容是不持久的。断电后，tmpfs 的内容就消失了，这也是被称作 tmpfs 的根本原因。</li>
<li><strong>devpts</strong>：是 linux 提供给管理员通过文件系统和内核进行沟通（读写）的一种<code>标准接口</code>，pts 是远程虚拟终端，devpts 即远程虚拟终端文件设备。通过 &#x2F;dev&#x2F;pts 可以了解目前远程虚拟终端的基本情况。</li>
<li><strong>proc</strong>：proc 文件系统是一个非常重要的<code>虚拟文件系统</code>，只存在于内存当中不占用磁盘空间，它以文件系统的方式为访问系统内核数据的操作提供接口，用户和应用程序可以通过 proc 得到系统的信息，并可以改变内核的某些参数。</li>
<li><strong>sysfs</strong>：也是一种<code>虚拟内存文件系统</code>，与 proc 类似，但除了和 proc 一样具有查看和设定内核参数的功能外，还有为 linux 统一设备模型作为管理之用，sysfs 导出内核数据的方式更统一，并且组织的更好，设计优于 proc。</li>
<li><strong>selinuxfs</strong>：也是虚拟文件系统,通常挂载在&#x2F;sys&#x2F;fs&#x2F;selinux目录下,用来存放SELinux安全策略文件。</li>
</ul>
</li>
</ul>
</li>
<li><p>InitKernelLogging(argv)：初始化内核 log，位于节点 <em>&#x2F;dev&#x2F;kmsg</em>，随后的日志格式化后写入到 *&#x2F;dev&#x2F;kmsg 中</p>
</li>
<li><p>execv(path, const_cast&lt;char**&gt;(args))：执行 <code>/system/bin/init selinux_setup</code> ，重新执行 init 程序，只不过带了个 <code>selinux_setup</code> 参数，重新回到 <a href="https://android.googlesource.com/platform/system/core/+/refs/tags/android-11.0.0_r25/init/main.cpp">system&#x2F;core&#x2F;init&#x2F;main.cpp</a> 中：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">&quot;selinux_setup&quot;</span>)) &#123;</span><br><span class="line">    <span class="comment">// 启动Selinux安全策略</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">SetupSelinux</span>(argv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>execv 会停止执行当前的进程，以 path 指定的应用进程替换被停止执行的进程，进程 ID 没有改变。</p>
</li>
</ul>
<h4 id="2-3-SetupSelinux"><a href="#2-3-SetupSelinux" class="headerlink" title="2.3 SetupSelinux"></a>2.3 SetupSelinux</h4><p><a href="https://android.googlesource.com/platform/system/core/+/refs/tags/android-11.0.0_r25/init/selinux.cpp">system&#x2F;core&#x2F;init&#x2F;selinux.cpp</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">SetupSelinux</span><span class="params">(<span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">SetStdioToDevNull</span>(argv);</span><br><span class="line">    <span class="built_in">InitKernelLogging</span>(argv);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (REBOOT_BOOTLOADER_ON_PANIC) &#123;</span><br><span class="line">        <span class="comment">// 处理 init 进程 crash 的情况，重启到 BootLoader</span></span><br><span class="line">        <span class="built_in">InstallRebootSignalHandlers</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    boot_clock::time_point start_time = boot_clock::<span class="built_in">now</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">MountMissingSystemPartitions</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set up SELinux, loading the SELinux policy.</span></span><br><span class="line">    <span class="comment">// 初始化 SELinux，加载 SELinux 策略，配置 log 输出</span></span><br><span class="line">    <span class="built_in">SelinuxSetupKernelLogging</span>();</span><br><span class="line">    <span class="built_in">SelinuxInitialize</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// We&#x27;re in the kernel domain and want to transition to the init domain.  File systems that</span></span><br><span class="line">    <span class="comment">// store SELabels in their xattrs, such as ext4 do not need an explicit restorecon here,</span></span><br><span class="line">    <span class="comment">// but other file systems do.  In particular, this is needed for ramdisks such as the</span></span><br><span class="line">    <span class="comment">// recovery image for A/B devices.</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">selinux_android_restorecon</span>(<span class="string">&quot;/system/bin/init&quot;</span>, <span class="number">0</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">PLOG</span>(FATAL) &lt;&lt; <span class="string">&quot;restorecon failed of /system/bin/init failed&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">setenv</span>(kEnvSelinuxStartedAt, std::<span class="built_in">to_string</span>(start_time.<span class="built_in">time_since_epoch</span>().<span class="built_in">count</span>()).<span class="built_in">c_str</span>(), <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动 init 进程第二阶段</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* path = <span class="string">&quot;/system/bin/init&quot;</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* args[] = &#123;path, <span class="string">&quot;second_stage&quot;</span>, <span class="literal">nullptr</span>&#125;;</span><br><span class="line">    <span class="built_in">execv</span>(path, <span class="built_in">const_cast</span>&lt;<span class="type">char</span>**&gt;(args));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// execv() only returns if an error happened, in which case we</span></span><br><span class="line">    <span class="comment">// panic and never return from this function.</span></span><br><span class="line">    <span class="built_in">PLOG</span>(FATAL) &lt;&lt; <span class="string">&quot;execv(\&quot;&quot;</span> &lt;&lt; path &lt;&lt; <span class="string">&quot;\&quot;) failed&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>SetupSelinux 主要工作是启动 Selinux 安全机制，初始化 Selinux，加载 Selinux 规则，配置 Selinux 日志输出，最后通过 execv 跳转 main.cpp 启动 init 进程第二阶段启动。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">&quot;second_stage&quot;</span>)) &#123;</span><br><span class="line">    <span class="comment">// 执行第二阶段启动</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">SecondStageMain</span>(argc, argv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-4-SecondStageMain"><a href="#2-4-SecondStageMain" class="headerlink" title="2.4 SecondStageMain"></a>2.4 SecondStageMain</h4><p><a href="https://android.googlesource.com/platform/system/core/+/refs/tags/android-11.0.0_r25/init/init.cpp">system&#x2F;core&#x2F;init&#x2F;init.cpp</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">SecondStageMain</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (REBOOT_BOOTLOADER_ON_PANIC) &#123;</span><br><span class="line">        <span class="comment">// 处理 init 进程 crash 的情况，重启到 BootLoader</span></span><br><span class="line">        <span class="built_in">InstallRebootSignalHandlers</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="built_in">InitKernelLogging</span>(argv); <span class="comment">// 初始化日志输出</span></span><br><span class="line">    <span class="built_in">LOG</span>(INFO) &lt;&lt; <span class="string">&quot;init second stage started!&quot;</span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="built_in">PropertyInit</span>(); <span class="comment">// 1. 初始化属性系统，并从指定文件读取属性,</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// Now set up SELinux for second stage.</span></span><br><span class="line">    <span class="built_in">SelinuxSetupKernelLogging</span>(); <span class="comment">// 配置第二阶段 Selinux</span></span><br><span class="line">    <span class="built_in">SelabelInitialize</span>();</span><br><span class="line">    <span class="built_in">SelinuxRestoreContext</span>(); <span class="comment">// 恢复一些安全上下文</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="built_in">InstallSignalFdHandler</span>(&amp;epoll); <span class="comment">// 捕获子进程结束的信号，获取结束码，通过结束码把程序表中的子进程移除，防止成为僵尸进程的子进程占用程序表空间</span></span><br><span class="line">    <span class="built_in">InstallInitNotifier</span>(&amp;epoll);</span><br><span class="line">    <span class="built_in">StartPropertyService</span>(&amp;property_fd); <span class="comment">// 2. 初始化并开启系统属性服务</span></span><br><span class="line">    ...</span><br><span class="line">    ActionManager&amp; am = ActionManager::<span class="built_in">GetInstance</span>();</span><br><span class="line">    ServiceList&amp; sm = ServiceList::<span class="built_in">GetInstance</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">LoadBootScripts</span>(am, sm); <span class="comment">// 3. 解析 init.rc 等文件，建立 rc 文件的 action 、service，启动其他进程</span></span><br></pre></td></tr></table></figure>

<h5 id="2-4-1-PropertyInit"><a href="#2-4-1-PropertyInit" class="headerlink" title="2.4.1 PropertyInit"></a>2.4.1 PropertyInit</h5><p><a href="https://android.googlesource.com/platform/system/core/+/refs/tags/android-11.0.0_r25/init/property_service.cpp">system&#x2F;core&#x2F;init&#x2F;property_service.cpp</a></p>
<p><strong>PropertyInit</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">PropertyInit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    selinux_callback cb;</span><br><span class="line">    cb.func_audit = PropertyAuditCallback;</span><br><span class="line">    <span class="comment">// selinux 控制属性的 set 和 get</span></span><br><span class="line">    <span class="built_in">selinux_set_callback</span>(SELINUX_CB_AUDIT, cb);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">mkdir</span>(<span class="string">&quot;/dev/__properties__&quot;</span>, S_IRWXU | S_IXGRP | S_IXOTH);</span><br><span class="line">    <span class="built_in">CreateSerializedPropertyInfo</span>(); <span class="comment">// 从文件中加载属性值</span></span><br><span class="line">    <span class="comment">// 初始化 __system_property_area 属性内存区域，将 /dev/__properties__/property_info 设备文件映射到共享内存，此区域记录着所有的属性值</span></span><br><span class="line">    <span class="keyword">if</span> (__system_property_area_init()) &#123; </span><br><span class="line">        <span class="built_in">LOG</span>(FATAL) &lt;&lt; <span class="string">&quot;Failed to initialize property area&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!property_info_area.<span class="built_in">LoadDefaultPath</span>()) &#123;</span><br><span class="line">        <span class="built_in">LOG</span>(FATAL) &lt;&lt; <span class="string">&quot;Failed to load serialized property info file&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If arguments are passed both on the command line and in DT,</span></span><br><span class="line">    <span class="comment">// properties set in DT always have priority over the command-line ones.</span></span><br><span class="line">    <span class="comment">// 读取设备树 /proc/device-tree/firmware/android/ 中的 name 和 compatible 节点内容，添加 ro.boot. 前缀后加入到 property 属性系统中</span></span><br><span class="line">    <span class="built_in">ProcessKernelDt</span>(); </span><br><span class="line">    <span class="comment">// 读取 /pro/cmdline，将 androidboot. 开头的变量，添加 ro.boot. 前缀后加入到 property 属性系统中</span></span><br><span class="line">    <span class="built_in">ProcessKernelCmdline</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Propagate the kernel variables to internal variables</span></span><br><span class="line">    <span class="comment">// used by init as well as the current required properties.</span></span><br><span class="line">    <span class="built_in">ExportKernelBootProps</span>(); <span class="comment">// 处理一些特定的属性值，如果没有赋值，则将其赋值为 nuknown 或者 0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化系统已有属性值</span></span><br><span class="line">    <span class="built_in">PropertyLoadBootDefaults</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>CreateSerializedPropertyInfo</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CreateSerializedPropertyInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> property_infos = std::<span class="built_in">vector</span>&lt;PropertyInfoEntry&gt;();</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">access</span>(<span class="string">&quot;/system/etc/selinux/plat_property_contexts&quot;</span>, R_OK) != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">LoadPropertyInfoFromFile</span>(<span class="string">&quot;/system/etc/selinux/plat_property_contexts&quot;</span>,</span><br><span class="line">                                      &amp;property_infos)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Don&#x27;t check for failure here, so we always have a sane list of properties.</span></span><br><span class="line">        <span class="comment">// E.g. In case of recovery, the vendor partition will not have mounted and we</span></span><br><span class="line">        <span class="comment">// still need the system / platform properties to function.</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">access</span>(<span class="string">&quot;/system_ext/etc/selinux/system_ext_property_contexts&quot;</span>, R_OK) != <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">LoadPropertyInfoFromFile</span>(<span class="string">&quot;/system_ext/etc/selinux/system_ext_property_contexts&quot;</span>,</span><br><span class="line">                                     &amp;property_infos);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">LoadPropertyInfoFromFile</span>(<span class="string">&quot;/vendor/etc/selinux/vendor_property_contexts&quot;</span>,</span><br><span class="line">                                      &amp;property_infos)) &#123;</span><br><span class="line">            <span class="comment">// Fallback to nonplat_* if vendor_* doesn&#x27;t exist.</span></span><br><span class="line">            <span class="built_in">LoadPropertyInfoFromFile</span>(<span class="string">&quot;/vendor/etc/selinux/nonplat_property_contexts&quot;</span>,</span><br><span class="line">                                     &amp;property_infos);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">access</span>(<span class="string">&quot;/product/etc/selinux/product_property_contexts&quot;</span>, R_OK) != <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">LoadPropertyInfoFromFile</span>(<span class="string">&quot;/product/etc/selinux/product_property_contexts&quot;</span>,</span><br><span class="line">                                     &amp;property_infos);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">access</span>(<span class="string">&quot;/odm/etc/selinux/odm_property_contexts&quot;</span>, R_OK) != <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">LoadPropertyInfoFromFile</span>(<span class="string">&quot;/odm/etc/selinux/odm_property_contexts&quot;</span>, &amp;property_infos);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">LoadPropertyInfoFromFile</span>(<span class="string">&quot;/plat_property_contexts&quot;</span>, &amp;property_infos)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">LoadPropertyInfoFromFile</span>(<span class="string">&quot;/system_ext_property_contexts&quot;</span>, &amp;property_infos);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">LoadPropertyInfoFromFile</span>(<span class="string">&quot;/vendor_property_contexts&quot;</span>, &amp;property_infos)) &#123;</span><br><span class="line">            <span class="comment">// Fallback to nonplat_* if vendor_* doesn&#x27;t exist.</span></span><br><span class="line">            <span class="built_in">LoadPropertyInfoFromFile</span>(<span class="string">&quot;/nonplat_property_contexts&quot;</span>, &amp;property_infos);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">LoadPropertyInfoFromFile</span>(<span class="string">&quot;/product_property_contexts&quot;</span>, &amp;property_infos);</span><br><span class="line">        <span class="built_in">LoadPropertyInfoFromFile</span>(<span class="string">&quot;/odm_property_contexts&quot;</span>, &amp;property_infos);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>CreateSerializedPropertyInfo</strong>：作用是从 selinux 模块 prop 文件中（如 <code>/system/etc/selinux/plat_property_contexts</code>）读取 selinux 相关属性值，并将其存储到一个动态数组 property_infos 中，随后加载到共享内存中。</p>
<p><strong>PropertyLoadBootDefaults</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">PropertyLoadBootDefaults</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// TODO(b/117892318): merge prop.default and build.prop files into one</span></span><br><span class="line">    <span class="comment">// We read the properties and their values into a map, in order to always allow properties</span></span><br><span class="line">    <span class="comment">// loaded in the later property files to override the properties in loaded in the earlier</span></span><br><span class="line">    <span class="comment">// property files, regardless of if they are &quot;ro.&quot; properties or not.</span></span><br><span class="line">    std::map&lt;std::string, std::string&gt; properties;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">load_properties_from_file</span>(<span class="string">&quot;/system/etc/prop.default&quot;</span>, <span class="literal">nullptr</span>, &amp;properties)) &#123;</span><br><span class="line">        <span class="comment">// Try recovery path</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">load_properties_from_file</span>(<span class="string">&quot;/prop.default&quot;</span>, <span class="literal">nullptr</span>, &amp;properties)) &#123;</span><br><span class="line">            <span class="comment">// Try legacy path</span></span><br><span class="line">            <span class="built_in">load_properties_from_file</span>(<span class="string">&quot;/default.prop&quot;</span>, <span class="literal">nullptr</span>, &amp;properties);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">load_properties_from_file</span>(<span class="string">&quot;/system/build.prop&quot;</span>, <span class="literal">nullptr</span>, &amp;properties);</span><br><span class="line">    <span class="built_in">load_properties_from_file</span>(<span class="string">&quot;/system_ext/build.prop&quot;</span>, <span class="literal">nullptr</span>, &amp;properties);</span><br><span class="line">    <span class="built_in">load_properties_from_file</span>(<span class="string">&quot;/vendor/default.prop&quot;</span>, <span class="literal">nullptr</span>, &amp;properties);</span><br><span class="line">    <span class="built_in">load_properties_from_file</span>(<span class="string">&quot;/vendor/build.prop&quot;</span>, <span class="literal">nullptr</span>, &amp;properties);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">SelinuxGetVendorAndroidVersion</span>() &gt;= __ANDROID_API_Q__) &#123;</span><br><span class="line">        <span class="built_in">load_properties_from_file</span>(<span class="string">&quot;/odm/etc/build.prop&quot;</span>, <span class="literal">nullptr</span>, &amp;properties);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">load_properties_from_file</span>(<span class="string">&quot;/odm/default.prop&quot;</span>, <span class="literal">nullptr</span>, &amp;properties);</span><br><span class="line">        <span class="built_in">load_properties_from_file</span>(<span class="string">&quot;/odm/build.prop&quot;</span>, <span class="literal">nullptr</span>, &amp;properties);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">load_properties_from_file</span>(<span class="string">&quot;/product/build.prop&quot;</span>, <span class="literal">nullptr</span>, &amp;properties);</span><br><span class="line">    <span class="built_in">load_properties_from_file</span>(<span class="string">&quot;/factory/factory.prop&quot;</span>, <span class="string">&quot;ro.*&quot;</span>, &amp;properties);</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; [name, value] : properties) &#123;</span><br><span class="line">        std::string error;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">PropertySet</span>(name, value, &amp;error) != PROP_SUCCESS) &#123;</span><br><span class="line">            <span class="built_in">LOG</span>(ERROR) &lt;&lt; <span class="string">&quot;Could not set &#x27;&quot;</span> &lt;&lt; name &lt;&lt; <span class="string">&quot;&#x27; to &#x27;&quot;</span> &lt;&lt; value</span><br><span class="line">                       &lt;&lt; <span class="string">&quot;&#x27; while loading .prop files&quot;</span> &lt;&lt; error;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">property_initialize_ro_product_props</span>(); <span class="comment">// 初始化 &quot;ro.product.&quot; 为前缀的属性</span></span><br><span class="line">    <span class="built_in">property_derive_build_fingerprint</span>(); <span class="comment">// 初始化一些编译相关的属性</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>PropertyLoadBootDefaults</strong>：加载系统已有属性值（*.prop 文件），并将其存储到 properties 中，再使用 PropertySet 方法添加到属性系统中。</p>
<h5 id="2-4-2-StartPropertyService"><a href="#2-4-2-StartPropertyService" class="headerlink" title="2.4.2 StartPropertyService"></a>2.4.2 StartPropertyService</h5><p><a href="https://android.googlesource.com/platform/system/core/+/refs/tags/android-11.0.0_r25/init/property_service.cpp">system&#x2F;core&#x2F;init&#x2F;property_service.cpp</a></p>
<p><strong>StartPropertyService</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">StartPropertyService</span><span class="params">(<span class="type">int</span>* epoll_socket)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 设置属性版本号</span></span><br><span class="line">    <span class="built_in">InitPropertySet</span>(<span class="string">&quot;ro.property_service.version&quot;</span>, <span class="string">&quot;2&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> sockets[<span class="number">2</span>]; <span class="comment">// 接收代表两个套接口的数组，每个文件描述法代表一个套接口</span></span><br><span class="line">    <span class="comment">/* int socketpair(int domain, int type, int protocol, int sv[2]);</span></span><br><span class="line"><span class="comment">     * domin - 表示协议族，只能为 AF_LOCAL 或者 AF_UNIX</span></span><br><span class="line"><span class="comment">     * type - 表示协议</span></span><br><span class="line"><span class="comment">     * protocol - 表示类型，只能为0</span></span><br><span class="line"><span class="comment">     * sv[2] - 接收代表两个套接口的整数数组，每一个文件描述符代表一个套接口，并且与另一个并没有区别</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">socketpair</span>(AF_UNIX, SOCK_SEQPACKET | SOCK_CLOEXEC, <span class="number">0</span>, sockets) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">PLOG</span>(FATAL) &lt;&lt; <span class="string">&quot;Failed to socketpair() between property_service and init&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    *epoll_socket = from_init_socket = sockets[<span class="number">0</span>];</span><br><span class="line">    init_socket = sockets[<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">StartSendingMessages</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建 socket，返回 socket id</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">auto</span> result = <span class="built_in">CreateSocket</span>(PROP_SERVICE_NAME, SOCK_STREAM | SOCK_CLOEXEC | SOCK_NONBLOCK,</span><br><span class="line">                                   <span class="literal">false</span>, <span class="number">0666</span>, <span class="number">0</span>, <span class="number">0</span>, &#123;&#125;);</span><br><span class="line">        result.<span class="built_in">ok</span>()) &#123;</span><br><span class="line">        property_set_fd = *result;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">LOG</span>(FATAL) &lt;&lt; <span class="string">&quot;start_property_service socket creation failed: &quot;</span> &lt;&lt; result.<span class="built_in">error</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听 socket 文件描述符 property_set_fd，设置最大并发数为 8</span></span><br><span class="line">    <span class="built_in">listen</span>(property_set_fd, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> new_thread = std::thread&#123;PropertyServiceThread&#125;;</span><br><span class="line">    property_service_thread.<span class="built_in">swap</span>(new_thread);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>socketpair 建立一对连接的套接字，每一端都可进行读写，监听 property_set_fd 描述符</p>
<p><strong>PropertyServiceThread</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">PropertyServiceThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Epoll epoll;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">auto</span> result = epoll.<span class="built_in">Open</span>(); !result.<span class="built_in">ok</span>()) &#123;</span><br><span class="line">        <span class="built_in">LOG</span>(FATAL) &lt;&lt; result.<span class="built_in">error</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把 socket 文件描述符 property_set_fd 注册到 epoll，用 epoll 监听描述符，收到消息时通过 handle_property_set_fd 处理</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">auto</span> result = epoll.<span class="built_in">RegisterHandler</span>(property_set_fd, handle_property_set_fd);</span><br><span class="line">        !result.<span class="built_in">ok</span>()) &#123;</span><br><span class="line">        <span class="built_in">LOG</span>(FATAL) &lt;&lt; result.<span class="built_in">error</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把 socket 文件描述符 init_socket 注册到 epoll，收到消息时通过 HandleInitSocket 处理</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">auto</span> result = epoll.<span class="built_in">RegisterHandler</span>(init_socket, HandleInitSocket); !result.<span class="built_in">ok</span>()) &#123;</span><br><span class="line">        <span class="built_in">LOG</span>(FATAL) &lt;&lt; result.<span class="built_in">error</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">auto</span> pending_functions = epoll.<span class="built_in">Wait</span>(std::<span class="literal">nullopt</span>);</span><br><span class="line">        <span class="keyword">if</span> (!pending_functions.<span class="built_in">ok</span>()) &#123;</span><br><span class="line">            <span class="built_in">LOG</span>(ERROR) &lt;&lt; pending_functions.<span class="built_in">error</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; function : *pending_functions) &#123;</span><br><span class="line">                (*function)();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>把文件描述符 prop_set_fd 添加到 epoll，用 epoll 监听描述符，收到消息后通过 handle_property_set_fd 来处理，把件描述符 init_socket 添加到 epoll，收到消息时通过 HandleInitSocket 处理。</p>
<p>epoll 是 Linux 内核的可扩展 I&#x2F;O 事件通知机制，也就是他能高效的监听文件描述符，提高 CPU 的利用率。</p>
<p><strong>handle_property_set_fd</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">handle_property_set_fd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">uint32_t</span> kDefaultSocketTimeout = <span class="number">2000</span>; <span class="comment">/* ms */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 利用 property_set_fd 文件描述符接收 socket 传递的消息</span></span><br><span class="line">    <span class="type">int</span> s = <span class="built_in">accept4</span>(property_set_fd, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>, SOCK_CLOEXEC);</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ucred cr;</span><br><span class="line">    <span class="type">socklen_t</span> cr_size = <span class="built_in">sizeof</span>(cr);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">getsockopt</span>(s, SOL_SOCKET, SO_PEERCRED, &amp;cr, &amp;cr_size) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">close</span>(s);</span><br><span class="line">        <span class="built_in">PLOG</span>(ERROR) &lt;&lt; <span class="string">&quot;sys_prop: unable to get SO_PEERCRED&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">SocketConnection <span class="title">socket</span><span class="params">(s, cr)</span></span>; <span class="comment">// 利用 proerty_set_fd 重构一个 socket 来读取发送来的消息</span></span><br><span class="line">    <span class="type">uint32_t</span> timeout_ms = kDefaultSocketTimeout;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span> cmd = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 读取发来的消息</span></span><br><span class="line">    <span class="keyword">if</span> (!socket.<span class="built_in">RecvUint32</span>(&amp;cmd, &amp;timeout_ms)) &#123;</span><br><span class="line">        <span class="built_in">PLOG</span>(ERROR) &lt;&lt; <span class="string">&quot;sys_prop: error while reading command from the socket&quot;</span>;</span><br><span class="line">        socket.<span class="built_in">SendUint32</span>(PROP_ERROR_READ_CMD);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理不同的消息</span></span><br><span class="line">    <span class="keyword">switch</span> (cmd) &#123;</span><br><span class="line">    <span class="keyword">case</span> PROP_MSG_SETPROP: &#123;</span><br><span class="line">        <span class="type">char</span> prop_name[PROP_NAME_MAX];</span><br><span class="line">        <span class="type">char</span> prop_value[PROP_VALUE_MAX];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!socket.<span class="built_in">RecvChars</span>(prop_name, PROP_NAME_MAX, &amp;timeout_ms) ||</span><br><span class="line">            !socket.<span class="built_in">RecvChars</span>(prop_value, PROP_VALUE_MAX, &amp;timeout_ms)) &#123;</span><br><span class="line">          <span class="built_in">PLOG</span>(ERROR) &lt;&lt; <span class="string">&quot;sys_prop(PROP_MSG_SETPROP): error while reading name/value from the socket&quot;</span>;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">        std::string source_context;</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="type">const</span> <span class="keyword">auto</span>&amp; cr = socket.<span class="built_in">cred</span>();</span><br><span class="line">        std::string error;</span><br><span class="line">        <span class="type">uint32_t</span> result =</span><br><span class="line">                <span class="built_in">HandlePropertySet</span>(prop_name, prop_value, source_context, cr, <span class="literal">nullptr</span>, &amp;error);</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> PROP_MSG_SETPROP2: &#123;</span><br><span class="line">        std::string name;</span><br><span class="line">        std::string value;</span><br><span class="line">        <span class="keyword">if</span> (!socket.<span class="built_in">RecvString</span>(&amp;name, &amp;timeout_ms) ||</span><br><span class="line">            !socket.<span class="built_in">RecvString</span>(&amp;value, &amp;timeout_ms)) &#123;</span><br><span class="line">          <span class="built_in">PLOG</span>(ERROR) &lt;&lt; <span class="string">&quot;sys_prop(PROP_MSG_SETPROP2): error while reading name/value from the socket&quot;</span>;</span><br><span class="line">          socket.<span class="built_in">SendUint32</span>(PROP_ERROR_READ_DATA);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        std::string source_context;</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="type">const</span> <span class="keyword">auto</span>&amp; cr = socket.<span class="built_in">cred</span>();</span><br><span class="line">        std::string error;</span><br><span class="line">        <span class="type">uint32_t</span> result = <span class="built_in">HandlePropertySet</span>(name, value, source_context, cr, &amp;socket, &amp;error);</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主要工作就是 RecvChars 和 RecvString 读取消息，然后通过 HandlePropertySet 函数处理。</p>
<p><strong>HandlePropertySet</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// This returns one of the enum of PROP_SUCCESS or PROP_ERROR*.</span></span><br><span class="line"><span class="function"><span class="type">uint32_t</span> <span class="title">HandlePropertySet</span><span class="params">(<span class="type">const</span> std::string&amp; name, <span class="type">const</span> std::string&amp; value,</span></span></span><br><span class="line"><span class="params"><span class="function">                           <span class="type">const</span> std::string&amp; source_context, <span class="type">const</span> ucred&amp; cr,</span></span></span><br><span class="line"><span class="params"><span class="function">                           SocketConnection* socket, std::string* error)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 检查是否符合 property 权限</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">auto</span> ret = <span class="built_in">CheckPermissions</span>(name, value, source_context, cr, error); ret != PROP_SUCCESS) &#123;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理 &quot;ctl.&quot; 开头的属性</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">StartsWith</span>(name, <span class="string">&quot;ctl.&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">SendControlMessage</span>(name.<span class="built_in">c_str</span>() + <span class="number">4</span>, value, cr.pid, socket, error);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理 &quot;sys.powerctl&quot; 开头的属性</span></span><br><span class="line">    <span class="comment">// sys.powerctl is a special property that is used to make the device reboot.  We want to log</span></span><br><span class="line">    <span class="comment">// any process that sets this property to be able to accurately blame the cause of a shutdown.</span></span><br><span class="line">    <span class="keyword">if</span> (name == <span class="string">&quot;sys.powerctl&quot;</span>) &#123;</span><br><span class="line">        std::string cmdline_path = <span class="built_in">StringPrintf</span>(<span class="string">&quot;proc/%d/cmdline&quot;</span>, cr.pid);</span><br><span class="line">        std::string process_cmdline;</span><br><span class="line">        std::string process_log_string;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">ReadFileToString</span>(cmdline_path, &amp;process_cmdline)) &#123;</span><br><span class="line">            <span class="comment">// Since cmdline is null deliminated, .c_str() conveniently gives us just the process</span></span><br><span class="line">            <span class="comment">// path.</span></span><br><span class="line">            process_log_string = <span class="built_in">StringPrintf</span>(<span class="string">&quot; (%s)&quot;</span>, process_cmdline.<span class="built_in">c_str</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">LOG</span>(INFO) &lt;&lt; <span class="string">&quot;Received sys.powerctl=&#x27;&quot;</span> &lt;&lt; value &lt;&lt; <span class="string">&quot;&#x27; from pid: &quot;</span> &lt;&lt; cr.pid</span><br><span class="line">                  &lt;&lt; process_log_string;</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="string">&quot;reboot,userspace&quot;</span> &amp;&amp; !<span class="built_in">is_userspace_reboot_supported</span>().<span class="built_in">value_or</span>(<span class="literal">false</span>)) &#123;</span><br><span class="line">            *error = <span class="string">&quot;Userspace reboot is not supported by this device&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> PROP_ERROR_INVALID_VALUE;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 其他属性处理</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">PropertySet</span>(name, value, error);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>ctl.</code> 开头的属性和 <code>sys.powerctl</code> 属性单独处理，其他属性通过 PropertySet 函数处理，原属性表中有就更新，没有就新加，再通知 init 有属性发生改变。</p>
<p><strong>HandleInitSocket</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">HandleInitSocket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> message = <span class="built_in">ReadMessage</span>(init_socket);</span><br><span class="line">    <span class="keyword">if</span> (!message.<span class="built_in">ok</span>()) &#123;</span><br><span class="line">        <span class="built_in">LOG</span>(ERROR) &lt;&lt; <span class="string">&quot;Could not read message from init_dedicated_recv_socket: &quot;</span> &lt;&lt; message.<span class="built_in">error</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> init_message = InitMessage&#123;&#125;;</span><br><span class="line">    <span class="keyword">if</span> (!init_message.<span class="built_in">ParseFromString</span>(*message)) &#123;</span><br><span class="line">        <span class="built_in">LOG</span>(ERROR) &lt;&lt; <span class="string">&quot;Could not parse message from init&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (init_message.<span class="built_in">msg_case</span>()) &#123;</span><br><span class="line">        <span class="keyword">case</span> InitMessage::kLoadPersistentProperties: &#123;</span><br><span class="line">            <span class="built_in">load_override_properties</span>();</span><br><span class="line">            <span class="comment">// Read persistent properties after all default values have been loaded.</span></span><br><span class="line">            <span class="keyword">auto</span> persistent_properties = <span class="built_in">LoadPersistentProperties</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; persistent_property_record : persistent_properties.<span class="built_in">properties</span>()) &#123;</span><br><span class="line">                <span class="built_in">InitPropertySet</span>(persistent_property_record.<span class="built_in">name</span>(),</span><br><span class="line">                                persistent_property_record.<span class="built_in">value</span>());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">InitPropertySet</span>(<span class="string">&quot;ro.persistent_properties.ready&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">            persistent_properties_loaded = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">LOG</span>(ERROR) &lt;&lt; <span class="string">&quot;Unknown message type from init: &quot;</span> &lt;&lt; init_message.<span class="built_in">msg_case</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>HandleInitSocket 处理 persistent 属性。</p>
<h5 id="2-4-3-LoadBootScripts"><a href="#2-4-3-LoadBootScripts" class="headerlink" title="2.4.3 LoadBootScripts"></a>2.4.3 LoadBootScripts</h5><p>经过第一阶段和第二阶段前半部分工作，init 已经建立了属性系统和 SELinux 系统，接下来需要解析 init.rc，init.rc 是 init 进程启动的配置脚本，这个脚本是用一种叫 <a href="https://android.googlesource.com/platform/system/core/+/refs/tags/android-11.0.0_r25/init/README.md">Android Init Language</a>（Android 初始化语言）的语言写的。</p>
<p><a href="https://android.googlesource.com/platform/system/core/+/refs/tags/android-11.0.0_r25/init/init.cpp">system&#x2F;core&#x2F;init&#x2F;init.cpp</a></p>
<p><strong>LoadBootScripts</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">LoadBootScripts</span><span class="params">(ActionManager&amp; action_manager, ServiceList&amp; service_list)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建 parser 并将其放入 map 中</span></span><br><span class="line">    Parser parser = <span class="built_in">CreateParser</span>(action_manager, service_list);</span><br><span class="line"></span><br><span class="line">    std::string bootscript = <span class="built_in">GetProperty</span>(<span class="string">&quot;ro.boot.init_rc&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (bootscript.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="comment">// 如果 ro.boot.init_rc 属性没有定义，则解析 /system/etc/init/hw/init.rc 和</span></span><br><span class="line">        <span class="comment">// system, system_ext, product, odm, vender/etc/init 目录下的 .rc 文件</span></span><br><span class="line">        parser.<span class="built_in">ParseConfig</span>(<span class="string">&quot;/system/etc/init/hw/init.rc&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!parser.<span class="built_in">ParseConfig</span>(<span class="string">&quot;/system/etc/init&quot;</span>)) &#123;</span><br><span class="line">            late_import_paths.<span class="built_in">emplace_back</span>(<span class="string">&quot;/system/etc/init&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// late_import is available only in Q and earlier release. As we don&#x27;t</span></span><br><span class="line">        <span class="comment">// have system_ext in those versions, skip late_import for system_ext.</span></span><br><span class="line">        parser.<span class="built_in">ParseConfig</span>(<span class="string">&quot;/system_ext/etc/init&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!parser.<span class="built_in">ParseConfig</span>(<span class="string">&quot;/product/etc/init&quot;</span>)) &#123;</span><br><span class="line">            late_import_paths.<span class="built_in">emplace_back</span>(<span class="string">&quot;/product/etc/init&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!parser.<span class="built_in">ParseConfig</span>(<span class="string">&quot;/odm/etc/init&quot;</span>)) &#123;</span><br><span class="line">            late_import_paths.<span class="built_in">emplace_back</span>(<span class="string">&quot;/odm/etc/init&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!parser.<span class="built_in">ParseConfig</span>(<span class="string">&quot;/vendor/etc/init&quot;</span>)) &#123;</span><br><span class="line">            late_import_paths.<span class="built_in">emplace_back</span>(<span class="string">&quot;/vendor/etc/init&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        parser.<span class="built_in">ParseConfig</span>(bootscript);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>LoadBootScrepts 工作是创建 parser，然后根据是否设定属性 ro.boot.init_rc 来解析不同路径下的 init.rc</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">Parser <span class="title">CreateParser</span><span class="params">(ActionManager&amp; action_manager, ServiceList&amp; service_list)</span> </span>&#123;</span><br><span class="line">    Parser parser;</span><br><span class="line"></span><br><span class="line">    parser.<span class="built_in">AddSectionParser</span>(<span class="string">&quot;service&quot;</span>, std::<span class="built_in">make_unique</span>&lt;ServiceParser&gt;(</span><br><span class="line">                                               &amp;service_list, <span class="built_in">GetSubcontext</span>(), std::<span class="literal">nullopt</span>));</span><br><span class="line">    parser.<span class="built_in">AddSectionParser</span>(<span class="string">&quot;on&quot;</span>, std::<span class="built_in">make_unique</span>&lt;ActionParser&gt;(&amp;action_manager, <span class="built_in">GetSubcontext</span>()));</span><br><span class="line">    parser.<span class="built_in">AddSectionParser</span>(<span class="string">&quot;import&quot;</span>, std::<span class="built_in">make_unique</span>&lt;ImportParser&gt;(&amp;parser));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> parser;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>std::make_unique 相当于 new，返回一个 std::unique_ptr 智能指针，可以自动管理内存，持有对象的独有权，两个 unique_ptr 不能指向一个对象，不能进行复制操作只能进行移动操作。</p>
<p><a href="https://android.googlesource.com/platform/system/core/+/refs/tags/android-11.0.0_r25/init/parser.cpp">system&#x2F;core&#x2F;init&#x2F;parser.cpp</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Parser::AddSectionParser</span><span class="params">(<span class="type">const</span> std::string&amp; name, std::unique_ptr&lt;SectionParser&gt; parser)</span> </span>&#123;</span><br><span class="line">    section_parsers_[name] = std::<span class="built_in">move</span>(parser);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>section_parsers_ 是一个map，在 <a href="https://android.googlesource.com/platform/system/core/+/refs/tags/android-11.0.0_r25/init/parser.h">system&#x2F;core&#x2F;init&#x2F;parser.h</a> 头文件中定义：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::map&lt;std::string, std::unique_ptr&lt;SectionParser&gt;&gt; section_parsers_;</span><br></pre></td></tr></table></figure>

<p><a href="https://android.googlesource.com/platform/system/core/+/refs/tags/android-11.0.0_r25/init/parser.cpp">system&#x2F;core&#x2F;init&#x2F;parser.cpp</a></p>
<p><strong>ParseConfig</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Parser::ParseConfig</span><span class="params">(<span class="type">const</span> std::string&amp; path)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">is_dir</span>(path.<span class="built_in">c_str</span>())) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">ParseConfigDir</span>(path);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">ParseConfigFile</span>(path);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据传入的 path 类型是目录还是文件，分布调用 ParseConfigDir 和 ParseConfigFile</p>
<p><strong>ParseConfigDir</strong>，<strong>ParseConfigFile</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Parser::ParseConfigFile</span><span class="params">(<span class="type">const</span> std::string&amp; path)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">LOG</span>(INFO) &lt;&lt; <span class="string">&quot;Parsing file &quot;</span> &lt;&lt; path &lt;&lt; <span class="string">&quot;...&quot;</span>;</span><br><span class="line">    android::base::Timer t;</span><br><span class="line">    <span class="keyword">auto</span> config_contents = <span class="built_in">ReadFile</span>(path); <span class="comment">// 将数据读取到 config_contents</span></span><br><span class="line">    <span class="keyword">if</span> (!config_contents.<span class="built_in">ok</span>()) &#123;</span><br><span class="line">        <span class="built_in">LOG</span>(INFO) &lt;&lt; <span class="string">&quot;Unable to read config file &#x27;&quot;</span> &lt;&lt; path &lt;&lt; <span class="string">&quot;&#x27;: &quot;</span> &lt;&lt; config_contents.<span class="built_in">error</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">ParseData</span>(path, &amp;config_contents.<span class="built_in">value</span>()); <span class="comment">// 解析数据</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">LOG</span>(VERBOSE) &lt;&lt; <span class="string">&quot;(Parsing &quot;</span> &lt;&lt; path &lt;&lt; <span class="string">&quot; took &quot;</span> &lt;&lt; t &lt;&lt; <span class="string">&quot;.)&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Parser::ParseConfigDir</span><span class="params">(<span class="type">const</span> std::string&amp; path)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">LOG</span>(INFO) &lt;&lt; <span class="string">&quot;Parsing directory &quot;</span> &lt;&lt; path &lt;&lt; <span class="string">&quot;...&quot;</span>;</span><br><span class="line">    <span class="function">std::unique_ptr&lt;DIR, <span class="title">decltype</span><span class="params">(&amp;closedir)</span>&gt; <span class="title">config_dir</span><span class="params">(opendir(path.c_str()), closedir)</span></span>;</span><br><span class="line">    ...</span><br><span class="line">    dirent* current_file;</span><br><span class="line">    std::vector&lt;std::string&gt; files;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; file : files) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">ParseConfigFile</span>(file)) &#123;</span><br><span class="line">            <span class="built_in">LOG</span>(ERROR) &lt;&lt; <span class="string">&quot;could not import file &#x27;&quot;</span> &lt;&lt; file &lt;&lt; <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>若是目录，则遍历该目录下的所有文件，再对其调用 ParseConfigFile，ParseConfigFile 读取文件数据后，调用 ParseData</p>
<p><strong>ParseData</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Parser::ParseData</span><span class="params">(<span class="type">const</span> std::string&amp; filename, std::string* data)</span> </span>&#123;</span><br><span class="line">    data-&gt;<span class="built_in">push_back</span>(<span class="string">&#x27;\n&#x27;</span>);  <span class="comment">// <span class="doctag">TODO:</span> fix tokenizer</span></span><br><span class="line">    data-&gt;<span class="built_in">push_back</span>(<span class="string">&#x27;\0&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// parse_state 是 system/core/init/tokenizer.h 中定义的结构体</span></span><br><span class="line">    parse_state state;</span><br><span class="line">    state.line = <span class="number">0</span>;</span><br><span class="line">    state.ptr = data-&gt;<span class="built_in">data</span>();</span><br><span class="line">    state.nexttoken = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// SectionParser 是一个可以在 init 中解析给定 “section” 的接口，比如 ActionParser </span></span><br><span class="line">    SectionParser* section_parser = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="type">int</span> section_start_line = <span class="number">-1</span>;</span><br><span class="line">    std::vector&lt;std::string&gt; args;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If we encounter a bad section start, there is no valid parser object to parse the subsequent</span></span><br><span class="line">    <span class="comment">// sections, so we must suppress errors until the next valid section is found.</span></span><br><span class="line">    <span class="type">bool</span> bad_section_found = <span class="literal">false</span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="built_in">next_token</span>(&amp;state)) &#123;</span><br><span class="line">            <span class="keyword">case</span> T_EOF: <span class="comment">// EOF: End Of File，即解析完成到末端了，</span></span><br><span class="line">                <span class="built_in">end_section</span>();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; [section_name, section_parser] : section_parsers_) &#123;</span><br><span class="line">                    section_parser-&gt;<span class="built_in">EndFile</span>();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">case</span> T_NEWLINE: &#123;</span><br><span class="line">                state.line++;</span><br><span class="line">                <span class="keyword">if</span> (args.<span class="built_in">empty</span>()) <span class="keyword">break</span>;</span><br><span class="line">                <span class="comment">// If we have a line matching a prefix we recognize, call its callback and unset any</span></span><br><span class="line">                <span class="comment">// current section parsers.  This is meant for /sys/ and /dev/ line entries for</span></span><br><span class="line">                <span class="comment">// uevent.</span></span><br><span class="line">                <span class="keyword">auto</span> line_callback = std::<span class="built_in">find_if</span>(</span><br><span class="line">                    line_callbacks_.<span class="built_in">begin</span>(), line_callbacks_.<span class="built_in">end</span>(),</span><br><span class="line">                    [&amp;args](<span class="type">const</span> <span class="keyword">auto</span>&amp; c) &#123; <span class="keyword">return</span> android::base::<span class="built_in">StartsWith</span>(args[<span class="number">0</span>], c.first); &#125;);</span><br><span class="line">                <span class="keyword">if</span> (line_callback != line_callbacks_.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                    <span class="built_in">end_section</span>();</span><br><span class="line">                    ...</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (section_parsers_.<span class="built_in">count</span>(args[<span class="number">0</span>])) &#123;</span><br><span class="line">                    <span class="built_in">end_section</span>();</span><br><span class="line">                    section_parser = section_parsers_[args[<span class="number">0</span>]].<span class="built_in">get</span>();</span><br><span class="line">                    section_start_line = state.line;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">auto</span> result =</span><br><span class="line">                                section_parser-&gt;<span class="built_in">ParseSection</span>(std::<span class="built_in">move</span>(args), filename, state.line);</span><br><span class="line">                        !result.<span class="built_in">ok</span>()) &#123;</span><br><span class="line">                        ...</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (section_parser) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">auto</span> result = section_parser-&gt;<span class="built_in">ParseLineSection</span>(std::<span class="built_in">move</span>(args), state.line);</span><br><span class="line">                        !result.<span class="built_in">ok</span>()) &#123;</span><br><span class="line">                        ...</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!bad_section_found) &#123;</span><br><span class="line">                    ...</span><br><span class="line">                &#125;</span><br><span class="line">                args.<span class="built_in">clear</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> T_TEXT:</span><br><span class="line">                args.<span class="built_in">emplace_back</span>(state.text);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>parser_state 是一个结构体，定义在 <em>system&#x2F;core&#x2F;init&#x2F;tokenizer.h</em> 中，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// system/core/init/tokenizer.h</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">parse_state</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> *ptr;</span><br><span class="line">    <span class="type">char</span> *text;</span><br><span class="line">    <span class="type">int</span> line;</span><br><span class="line">    <span class="type">int</span> nexttoken;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>ParseData 的作用就是调用 next_token(&amp;state) 遍历字符，将一行拆分成若干个单词，读到单词，执行 T_TEXT 代码段，把单词压入 args 中；读到 ‘\n’，执行 T_NEWLINE 代码段，在 section_parsers_ 中判断是否包含单词 args[0]（即on, service, import），如果包含，则调用相应解析器（ActionParser, ServiceParser, ImportParser）的 ParseSection 函数；如果不包含，则调用 ParseLineSection 函数；读到 0，表示这个 Section 读取结束，执行 T_EOF 代码段，调用 EndSection 函数。</p>
<p>ActionParser, ServiceParser, ImportParser 都是 SectionParser 的子类，SectionParser 有四个虚函数：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SectionParser</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">SectionParser</span>() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Result&lt;<span class="type">void</span>&gt; <span class="title">ParseSection</span><span class="params">(std::vector&lt;std::string&gt;&amp;&amp; args, <span class="type">const</span> std::string&amp; filename,</span></span></span><br><span class="line"><span class="params"><span class="function">                                      <span class="type">int</span> line)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Result&lt;<span class="type">void</span>&gt; <span class="title">ParseLineSection</span><span class="params">(std::vector&lt;std::string&gt;&amp;&amp;, <span class="type">int</span>)</span> </span>&#123; <span class="keyword">return</span> &#123;&#125;; &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Result&lt;<span class="type">void</span>&gt; <span class="title">EndSection</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> &#123;&#125;; &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">EndFile</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><a href="https://android.googlesource.com/platform/system/core/+/refs/tags/android-11.0.0_r25/init/action_parser.cpp">system&#x2F;core&#x2F;init&#x2F;action_parser.cpp</a></p>
<h6 id="2-4-3-1-ActionParser"><a href="#2-4-3-1-ActionParser" class="headerlink" title="2.4.3.1 ActionParser"></a>2.4.3.1 ActionParser</h6><p><strong>ParseSection</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">Result&lt;<span class="type">void</span>&gt; <span class="title">ActionParser::ParseSection</span><span class="params">(std::vector&lt;std::string&gt;&amp;&amp; args,</span></span></span><br><span class="line"><span class="params"><span class="function">                                        <span class="type">const</span> std::string&amp; filename, <span class="type">int</span> line)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    std::string event_trigger;</span><br><span class="line">    std::map&lt;std::string, std::string&gt; property_triggers;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">auto</span> result =</span><br><span class="line">                <span class="built_in">ParseTriggers</span>(triggers, action_subcontext, &amp;event_trigger, &amp;property_triggers); <span class="comment">// 解析 traggers</span></span><br><span class="line">        !result.<span class="built_in">ok</span>()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Error</span>() &lt;&lt; <span class="string">&quot;ParseTriggers() failed: &quot;</span> &lt;&lt; result.<span class="built_in">error</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> action = std::<span class="built_in">make_unique</span>&lt;Action&gt;(<span class="literal">false</span>, action_subcontext, filename, line, event_trigger,</span><br><span class="line">                                           property_triggers);</span><br><span class="line"></span><br><span class="line">    action_ = std::<span class="built_in">move</span>(action);</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用 ParseTraggers 函数</p>
<p><strong>ParseTriggers</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">Result&lt;<span class="type">void</span>&gt; <span class="title">ParseTriggers</span><span class="params">(<span class="type">const</span> std::vector&lt;std::string&gt;&amp; args, Subcontext* subcontext,</span></span></span><br><span class="line"><span class="params"><span class="function">                           std::string* event_trigger,</span></span></span><br><span class="line"><span class="params"><span class="function">                           std::map&lt;std::string, std::string&gt;* property_triggers)</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="type">static</span> std::string <span class="title">prop_str</span><span class="params">(<span class="string">&quot;property:&quot;</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (std::<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; args.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span> (!args[i].<span class="built_in">compare</span>(<span class="number">0</span>, prop_str.<span class="built_in">length</span>(), prop_str)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">auto</span> result = <span class="built_in">ParsePropertyTrigger</span>(args[i], subcontext, property_triggers);</span><br><span class="line">                !result.<span class="built_in">ok</span>()) &#123;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!event_trigger-&gt;<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">Error</span>() &lt;&lt; <span class="string">&quot;multiple event triggers are not allowed&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">auto</span> result = <span class="built_in">ValidateEventTrigger</span>(args[i]); !result.<span class="built_in">ok</span>()) &#123;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            *event_trigger = args[i];</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对 property tragger 调用 ParsePropertyTrigger 函数，ParsePropertyTrigger 作用是把 property 以 “&#x3D;” 分割为 name-value，存入 property_triggers map 中；对于 event tragger，赋值给 event_trigger 字符串。</p>
<p>所以 ParseSection 主要工作是创建一个 Action 对象，将当前 Section 的 tragger 条件记录到这个对象中，分布把 event tragger 和 property tragger 赋值给 event_trigger 字符串和 property_triggers map，最后把这个 action move 给 action_parser.h 中定义的 <code>action_</code> 这个 vector 中。</p>
<p><strong>ParseLineSection</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">Result&lt;<span class="type">void</span>&gt; <span class="title">ActionParser::ParseLineSection</span><span class="params">(std::vector&lt;std::string&gt;&amp;&amp; args, <span class="type">int</span> line)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> action_ ? action_-&gt;<span class="built_in">AddCommand</span>(std::<span class="built_in">move</span>(args), line) : Result&lt;<span class="type">void</span>&gt;&#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://android.googlesource.com/platform/system/core/+/refs/tags/android-11.0.0_r25/init/action.cpp">system&#x2F;core&#x2F;init&#x2F;action.cpp</a></p>
<p><strong>AddCommand</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">Result&lt;<span class="type">void</span>&gt; <span class="title">Action::AddCommand</span><span class="params">(std::vector&lt;std::string&gt;&amp;&amp; args, <span class="type">int</span> line)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!function_map_) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Error</span>() &lt;&lt; <span class="string">&quot;no function map available&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> map_result = function_map_-&gt;<span class="built_in">Find</span>(args);</span><br><span class="line">    <span class="keyword">if</span> (!map_result.<span class="built_in">ok</span>()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Error</span>() &lt;&lt; map_result.<span class="built_in">error</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    commands_.<span class="built_in">emplace_back</span>(map_result-&gt;function, map_result-&gt;run_in_subcontext, std::<span class="built_in">move</span>(args),</span><br><span class="line">                           line);</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>AddCommand 函数就是查找对应的执行函数，把信息存入 <code>commands_</code> 这个 vector（定义在 action.h 中），而调用 AddCommand 函数的是 <code>action_</code>（定义在 action_parser.h中），即把信息存入 <code>action_</code>  对象。</p>
<p><a href="https://android.googlesource.com/platform/system/core/+/refs/tags/android-11.0.0_r25/init/action_parser.cpp">system&#x2F;core&#x2F;init&#x2F;action_parser.cpp</a></p>
<p><strong>EndSection</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">Result&lt;<span class="type">void</span>&gt; <span class="title">ActionParser::EndSection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (action_ &amp;&amp; action_-&gt;<span class="built_in">NumCommands</span>() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        action_manager_-&gt;<span class="built_in">AddAction</span>(std::<span class="built_in">move</span>(action_));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>AddAction 函数作用是把前两步构造的 <code>action_</code> 存入 <code>action_manager_</code>的 <code>action_</code> vector 数组容器中。</p>
<p><strong>总结</strong></p>
<ul>
<li><strong>ParseSection</strong>：当一个 Section 第一次遇到时，调用此方法；创建一个 Action 对象，将当前 Section 的 tragger 条件记录到这个对象中，再把这个 action move 给 <a href="https://android.googlesource.com/platform/system/core/+/refs/tags/android-11.0.0_r25/init/action_parser.h">system&#x2F;core&#x2F;init&#x2F;action_parser.h</a> 中定义的 <code>action_</code> 这个 vector 中；</li>
<li><strong>ParseLineSection</strong>：在遇到下一个 Section 之前，在每个后续行上都会调用此函数；查找对应的执行函数，把信息也存入<code>action_</code>中；</li>
<li><strong>EndSection</strong>：当一个新的 Section 被发现或者在文件末尾时调用；把前两步构造的 <code>action_</code> 存入 <code>action_manager_</code>的 <code>action_</code> vector 数组容器中；</li>
<li><strong>EndFile</strong>：在文件末尾调用；空实现；</li>
</ul>
<h6 id="2-4-3-2-ServiceParser"><a href="#2-4-3-2-ServiceParser" class="headerlink" title="2.4.3.2 ServiceParser"></a>2.4.3.2 ServiceParser</h6><p>ServiceParser 处理和 ActionParser 差不多，区别在于 Action 将执行函数存起来等待 Trigger 触发时执行，Service 找到执行函数后是马上执行，不再详细分析。</p>
<h6 id="2-4-3-3-ImportParser"><a href="#2-4-3-3-ImportParser" class="headerlink" title="2.4.3.3 ImportParser"></a>2.4.3.3 ImportParser</h6><p>ImportParser 工作内容是在 ParseSection 函数中利用 ExpandProps 处理参数，将结果存入 <code>imports_</code> 数组中。</p>
<h5 id="2-4-4-QueueBuiltinAction"><a href="#2-4-4-QueueBuiltinAction" class="headerlink" title="2.4.4 QueueBuiltinAction"></a>2.4.4 QueueBuiltinAction</h5><p><a href="https://android.googlesource.com/platform/system/core/+/refs/tags/android-11.0.0_r25/init/init.cpp">system&#x2F;core&#x2F;init&#x2F;init.cpp</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">SecondStageMain</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">    am.<span class="built_in">QueueBuiltinAction</span>(SetupCgroupsAction, <span class="string">&quot;SetupCgroups&quot;</span>);</span><br><span class="line">    am.<span class="built_in">QueueBuiltinAction</span>(SetKptrRestrictAction, <span class="string">&quot;SetKptrRestrict&quot;</span>);</span><br><span class="line">    am.<span class="built_in">QueueBuiltinAction</span>(TestPerfEventSelinuxAction, <span class="string">&quot;TestPerfEventSelinux&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>用于添加 Action，第二个参数是触发条件，第一个参数是 Action 触发后的执行命令；</p>
<h5 id="2-4-5-QueueEventTrigger"><a href="#2-4-5-QueueEventTrigger" class="headerlink" title="2.4.5 QueueEventTrigger"></a>2.4.5 QueueEventTrigger</h5><p> - exec(“selinux_setup”) –&gt; main.cpp.main() –&gt; selinux.cpp.SetupSelinux() - exec(“second_stage”) –&gt; main.cpp.main() –&gt; init.cpp.SecondStageMain() - LoadBootScripts() –&gt; </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">SecondStageMain</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">    am.<span class="built_in">QueueEventTrigger</span>(<span class="string">&quot;early-init&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>构造了一个 EventTrigger 对象，放到队列中存起来；</p>
<h5 id="2-4-6-触发"><a href="#2-4-6-触发" class="headerlink" title="2.4.6 触发"></a>2.4.6 触发</h5><p>准备好各种队列、数组的数据后，开始触发事件</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">SecondStageMain</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">// By default, sleep until something happens.</span></span><br><span class="line">        <span class="comment">// epoll 系统轮询等待消息处理</span></span><br><span class="line">        <span class="keyword">auto</span> epoll_timeout = std::optional&lt;std::chrono::milliseconds&gt;&#123;&#125;; <span class="comment">// epoll 的阻塞时间</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">auto</span> shutdown_command = shutdown_state.<span class="built_in">CheckShutdown</span>();</span><br><span class="line">        <span class="keyword">if</span> (shutdown_command) &#123;</span><br><span class="line">            <span class="built_in">HandlePowerctlMessage</span>(*shutdown_command);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!(prop_waiter_state.<span class="built_in">MightBeWaiting</span>() || Service::<span class="built_in">is_exec_service_running</span>())) &#123;</span><br><span class="line">            am.<span class="built_in">ExecuteOneCommand</span>(); <span class="comment">// 执行一个 command</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">IsShuttingDown</span>()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> next_process_action_time = <span class="built_in">HandleProcessActions</span>();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// If there&#x27;s a process that needs restarting, wake up in time for that.</span></span><br><span class="line">            <span class="comment">// 如果有需要重新启动的进程，epoll_timeout 设置为重启等待时间</span></span><br><span class="line">            <span class="keyword">if</span> (next_process_action_time) &#123;</span><br><span class="line">                epoll_timeout = std::chrono::<span class="built_in">ceil</span>&lt;std::chrono::milliseconds&gt;(</span><br><span class="line">                        *next_process_action_time - boot_clock::<span class="built_in">now</span>());</span><br><span class="line">                <span class="keyword">if</span> (*epoll_timeout &lt; <span class="number">0</span>ms) epoll_timeout = <span class="number">0</span>ms;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!(prop_waiter_state.<span class="built_in">MightBeWaiting</span>() || Service::<span class="built_in">is_exec_service_running</span>())) &#123;</span><br><span class="line">            <span class="comment">// If there&#x27;s more work to do, wake up again immediately.</span></span><br><span class="line">            <span class="keyword">if</span> (am.<span class="built_in">HasMoreCommands</span>()) epoll_timeout = <span class="number">0</span>ms;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">auto</span> pending_functions = epoll.<span class="built_in">Wait</span>(epoll_timeout);</span><br><span class="line">        <span class="keyword">if</span> (!pending_functions.<span class="built_in">ok</span>()) &#123;</span><br><span class="line">            <span class="built_in">LOG</span>(ERROR) &lt;&lt; pending_functions.<span class="built_in">error</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!pending_functions-&gt;<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="comment">// We always reap children before responding to the other pending functions. This is to</span></span><br><span class="line">            <span class="comment">// prevent a race where other daemons see that a service has exited and ask init to</span></span><br><span class="line">            <span class="comment">// start it again via ctl.start before init has reaped it.</span></span><br><span class="line">            <span class="built_in">ReapAnyOutstandingChildren</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; function : *pending_functions) &#123;</span><br><span class="line">                (*function)();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">IsShuttingDown</span>()) &#123;</span><br><span class="line">            <span class="built_in">HandleControlMessages</span>();</span><br><span class="line">            <span class="built_in">SetUsbController</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>ExecuteOneCommand</strong></p>
<p><a href="https://android.googlesource.com/platform/system/core/+/refs/tags/android-11.0.0_r25/init/action_manager.cpp">system&#x2F;core&#x2F;init&#x2F;action_manager.cpp</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">ActionManager::ExecuteOneCommand</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> lock = std::lock_guard&#123;event_queue_lock_&#125;;</span><br><span class="line">        <span class="comment">// Loop through the event queue until we have an action to execute</span></span><br><span class="line">        <span class="keyword">while</span> (current_executing_actions_.<span class="built_in">empty</span>() &amp;&amp; !event_queue_.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; action : actions_) &#123;</span><br><span class="line">                <span class="comment">// 遍历 actions_，event_queue 是 trigger 队列，满足当前 trigger 条件的 action 添加到 current_executing_actions_</span></span><br><span class="line">                <span class="keyword">if</span> (std::<span class="built_in">visit</span>([&amp;action](<span class="type">const</span> <span class="keyword">auto</span>&amp; event) &#123; <span class="keyword">return</span> action-&gt;<span class="built_in">CheckEvent</span>(event); &#125;,</span><br><span class="line">                               event_queue_.<span class="built_in">front</span>())) &#123;</span><br><span class="line">                    current_executing_actions_.<span class="built_in">emplace</span>(action.<span class="built_in">get</span>());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            event_queue_.<span class="built_in">pop</span>(); <span class="comment">// 从 trigger 列表中移除一个 trigger</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (current_executing_actions_.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从满足 trigger 的 actions 中取出一个 action</span></span><br><span class="line">    <span class="keyword">auto</span> action = current_executing_actions_.<span class="built_in">front</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (current_command_ == <span class="number">0</span>) &#123;</span><br><span class="line">        std::string trigger_name = action-&gt;<span class="built_in">BuildTriggersString</span>();</span><br><span class="line">        <span class="built_in">LOG</span>(INFO) &lt;&lt; <span class="string">&quot;processing action (&quot;</span> &lt;&lt; trigger_name &lt;&lt; <span class="string">&quot;) from (&quot;</span> &lt;&lt; action-&gt;<span class="built_in">filename</span>()</span><br><span class="line">                  &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; action-&gt;<span class="built_in">line</span>() &lt;&lt; <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行取出 action 的第 current_command_ 个 command</span></span><br><span class="line">    action-&gt;<span class="built_in">ExecuteOneCommand</span>(current_command_);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If this was the last command in the current action, then remove</span></span><br><span class="line">    <span class="comment">// the action from the executing list.</span></span><br><span class="line">    <span class="comment">// If this action was oneshot, then also remove it from actions_.</span></span><br><span class="line">    ++current_command_; <span class="comment">//  current_command_ 加 1</span></span><br><span class="line">    <span class="comment">// 加 1 后 current_command 等于 action 的 command 条数，即上面执行的 current_command 是此 action 中的最后一条 command</span></span><br><span class="line">    <span class="keyword">if</span> (current_command_ == action-&gt;<span class="built_in">NumCommands</span>()) &#123;</span><br><span class="line">        current_executing_actions_.<span class="built_in">pop</span>(); <span class="comment">// 移除 current_executing_actions_ 中的 action</span></span><br><span class="line">        current_command_ = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 如果 action 只执行一次，则把此 action 从 actions_ 中移除</span></span><br><span class="line">        <span class="keyword">if</span> (action-&gt;<span class="built_in">oneshot</span>()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> eraser = [&amp;action](std::unique_ptr&lt;Action&gt;&amp; a) &#123; <span class="keyword">return</span> a.<span class="built_in">get</span>() == action; &#125;;</span><br><span class="line">            actions_.<span class="built_in">erase</span>(std::<span class="built_in">remove_if</span>(actions_.<span class="built_in">begin</span>(), actions_.<span class="built_in">end</span>(), eraser),</span><br><span class="line">                           actions_.<span class="built_in">end</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>triggers 包含 <code>early-init</code>, <code>init</code>, <code>late-init</code>, 在 <code>late-init</code> 中又 trigger 了很多，包含 <code>early-boot</code>, <code>boot</code> 等，接下来要分析的 Zygote 是在 <code>on late-init</code> section 中；</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>Android - idle/kthreadd 进程启动</title>
    <url>/2021/06/15/Android/AndroidDevelop_002_kernel_idle_kthreadd/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>Linux 内核启动主要有 3 个重要的进程，idle(pid&#x3D;0) 进程，kthreadd(pid&#x3D;2) 进程和 init(pid&#x3D;1) 进程，idle 进程是系统初始化过程第一个进程，是 kthreadd 和 init 进程的父进程；init 进程是第一个用户进程；kthreadd 进程是内核管家，是所有内核线程的父进程。</p>
</blockquote>
<span id="more"></span>

<h3 id="1-idle-启动"><a href="#1-idle-启动" class="headerlink" title="1. idle 启动"></a>1. idle 启动</h3><p><a href="https://android.googlesource.com/kernel/msm/+/refs/tags/android-11.0.0_r0.25/arch/arm64/kernel/head.S">kernel&#x2F;msm&#x2F;arch&#x2F;arm64&#x2F;kernel&#x2F;head.S</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">add sp, sp, #16</span><br><span class="line">mov    x29, #0</span><br><span class="line">mov    x30, #0</span><br><span class="line">b  start_kernel // 跳转 start_kernel 函数</span><br></pre></td></tr></table></figure>

<p>b start_kernel，b 是跳转的意思，跳转到 start_kernel.h，对应的实现在 kernel&#x2F;msm&#x2F;init&#x2F;main.c</p>
<p><a href="https://android.googlesource.com/kernel/msm/+/refs/tags/android-11.0.0_r0.25/init/main.c">kernel&#x2F;msm&#x2F;init&#x2F;main.c</a></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">asmlinkage __visible <span class="type">void</span> __init <span class="title function_">start_kernel</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">    rest_init();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>start_kernel 最后调用 rest_init 函数，rest_init 里启动了 init(pid &#x3D; 1) 和 kthreadd(pid &#x3D; 2) 进程</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> noinline <span class="type">void</span> __ref <span class="title function_">rest_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">tsk</span>;</span></span><br><span class="line">   <span class="type">int</span> pid;</span><br><span class="line">   <span class="comment">// 启动RCU机制，这个与后面的rcu_read_lock和rcu_read_unlock是配套的，用于多核同步</span></span><br><span class="line">   rcu_scheduler_starting();</span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * We need to spawn init first so that it obtains pid 1, however</span></span><br><span class="line"><span class="comment">    * the init task will end up wanting to create kthreads, which, if</span></span><br><span class="line"><span class="comment">    * we schedule it before we create kthreadd, will OOPS.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">// 以 kernel_thread 方式创建 init 进程，需等待 kthreadd 启动完毕后再继续执行</span></span><br><span class="line">   pid = kernel_thread(kernel_init, <span class="literal">NULL</span>, CLONE_FS);</span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * Pin init on the boot CPU. Task migration is not properly working</span></span><br><span class="line"><span class="comment">    * until sched_init_smp() has been run. It will set the allowed</span></span><br><span class="line"><span class="comment">    * CPUs for init to the non isolated CPUs.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">// 打开 RCU 读取锁，在此期间无法进行进程切换</span></span><br><span class="line">   rcu_read_lock();</span><br><span class="line">   tsk = find_task_by_pid_ns(pid, &amp;init_pid_ns);</span><br><span class="line">   set_cpus_allowed_ptr(tsk, cpumask_of(smp_processor_id()));</span><br><span class="line">   rcu_read_unlock();</span><br><span class="line">   numa_default_policy(); <span class="comment">// 设定 NUMA 系统的默认内存访问策略</span></span><br><span class="line">   <span class="comment">// 以 kernel_thread 方式创建 kthreadd 进程</span></span><br><span class="line">   pid = kernel_thread(kthreadd, <span class="literal">NULL</span>, CLONE_FS | CLONE_FILES);</span><br><span class="line">   rcu_read_lock();</span><br><span class="line">   <span class="comment">// 获取 kthreadd 的进程描述符，期间需要检索进程 pid 的使用链表，所以要加锁</span></span><br><span class="line">   kthreadd_task = find_task_by_pid_ns(pid, &amp;init_pid_ns);</span><br><span class="line">   <span class="comment">// 关闭 RCU 读取锁</span></span><br><span class="line">   rcu_read_unlock();</span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * Enable might_sleep() and smp_processor_id() checks.</span></span><br><span class="line"><span class="comment">    * They cannot be enabled earlier because with CONFIG_PRREMPT=y</span></span><br><span class="line"><span class="comment">    * kernel_thread() would trigger might_sleep() splats. With</span></span><br><span class="line"><span class="comment">    * CONFIG_PREEMPT_VOLUNTARY=y the init task might have scheduled</span></span><br><span class="line"><span class="comment">    * already, but it&#x27;s stuck on the kthreadd_done completion.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   system_state = SYSTEM_SCHEDULING;</span><br><span class="line">   <span class="comment">// 通知 kernel_init 进程 kthreadd 进程已创建完成，可以继续</span></span><br><span class="line">   complete(&amp;kthreadd_done);</span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * The boot idle thread must execute schedule()</span></span><br><span class="line"><span class="comment">    * at least once to get things moving:</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   schedule_preempt_disabled();</span><br><span class="line">   <span class="comment">/* Call into cpu_idle with preempt disabled */</span></span><br><span class="line">   cpu_startup_entry(CPUHP_ONLINE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://android.googlesource.com/kernel/msm/+/refs/tags/android-11.0.0_r0.25/kernel/rcu/tree.c">kernel&#x2F;msm&#x2F;kernel&#x2F;rcu&#x2F;tree.c</a></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">rcu_scheduler_starting</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">       <span class="comment">// WARN_ON 相当于警告，会打印出当前栈信息，不会重启，num_online_cpus 表示当前启动的 cpu 数</span></span><br><span class="line">	WARN_ON(num_online_cpus() != <span class="number">1</span>);</span><br><span class="line">       <span class="comment">// nr_context_switches 进行进程切换的次数</span></span><br><span class="line">	WARN_ON(nr_context_switches() &gt; <span class="number">0</span>);</span><br><span class="line">	rcu_test_sync_prims();</span><br><span class="line">	rcu_scheduler_active = RCU_SCHEDULER_INIT;</span><br><span class="line">	rcu_test_sync_prims(); <span class="comment">// 启用 rcu 机制</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://android.googlesource.com/kernel/msm/+/refs/tags/android-11.0.0_r0.25/kernel/fork.c">kernel&#x2F;msm&#x2F;kernel&#x2F;fork.c</a></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Create a kernel thread.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">pid_t</span> <span class="title function_">kernel_thread</span><span class="params">(<span class="type">int</span> (*fn)(<span class="type">void</span> *), <span class="type">void</span> *arg, <span class="type">unsigned</span> <span class="type">long</span> flags)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> _do_fork(flags|CLONE_VM|CLONE_UNTRACED, (<span class="type">unsigned</span> <span class="type">long</span>)fn,</span><br><span class="line">		(<span class="type">unsigned</span> <span class="type">long</span>)arg, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>do_fork 函数用于创建进程，它首先调用 copy_process() 创建新进程，然后调用 wake_up_new_task() 将进程放入运行队列中并启动新进程，然后等待执行完成。</p>
<p>kernel_thread 的第一个参数是一个函数指针，会在创建进程后回调执行，第三个参数是创建进程的方式。</p>
<h3 id="2-kthreadd-启动"><a href="#2-kthreadd-启动" class="headerlink" title="2. kthreadd 启动"></a>2. kthreadd 启动</h3><p>kernel_thread 通过 _do_fork 创建进程，然后回调 kthreadd 函数：</p>
<p><a href="https://android.googlesource.com/kernel/msm/+/refs/tags/android-11.0.0_r0.25/kernel/kthread.c">kernel&#x2F;msm&#x2F;kernel&#x2F;kthread.c</a></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">kthreadd</span><span class="params">(<span class="type">void</span> *unused)</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">tsk</span> =</span> current;</span><br><span class="line">   <span class="comment">/* Setup a clean context for our children to inherit. */</span></span><br><span class="line">   set_task_comm(tsk, <span class="string">&quot;kthreadd&quot;</span>);</span><br><span class="line">   ignore_signals(tsk);</span><br><span class="line">   set_cpus_allowed_ptr(tsk, cpu_all_mask);</span><br><span class="line">   set_mems_allowed(node_states[N_MEMORY]);</span><br><span class="line">   current-&gt;flags |= PF_NOFREEZE;</span><br><span class="line">   cgroup_init_kthreadd();</span><br><span class="line">   <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">   <span class="comment">// 将线程状态设置为 TASK_INTERRUPTIBLE, 如果当前没有要创建的线程则主动放弃 CPU 完成调度, 此进程变为阻塞态</span></span><br><span class="line">      set_current_state(TASK_INTERRUPTIBLE);</span><br><span class="line">      <span class="keyword">if</span> (list_empty(&amp;kthread_create_list))</span><br><span class="line">         schedule(); <span class="comment">// 没有内核线程需要创建，让出 CPU</span></span><br><span class="line">     <span class="comment">// kthread_create_list 不为空，则把线程状态设置为 TASK_RUNNING</span></span><br><span class="line">      __set_current_state(TASK_RUNNING);</span><br><span class="line">      spin_lock(&amp;kthread_create_lock);</span><br><span class="line">      <span class="keyword">while</span> (!list_empty(&amp;kthread_create_list)) &#123;</span><br><span class="line">         <span class="class"><span class="keyword">struct</span> <span class="title">kthread_create_info</span> *<span class="title">create</span>;</span></span><br><span class="line">         <span class="comment">// 从 kthread_create_list 链表中取出线程创建信息</span></span><br><span class="line">         create = list_entry(kthread_create_list.next,</span><br><span class="line">                   <span class="keyword">struct</span> kthread_create_info, <span class="built_in">list</span>);</span><br><span class="line">         list_del_init(&amp;create-&gt;<span class="built_in">list</span>);</span><br><span class="line">         spin_unlock(&amp;kthread_create_lock);</span><br><span class="line">         create_kthread(create); <span class="comment">// 创建线程</span></span><br><span class="line">         spin_lock(&amp;kthread_create_lock);</span><br><span class="line">      &#125;</span><br><span class="line">      spin_unlock(&amp;kthread_create_lock);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>kthreadd 函数的作用就是循环地从 kthread_create_list 链表中取出要创建的线程信息，然后执行 create_kthread 函数，直到 kthread_create_list 为空，让出 CPU，进入睡眠。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">create_kthread</span><span class="params">(<span class="keyword">struct</span> kthread_create_info *create)</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="type">int</span> pid;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_NUMA</span></span><br><span class="line">   current-&gt;pref_node_fork = create-&gt;node;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">   <span class="comment">/* We want our own signal handler (we take no signals by default). */</span></span><br><span class="line">   pid = kernel_thread(kthread, create, CLONE_FS | CLONE_FILES | SIGCHLD);</span><br><span class="line">   <span class="keyword">if</span> (pid &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">/* If user was SIGKILLed, I release the structure. */</span></span><br><span class="line">      <span class="class"><span class="keyword">struct</span> <span class="title">completion</span> *<span class="title">done</span> =</span> xchg(&amp;create-&gt;done, <span class="literal">NULL</span>);</span><br><span class="line">      <span class="keyword">if</span> (!done) &#123;</span><br><span class="line">         kfree(create);</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      create-&gt;result = ERR_PTR(pid);</span><br><span class="line">      complete(done);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>就是调用 kernel_thread 创建进程，然后调用 kthread 函数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">kthread</span><span class="params">(<span class="type">void</span> *_create)</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">/* Copy data: it&#x27;s on kthread&#x27;s stack */</span></span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">kthread_create_info</span> *<span class="title">create</span> =</span> _create;</span><br><span class="line">   <span class="type">int</span> (*threadfn)(<span class="type">void</span> *data) = create-&gt;threadfn;</span><br><span class="line">   <span class="type">void</span> *data = create-&gt;data;</span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">completion</span> *<span class="title">done</span>;</span></span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">kthread</span> *<span class="title">self</span>;</span></span><br><span class="line">   <span class="type">int</span> ret;</span><br><span class="line">   self = kmalloc(<span class="keyword">sizeof</span>(*self), GFP_KERNEL);</span><br><span class="line">   set_kthread_struct(self);</span><br><span class="line">   <span class="comment">/* If user was SIGKILLed, I release the structure. */</span></span><br><span class="line">   done = xchg(&amp;create-&gt;done, <span class="literal">NULL</span>);</span><br><span class="line">   <span class="keyword">if</span> (!done) &#123;</span><br><span class="line">      kfree(create);</span><br><span class="line">      do_exit(-EINTR);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (!self) &#123;</span><br><span class="line">      create-&gt;result = ERR_PTR(-ENOMEM);</span><br><span class="line">      complete(done);</span><br><span class="line">      do_exit(-ENOMEM);</span><br><span class="line">   &#125;</span><br><span class="line">   self-&gt;flags = <span class="number">0</span>;</span><br><span class="line">   self-&gt;data = data;</span><br><span class="line">   init_completion(&amp;self-&gt;exited);</span><br><span class="line">   init_completion(&amp;self-&gt;parked);</span><br><span class="line">   current-&gt;vfork_done = &amp;self-&gt;exited;</span><br><span class="line">   <span class="comment">/* OK, tell user we&#x27;re spawned, wait for stop or wakeup */</span></span><br><span class="line">   __set_current_state(TASK_UNINTERRUPTIBLE);</span><br><span class="line">   create-&gt;result = current;</span><br><span class="line">   complete(done); <span class="comment">// 线程创建完成</span></span><br><span class="line">   schedule(); <span class="comment">// 让出 CPU</span></span><br><span class="line">   ret = -EINTR;</span><br><span class="line">   <span class="keyword">if</span> (!test_bit(KTHREAD_SHOULD_STOP, &amp;self-&gt;flags)) &#123;</span><br><span class="line">      cgroup_kthread_ready();</span><br><span class="line">      __kthread_parkme(self);</span><br><span class="line">      ret = threadfn(data);</span><br><span class="line">   &#125;</span><br><span class="line">   do_exit(ret);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>至此 kthreadd 进程启动完成，开始循环从 kthread_create_list 链表中读取需要创建的线程。</p>
<h3 id="3-内核启动线程的方式"><a href="#3-内核启动线程的方式" class="headerlink" title="3. 内核启动线程的方式"></a>3. 内核启动线程的方式</h3><p>有两种方法创建线程，分别是 kthread_create 和 kthread_run ，是两个宏定义，编译时会替换对应代码</p>
<p><a href="https://android.googlesource.com/kernel/msm/+/refs/tags/android-11.0.0_r0.25/include/linux/kthread.h">kernel&#x2F;msm&#x2F;include&#x2F;linux&#x2F;kthread.h</a></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * kthread_create - create a kthread on the current node</span></span><br><span class="line"><span class="comment"> * @threadfn: the function to run in the thread</span></span><br><span class="line"><span class="comment"> * @data: data pointer for @threadfn()</span></span><br><span class="line"><span class="comment"> * @namefmt: printf-style format string for the thread name</span></span><br><span class="line"><span class="comment"> * @arg...: arguments for @namefmt.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This macro will create a kthread on the current node, leaving it in</span></span><br><span class="line"><span class="comment"> * the stopped state.  This is just a helper for kthread_create_on_node();</span></span><br><span class="line"><span class="comment"> * see the documentation there for more details.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> kthread_create(threadfn, data, namefmt, arg...) \</span></span><br><span class="line"><span class="meta">	kthread_create_on_node(threadfn, data, NUMA_NO_NODE, namefmt, ##arg)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * kthread_run - create and wake a thread.</span></span><br><span class="line"><span class="comment"> * @threadfn: the function to run until signal_pending(current).</span></span><br><span class="line"><span class="comment"> * @data: data ptr for @threadfn.</span></span><br><span class="line"><span class="comment"> * @namefmt: printf-style name for the thread.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Description: Convenient wrapper for kthread_create() followed by</span></span><br><span class="line"><span class="comment"> * wake_up_process().  Returns the kthread or ERR_PTR(-ENOMEM).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> kthread_run(threadfn, data, namefmt, ...)			   \</span></span><br><span class="line"><span class="meta">(&#123;									   \</span></span><br><span class="line"><span class="meta">	struct task_struct *__k						   \</span></span><br><span class="line"><span class="meta">		= kthread_create(threadfn, data, namefmt, ## __VA_ARGS__); \</span></span><br><span class="line"><span class="meta">	<span class="keyword">if</span> (!IS_ERR(__k))						   \</span></span><br><span class="line"><span class="meta">		wake_up_process(__k);					   \</span></span><br><span class="line"><span class="meta">	__k;								   \</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br></pre></td></tr></table></figure>

<p>最终都是调用 kthread_create_on_node 函数，区别是 kthread_run 创建后会在代码中手动唤醒新线程：</p>
<p><a href="https://android.googlesource.com/kernel/msm/+/refs/tags/android-11.0.0_r0.25/kernel/kthread.c">kernel&#x2F;msm&#x2F;kernel&#x2F;kthread.c</a></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * kthread_create_on_node - create a kthread.</span></span><br><span class="line"><span class="comment"> * @threadfn: the function to run until signal_pending(current).</span></span><br><span class="line"><span class="comment"> * @data: data ptr for @threadfn.</span></span><br><span class="line"><span class="comment"> * @node: task and thread structures for the thread are allocated on this node</span></span><br><span class="line"><span class="comment"> * @namefmt: printf-style name for the thread.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">struct</span> task_struct *<span class="title function_">kthread_create_on_node</span><span class="params">(<span class="type">int</span> (*threadfn)(<span class="type">void</span> *data),</span></span><br><span class="line"><span class="params">					   <span class="type">void</span> *data, <span class="type">int</span> node,</span></span><br><span class="line"><span class="params">					   <span class="type">const</span> <span class="type">char</span> namefmt[],</span></span><br><span class="line"><span class="params">					   ...)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">task</span>;</span></span><br><span class="line">	va_list args;</span><br><span class="line">	va_start(args, namefmt);</span><br><span class="line">	task = __kthread_create_on_node(threadfn, data, node, namefmt, args);</span><br><span class="line">	va_end(args);</span><br><span class="line">	<span class="keyword">return</span> task;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *__<span class="title">kthread_create_on_node</span>(<span class="title">int</span> (*<span class="title">threadfn</span>)(<span class="title">void</span> *<span class="title">data</span>),</span></span><br><span class="line"><span class="class">						    <span class="title">void</span> *<span class="title">data</span>, <span class="title">int</span> <span class="title">node</span>,</span></span><br><span class="line"><span class="class">						    <span class="title">const</span> <span class="title">char</span> <span class="title">namefmt</span>[],</span></span><br><span class="line"><span class="class">						    <span class="title">va_list</span> <span class="title">args</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	DECLARE_COMPLETION_ONSTACK(done);</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">task</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">kthread_create_info</span> *<span class="title">create</span> =</span> kmalloc(<span class="keyword">sizeof</span>(*create),</span><br><span class="line">						     GFP_KERNEL);</span><br><span class="line">	<span class="keyword">if</span> (!create)</span><br><span class="line">		<span class="keyword">return</span> ERR_PTR(-ENOMEM);</span><br><span class="line">	create-&gt;threadfn = threadfn;</span><br><span class="line">	create-&gt;data = data;</span><br><span class="line">	create-&gt;node = node;</span><br><span class="line">	create-&gt;done = &amp;done;</span><br><span class="line">	spin_lock(&amp;kthread_create_lock);</span><br><span class="line">	list_add_tail(&amp;create-&gt;<span class="built_in">list</span>, &amp;kthread_create_list); <span class="comment">// 把需要创建的线程添加到链表尾部</span></span><br><span class="line">	spin_unlock(&amp;kthread_create_lock);</span><br><span class="line">	wake_up_process(kthreadd_task); <span class="comment">// 唤醒 kthreadd 进程创建线程</span></span><br><span class="line">	...</span><br><span class="line">	<span class="keyword">return</span> task;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>kthread_create_on_node 作用就是把需要创建的线程添加到链表中，并唤醒 kthreadd 进程开始创建。</p>
<h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h3><p>​		kthreadd 进程由 idle 通过 kernel_thread 创建，并始终运行在内核空间, 负责所有内核线程的调度和管理，所有的内核线程都是直接或者间接的以 kthreadd 为父进程。</p>
<p>    kthreadd 进程会执行一个 kthreadd 的函数，该函数的作用就是遍历 kthread_create_list 链表，从链表中取出需要创建的内核线程进行创建, 创建成功后会执行 kthread 函数。</p>
<p>    kthread 函数完成一些初始赋值后就让出 CPU，并没有执行新线程的工作函数，因此需要手动  wake up 被唤醒后，新线程才执行自己的真正工作函数。</p>
<p>    当我们调用 kthread_create 和 kthread_run 创建的内核线程会被加入到 kthread_create_list 链表，kthread_create 不会手动 wake up 新线程，kthread_run 创建完成后会手动 wake up 新线程。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>Android - 平台架构</title>
    <url>/2021/06/01/Android/AndroidDevelop_001_AndroidArchitecture/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>Android 平台架构概述。</p>
</blockquote>
<span id="more"></span>

<h3 id="Android-平台架构"><a href="#Android-平台架构" class="headerlink" title="Android 平台架构"></a>Android 平台架构</h3><p>Android 是一种基于 Linux 的开放源代码软件栈，为各类设备和机型而创建。</p>
<h4 id="嵌入式-Linux-系统软件架构"><a href="#嵌入式-Linux-系统软件架构" class="headerlink" title="嵌入式 Linux 系统软件架构"></a>嵌入式 Linux 系统软件架构</h4><p>一般情况下嵌入式 Linux 系统中的软件主要分为以下几部分：</p>
<ul>
<li><p>引导加载程序：包括固化在固件（firmware）中的 boot 代码(可选)，和 Boot Loader 两大部分。</p>
<p>内部固化 ROM 是厂家在芯片生产时候固化的，作用基本上是引导Boot Loader</p>
</li>
<li><p>Linux kernel 和 drivers，特定于嵌入式板子的定制内核、内核的启动参数以及外围硬件设备驱动程序。</p>
</li>
<li><p>文件系统。包括根文件系统和建立于Flash内存设备之上的文件系统（EXT4、UBI、CRAMFS 等等）。它是提供管理系统的各种配置文件以及系统执行用户应用程序的良好运行环境的载体。</p>
</li>
<li><p>应用程序。特定于用户的应用程序。</p>
</li>
</ul>
<h4 id="Android-软件堆栈"><a href="#Android-软件堆栈" class="headerlink" title="Android 软件堆栈"></a>Android 软件堆栈</h4><p><a href="https://developer.android.com/guide/platform?hl=zh-cn">下图</a> 所示为 Google 提供的 Android 平台的主要组件图：</p>
<p><a href="https://raw.githubusercontent.com/rangerzhou/ImageHosting/master/blog_resource/2020/android_architecture.png">Android堆栈</a></p>
<p><img src="https://raw.githubusercontent.com/rangerzhou/ImageHosting/master/blog_resource/2020/android_architecture.png" alt="Android 堆栈" title="Android 堆栈"></p>
<p>在上图中，Google 把 Android 分成了5层架构：</p>
<ul>
<li>Linux 内核</li>
<li>硬件抽象层（HAL）</li>
<li>Android Runtime + 原生 C&#x2F;C++ 库</li>
<li>Java API 框架</li>
<li>系统应用层</li>
</ul>
<h4 id="系统启动架构"><a href="#系统启动架构" class="headerlink" title="系统启动架构"></a>系统启动架构</h4><p>以进程的视角、分层的架构展示 Android 系统启动架构：</p>
<p><a href="https://raw.githubusercontent.com/rangerzhou/ImageHosting/master/blog_resource/2020/android-boot.jpg">系统架构图_进程角度</a></p>
<p><img src="https://raw.githubusercontent.com/rangerzhou/ImageHosting/master/blog_resource/2020/android-boot.jpg" alt="系统启动架构图" title="系统架构图"></p>
<p>对于 Android 整个启动过程来说，可以划分为三个阶段：BootLoader 引导（U-Boot）、Linux Kernel 启动、Android OS 启动。</p>
<p>U-Boot 主要作用，就是引导内核的启动，首先会把内核从 Flash 中放到内存中，然后引导内核启动；</p>
<p>内核是整个系统的核心，它负责进程管理、内存管理、网络管理，可以直接对硬件进行控制，并且把硬件全部抽象成文件，对上层提供接口；</p>
<p>内核启动完后，会根据所设置的启动方式去启动 Android 系统；</p>
<h4 id="Loader-层"><a href="#Loader-层" class="headerlink" title="Loader 层"></a>Loader 层</h4><p>早期经常刷机的时候，通过某个组合键（一般是 power + volume down）就会进入 bootloader 页面，就是系统启动架构图中的最底层，BootLoader 并不是 Linux 才需要，而是几乎所有的运行操作系统的设备都具备，PC 中的 BIOS 就是 BootLoader 的一部分，对于 Linux PC 来说，BootLoader &#x3D; BIOS + GRUB&#x2F;LILO。</p>
<p>常用的 BootLoader 有 Redboot、ARMBoot、Blob、<strong>U-Boot</strong> 等，U-Boot 是最常用的 BootLoader，可以引导多种操作系统，支持多种架构的 CPU。全称 Universal Boot Loader，是由开源项目 PPCBoot 发展起来的，ARMboot 并入了 PPCBoot，和其他一些 arch 的 Loader 合称 U-Boot。</p>
<ul>
<li><font color=red><strong>Boot ROM</strong></font>：固化在固件（firmware）中的 boot 代码；</li>
<li><font color=red><strong>Boot Loader</strong></font> ：启动 Android OS 之前的引导程序，主要是<code>检查 RAM，初始化硬件参数</code>等功能，会把内核从 flash 中放到内存中，然后引导内核启动。</li>
</ul>
<p><strong>Bootloader 是如何被引导的？</strong></p>
<p>由主 CPU 完成，CPU 内部也会有一段引导程序，并且有一段固化的 ROM，由芯片厂商完成。手机处于关机状态时，长按 Power 键开机，如上 <strong>嵌入式 Linux 系统软件架构</strong> 中所述，芯片从固化在 ROM 里的预设代码开始执行，然后加载引导程序（Bootloader）到 RAM。主芯片基本都会提供几种启动模式：USB 启动、SD 卡启动、Flash 启动等。</p>
<h4 id="Linux-Kernel-层"><a href="#Linux-Kernel-层" class="headerlink" title="Linux Kernel 层"></a>Linux Kernel 层</h4><p>Android 平台的基础是 Linux 内核，也是整个系统的核心，内核负责进程管理、内存管理、网络管理，作为硬件和软件之间的抽象层，可以直接对硬件进行控制，并且<font color = red><strong>把硬件全部抽象成文件，对上层提供接口</strong></font>。例如，<a href="https://developer.android.com/guide/platform?hl=zh-cn#art">Android Runtime (ART)</a> 依靠 Linux 内核来执行底层功能，例如线程和低层内存管理。</p>
<p>使用 Linux 内核可让 Android 利用<a href="https://source.android.com/security/overview/kernel-security.html?hl=zh-cn">主要安全功能</a>，并且允许设备制造商为著名的内核开发硬件驱动程序。</p>
<ul>
<li><font color=red><strong>swapper 进程（pid &#x3D; 0）</strong></font>：即 idle 进程，由系统自动创建，运行在内核态，系统初始化过程开创的第一个进程，也是唯一一个没有通过 fork 或者 kernel_thread 产生的进程。完成加载系统后，演变为进程调度、交换，用于<strong>初始化进程管理、内存管理，加载 Display, Camera Driver, Binder Driver</strong> 等相关工作；</li>
<li><font color = red><strong>kthreadd（pid &#x3D; 2）</strong></font>：kthreadd  进程由 idle 通过 kernel_thread 创建，并始终运行在内核空间，负责所有内核线程的调度和管理。它的任务就是管理和调度其他内核线程 kernel_thread, 会循环执行一个 kthreadd 的函数，该函数的作用就是运行 kthread_create_list 全局链表中维护的 kthread, 当我们调用 kernel_thread 创建的内核线程会被加入到此链表中，因此<font color = red><strong>所有的内核线程都是直接或者间接的以 kthreadd 为父进程</strong></font>。</li>
</ul>
<h4 id="硬件抽象层（HAL）"><a href="#硬件抽象层（HAL）" class="headerlink" title="硬件抽象层（HAL）"></a>硬件抽象层（HAL）</h4><p><a href="https://source.android.com/devices/architecture/hal-types?hl=zh-cn">硬件抽象层 (HAL)</a> 提供标准界面，向更高级别的 <a href="https://developer.android.com/guide/platform?hl=zh-cn#api-framework">Java API 框架</a>显示设备硬件功能。HAL 包含多个库模块，其中每个模块都为特定类型的硬件组件实现一个界面，例如<a href="https://source.android.com/devices/camera/index.html?hl=zh-cn">相机</a>或<a href="https://source.android.com/devices/bluetooth.html?hl=zh-cn">蓝牙</a>模块。当框架 API 要求访问设备硬件时，Android 系统将为该硬件组件加载库模块。</p>
<p><strong>作用</strong>：把一些主要外设抽象出一套标准的接口，供 C++ Framework 层调用。比如把 Camera 抽象出一套接口，如果底层换了 Camera，那么 Camera 号和 C++ Framework 层之间的接口是不会发生改变的，所要修改的就是从 HAL 层调用驱动的方式会发生一些改变，但是 Framework 层到 HAL 层之间的接口是不会改变的。</p>
<p>同样 Sensor、Audio、WIFI 对 C++ Framework 层所提供的接口都是一套标准的，如果需要更换硬件、驱动、调用方式，这套标准接口是不会改变的。</p>
<h4 id="Android-Runtime-amp-原生-C-x2F-C-库"><a href="#Android-Runtime-amp-原生-C-x2F-C-库" class="headerlink" title="Android Runtime &amp; 原生 C&#x2F;C++ 库"></a>Android Runtime &amp; 原生 C&#x2F;C++ 库</h4><h5 id="Android-Runtime"><a href="#Android-Runtime" class="headerlink" title="Android Runtime"></a>Android Runtime</h5><p>Android 运行时分为核心库和 ART（5.0 系统以后，Dalvik 虚拟机被 ART 取代），核心库提供了 Java 语言核心库的大多数功能。对于运行 Android 5.0（API 级别 21）或更高版本的设备，每个应用都在其自己的进程中运行，并且有其自己的 <a href="https://source.android.com/devices/tech/dalvik/index.html?hl=zh-cn">Android Runtime (ART)</a> 实例。ART 编写为通过执行 DEX 文件在低内存设备上运行多个虚拟机，DEX 文件是一种专为 Android 设计的字节码格式，经过优化，使用的内存很少。编译工具链（例如 <a href="https://source.android.com/source/jack.html?hl=zh-cn">Jack</a>）将 Java 源代码编译为 DEX 字节码，使其可在 Android 平台上运行。</p>
<p>ART 的部分主要功能包括：</p>
<ul>
<li>预先 (AOT) 和即时 (JIT) 编译</li>
<li>优化的垃圾回收 (GC)</li>
<li>在 Android 9（API 级别 28）及更高版本的系统中，支持将应用软件包中的 <a href="https://developer.android.com/about/versions/pie/android-9.0?hl=zh-cn#art-aot-dex">Dalvik Executable 格式 (DEX) 文件转换为更紧凑的机器代码</a>。</li>
<li>更好的调试支持，包括专用采样分析器、详细的诊断异常和崩溃报告，并且能够设置观察点以监控特定字段</li>
</ul>
<p>在 Android 版本 5.0（API 级别 21）之前，Dalvik 是 Android Runtime。如果您的应用在 ART 上运行效果很好，那么它应该也可在 Dalvik 上运行，但<a href="https://developer.android.com/guide/practices/verifying-apps-art?hl=zh-cn">反过来不一定</a>。</p>
<p>Android 还包含一套核心运行时库，可提供 Java API 框架所使用的 Java 编程语言中的大部分功能，包括一些 <a href="https://developer.android.com/guide/platform/j8-jack?hl=zh-cn">Java 8 语言功能</a>。</p>
<h5 id="原生-C-x2F-C-库"><a href="#原生-C-x2F-C-库" class="headerlink" title="原生 C&#x2F;C++ 库"></a>原生 C&#x2F;C++ 库</h5><p>Android 包含一个 C&#x2F;C++ 库的集合，供 Android 系统的各个组件使用。这些功能通过 Android 的应用程序框架（application framework）暴露给开发者。下面列出一些核心库：</p>
<ul>
<li><strong>系统C库</strong>——标准 C 系统库（libc）的 BSD 衍生，调整为基于嵌入式 Linux 设备</li>
<li><strong>媒体库</strong>——基于 PacketVideo 的 OpenCORE。这些库支持播放和录制许多流行的音频和视频格式，以及静态图像文件，包括 MPEG4、H.264、MP3、AAC、AMR、JPG、PNG</li>
<li><strong>界面管理</strong>——管理访问显示子系统和无缝组合多个应用程序的二维和三维图形层</li>
<li><strong>LibWebCore</strong>——新式的 Web 浏览器引擎,驱动 Android 浏览器和内嵌的 web 视图</li>
<li><strong>SGL</strong>——基本的 2D 图形引擎</li>
<li><strong>3D库</strong>——基于 OpenGL ES 1.0 APIs 的实现。库使用硬件 3D 加速或包含高度优化的 3D 软件光栅</li>
<li><strong>FreeType</strong> ——位图和矢量字体渲染</li>
<li><strong>SQLite</strong> ——所有应用程序都可以使用的强大而轻量级的关系数据库引擎</li>
</ul>
<p>C++ Framework 层作用：起一个承上启下的作用，对上（Java Framework 层）提供服务，对下能够挂接 HAL 层（比如 Camera、Sensor、Audio、WIFI 等外设），并且能够对外设提供保护。比如上层同时有两个程序同时对 Camera 进行访问，但是同一时刻只能有一个应用程序对 Camera 进行访问，C++ Framework 层就会有一种机制去管理这种访问，确保在同一时刻只有一个应用程序对 Camera 进行访问。</p>
<p>许多核心 Android 系统组件和服务（例如 ART 和 HAL）构建自原生代码，需要以 C 和 C++ 编写的原生库。Android 平台提供 Java 框架 API 以向应用显示其中部分原生库的功能。例如，您可以通过 Android 框架的 <a href="https://developer.android.com/reference/android/opengl/package-summary?hl=zh-cn">Java OpenGL API</a> 访问 <a href="https://developer.android.com/guide/topics/graphics/opengl?hl=zh-cn">OpenGL ES</a>，以支持在应用中绘制和操作 2D 和 3D 图形。</p>
<p>如果开发的是需要 C 或 C++ 代码的应用，可以使用 <a href="https://developer.android.com/ndk?hl=zh-cn">Android NDK</a> 直接从原生代码访问某些<a href="https://developer.android.com/ndk/guides/stable_apis?hl=zh-cn">原生平台库</a>。</p>
<p>原生系统库主要包括 init 浮华来的用户空间的守护进程、HAL 层以及开机动画等。</p>
<ul>
<li><font color = red><strong>init 进程（pid &#x3D; 1）</strong></font>：Linux 系统的用户进程，负责的事情主要是对 <code>init.rc</code> 这个系统启动脚本文件进行解析；</li>
<li>init 进程会孵化出 ueventd、logd、healthd、installd、adbd、lmkd 等用户守护进程；</li>
<li>init 进程还启动 <code>servicemanager</code>(binder 服务管家)、<code>bootanim</code> (开机动画)等重要服务；</li>
<li>init 进程孵化出 Zygote 进程，Zygote 进程是 Android 系统的第一个 Java 进程(即虚拟机进程)，<font color = red><strong>Zygote是所有Java进程的父进程</strong></font>，Zygote进程本身是由init进程孵化而来的。</li>
</ul>
<h4 id="Framework-层"><a href="#Framework-层" class="headerlink" title="Framework 层"></a>Framework 层</h4><p>您可通过以 Java 语言编写的 API 使用 Android OS 的整个功能集。这些 API 形成创建 Android 应用所需的构建块，它们可简化核心模块化系统组件和服务的重复使用，包括以下组件和服务：</p>
<ul>
<li>丰富、可扩展的<a href="https://developer.android.com/guide/topics/ui/overview?hl=zh-cn">视图系统</a>，可用以构建应用的 UI，包括列表、网格、文本框、按钮甚至可嵌入的网络浏览器</li>
<li><a href="https://developer.android.com/guide/topics/resources/overview?hl=zh-cn">资源管理器</a>，用于访问非代码资源，例如本地化的字符串、图形和布局文件</li>
<li><a href="https://developer.android.com/guide/topics/ui/notifiers/notifications?hl=zh-cn">通知管理器</a>，可让所有应用在状态栏中显示自定义提醒</li>
<li><a href="https://developer.android.com/guide/components/activities?hl=zh-cn">Activity 管理器</a>，用于管理应用的生命周期，提供常见的<a href="https://developer.android.com/guide/components/tasks-and-back-stack?hl=zh-cn">导航返回栈</a></li>
<li><a href="https://developer.android.com/guide/topics/providers/content-providers?hl=zh-cn">内容提供程序</a>，可让应用访问其他应用（例如“联系人”应用）中的数据或者共享其自己的数据</li>
</ul>
<p>开发者可以完全访问 Android 系统应用使用的<a href="https://developer.android.com/reference/packages?hl=zh-cn">框架 API</a>。</p>
<ul>
<li><font color = red><strong>Zygote 进程</strong></font>：由 init 进程通过解析 init.rc 文件后 fork 生成的，Zygote 进程主要包含：<ul>
<li>加载 ZygoteInit 类，注册 Zygote Socket 服务端套接字</li>
<li>加载虚拟机</li>
<li>提前加载类 preloadClasses</li>
<li>提前加载资源 preloadResouces</li>
</ul>
</li>
<li><font color = red><strong>System Server 进程</strong></font>：是由 Zygote 进程 fork 而来，<font color = red><strong>System Server 是 Zygote 孵化的第一个进程</strong></font>，System Server 负责启动和管理整个 Java framework，包含 ActivityManager，WindowManager，PackageManager，PowerManager 等服务。</li>
<li><font color = red><strong>Media Server 进程</strong></font>：是由 init 进程 fork 而来，负责启动和管理整个 <strong>C++ framework</strong>，包含AudioFlinger，Camera Service 等服务。</li>
</ul>
<h4 id="APP-层"><a href="#APP-层" class="headerlink" title="APP 层"></a>APP 层</h4><p>APP 包含系统应用和第三方应用，Android 随附一套用于电子邮件、短信、日历、互联网浏览和联系人等的核心应用。平台随附的应用与用户可以选择安装的应用一样，没有特殊状态。因此第三方应用可成为用户的默认网络浏览器、短信 Messenger 甚至默认键盘（有一些例外，例如系统的“设置”应用）。</p>
<p>系统应用可用作用户的应用，以及提供开发者可从其自己的应用访问的主要功能。例如，如果您的应用要发短信，您无需自己构建该功能，可以改为调用已安装的短信应用向您指定的接收者发送消息。</p>
<ul>
<li>Zygote 进程孵化出的第一个 App 进程是 Launcher，这是用户看到的桌面 App；</li>
<li>Zygote 进程还会创建 Browser，Phone，Email 等 App 进程，每个 App 至少运行在一个进程上。</li>
<li>所有的 App 进程都是由 Zygote 进程 fork 生成的。</li>
</ul>
<h4 id="Syscall-amp-amp-JNI"><a href="#Syscall-amp-amp-JNI" class="headerlink" title="Syscall &amp;&amp; JNI"></a>Syscall &amp;&amp; JNI</h4><ul>
<li>Native与Kernel之间有一层系统调用(SysCall)层</li>
<li>Java层与Native(C&#x2F;C++)层之间的纽带 JNI</li>
</ul>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>自动认证公司网络</title>
    <url>/2021/05/20/Python/NetworkAutoAuth/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="361dc6b73a4a9bf483396849db52c8e9fbae01f53fd32742d1f3e86740e30510"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>MPAndroidChart 用法</title>
    <url>/2021/03/12/Technical/MPAndroidChart_Usage/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>MPAndroidChart使用-散点图、雷达图、饼图等……</p>
</blockquote>
<span id="more"></span>

<h2 id="ScatterChart"><a href="#ScatterChart" class="headerlink" title="ScatterChart"></a>ScatterChart</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setScatterProperties</span><span class="params">()</span> &#123;</span><br><span class="line">    xAxis = scatterChart.getXAxis();</span><br><span class="line">    xAxis.setPosition(XAxis.XAxisPosition.BOTTOM);</span><br><span class="line">    xAxis.setLabelRotationAngle(<span class="number">90</span>);</span><br><span class="line">    xAxis.setGranularityEnabled(<span class="literal">true</span>);</span><br><span class="line">    xAxis.setGranularity(<span class="number">1f</span>);</span><br><span class="line">    xAxis.setAxisMinimum(<span class="number">0f</span>);</span><br><span class="line">    xAxis.setAxisMaximum(<span class="number">86400f</span>); <span class="comment">// 89400 为24小时的秒数</span></span><br><span class="line">    scatterChart.setVisibleXRange(<span class="number">0</span>, <span class="number">35</span>);</span><br><span class="line">    xAxis.setLabelCount(<span class="number">35</span>); <span class="comment">// 左右分布是15，上下分布是35</span></span><br><span class="line">    Log.d(TAG, <span class="string">&quot;getLableCount: &quot;</span> + xAxis.getLabelCount());</span><br><span class="line">    <span class="comment">//xAxis.setDrawGridLines(false); // 是否绘制竖向网格线</span></span><br><span class="line">    <span class="comment">//xAxis.setValueFormatter(new XAxisValueFormatter(minTime));</span></span><br><span class="line"></span><br><span class="line">    <span class="type">YAxis</span> <span class="variable">axisLeft</span> <span class="operator">=</span> scatterChart.getAxisLeft();</span><br><span class="line">    <span class="type">YAxis</span> <span class="variable">axisRight</span> <span class="operator">=</span> scatterChart.getAxisRight();</span><br><span class="line">    axisRight.setEnabled(<span class="literal">false</span>);</span><br><span class="line">    axisLeft.setGranularityEnabled(<span class="literal">true</span>);</span><br><span class="line">    axisLeft.setGranularity(<span class="number">1</span>);</span><br><span class="line">    axisLeft.setAxisMinimum(<span class="number">0</span>);</span><br><span class="line">    axisLeft.setAxisMaximum(eventIndexKeys.length);</span><br><span class="line">    scatterChart.setVisibleYRange(<span class="number">0</span>, <span class="number">8</span>, YAxis.AxisDependency.LEFT);</span><br><span class="line">    axisLeft.setLabelCount(<span class="number">8</span>);<span class="comment">// Y 轴总共标签数（含原点），和setVisibleYRange 可保证 Y 轴不缩放</span></span><br><span class="line">    axisLeft.setValueFormatter(<span class="keyword">new</span> <span class="title class_">YAxisValueFormatter</span>(eventIndexKeys));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*Legend legend = scatterChart.getLegend();</span></span><br><span class="line"><span class="comment">    legend.setVerticalAlignment(Legend.LegendVerticalAlignment.TOP);</span></span><br><span class="line"><span class="comment">    legend.setHorizontalAlignment(Legend.LegendHorizontalAlignment.LEFT);</span></span><br><span class="line"><span class="comment">    legend.setForm(Legend.LegendForm.CIRCLE);*/</span></span><br><span class="line">    scatterChart.getLegend().setEnabled(<span class="literal">false</span>); <span class="comment">// 不显示图例</span></span><br><span class="line"></span><br><span class="line">    scatterChart.setExtraBottomOffset(<span class="number">10</span>);</span><br><span class="line">    <span class="comment">//scatterChart.setVisibleYRangeMinimum(7, YAxis.AxisDependency.LEFT); // 值为标签个数即可</span></span><br><span class="line">    <span class="comment">//scatterChart.setVisibleXRangeMinimum(5);</span></span><br><span class="line">    <span class="comment">//scatterChart.setVisibleXRangeMaximum(10);</span></span><br><span class="line">    <span class="comment">//scatterChart.setNoDataText(&quot;NO DATA !!!&quot;);</span></span><br><span class="line">    <span class="comment">//scatterChart.setViewPortOffsets(1, 1, 1, 1);</span></span><br><span class="line">    <span class="comment">//scatterChart.setScaleXEnabled(false);</span></span><br><span class="line">    <span class="comment">//scatterChart.setVisibleYRange(0, 7, YAxis.AxisDependency.LEFT);</span></span><br><span class="line">    <span class="comment">//scatterChart.setVisibleXRange(10, 30);</span></span><br><span class="line">    <span class="comment">//scatterChart.setFitsSystemWindows(true);</span></span><br><span class="line"></span><br><span class="line">    scatterChartDescription = scatterChart.getDescription();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="RadarChart"><a href="#RadarChart" class="headerlink" title="RadarChart"></a>RadarChart</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure>





<h2 id="BubbleChart"><a href="#BubbleChart" class="headerlink" title="BubbleChart"></a>BubbleChart</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setBubbleProperties</span><span class="params">()</span> &#123;</span><br><span class="line">    bubbleChart.setDrawBorders(<span class="literal">false</span>); <span class="comment">// 图标周围边界一圈黑线</span></span><br><span class="line">    bubbleChart.setDrawGridBackground(<span class="literal">false</span>); <span class="comment">// 是否设置网格背景，如设置，默认为灰色</span></span><br><span class="line">    bubbleChart.setGridBackgroundColor(Color.GRAY); <span class="comment">// 网格背景颜色</span></span><br><span class="line">    <span class="comment">//bubbleChart.animateXY(2500, 1500); // 设置XY轴动画效果</span></span><br><span class="line">    <span class="comment">//bubbleChart.setVisibleXRangeMinimum(10); // 无需滚动即可查看 X 轴上不小于 10 的范围</span></span><br><span class="line">    <span class="comment">//bubbleChart.setVisibleYRangeMinimum(20, YAxis.AxisDependency.LEFT);</span></span><br><span class="line">    <span class="comment">//bubbleChart.setExtraOffsets(-5, 2, 2, 2); // 设置整个左边上下左右的偏移量（图各方向的边界和手机显示边界的距离），类似于 padding</span></span><br><span class="line">    <span class="comment">//bubbleChart.setVisibleYRangeMinimum(10, YAxis.AxisDependency.LEFT);</span></span><br><span class="line">    bubbleChart.setTouchEnabled(<span class="literal">true</span>);</span><br><span class="line">    bubbleChart.setDragEnabled(<span class="literal">true</span>);</span><br><span class="line">    <span class="comment">//bubbleChart.setVisibleXRange(0, 10);</span></span><br><span class="line">    <span class="type">Legend</span> <span class="variable">legend</span> <span class="operator">=</span> bubbleChart.getLegend();</span><br><span class="line">    legend.setForm(Legend.LegendForm.CIRCLE);</span><br><span class="line">    legend.setVerticalAlignment(Legend.LegendVerticalAlignment.TOP);</span><br><span class="line">    legend.setHorizontalAlignment(Legend.LegendHorizontalAlignment.LEFT);</span><br><span class="line"></span><br><span class="line">    <span class="type">XAxis</span> <span class="variable">xAxis</span> <span class="operator">=</span> bubbleChart.getXAxis();</span><br><span class="line">    xAxis.setGranularity(<span class="number">1</span>); <span class="comment">// 放大时轴的最小间隔</span></span><br><span class="line">    xAxis.setPosition(XAxis.XAxisPosition.BOTTOM); <span class="comment">// 设置 X 轴位置</span></span><br><span class="line">    xAxis.setAxisMinimum(<span class="number">0</span>); <span class="comment">// 设置 X 轴最小值</span></span><br><span class="line">    <span class="comment">//xAxis.setAxisMaximum(100);</span></span><br><span class="line">    <span class="comment">//xAxis.setLabelCount(15); // 设置 X 轴标签个数，最大值为25</span></span><br><span class="line">    Log.d(TAG, <span class="string">&quot;labelCount: &quot;</span> + xAxis.getLabelCount());</span><br><span class="line">    <span class="comment">//xAxis.setLabelRotationAngle(90);</span></span><br><span class="line"></span><br><span class="line">    <span class="type">YAxis</span> <span class="variable">axisLeft</span> <span class="operator">=</span> bubbleChart.getAxisLeft();</span><br><span class="line">    <span class="type">YAxis</span> <span class="variable">axisRight</span> <span class="operator">=</span> bubbleChart.getAxisRight();</span><br><span class="line">    axisRight.setEnabled(<span class="literal">false</span>); <span class="comment">// 禁用右边 Y 轴</span></span><br><span class="line">    axisLeft.setGranularity(<span class="number">1</span>); <span class="comment">// 放大时 Y 轴的最小间隔</span></span><br><span class="line">    <span class="comment">//axisLeft.setAxisMinimum(0f); // 设置 Y 轴最小值</span></span><br><span class="line">    axisLeft.setLabelCount(<span class="number">10</span>); <span class="comment">// 设置左边 Y 轴标签个数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">Description</span> <span class="variable">description</span> <span class="operator">=</span> bubbleChart.getDescription();</span><br><span class="line">    description.setText(<span class="string">&quot;实时行为气泡图&quot;</span>);</span><br><span class="line">    description.setTextColor(Color.RED);</span><br><span class="line">    Log.d(TAG, <span class="string">&quot;position: &quot;</span> + description.getPosition() + <span class="string">&quot;, width: &quot;</span> + bubbleChart.getWidth() + <span class="string">&quot;, height: &quot;</span> + bubbleChart.getHeight());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Technical</category>
      </categories>
  </entry>
  <entry>
    <title>Apache-Ignite 相关记录</title>
    <url>/2020/04/01/Ignite/Ignite/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>Apache-ignite 相关记录。</p>
</blockquote>
<span id="more"></span>

<h3 id="配置-Ignite-Web-控制台"><a href="#配置-Ignite-Web-控制台" class="headerlink" title="配置 Ignite Web 控制台"></a>配置 Ignite Web 控制台</h3><p><a href="https://www.cnblogs.com/liugh/p/7425818.html">https://www.cnblogs.com/liugh/p/7425818.html</a></p>
<p>a. 下载 gridgain-web-console-agent</p>
<p><a href="https://console.gridgain.com/configuration/overview">https://console.gridgain.com/configuration/overview</a></p>
<p><img src="https://raw.githubusercontent.com/rangerzhou/ImageHosting/master/blog_resource/2020/downloadWebConsoleAgent.png" alt="Down WebConsoleAgent"></p>
<p>b. 解压 gridgain-web-console-agent-2020.02.00.zip</p>
<p>c. 编辑解压目录中的 default.properties，其中 tokens 可从<a href="https://console.gridgain.com/monitoring/dashboard">官网</a>获得(Monitoring dashboard页面-点击 check 即可)</p>
<p>d. 把 ignite-rest-http 从$IGNITE_HOME&#x2F;libs&#x2F;optional 拷贝到 $IGNITE_HOME&#x2F;libs 目录下</p>
<p>e. 启动ignite节点</p>
<p>f. 启动Web Agent</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./IGNITE_HOME/gridgain-web-console-agent.sh</span> </span><br><span class="line">[2020-03-05T16:51:21,014][INFO ][main][AgentLauncher] Starting Apache GridGain Web Console Agent...</span><br><span class="line">[2020-03-05T16:51:21,136][INFO ][main][AgentLauncher] </span><br><span class="line">[2020-03-05T16:51:21,136][INFO ][main][AgentLauncher] Web Console Agent configuration :</span><br><span class="line">[2020-03-05T16:51:21,237][INFO ][main][AgentLauncher] User&#x27;s security tokens             : ********************************8204</span><br><span class="line">[2020-03-05T16:51:21,237][INFO ][main][AgentLauncher] URI to Ignite node REST server     : http://localhost:8080</span><br><span class="line">[2020-03-05T16:51:21,237][INFO ][main][AgentLauncher] URI to GridGain Web Console        : https://console.gridgain.com</span><br><span class="line">[2020-03-05T16:51:21,237][INFO ][main][AgentLauncher] Path to properties file            : default.properties</span><br><span class="line">[2020-03-05T16:51:21,237][INFO ][main][AgentLauncher] Path to JDBC drivers folder        : /home/ranger/opt/apache-ignite-2.8.0-bin/gridgain-web-console-agent-2020.02.00/jdbc-drivers</span><br><span class="line">[2020-03-05T16:51:21,237][INFO ][main][AgentLauncher] Demo mode                          : enabled</span><br><span class="line">[2020-03-05T16:51:21,237][INFO ][main][AgentLauncher] </span><br><span class="line">[2020-03-05T16:51:21,320][INFO ][main][WebSocketRouter] Starting Web Console Agent...</span><br><span class="line">[2020-03-05T16:51:21,342][INFO ][Connect thread][WebSocketRouter] Connecting to server: wss://console.gridgain.com</span><br><span class="line">[2020-03-05T16:51:24,098][INFO ][http-client-17][WebSocketRouter] Successfully completes handshake with server</span><br><span class="line">[2020-03-05T16:51:24,277][INFO ][pool-2-thread-1][ClusterHandler] Connected to node [url=http://localhost:8080]</span><br><span class="line">[2020-03-05T16:51:24,305][INFO ][pool-2-thread-1][ClustersWatcher] Connection successfully established to cluster with nodes: [B2454006]</span><br><span class="line">[2020-03-05T16:55:26,601][INFO ][http-client-19][AgentClusterDemo] DEMO: Starting embedded nodes for demo...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="idea-中配置-IGNITE-HOME"><a href="#idea-中配置-IGNITE-HOME" class="headerlink" title="idea 中配置 IGNITE_HOME"></a>idea 中配置 IGNITE_HOME</h3><p>Run - Edit Configurations - 选中 Application 下需要配置的项 - 右侧 Configuration 选项 - 配置 Environment variables - 添加环境变量即可。</p>
<p><img src="https://raw.githubusercontent.com/rangerzhou/ImageHosting/master/blog_resource/2020/ConfigIGNITE_HOME.png" alt="image-20200317160517354"></p>
<h3 id="IGNITE-使用注意事项"><a href="#IGNITE-使用注意事项" class="headerlink" title="IGNITE 使用注意事项"></a>IGNITE 使用注意事项</h3><h4 id="Ignite-日志"><a href="#Ignite-日志" class="headerlink" title="Ignite 日志"></a>Ignite 日志</h4><p><a href="https://www.ignite-service.cn/doc/java/#_9-%E6%97%A5%E5%BF%97">日志配置教程</a></p>
<p>Ignite 默认启动于 <em>静默模式</em> ，会阻止 <code>INFO</code> 和 <code>DEBUG</code> 日志的输出。可在代码中关闭 <em>静默模式</em> ：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.setProperty(<span class="string">&quot;IGNITE_QUIET&quot;</span>, <span class="string">&quot;false&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>关闭后终端会打印出更详细的 log。</p>
<h4 id="数据并置与关联查询"><a href="#数据并置与关联查询" class="headerlink" title="数据并置与关联查询"></a>数据并置与关联查询</h4><h3 id="IGNITE-工具使用"><a href="#IGNITE-工具使用" class="headerlink" title="IGNITE 工具使用"></a>IGNITE 工具使用</h3><h4 id="ignitevisorcmd-sh-脚本"><a href="#ignitevisorcmd-sh-脚本" class="headerlink" title="ignitevisorcmd.sh 脚本"></a>ignitevisorcmd.sh 脚本</h4><p>位置：<code>$IGNITE_HOME/bin/ignitevisorcmd.sh</code></p>
<p>可查看 node, cache, config 等详细信息，使用方法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="variable">$IGNITE_HOME</span>/bin/ignitevisorcmd.sh</span><br><span class="line">... ...</span><br><span class="line"><span class="comment"># 输入 open 加入网格</span></span><br><span class="line">visor&gt; open</span><br><span class="line">Local configuration files:</span><br><span class="line">+========================================================================================+</span><br><span class="line">|  <span class="comment">#  |                                                    Configuration File            |</span></span><br><span class="line">+========================================================================================+</span><br><span class="line">| 0   | config/default-config.xml                                                        |</span><br><span class="line">| 1   | benchmarks/config/ignite-base-config.xml                                         |</span><br><span class="line">| 2   | benchmarks/config/ignite-localhost-config.xml                                    |</span><br><span class="line">| 3   | benchmarks/config/ignite-multicast-config.xml                                    |</span><br><span class="line">... ...</span><br><span class="line">+----------------------------------------------------------------------------------------+</span><br><span class="line"><span class="comment"># 选择配置文件，选择 0 即可</span></span><br><span class="line">Choose configuration file number (<span class="string">&#x27;c&#x27;</span> to cancel) [0]: 0</span><br><span class="line">... ...</span><br><span class="line">Some useful commands:</span><br><span class="line">+--------------------------------------------+</span><br><span class="line">| Type <span class="string">&#x27;top&#x27;</span>    | to see full topology.      |</span><br><span class="line">| Type <span class="string">&#x27;node&#x27;</span>   | to see node statistics.    |</span><br><span class="line">| Type <span class="string">&#x27;cache&#x27;</span>  | to see cache statistics.   |</span><br><span class="line">| Type <span class="string">&#x27;tasks&#x27;</span>  | to see tasks statistics.   |</span><br><span class="line">| Type <span class="string">&#x27;config&#x27;</span> | to see node configuration. |</span><br><span class="line">+--------------------------------------------+</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help&#x27;</span> to get <span class="built_in">help</span>.</span><br><span class="line"></span><br><span class="line">+---------------------------------------------------------------------------------+</span><br><span class="line">| Status               | Connected                                                |</span><br><span class="line">| Ignite instance name | &lt;default&gt;                                                |</span><br><span class="line">| Config path          | /home/ranger/opt/apache-ignite/config/default-config.xml |</span><br><span class="line">| Uptime               | 00:00:00                                                 |</span><br><span class="line">+---------------------------------------------------------------------------------+</span><br><span class="line">visor&gt; cache</span><br></pre></td></tr></table></figure>

<p><strong>查看 node</strong></p>
<img src="https://raw.githubusercontent.com/rangerzhou/ImageHosting/master/Pictures/ignitevisorcmd_node.png" alt="node"  />

<p><strong>查看 cache</strong></p>
<p><img src="https://raw.githubusercontent.com/rangerzhou/ImageHosting/master/Pictures/ignitevisorcmd_cache.png" alt="cache"></p>
<p>上图中的 <code>personCache</code> 是在代码中创建的（使用 ignite 的 setIndexedTypes ），<a href="https://github.com/sunwu51/bigdatatutorial/blob/master/Persistence/Ignite2.md">例子在此</a> ；</p>
<p><code>SQL_PUBLIC_CITY</code> 是通过 SQL 语句建表生成的：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> City (id LONG <span class="keyword">PRIMARY</span> KEY, name <span class="type">VARCHAR</span>)</span><br></pre></td></tr></table></figure>

<p><code>cache_person</code> 也是通过 SQL 语句建表生成的：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Person (id LONG <span class="keyword">PRIMARY</span> KEY, name <span class="type">VARCHAR</span>) <span class="keyword">WITH</span> &quot;CACHE_NAME = cache_person&quot;</span><br></pre></td></tr></table></figure>

<p>详细文档点击 <a href="https://www.ignite-service.cn/doc/sql/SQLReference.html#_2-3-create-table">ignite create-table</a> 查看。</p>
<h4 id="sqlline-工具"><a href="#sqlline-工具" class="headerlink" title="sqlline 工具"></a>sqlline 工具</h4><p><a href="https://www.ignite-service.cn/doc/sql/ToolsAndAnalytics.html#_2-sqlline">使用教程</a></p>
<p>位置：<code>$IGNITE_HOME/bin/sqlline.sh</code></p>
<p>ignite 支持完整的 SQL，通过 <code>sqlline.sh</code> 可以直接连接 ignite 数据库服务，使用方法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sqlline.sh</span><br><span class="line">sqlline version 1.3.0</span><br><span class="line">sqlline&gt;</span><br><span class="line"><span class="comment"># 连接</span></span><br><span class="line">sqlline&gt; !connect jdbc:ignite:thin://localhost</span><br><span class="line">Enter username <span class="keyword">for</span> jdbc:ignite:thin://localhost:</span><br><span class="line">Enter password <span class="keyword">for</span> jdbc:ignite:thin://localhost:</span><br><span class="line">0: jdbc:ignite:thin://localhost&gt;</span><br><span class="line"><span class="comment"># 随后即可输入 SQL 命令了</span></span><br><span class="line">0: jdbc:ignite:thin://localhost&gt; !tables</span><br><span class="line"></span><br><span class="line"><span class="comment"># sqlline.sh --verbose=true -u jdbc:ignite:thin://localhost 这种也可以</span></span><br><span class="line">$ sqlline.sh --verbose=<span class="literal">true</span> -u jdbc:ignite:thin://localhost</span><br><span class="line">issuing: !connect jdbc:ignite:thin://localhost <span class="string">&#x27;&#x27;</span> <span class="string">&#x27;&#x27;</span> org.apache.ignite.IgniteJdbcThinDriver</span><br><span class="line">Connecting to jdbc:ignite:thin://localhost</span><br><span class="line">Connected to: Apache Ignite (version 2.8.1<span class="comment">#20200521-sha1:86422096)</span></span><br><span class="line">Driver: Apache Ignite Thin JDBC Driver (version 2.8.1<span class="comment">#20200521-sha1:86422096)</span></span><br><span class="line">Autocommit status: <span class="literal">true</span></span><br><span class="line">Transaction isolation: TRANSACTION_REPEATABLE_READ</span><br><span class="line">sqlline version 1.3.0</span><br><span class="line">0: jdbc:ignite:thin://localhost&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>查看 tables</strong></p>
<p><code>0: jdbc:ignite:thin://localhost&gt; !tables</code></p>
<p><img src="https://raw.githubusercontent.com/rangerzhou/ImageHosting/master/Pictures/sqlline_!tables.png"></p>
<p>如上图所示，在代码中创建 Cache，<code>CacheConfiguration.setIndexedTypes(Integer.class, Person.class);</code> 参数中的 Person.class 的类名即为生成的 TABLE_NAME（即类名会被用作表名），Cache 名即为 TABLE_SCHEM。</p>
<p><strong>查询</strong></p>
<p><code>0: jdbc:ignite:thin://localhost&gt; select * from &quot;personCache&quot;.PERSON;</code></p>
<p><img src="https://raw.githubusercontent.com/rangerzhou/ImageHosting/master/Pictures/sqlline_select*.png" alt="select"></p>
<h3 id="Ignite持久化"><a href="#Ignite持久化" class="headerlink" title="Ignite持久化"></a>Ignite持久化</h3><h4 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h4><p><a href="https://www.ignite-service.cn/doc/java/Persistence.html#_1-ignite%E6%8C%81%E4%B9%85%E5%8C%96">点击查看教程</a> </p>
<p>首先持久化只能在 Server 节点，因为 Client 节点不保存数据；</p>
<p>持久化后，数据保存在 <code>&#123;WORK_DIR&#125;/db/&#123;nodeId&#125;</code> ，默认为 <code>IGNITE_HOME/work/db</code> 下：</p>
<table>
<thead>
<tr>
<th>子目录名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>&#123;WORK_DIR&#125;/db/&#123;nodeId&#125;</code></td>
<td>该目录中包括了缓存的数据和索引</td>
</tr>
<tr>
<td><code>&#123;WORK_DIR&#125;/db/wal/&#123;nodeId&#125;</code></td>
<td>该目录中包括了WAL文件</td>
</tr>
<tr>
<td><code>&#123;WORK_DIR&#125;/db/wal/archive/&#123;nodeId&#125;</code></td>
<td>该目录中包括了WAL存档文件</td>
</tr>
</tbody></table>
<p>举例：</p>
<p>如果持久化，那么数据就会保存，比如在 Client 节点做了某些操作（新建 Cache，即创建了表，表中填充了数据），那么全部节点断开后，再启动一个持久化的 Server 时，SQL 就能直接查询之前 Client 节点操作的数据；</p>
<p>如果不持久化，则 SQL 无法查询之前 Client 节点操作的数据；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">IgniteConfiguration</span> <span class="variable">igniteCfg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IgniteConfiguration</span>();</span><br><span class="line">igniteCfg.setConsistentId(<span class="string">&quot;DMSServerNode&quot;</span>); <span class="comment">//Set Consistent ID</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 持久化</span></span><br><span class="line"><span class="type">DataStorageConfiguration</span> <span class="variable">storageCfg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataStorageConfiguration</span>();</span><br><span class="line">storageCfg.getDefaultDataRegionConfiguration().setPersistenceEnabled(<span class="literal">true</span>);</span><br><span class="line">igniteCfg.setDataStorageConfiguration(storageCfg);</span><br><span class="line"></span><br><span class="line"><span class="type">Ignite</span> <span class="variable">ignite</span> <span class="operator">=</span> Ignition.start(igniteCfg);</span><br></pre></td></tr></table></figure>

<h4 id="持久化部分-Cache-示例"><a href="#持久化部分-Cache-示例" class="headerlink" title="持久化部分 Cache 示例"></a>持久化部分 Cache 示例</h4><p><a href="https://www.ignite-service.cn/doc/java/DurableMemory.html#_3-2-%E5%86%85%E5%AD%98%E5%8C%BA">点击查看教程</a> </p>
<p><strong>Server 端</strong></p>
<p>配置一个 4GB 的内存区并且开启持久化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">IgniteConfiguration</span> <span class="variable">igniteCfg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IgniteConfiguration</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Ignite Persistence</span></span><br><span class="line"><span class="type">DataStorageConfiguration</span> <span class="variable">storageCfg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataStorageConfiguration</span>();</span><br><span class="line"><span class="comment">// 创建数据区</span></span><br><span class="line"><span class="type">DataRegionConfiguration</span> <span class="variable">regionCfg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataRegionConfiguration</span>();</span><br><span class="line">regionCfg.setName(<span class="string">&quot;TableCache_Region&quot;</span>); <span class="comment">// 数据区名称</span></span><br><span class="line">regionCfg.setInitialSize(<span class="number">100L</span> * <span class="number">1024</span> * <span class="number">1024</span>); <span class="comment">// 设置初始化 RAM 大小</span></span><br><span class="line">regionCfg.setMaxSize(<span class="number">4L</span> * <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">1024</span>); <span class="comment">// 设置最大 RAM 大小</span></span><br><span class="line">regionCfg.setPersistenceEnabled(<span class="literal">true</span>); <span class="comment">// 开启持久化</span></span><br><span class="line">storageCfg.setDataRegionConfigurations(regionCfg); <span class="comment">// 设置数据区配置</span></span><br><span class="line">igniteCfg.setDataStorageConfiguration(storageCfg); <span class="comment">// 应用新的配置</span></span><br><span class="line"></span><br><span class="line"><span class="type">Ignite</span> <span class="variable">ignite</span> <span class="operator">=</span> Ignition.start(igniteCfg);</span><br></pre></td></tr></table></figure>

<p><strong>Client 端</strong></p>
<p>用 Server 端配置好的区域，使得 Ignite 缓存将数据存储于其中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">IgniteConfiguration</span> <span class="variable">igniteCfg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IgniteConfiguration</span>();</span><br><span class="line"></span><br><span class="line">CacheConfiguration&lt;Double, DMSTable&gt; dmsTableCacheCfg = <span class="keyword">new</span> <span class="title class_">CacheConfiguration</span>&lt;&gt;();</span><br><span class="line">dmsTableCacheCfg.setName(<span class="string">&quot;DMSTableCache&quot;</span>);</span><br><span class="line">dmsTableCacheCfg.setIndexedTypes(Double.class, DMSTable.class);</span><br><span class="line"><span class="comment">// 把 Cache 绑定到 Server 端定义好的区域中</span></span><br><span class="line">dmsTableCacheCfg.setDataRegionName(<span class="string">&quot;TableCache_Region&quot;</span>);</span><br><span class="line"></span><br><span class="line">CacheConfiguration&lt;Double, MasterTable&gt; masterTableCacheCfg = <span class="keyword">new</span> <span class="title class_">CacheConfiguration</span>&lt;&gt;();</span><br><span class="line">masterTableCacheCfg.setName(<span class="string">&quot;MasterTableCache&quot;</span>);</span><br><span class="line">masterTableCacheCfg.setIndexedTypes(Double.class, MasterTable.class);</span><br><span class="line"><span class="comment">// 把 Cache 绑定到 Server 端定义好的区域中</span></span><br><span class="line">masterTableCacheCfg.setDataRegionName(<span class="string">&quot;TableCache_Region&quot;</span>);</span><br><span class="line"></span><br><span class="line">igniteCfg.setCacheConfiguration(dmsTableCacheCfg, masterTableCacheCfg);</span><br><span class="line">igniteCfg.setClientMode(<span class="literal">true</span>);</span><br><span class="line"><span class="type">Ignite</span> <span class="variable">ignite</span> <span class="operator">=</span> Ignition.start(igniteCfg);</span><br></pre></td></tr></table></figure>

<p>用这个配置启动 Ignite 集群后，固化内存会分配一个初始大小为 100MB 的内存区，然后它可以增长到 4GB，这个内存区会存储如上两个 cache 的所有数据，因为我们在 Server 端开启了持久化，所以数据的超集会一直存储于磁盘上，确保即使内存空间不足也不会出现数据丢失的情况。</p>
<p>如果<strong>禁用</strong>了持久化并且所有的内存使用量超过了4GB，那么会抛出内存溢出异常，要避免这个问题，可以采用如下的办法来解决：</p>
<ul>
<li>开启Ignite的持久化存储；</li>
<li>启用一个可用的退出算法，注意，只有开启Ignite持久化存储时退出功能才会默认打开，否则这个功能是禁用的；</li>
<li>增加内存区的最大值。</li>
</ul>
<h4 id="配置基线拓扑"><a href="#配置基线拓扑" class="headerlink" title="配置基线拓扑"></a>配置基线拓扑</h4><p><a href="https://www.ignite-service.cn/doc/java/Persistence.html#_5-%E5%9F%BA%E7%BA%BF%E6%8B%93%E6%89%91">点击查看教程</a></p>
<p>如果启用了原生持久化，Ignite引入了一个 <strong>基线拓扑</strong> 的概念，它表示集群中将数据持久化到磁盘的一组服务端节点。基线拓扑是一组Ignite服务端节点，目的是同时在内存以及原生持久化中存储数据。</p>
<p>基线拓扑的目的是：</p>
<ul>
<li>如果节点重启，避免不必要的数据再平衡。比如，每个节点重启都会触发两个再平衡事件，一个是节点停止，一个是节点重新加入集群，这会导致集群资源的无效利用；</li>
<li>集群重启后，如果基线拓扑中的所有节点都已经加入，那么集群会被自动激活。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ignite.cluster().active(<span class="literal">true</span>); <span class="comment">// 激活集群</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 手动配置基线拓扑</span></span><br><span class="line">Collection&lt;ClusterNode&gt; nodes = ignite.cluster().forServers().nodes();</span><br><span class="line">ignite.cluster().setBaselineTopology(nodes); <span class="comment">// 将所有服务端节点配置为基线拓扑</span></span><br></pre></td></tr></table></figure>

<p>注意：手动配置基线拓扑的时候，必须禁用 baseline 的 auto-adjust: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ignite.cluster().baselineAutoAdjustEnabled(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure>

<p>上面持久化操作中，持久化后通过<code>ignite.cluster().isBaselineAutoAdjustEnabled()</code> 检查 <code>auto-adjust</code> 为 <code>false</code> ，此时就不再需要再用 <code>ignite.cluster().baselineAutoAdjustEnabled(false);</code> 禁用了。</p>
<p><strong>注意：</strong> 将所有服务节点配置为基线拓扑，</p>
<h4 id="禁用-Auto-just"><a href="#禁用-Auto-just" class="headerlink" title="禁用 Auto-just"></a>禁用 Auto-just</h4><p>持久化时遇到异常：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Caused by: class org.apache.ignite.spi.IgniteSpiException: Joining persistence node to in-memory cluster couldn&#x27;t be allowed due to baseline auto-adjust is enabled and timeout equal to 0</span><br><span class="line">    at org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi.checkFailedError(TcpDiscoverySpi.java:1997)</span><br><span class="line">    at org.apache.ignite.spi.discovery.tcp.ServerImpl.joinTopology(ServerImpl.java:1116)</span><br><span class="line">    at org.apache.ignite.spi.discovery.tcp.ServerImpl.spiStart(ServerImpl.java:427)</span><br><span class="line">    at org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi.spiStart(TcpDiscoverySpi.java:2099)</span><br><span class="line">    at org.apache.ignite.internal.managers.GridManagerAdapter.startSpi(GridManagerAdapter.java:297)</span><br><span class="line">    ... 15 more</span><br></pre></td></tr></table></figure>

<p><a href="https://stackoverflow.com/questions/61266725/how-to-disable-ignite-baseline-auto-just/61268552#61268552">解决方案</a>：</p>
<ul>
<li><p>启动第一个节点后，调用 <code>ignite.cluster().baselineAutoAdjustEnabled(false)</code> 即可，随后可用 <code>ignite.cluster().isBaselineAutoAdjustEnabled()</code> 检查结果。</p>
</li>
<li><p>也可使用 <code>IGNITE_HOME/bin/control.(sh|bat) --baseline auto_adjust [disable|enable] [timeout &lt;timeoutMillis&gt;] [--yes]</code> 禁用，但是我用这个方法失败，不知为何：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./control.sh --baseline auto_adjust <span class="built_in">disable</span></span></span><br><span class="line">Warning: the command will perform changes in baseline.</span><br><span class="line">Press &#x27;y&#x27; to continue . . . y</span><br><span class="line">Control utility [ver. 2.8.0#20200226-sha1:341b01df]</span><br><span class="line">2020 Copyright(C) Apache Software Foundation</span><br><span class="line">User: ranger</span><br><span class="line">Time: 2020-04-20T10:07:09.300</span><br><span class="line">Command [BASELINE] started</span><br><span class="line">Arguments: --baseline auto_adjust disable</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">Failed to execute baseline command=&#x27;auto_adjust&#x27;</span><br><span class="line">Latest topology update failed.</span><br><span class="line">Connection to cluster failed. Latest topology update failed.</span><br><span class="line">Command [BASELINE] finished with code: 2</span><br><span class="line">Control utility has completed execution at: 2020-04-20T10:07:15.597</span><br><span class="line">Execution time: 6297 ms</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>2020年5月27日更新：</strong> 如果需要让集群自动调整基线拓扑，</p>
<ul>
<li>只有当集群处于激活状态时，基线拓扑才会自动调整</li>
<li>此功能默认是禁用的，可以使用控制脚本开启该功能，还可以通过编程方式启用该功能</li>
<li>必须配置自动调整超时时间</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ignite.cluster().baselineAutoAdjustEnabled(<span class="literal">true</span>);</span><br><span class="line">ignite.cluster().baselineAutoAdjustTimeout(<span class="number">30000</span>);</span><br></pre></td></tr></table></figure>



<h3 id="Ignite-使用注意事项"><a href="#Ignite-使用注意事项" class="headerlink" title="Ignite 使用注意事项"></a>Ignite 使用注意事项</h3><ul>
<li><a href="https://www.ignite-service.cn/doc/java/Key-ValueDataGrid.html#_9-%E9%94%81">只有 <code>TRANSACTIONAL</code> 原子化模式中才支持锁</a>，分布式锁 Lock 不支持原子化模式 <code>ATOMIC</code>，<a href="%5Bhttps://www.ignite-service.cn/doc/java/Key-ValueDataGrid.html#_8-%E4%BA%8B%E5%8A%A1%5D(https://www.ignite-service.cn/doc/java/Key-ValueDataGrid.html#_8-%E4%BA%8B%E5%8A%A1)">事务原子化模式</a> 有三种（<code>TRANSACTIONAL</code>、<code>TRANSACTIONAL_SNAPSHOT</code>、<code>ATOMIC</code>），但是如果使用 <code>TRANSACTIONAL_SNAPSHOT</code> 的话，会提示 Lock 不支持 Enable <a href="https://www.ignite-service.cn/doc/sql/Architecture.html#_7-1-%E6%A6%82%E8%BF%B0">MVCC</a> ，所以要使用 <code>TRANSACTIONAL</code> 模式。</li>
</ul>
<h3 id="Ignite-相关异常"><a href="#Ignite-相关异常" class="headerlink" title="Ignite 相关异常"></a>Ignite 相关异常</h3><h4 id="Ignite-代码启动-client-无法连接终端启动的-server"><a href="#Ignite-代码启动-client-无法连接终端启动的-server" class="headerlink" title="Ignite 代码启动 client 无法连接终端启动的 server"></a>Ignite 代码启动 client 无法连接终端启动的 server</h4><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">javax<span class="variable">.cache</span><span class="variable">.CacheException</span>: Failed to start continuous query.</span><br><span class="line">at org<span class="variable">.apache</span><span class="variable">.ignite</span><span class="variable">.internal</span><span class="variable">.processors</span><span class="variable">.cache</span><span class="variable">.IgniteCacheProxyImpl</span><span class="variable">.query</span>(IgniteCacheProxyImpl<span class="variable">.java</span>:<span class="number">820</span>)</span><br><span class="line">at org<span class="variable">.apache</span><span class="variable">.ignite</span><span class="variable">.internal</span><span class="variable">.processors</span><span class="variable">.cache</span><span class="variable">.GatewayProtectedCacheProxy</span><span class="variable">.query</span>(GatewayProtectedCacheProxy<span class="variable">.java</span>:<span class="number">412</span>)</span><br><span class="line">at TOFListener<span class="variable">.main</span>(TOFListener<span class="variable">.java</span>:<span class="number">29</span>)</span><br><span class="line">at sun<span class="variable">.reflect</span><span class="variable">.NativeMethodAccessorImpl</span><span class="variable">.invoke0</span>(Native Method)</span><br><span class="line">at sun<span class="variable">.reflect</span><span class="variable">.NativeMethodAccessorImpl</span><span class="variable">.invoke</span>(NativeMethodAccessorImpl<span class="variable">.java</span>:<span class="number">62</span>)</span><br><span class="line">at sun<span class="variable">.reflect</span><span class="variable">.DelegatingMethodAccessorImpl</span><span class="variable">.invoke</span>(DelegatingMethodAccessorImpl<span class="variable">.java</span>:<span class="number">43</span>)</span><br><span class="line">...</span><br><span class="line">at com<span class="variable">.intellij</span><span class="variable">.rt</span><span class="variable">.execution</span><span class="variable">.application</span><span class="variable">.AppMainV2</span><span class="variable">.main</span>(AppMainV2<span class="variable">.java</span>:<span class="number">131</span>)</span><br><span class="line">Caused by: <span class="keyword">class</span> org<span class="variable">.apache</span><span class="variable">.ignite</span><span class="variable">.IgniteException</span>: Failed to start continuous query.</span><br><span class="line">Caused by: java<span class="variable">.lang</span><span class="variable">.ClassNotFoundException</span>: TOFListener</span><br></pre></td></tr></table></figure>

<p>这是因为没有启动对等类加载，而终端使用 <code>ignite.sh</code> 启动 server 节点（remote 节点），如果不加配置文件的话，会默认加载 <em>$IGNITE_HOME&#x2F;config&#x2F;default-config.xml</em> 启动，需要在 <em>default_config.xml</em> 中配置对等类加载：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.ignite.configuration.IgniteConfiguration&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Enable peer class loading. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;peerClassLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Set deployment mode. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;deploymentMode&quot;</span> <span class="attr">value</span>=<span class="string">&quot;CONTINUOUS&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>同时启动 client 节点（local 节点）的时候也需要配置对等类加载：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">IgniteConfiguration</span> <span class="variable">cfg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IgniteConfiguration</span>();</span><br><span class="line"></span><br><span class="line">cfg.setPeerClassLoadingEnabled(<span class="literal">true</span>);</span><br><span class="line">cfg.setDeploymentMode(DeploymentMode.CONTINUOUS);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Start a node.</span></span><br><span class="line"><span class="type">Ignite</span> <span class="variable">ignite</span> <span class="operator">=</span> Ignition.start(cfg);</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong> 因为 <em>default-config.xml</em> 中同时配置了 <strong>deploymentMode</strong> ，所以在启动 client 节点的时候同样要配置 <strong>deploymentMode</strong> （当然也可以都不配置），也就是说启动了对等类加载，各个节点的配置要相同，否则假如只有一端配置了对等类加载、 <strong>deploymentMode</strong> 、或者其他配置，就会报出如下 ERROR：</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">[<span class="number">2020</span>-<span class="number">04</span>-<span class="number">01</span> <span class="number">10</span>:<span class="number">50</span>:<span class="number">57</span>,<span class="number">652</span>][ERROR][main][IgniteKernal] Failed to start manager: GridManagerAdapter [enabled=true, name=o<span class="variable">.a</span><span class="variable">.i</span><span class="variable">.i</span><span class="variable">.managers</span><span class="variable">.discovery</span><span class="variable">.GridDiscoveryManager</span>]</span><br><span class="line"><span class="keyword">class</span> org<span class="variable">.apache</span><span class="variable">.ignite</span><span class="variable">.IgniteCheckedException</span>: Remote node has deployment mode different from <span class="keyword">local</span> [locId8=a19b2080, locMode=SHARED, rmtId8=<span class="number">570</span>d02e2, rmtMode=CONTINUOUS, rmtAddrs=[<span class="number">192</span><span class="variable">.168</span><span class="variable">.53</span><span class="variable">.55</span>/<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">1</span>%lo, /<span class="number">127</span><span class="variable">.0</span><span class="variable">.0</span><span class="variable">.1</span>, /<span class="number">192</span><span class="variable">.168</span><span class="variable">.53</span><span class="variable">.55</span>], rmtNode=ClusterNode [id=<span class="number">570</span>d02e2-<span class="number">0</span>cd3-<span class="number">4</span>b17-<span class="number">8</span>a50-<span class="number">24</span>c4eb0657bc, order=<span class="number">1</span>, addr=[<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">1</span>%lo, <span class="number">127</span><span class="variable">.0</span><span class="variable">.0</span><span class="variable">.1</span>, <span class="number">192</span><span class="variable">.168</span><span class="variable">.53</span><span class="variable">.55</span>], daemon=false]]</span><br><span class="line">	at org<span class="variable">.apache</span><span class="variable">.ignite</span><span class="variable">.internal</span><span class="variable">.managers</span><span class="variable">.discovery</span><span class="variable">.GridDiscoveryManager</span><span class="variable">.checkAttributes</span>(GridDiscoveryManager<span class="variable">.java</span>:<span class="number">1190</span>)</span><br><span class="line">	at org<span class="variable">.apache</span><span class="variable">.ignite</span><span class="variable">.internal</span><span class="variable">.managers</span><span class="variable">.discovery</span><span class="variable">.GridDiscoveryManager</span><span class="variable">.start</span>(GridDiscoveryManager<span class="variable">.java</span>:<span class="number">967</span>)</span><br><span class="line">	at org<span class="variable">.apache</span><span class="variable">.ignite</span><span class="variable">.internal</span><span class="variable">.IgniteKernal</span><span class="variable">.startManager</span>(IgniteKernal<span class="variable">.java</span>:<span class="number">1960</span>)</span><br><span class="line">	at org<span class="variable">.apache</span><span class="variable">.ignite</span><span class="variable">.internal</span><span class="variable">.IgniteKernal</span><span class="variable">.start</span>(IgniteKernal<span class="variable">.java</span>:<span class="number">1276</span>)</span><br><span class="line">	at org<span class="variable">.apache</span><span class="variable">.ignite</span><span class="variable">.internal</span><span class="variable">.IgnitionEx</span>$IgniteNamedInstance<span class="variable">.start0</span>(IgnitionEx<span class="variable">.java</span>:<span class="number">2038</span>)</span><br><span class="line">	at org<span class="variable">.apache</span><span class="variable">.ignite</span><span class="variable">.internal</span><span class="variable">.IgnitionEx</span>$IgniteNamedInstance<span class="variable">.start</span>(IgnitionEx<span class="variable">.java</span>:<span class="number">1703</span>)</span><br><span class="line">	at org<span class="variable">.apache</span><span class="variable">.ignite</span><span class="variable">.internal</span><span class="variable">.IgnitionEx</span><span class="variable">.start0</span>(IgnitionEx<span class="variable">.java</span>:<span class="number">1117</span>)</span><br><span class="line">	at org<span class="variable">.apache</span><span class="variable">.ignite</span><span class="variable">.internal</span><span class="variable">.IgnitionEx</span><span class="variable">.start</span>(IgnitionEx<span class="variable">.java</span>:<span class="number">637</span>)</span><br><span class="line">	at org<span class="variable">.apache</span><span class="variable">.ignite</span><span class="variable">.internal</span><span class="variable">.IgnitionEx</span><span class="variable">.start</span>(IgnitionEx<span class="variable">.java</span>:<span class="number">563</span>)</span><br><span class="line">	at org<span class="variable">.apache</span><span class="variable">.ignite</span><span class="variable">.Ignition</span><span class="variable">.start</span>(Ignition<span class="variable">.java</span>:<span class="number">321</span>)</span><br><span class="line">	at DMSAdapterListener<span class="variable">.main</span>(DMSAdapterListener<span class="variable">.java</span>:<span class="number">71</span>)</span><br><span class="line">	at sun<span class="variable">.reflect</span><span class="variable">.NativeMethodAccessorImpl</span><span class="variable">.invoke0</span>(Native Method)</span><br><span class="line">	at sun<span class="variable">.reflect</span><span class="variable">.NativeMethodAccessorImpl</span><span class="variable">.invoke</span>(NativeMethodAccessorImpl<span class="variable">.java</span>:<span class="number">62</span>)</span><br><span class="line">	at sun<span class="variable">.reflect</span><span class="variable">.DelegatingMethodAccessorImpl</span><span class="variable">.invoke</span>(DelegatingMethodAccessorImpl<span class="variable">.java</span>:<span class="number">43</span>)</span><br><span class="line">	at java<span class="variable">.lang</span><span class="variable">.reflect</span><span class="variable">.Method</span><span class="variable">.invoke</span>(Method<span class="variable">.java</span>:<span class="number">498</span>)</span><br><span class="line">	at com<span class="variable">.intellij</span><span class="variable">.rt</span><span class="variable">.execution</span><span class="variable">.application</span><span class="variable">.AppMainV2</span><span class="variable">.main</span>(AppMainV2<span class="variable">.java</span>:<span class="number">131</span>)</span><br></pre></td></tr></table></figure>

<h4 id="ignite-配置-web-console-报错"><a href="#ignite-配置-web-console-报错" class="headerlink" title="ignite 配置 web-console 报错"></a>ignite 配置 web-console 报错</h4><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">gyp ERR! build error </span><br><span class="line">gyp ERR! stack Error: `make` failed <span class="keyword">with</span> exit code: <span class="number">2</span></span><br><span class="line">gyp ERR! stack     at ChildProcess<span class="variable">.onExit</span> (/home/ranger/opt/apache-ignite-<span class="number">2</span><span class="variable">.8</span><span class="variable">.0</span>-src/modules/web-console/frontend/node_modules/node-gyp/lib/build<span class="variable">.js</span>:<span class="number">262</span>:<span class="number">23</span>)</span><br><span class="line">gyp ERR! stack     at ChildProcess<span class="variable">.emit</span> (events<span class="variable">.js</span>:<span class="number">210</span>:<span class="number">5</span>)</span><br><span class="line">gyp ERR! stack     at Process<span class="variable">.ChildProcess</span><span class="variable">._handle</span><span class="variable">.onexit</span> (internal/child_process<span class="variable">.js</span>:<span class="number">272</span>:<span class="number">12</span>)</span><br><span class="line">gyp ERR! System Linux <span class="number">5</span><span class="variable">.3</span><span class="variable">.0</span>-<span class="number">26</span>-generic</span><br><span class="line">gyp ERR! command <span class="string">&quot;/usr/local/bin/node&quot;</span> <span class="string">&quot;/home/ranger/opt/apache-ignite-2.8.0-src/modules/web-console/frontend/node_modules/node-gyp/bin/node-gyp.js&quot;</span> <span class="string">&quot;rebuild&quot;</span> <span class="string">&quot;--verbose&quot;</span> <span class="string">&quot;--libsass_ext=&quot;</span> <span class="string">&quot;--libsass_cflags=&quot;</span> <span class="string">&quot;--libsass_ldflags=&quot;</span> <span class="string">&quot;--libsass_library=&quot;</span></span><br><span class="line">gyp ERR! cwd /home/ranger/opt/apache-ignite-<span class="number">2</span><span class="variable">.8</span><span class="variable">.0</span>-src/modules/web-console/frontend/node_modules/node-sass</span><br><span class="line">gyp ERR! node -v v12<span class="variable">.14</span><span class="variable">.0</span></span><br><span class="line">gyp ERR! node-gyp -v v3<span class="variable">.8</span><span class="variable">.0</span></span><br><span class="line">gyp ERR! <span class="keyword">not</span> ok </span><br><span class="line">Build failed <span class="keyword">with</span> error code: <span class="number">1</span></span><br><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@<span class="number">1</span><span class="variable">.2</span><span class="variable">.7</span> (node_modules/fsevents):</span><br><span class="line">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform <span class="keyword">for</span> fsevents@<span class="number">1</span><span class="variable">.2</span><span class="variable">.7</span>: wanted &#123;<span class="string">&quot;os&quot;</span>:<span class="string">&quot;darwin&quot;</span>,<span class="string">&quot;arch&quot;</span>:<span class="string">&quot;any&quot;</span>&#125; (current: &#123;<span class="string">&quot;os&quot;</span>:<span class="string">&quot;linux&quot;</span>,<span class="string">&quot;arch&quot;</span>:<span class="string">&quot;x64&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">npm ERR! code ELIFECYCLE</span><br><span class="line">npm ERR! errno <span class="number">1</span></span><br><span class="line">npm ERR! node-sass@<span class="number">4</span><span class="variable">.10</span><span class="variable">.0</span> postinstall: `node scripts/build<span class="variable">.js</span>`</span><br><span class="line">npm ERR! Exit status <span class="number">1</span></span><br><span class="line">npm ERR! </span><br><span class="line">npm ERR! Failed at the node-sass@<span class="number">4</span><span class="variable">.10</span><span class="variable">.0</span> postinstall script.</span><br><span class="line">npm ERR! This is probably <span class="keyword">not</span> a problem <span class="keyword">with</span> npm. There is likely additional logging <span class="keyword">output</span> above.</span><br><span class="line"></span><br><span class="line">npm ERR! A complete log of <span class="keyword">this</span> run can be found in:</span><br><span class="line">npm ERR!     /home/ranger/<span class="variable">.npm</span>/_logs/<span class="number">2020</span>-<span class="number">03</span>-<span class="number">05</span>T07_36_53_598Z-debug<span class="variable">.log</span></span><br></pre></td></tr></table></figure>

<p>网上搜索的解决方案：<a href="https://juejin.im/post/5d74db2ef265da03bd054217">https://juejin.im/post/5d74db2ef265da03bd054217</a></p>
<p>我用以上方法没有解决，随后查看 <a href="https://github.com/sass/node-sass/releases">node-sass 版本</a> ，得知 node-sass 不支持 node 12版本，升级 node-sass 版本解决：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install node-sass@4.13.1</span><br></pre></td></tr></table></figure>

<h4 id="Ignite-启动异常"><a href="#Ignite-启动异常" class="headerlink" title="Ignite 启动异常"></a>Ignite 启动异常</h4><p>Ignition.start(“&#x2F;home&#x2F;ranger&#x2F;opt&#x2F;apache-ignite&#x2F;examples&#x2F;config&#x2F;example-ignite.xml”) 异常</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">Mar <span class="number">05</span>, <span class="number">2020</span> <span class="number">2</span>:<span class="number">30</span>:<span class="number">59</span> PM org<span class="variable">.apache</span><span class="variable">.ignite</span><span class="variable">.logger</span><span class="variable">.java</span><span class="variable">.JavaLogger</span> error</span><br><span class="line">SEVERE: Failed to start manager: GridManagerAdapter [enabled=true, name=o<span class="variable">.a</span><span class="variable">.i</span><span class="variable">.i</span><span class="variable">.managers</span><span class="variable">.discovery</span><span class="variable">.GridDiscoveryManager</span>]</span><br><span class="line"><span class="keyword">class</span> org<span class="variable">.apache</span><span class="variable">.ignite</span><span class="variable">.IgniteCheckedException</span>: Remote node has peer <span class="keyword">class</span> loading enabled flag different from <span class="keyword">local</span> [locId8=f1d0af56, locPeerClassLoading=true, rmtId8=bcef4f81, rmtPeerClassLoading=false, rmtAddrs=[dl1jqybg2<span class="variable">.aptiv</span><span class="variable">.com</span>/<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">1</span>%lo, /<span class="number">127</span><span class="variable">.0</span><span class="variable">.0</span><span class="variable">.1</span>, /<span class="number">192</span><span class="variable">.168</span><span class="variable">.53</span><span class="variable">.2</span>], rmtNode=ClusterNode [id=bcef4f81-dc93-<span class="number">47</span>fd-a13e-<span class="number">9276</span>ad72953d, order=<span class="number">16</span>, addr=[<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">1</span>%lo, <span class="number">127</span><span class="variable">.0</span><span class="variable">.0</span><span class="variable">.1</span>, <span class="number">192</span><span class="variable">.168</span><span class="variable">.53</span><span class="variable">.2</span>], daemon=false]]</span><br><span class="line">	at org<span class="variable">.apache</span><span class="variable">.ignite</span><span class="variable">.internal</span><span class="variable">.managers</span><span class="variable">.discovery</span><span class="variable">.GridDiscoveryManager</span><span class="variable">.checkAttribute</span></span><br></pre></td></tr></table></figure>

<p>因为同server 已经启动了别的不同配置的node</p>
<h4 id="Ignite-接入-ZMQ-报错"><a href="#Ignite-接入-ZMQ-报错" class="headerlink" title="Ignite 接入 ZMQ 报错"></a>Ignite 接入 ZMQ 报错</h4><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">Exception in thread <span class="string">&quot;pool-2-thread-1&quot;</span> java<span class="variable">.lang</span><span class="variable">.IllegalArgumentException</span></span><br><span class="line">	at zmq<span class="variable">.Sub</span><span class="variable">.xsetsockopt</span>(Sub<span class="variable">.java</span>:<span class="number">42</span>)</span><br><span class="line">	at zmq<span class="variable">.SocketBase</span><span class="variable">.setSocketOpt</span>(SocketBase<span class="variable">.java</span>:<span class="number">222</span>)</span><br><span class="line">	at org<span class="variable">.zeromq</span><span class="variable">.ZMQ</span>$Socket<span class="variable">.setsockopt</span>(ZMQ<span class="variable">.java</span>:<span class="number">427</span>)</span><br><span class="line">	at org<span class="variable">.zeromq</span><span class="variable">.ZMQ</span>$Socket<span class="variable">.subscribe</span>(ZMQ<span class="variable">.java</span>:<span class="number">1005</span>)</span><br><span class="line">	at org<span class="variable">.apache</span><span class="variable">.ignite</span><span class="variable">.stream</span><span class="variable">.zeromq</span><span class="variable">.IgniteZeroMqStreamer</span><span class="variable">.lambda</span>$start$<span class="number">0</span>(IgniteZeroMqStreamer<span class="variable">.java</span>:<span class="number">103</span>)</span><br><span class="line">	at java<span class="variable">.util</span><span class="variable">.concurrent</span><span class="variable">.ThreadPoolExecutor</span><span class="variable">.runWorker</span>(ThreadPoolExecutor<span class="variable">.java</span>:<span class="number">1149</span>)</span><br><span class="line">	at java<span class="variable">.util</span><span class="variable">.concurrent</span><span class="variable">.ThreadPoolExecutor</span>$Worker<span class="variable">.run</span>(ThreadPoolExecutor<span class="variable">.java</span>:<span class="number">624</span>)</span><br><span class="line">	at java<span class="variable">.lang</span><span class="variable">.Thread</span><span class="variable">.run</span>(Thread<span class="variable">.java</span>:<span class="number">748</span>)</span><br></pre></td></tr></table></figure>

<p><code>new IgniteZerMqStreamer(int ioThreads, ZeroMqTypeSocket socketType, @NotNull String addr, byte[] topic) </code>中 topic 参数错误，参数不能为 null， 传入 ZMQ.SUBSCRIPTION_ALL 即可。</p>
<h4 id="Ignite-持久化异常"><a href="#Ignite-持久化异常" class="headerlink" title="Ignite 持久化异常"></a>Ignite 持久化异常</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Caused by: class org.apache.ignite.spi.IgniteSpiException: Joining persistence node to in-memory cluster couldn&#x27;t be allowed due to baseline auto-adjust is enabled and timeout equal to 0</span><br><span class="line">	at org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi.checkFailedError(TcpDiscoverySpi.java:1997)</span><br><span class="line">	at org.apache.ignite.spi.discovery.tcp.ServerImpl.joinTopology(ServerImpl.java:1116)</span><br><span class="line">	at org.apache.ignite.spi.discovery.tcp.ServerImpl.spiStart(ServerImpl.java:427)</span><br><span class="line">	at org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi.spiStart(TcpDiscoverySpi.java:2099)</span><br><span class="line">	at org.apache.ignite.internal.managers.GridManagerAdapter.startSpi(GridManagerAdapter.java:297)</span><br><span class="line">	... 15 more</span><br></pre></td></tr></table></figure>



<p><a href="https://www.ignite-service.cn/doc/java/Persistence.html#_5-%E5%9F%BA%E7%BA%BF%E6%8B%93%E6%89%91">基线拓扑</a></p>
<h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><p>文档：<a href="https://www.ignite-service.cn/doc/java/">https://www.ignite-service.cn/doc/java/</a></p>
<p><a href="https://www.ignite-service.cn/doc/sql/Architecture.html#_7-1-%E6%A6%82%E8%BF%B0">https://www.ignite-service.cn/doc/sql/Architecture.html#_7-1-概述</a></p>
]]></content>
      <categories>
        <category>Ignite</category>
      </categories>
  </entry>
  <entry>
    <title>EIIP 项目记录</title>
    <url>/2020/02/26/Work/EIIPProjectNotes/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="734609d896b49bc327c949f380343c27ffb35fb4da23f2737476aef49a235bc8"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Work</category>
      </categories>
  </entry>
  <entry>
    <title>LynkCo</title>
    <url>/2019/12/20/Others/LynkCo/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="61bbe02a65fba2c05501011cfb013dd47c68e2e9b2b33ac03d96f7050f03d382">851d6fef797a932fb0126140fd3cecfb561c057255381e3ed28a281700a25b8669c2d16c2ce021c156ae3555cf0a3c1b2d85725d7ba3448bd8e3561c3ec335e95b02b14a7fa843bc30e60eddf2e8a1a2fddaae2e11f013c95eaf9a74c6b0b87167e1aa187544e4c48b34f3ce3808a3422e0492cb4f83f9299edc0b4a78a62e49812868f83cf10e3d70d29d5977aa6a4d62ffd893d16f101fe23cce84b7a34fedfef9d11733ad98b981313e339856bd5e0b74b82a7995c6f9df6a28cdeea17aebb5d2dd8e683d57c3005f5c8a19546e2cc91803368b248c2a03ddb9d7087978ef9f21d3e96bbd78d417881c40d941faa73f8b7872879af52d9826b1f00c59c4d94057aa471f606c6e187190915aa67d81bb5cb366db684b6b38105138862b41f7c146b90311be558d6c337643195926453e9f1eae28e143350af6d5e906fb051a33bc3528eab79efd7373b95e4d2d68384ad405c81497bfe1df33af132d6f45d63c716a5c12809a249b22dff9c01229e5bc23d293aa29bea16e9d686f5de9cd932737aacfb381c7db1e91859919746756df313103a6842c541b94db76a00ecb1222081bc0b4d859d87b49b9d9ca222ec0e09489d3e7cb0f7b011fa4d611558f0f167d79cea3ce335aa9ee75c4cd92e3eb0d0f49a0675215504125e402c1681d0259e07524ef8f41d55321a99f578a61e035b7b41288051ace01bfd82270fb343c2545c52ead2169d4c1f1cd910665b8c1365d4a856da20302c869e7e304beafc28266502583180fa75974677c5a2df0c4e0e2fc483650d3da61a0699e172a842dc99449d369a34b7d28d92ed10da220a9b059c4a05e3b5ccde1c23e0ce12165731ab2df2e2be70d86925cb10b04d79670ad9ec8151dee3492b08815e27e144f535724600f7b522419b87c60d3f060a9dda68a4d920a082facbcfbe744bc992b06d2d86773f13bc215a1666936d941341d4976e4a38a6a9fad3445fb71b12722e0f543112011422f29ba01f80fbe87cfbe4dbe39dd8b062065fbecd78bf0dda26e89f54498bb3bb05a216dadeea726b1a26152a5b7dd2a8cb0b71226ea2faa12b416a227cd8489b9e84292dff0041889b209c499eda20a4acaa70fc8500ff3f66fe69fb8af982a0f34533a3cfaaf3bab81569afff19a6850d73916df8d28d79b572dd105255c71b95f7d0e550a0a7973cc10b1315f33a82b0821e23b8aea6913af906633a53e81aec67c7940b142d1f1ac3bd20d8eae46b1962fa25997b3edd212ed57941d8b67ae74306628a3c7a4d233920c7450302cbf35d5cf9a07ee567023341317a1d0bd8e8bd9ee1289ba0eedfbd92200198e47c251371f30edde7643fffca5b6fdced141d300ef38301cf6772e347f023ce3bb36e8e18d98538ec129dd9394b7595aaee4731d024effc8c5806b9e21fefc6f35a34e97a35af6d7d9a8f0eca000c84ef8b28f7edb7d0467c800739e13185d152d76a2a3715ed1b1b74a05d3dfc323cac18d379d72e586df11e8c427f4915fee7be2cdfe9e11a84c6f34fbdc7593446d7f4cf803434f4c722baa871cde9f7575d3749f31b29ab12fc266849d04ca1cb12e275754cd16136725f2f5d42ae0002e24ace9fe9679d7b1b7c13a54cc470fc6465e5453182304c7f791c5b3d082e35162d998920b3aa919f5145611281321a66c8bcd3ecf20596e49d6cbc0d414e26be5ffa6fced80bddcb5696ec3ea27c57cb8344ad44b061b3913497445109bf340bde70c55c6724c13c5a23b33647c5047e260ec0ce6585009ff75ea426536f032494e5fd6a96a62c382f1438d7b02b6557fc064db0a7a50e3f5d52b6c4633582ced75efe116eea7c16fbca52a76696ad23139eb8242fca3cef43a832d3217d09f6af3baa567476468691e77e0d31cd808bcd751be9a5efc90c3a1e8dc6e4bd6fcc3178c5835eeb3c23a817505428a2d028c45b82f29075273b85819e6179b72711d2591a237b5da9cb7b42dfdadfd7f488383d6b010f337e29694071b01447c6921d56f440701a3a50486866237c7a5bd1d526d3ed4401e04dc7bf357033f814bc8978fb9179f982e889e54f747898ba9c1b79429419cacf144b16f28330378e5b1da53a01e5a12efc6dd1b07544ba5eb9221d6eb0fde380ae9f0a876ae5f00e01c25f75864ebf950423639d60708ec248500aab4373ffcfe8c17485bf7aa933b244e2a5765981a1d9ba9e75375a49d48d7cab94be7e8c849c85b42b5199b019f2cce28da25158ec7892b2b48d31286dad81b9598a0c651109141d57eb8a8c0a7232388a97a957e35fe2a80ea92249dad58300a671047d3bd2149c84292f011f859580f8c9d27fce1ba5b0f95c6325d6e3ce674adc3e456f11a021f6616435d49f2460a05fdd9a392c712cc387e7cf914266521495f1357d090193c699514411a3df9eda381b48331844709e2a17b5b9e110f9fcc61758bd046db6fbec5840b27948fc403a4e84045f37d65e9b6370501db9e1e72a86be89b3407522168e6ed5ba1daf6d9e8604465f79678fcaf35b173c8fd09c145ce6e1275a128f566ecd71fe4fa94ee337077ad7977fc4e14652dd38b63a1106dd03a2f477fb3da7a8dc523e7ce2f1e6a946308cf13f90f205150fa7317a7fcb2c58ab6c81ee3d234663b807e086539ab81e0dba3733cd3483b716eff07d9ef0b8da59ad2a101793814d8f5cf901bba38ac2fc1b20fc8c3534664ed9e5824e9bb6e0db05df4d40ff3b519b5f0b1cc9a3ee7c69e33678b75389ecdd6ca9833602c6808b26b0e169c41b4a03437af3c787db43733193b8d0aa38d13037dabc4b49c1b67a2793b75d1e30bc3a02f95adca38f8c162b5c258326f01ea6fa0bb7aa66db27649ad90e5c7ce7b0c5d5745094b100e964e5277e462f22497828cdc22dce3d063227e41721b91db9bece6a9b39c74d4ec87c529ec2fb19ed207e6c1fcb623b11cbf42d2ec7f652efc9120d882de32d409d82f5d0164c82082be729b3822529938da515fbba6dd89004bc2713494dd437b03481649e9e53304c9d68efe03c1c149e5be1add530f62d79519a34827233d00af736f28a2bf959ecf12452bcfbdfc59aa54c730b004670493ac5386cbf97b0f8ae1ed25a6383fed8e6f3172ab0cc5e2cdfa8edbee4badeb7ad2ed54a85492337821981db49af458c7a00013176bca209185194dc633dc1150a3a17fc2489f10962ed81a4e2d95d99491430a83947c0bda4bb25d191b690e5019290a7cb21bc3cd7f6a317c7312d1dcbc951a899d8bd26e0d824656195561b182d3e9d05f479f987756552da2adac3645b91c9a3705d046f9398c2a82a1ec45ad42a0530159fa9b4c9deb8f4c243ba1b6e3681b2ab32e5f90ecf1bf8f6b9376e43c5f265782e5e0ac680158f897c603ed264a19d2a0f00f218fd766d2e4cb6f20c762c9134bf4ce83be606bd29fd0f660b597cf6da60f0318c53d507815a89be48709c4962c74a98461e3cc8fe87cb685ffbc803506e3ca8cdbd30262a940932d71a65c9d35701ac9b5aba4b7ac3840ad4e2077058384c384adc8c4ae2e88e7407879507979687e7246d42a4dad166eb8d392e622ff2e9b6b60686f2bd1eacde2fe38b740d163087df582b1ad3fe8ef52e91ce26f21a5b1b648c8410b6f970c83ebe0033a1b67f6c54f34c7d1bbad50fa76c2c8dc978373cbab53b7f8ed369f1b0505c52e577c7abb0c5b63058d5bc68c3e0bddd34c63d2d5452d68f500680b32b5b57a6f4f5357dd40b298450ccf74e32cbe470b3613fdab909995f576d5a91dbb7d10fff8cd734065bd93fc8939202d69abceaafe46488ceb7cbcde6ff339c2b9a1049a918af6056888a43a247361f2cde6f4477ead732985dcd3d4935eac9dbb72df6ab0688113b8fd6b7c4f0394c7703c049ca31293526cc40c84ad73b7bcf8c2251faee084d9b11bbe30bfcf1a1c5111a52b6946a2be02646e0a4ca70a3914a1a70353f530fd1f82d37d8cdd384ad5b9ea22296d68d2a4cd96d2a823b05ceb488f2fd2929a544e50f343125e440f5c04d3a2c6c24875a5d31aabdbb131b7d72e2d0fd450863a6717d39f9277d66fd1ad42abb439b9467b8893fb975d3a7e92208651fcf09fc9913eaa0ed281b05e8321b01307379feb077b85f9e368c9392a95b471790d5670430ced7d5a846aa322c2ba613fc74e5d70fd82db77f808c16e4bbdbca68994119a9fd6d97b0cc9fdf688a10e52ae8ae8afbae4dcbab44619ad35f7978d313c836cd05b9ee26a8b62fa02933eed712925d80c030d0d1c5f3529e6b1c15328c8f3768debf6c900dfaf6ba39543dd3cdb7e8e4b43279b8e8b88668a27e835f18bcf5a6623bb60df50ed1ff073e2050d5928c38965aedac5ad9613b680445b594f3a2462f5c388b8c2b265f344fdaaef93b90d4423aa0d433237eed8396de9898f9749de165ba9e5187d95409b0c414847d2422375beb4c6a235c5b498ec764649689fcd72f06e7bdd8ba8c27f1df460d7b4108c46bbacf7b60fb7eb6c6d48ca8bdf3762f6c022e877320a45bd5aecb444d9d58b321a794960c6c37259409edd1ce8f1479a2a7af08ba432075af1b9cc28ba6c6ca629e965a9f67e8773b7ff4b740ed64e648aabea1c718e188b7304a8e26faa9db3da0c50f9dcdd323f95c6d3eaffba9183703318f8c1df3e93499862ac199268997df99826de935bd9fb9ed840bca1252632ddca2bad87bec43fb0f29062c8f5e1fce62814311e42c6c8c3431dec9cd900860198ae89a64cb2e5fe3e4e31f1f8fbb4970233f77da935093bb839c5213cb22ef7654f391a1ddee54ff0b865be5cebffa861f2d51c1b24ba3a559b41cf12d78fdd4db35978c24fe9d642ec3a6efbaf072b1d0b9c67394c5a03f208d5a9e73c230cb2c3a70c4b859be580f3f4e852ecf5b81b9d8cfb01bacf066a95400200c4b5a60af59dfa79ae3b9d6647cbe27bfc9a7eeec96aba6d56f9f7d74984e801760a292515f18fb5cb4ed8b36fd0e71ae7524eb3bb30db9810fbfc82172a3cf9015cfee50d668f085d3d302a0b0efd2b3cd56c5b85d6320faeeebc515dfb0fba21472cf0537d96fa9271d8187dd9b1515982b2f43a982bbb9159745551618498e69ba11950d56c9701296f25148a131df426c8fa8d897d2ea4dfeb0d52f34b6630e0b33863d3f5921cf77cd4b156c5aba34460705a39fc817f5ffe5c2c6f5f89833942c0b268282db5efab876c7f799aa08b368dab62259cafec395bfa9f2bd7429a34a0e1a1bf41cabdd4d311e049690421dba45d1f94003ac6765ff5eebf2bc475f3a009deaa7cfe7515c8af45825fef8e145a3281bdff16f4a9b76583bd5139021e25b515d61394cb2b11799ce3c4e25c1c660881fd48f950d825aed219b83245a03d4ccd0e4fdc709669bb332c89</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Others</category>
      </categories>
  </entry>
  <entry>
    <title>HomeAssistant 安装 HASSOS</title>
    <url>/2019/12/16/HomeAssistant/HomeAssistant-InstallHASSOS/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><strong>Home Assistant 安装 HASSOS</strong>，基于 <a href="https://github.com/home-assistant/hassos/releases/tag/3.6">HassOS Release-3 build 6 (RC)</a> 。</p>
</blockquote>
<span id="more"></span>

<h3 id="2021-年-10-月-8-日更新"><a href="#2021-年-10-月-8-日更新" class="headerlink" title="2021 年 10 月 8 日更新"></a>2021 年 10 月 8 日更新</h3><p>安装教程：<a href="https://www.home-assistant.io/installation/raspberrypi">https://www.home-assistant.io/installation/raspberrypi</a></p>
<h4 id="坑1：no-supervisor-internet-connection"><a href="#坑1：no-supervisor-internet-connection" class="headerlink" title="坑1：no supervisor internet connection"></a>坑1：no supervisor internet connection</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">21-02-02 15:47:18 WARNING (MainThread) [supervisor.homeassistant.core] Error on Home Assistant installation. Retry in 30sec</span><br><span class="line">21-02-02 15:47:48 WARNING (MainThread) [supervisor.jobs] &#x27;Updater.fetch_data&#x27; blocked from execution, no supervisor internet connection</span><br><span class="line">21-02-02 15:47:48 WARNING (MainThread) [supervisor.homeassistant.core] Error on Home Assistant installation. Retry in 30sec</span><br><span class="line">21-02-02 15:48:18 WARNING (MainThread) [supervisor.jobs] &#x27;Updater.fetch_data&#x27; blocked from execution, no supervisor internet connection</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解决：</p>
<p>刷完系统后，在 hassos-boot 根目录新建 <em>CONFIG</em> 目录，在其中创建 timesyncd.conf</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Time]</span><br><span class="line">NTP=0.pool.ntp.org 1.pool.ntp.org 2.pool.ntp.org 3.pool.ntp.org</span><br><span class="line">FallbackNTP=0.pool.ntp.org 1.pool.ntp.org 2.pool.ntp.org 3.pool.ntp.org</span><br></pre></td></tr></table></figure>

<p>如果还是不行，换个网络……   我就被公司网络坑惨了</p>
<hr>
<h3 id="刷入-HASSOS-到-microSD-卡"><a href="#刷入-HASSOS-到-microSD-卡" class="headerlink" title="刷入 HASSOS 到 microSD 卡"></a>刷入 HASSOS 到 microSD 卡</h3><p>下载最新 <a href="https://github.com/home-assistant/hassos/releases">HASSOS</a> 镜像，使用 <a href="https://www.balena.io/etcher/">balena Etcher</a> 工具烧录到 microSD 卡。</p>
<h3 id="配置网络连接"><a href="#配置网络连接" class="headerlink" title="配置网络连接"></a>配置网络连接</h3><p>准备一个 U 盘，标签格式化为 CONFIG （<a href="https://bbs.hassbian.com/forum.php?mod=viewthread&tid=6757&extra=&highlight=hassos&page=1">有网友说</a>也有说无需 U 盘，烧录镜像的 microSD 卡插入 Windows 电脑，修改 hassos-boot 标签为 CONFIG 也可以，本人没有尝试），在根目录创建 network 目录，在其中新建文件 my-network：</p>
<p>wifi 连接：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[connection]</span><br><span class="line">id=my-network</span><br><span class="line">uuid=72111c67-4a5d-4d5c-925e-f8ee26efb3c3</span><br><span class="line">type=802-11-wireless</span><br><span class="line"></span><br><span class="line">[802-11-wireless]</span><br><span class="line">mode=infrastructure</span><br><span class="line">ssid=MY_SSID</span><br><span class="line"># Uncomment below if your SSID is not broadcasted</span><br><span class="line">#hidden=true</span><br><span class="line"></span><br><span class="line">[802-11-wireless-security]</span><br><span class="line">auth-alg=open</span><br><span class="line">key-mgmt=wpa-psk</span><br><span class="line">psk=MY_WLAN_SECRET_KEY</span><br><span class="line"></span><br><span class="line">[ipv4]</span><br><span class="line">method=auto</span><br><span class="line"></span><br><span class="line">[ipv6]</span><br><span class="line">addr-gen-mode=stable-privacy</span><br><span class="line">method=auto</span><br></pre></td></tr></table></figure>

<p>网线连接：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[connection]</span><br><span class="line">id=my-network</span><br><span class="line">uuid=d55162b4-6152-4310-9312-8f4c54d86afa</span><br><span class="line">type=802-3-ethernet</span><br><span class="line"></span><br><span class="line">[ipv4]</span><br><span class="line">method=auto</span><br><span class="line"></span><br><span class="line">[ipv6]</span><br><span class="line">addr-gen-mode=stable-privacy</span><br><span class="line">method=auto</span><br></pre></td></tr></table></figure>

<p>wifi 连接需替换 ssid 和 psk，uuid 可以通过 <a href="https://www.uuidgenerator.net/">https://www.uuidgenerator.net/</a> 生成。</p>
<p>配置静态 IP，可以替换以上文件中 ipv4 参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[ipv4]</span><br><span class="line">method=manual</span><br><span class="line">address=192.168.53.188/24;192.168.53.1</span><br><span class="line">dns=8.8.8.8;8.8.4.4;</span><br></pre></td></tr></table></figure>

<p>如果已经连接启动树莓派，也可以 ssh 登陆后通过 nmcli 配置（<a href="https://github.com/home-assistant/hassos/blob/dev/Documentation/network.md">官方 network 配置文档</a>）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hassio &gt; login</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">nmcli connection show</span></span><br><span class="line">NAME                UUID                                  TYPE      DEVICE </span><br><span class="line">Wired connection 1  890cd810-f501-32a1-8fbe-9fac83693afa  ethernet  eth0   </span><br><span class="line">my-network      e258af4f-f0bc-4492-955c-2c944355aaad  wifi      --     </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">nmcli con edit <span class="string">&quot;Wired connection 1&quot;</span> //此处选择输入需要配置的网络</span></span><br><span class="line"><span class="meta prompt_">nmcli&gt; </span><span class="language-bash"><span class="built_in">set</span> ipv4.addresses 192.168.100.10/24</span></span><br><span class="line">Do you also want to set &#x27;ipv4.method&#x27; to &#x27;manual&#x27;? [yes]:</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="配置时区"><a href="#配置时区" class="headerlink" title="配置时区"></a>配置时区</h3><p><a href="https://github.com/home-assistant/hassos/blob/dev/Documentation/configuration.md">查看官方配置文档</a></p>
<p>HASSOS 时间同步服务器是 google，由于国内网络的问题导致无法同步，进而导致 <a href="http://hassio.local:8123/">http://hassio.local:8123</a> 打不开，更新日期和时间即可，在 U 盘根目录新建文件 timesyncd.conf ，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Time]</span><br><span class="line">NTP=0.pool.ntp.org 1.pool.ntp.org 2.pool.ntp.org 3.pool.ntp.org</span><br><span class="line">FallbackNTP=0.pool.ntp.org 1.pool.ntp.org 2.pool.ntp.org 3.pool.ntp.org</span><br></pre></td></tr></table></figure>

<p>如果已经 ssh 进入树莓派，可以按照官方文档所写的编辑 <code>/etc/systemd/timesyncd.conf</code>。</p>
<h3 id="配置-ssh-连接"><a href="#配置-ssh-连接" class="headerlink" title="配置 ssh 连接"></a>配置 ssh 连接</h3><p>有 2 种 ssh 连接方式，通过 SSH Server 插件和</p>
<h4 id="SSH-Server-插件"><a href="#SSH-Server-插件" class="headerlink" title="SSH Server 插件"></a>SSH Server 插件</h4><p><a href="https://www.home-assistant.io/addons/ssh/">官方文档</a></p>
<p>这种方式官方指出<code>This add-on will not enable you to install packages or do anything as root. This is not allowed with Hass.io.</code>，即权限较低。</p>
<p>来到Home Assistant主页<strong><a href="http://hassio.local:8123/">http://hassio.local:8123</a></strong>，在菜单栏点击<strong><a href="http://hass.io/">http://Hass.io</a></strong>，选择<strong>ADD-ON STORE</strong>，搜索 <strong>SSH Server</strong>，点击 INSTALL 安装，安装完成后会变成 OPEN，点击进入 SSH Server 界面。</p>
<p>进入 SSH Server 界面，往下滚动进入配置 ssh 选项 Config，配置 authorized_keys ，输入需要 ssh 访问 HA 的电脑的 id_rsa.pub ，设置完成后在电脑终端输入 <code>ssh root@hassio.local</code>  ，登入成功：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ssh root@hassio.local</span></span><br><span class="line">Warning: the ECDSA host key for &#x27;hassio.local&#x27; differs from the key for the IP address &#x27;192.168.53.188&#x27;</span><br><span class="line">Offending key for IP in /home/ranger/.ssh/known_hosts:14</span><br><span class="line">Matching host key in /home/ranger/.ssh/known_hosts:18</span><br><span class="line">Are you sure you want to continue connecting (yes/no)? yes</span><br><span class="line"></span><br><span class="line">  _    _                 _       </span><br><span class="line"> | |  | |               (_)      </span><br><span class="line"> | |__| | __ _ ___ ___   _  ___  </span><br><span class="line"> |  __  |/ _` / __/ __| | |/ _ \ </span><br><span class="line"> | |  | | (_| \__ \__ \_| | (_) |</span><br><span class="line"> |_|  |_|\__,_|___/___(_)_|\___/ </span><br><span class="line">                                 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Our Cli:</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hassio <span class="built_in">help</span></span></span><br><span class="line"></span><br><span class="line">core-ssh:~#</span><br></pre></td></tr></table></figure>

<p>参考：<a href="https://zhuanlan.zhihu.com/p/30620342">https://zhuanlan.zhihu.com/p/30620342</a></p>
<h4 id="Debugging-Hass-io"><a href="#Debugging-Hass-io" class="headerlink" title="Debugging Hass.io"></a>Debugging Hass.io</h4><p><a href="https://developers.home-assistant.io/docs/en/hassio_debugging.html">查看官方配置文档</a></p>
<p>这种方式可以获取所有权限：</p>
<p><code>SSH access through the [SSH add-on](https://www.home-assistant.io/addons/ssh/) (which will give you SSH access through port 22) will not provide you with all the necessary privileges, and you will be asked for a username and password when typing the &#39;login&#39; command. You need to follow the steps below, which will setup a separate SSH access through port 22222 with all necessary privileges.</code></p>
<p>在 U 盘根目录新建文件 authorized_keys，导入 PC id_rsa.pub 内容到 authorized_keys，随后 ssh 连接：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ssh root@hassio.local -p 22222</span></span><br><span class="line">Warning: the ECDSA host key for &#x27;[hassio.local]:22222&#x27; differs from the key for the IP address &#x27;[192.168.53.188]:22222&#x27;</span><br><span class="line">Offending key for IP in /home/ranger/.ssh/known_hosts:16</span><br><span class="line">Matching host key in /home/ranger/.ssh/known_hosts:17</span><br><span class="line">Are you sure you want to continue connecting (yes/no)? yes</span><br><span class="line">  _    _                 _       </span><br><span class="line"> | |  | |               (_)      </span><br><span class="line"> | |__| | __ _ ___ ___   _  ___  </span><br><span class="line"> |  __  |/ _` / __/ __| | |/ _ \ </span><br><span class="line"> | |  | | (_| \__ \__ \_| | (_) |</span><br><span class="line"> |_|  |_|\__,_|___/___(_)_|\___/ </span><br><span class="line"></span><br><span class="line">Welcome on Hass.io CLI.</span><br><span class="line"></span><br><span class="line">For more details use &#x27;help&#x27; and &#x27;exit&#x27; to close.</span><br><span class="line">If you need access to host system use &#x27;login&#x27;.</span><br><span class="line"></span><br><span class="line">hassio &gt; login</span><br><span class="line"><span class="meta prompt_">#</span></span><br></pre></td></tr></table></figure>









<h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p><a href="https://github.com/home-assistant/hassos/blob/dev/Documentation/network.md">https://github.com/home-assistant/hassos/blob/dev/Documentation/network.md</a></p>
<p><a href="https://github.com/home-assistant/hassos/blob/dev/Documentation/configuration.md">https://github.com/home-assistant/hassos/blob/dev/Documentation/configuration.md</a></p>
<p><a href="https://bbs.hassbian.com/thread-5191-1-1.html">HASSIO(HASSOS)新版本安装填坑方案</a></p>
]]></content>
      <categories>
        <category>HomeAssistant</category>
      </categories>
      <tags>
        <tag>HomeAssistant</tag>
      </tags>
  </entry>
  <entry>
    <title>New Baby 办理事项列表</title>
    <url>/2019/12/02/Others/NewBaby/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="db3a0f5fefc9bb065cc58dc5588ccae8d0ab48bf5083d95180487f058153ba86">8a594f550020b2c4c53139d4c120877c670d47411eb78fc0c4abbfbe587bcfe2cb113c41bfd328c5065f6f2b39026d346a12ba8473dca30b30f240c25870a030489e615608fa9f6e76f98000ee177152e76d6a95c217e988b4d906c34b48bd06c561fecb61502376067f4deb2da17be1dcbae3e86c8e69f0e1e448dfd4040abf79f321fb32109ecc1343fcac9e185e6d4544677b561fc43351e23ea5518574b2139e272c97b707a613cb5296f5b3e348b5c8d88480ff605033b6598baa43b3225d7173fa010cb6f3d7f9524f0af91f4443071921465f954317130cef99ab094885d44414fa40e44effe17f7a3c69c8dbd50e8a7985ceed135d184c0f061dd66cdd5ce7c1470033e87b22bc8db3dfd0e4c4c5869bd579acfdfdad9db03e4d4fb5a835bdd8136c6d9044da70436e7175152d01c18d2d8ab00b29d09b160b7a21e501dce6803f30f31ba307b4bc98c9cbe273273638d66cd83e50442f51c162474881fc93f513d2097c4b237cc99b579bd836882e608bb1077cc32fcdd2b154ee97517ee4d700c512208cd7633eaf05da59982370a013cfb2baeae2faab9c226344e7ca45ee6649e5d514163cb51e993f9c612f6546d6d425bd7e59493f0c640b76994ea654269cd16ef679cb0c52fdd97b9fab802e5281672b28c7c5362478f1e15696919f288806a96928c23c6b1578ecded1bd9ffb9bd1bbc7915c0bb840d4b2cb11c50ce8e06b654e7bbae633527e082da3f121799af3af5236217d2c29e6a4a30df44ebff46d87939222b100cf01e5f4bfaa340dab7dad83fc971eec486fef1ca2f222930dd31f003319b1e86b3d0f05b9b9ac7d6e283198603497a0cb27e85d8191c90c5e2f79e9710dc66cba7a69b011ff150a762406b3cf66e53b7b2365659af14e99b441b24e1def3a4dadf7f9000c8d1fcf9929a5afd0c44f5e15502d9f85f15f441f191b4937e8ed85021cc03dd4423040c8df6fae00b4b1ebe6a153201dabd99ee8b291ef9876e77b822e1917316011adf1d0f0556af9dc9ff9b04faf26e44accd0ae0fb62b0e11169dfb7c9c3fe83872acb8b2439c12ad41a2563bcf5c7050c23d2c2949277515f77f752cae786954a89e66da3dafa5d43c7299e028c7cf148fa3e6812f5267845561df1658a30f16c9cca44c821003a8f6b330ba5f79cdd8b653069239813b727f6671312f33632be7c6b9104420cfc0a20b7e86ceb705ca89e07c8439ed5eaee8cd54a26a7d7d64b8bd8d58cfcc174ad17a78af98a81d9d677ae5555e8e420319e1a777187b6e65701dfb0c2ba752a0ffa45c021de5d3bc1a1fe09596bf9f36d375a2a80eaf31342b6a32bdeaaa9788f001891c00eff5479f94bd73b7f8fa457119d48c8b09b8a4e1ebda1b09cb7b70d77c8b3028690a2e2b17702b3d929d9928df1175a078e9d9cbd269725707a57aa59d3f5995af97ed0f05a45076902e52777224b06b6b8f41746707620a57e32e8915cc3897b390227725c910f244f87a7f761d2296e501daf80f591f422632f78298ac56a3bbba55356709253d9cefc4c9bec923c75a9ac17e4c5237ae99c3f250c76333c4d658834574d8b942e4bd9b7d9cb633ba2cb6ee213669aecc5959fee7e3d465774dfe5d849857b05de4fd25b0415beed48a267533b1b721899ed00d681fb0ca77b9230aa6c4b416b763dbeadf58b5219885439f121053c68fe677214a93480f063f71a2fee56e295b753ef5d92daa2ea99469b88c8e6e4b1adfa669752eab1ba06245d475371dd35af58ee9a31fe0e1f03f86acc30db8ece40372b5ab10b9b6f827988c0b347d7b3835673c5eff236c8d96ee6cdd18556aa7c86fd379853d28a486e9af0973fb2db3dc2f9d2109d20534d84543d3ee607c7de564bf1514d5452db385056c2351651b4de7f82783eccea52d55eb5caa96b2b8219e4cf6b6e4ecec781a328e900a39fb963f4be0f97c7ed0487d635a70790c02bf58bfdcdd14c1a76ebb05b8c0a204921301b35967695a57c41e556c35dcb597b25a16106d1a3c5adcd1025a093ca4a577f07e5b9e1a06232ea79a9b4db8df0a64a81b4c0281725c14945c5cea3292efb810c00e17233d0779d3eaef8e0aed7ffbeef1baf7f6612e550fb5b9b7f953803df88c8b24819f2d4a8948b7835fc734ef89beaefe74dc3abf80b3f7fb238c11629c6d227ed2a5351caf16db04bc2090624272a538ca8be18b76e0b5c446d5169c740496b16c6ace18f3cc3932fbf040045a916a285695bbb664e79ce59b5926101a57c0e471edba089bfddca08714c9e76714f30bcaf2f16547e31b1d71e28d6934302a003f1fded8a9922676a61b9bfd970a05cb6b555bf256e05c6a4a7f45a059211ba16882f94e3bca2ce6ba3f668d5dcc240ff97341ff94b465e2aec4266364027c0f94811a7dbadb4b19694a401165c6e3589c793df70eddc2bb8c0e25411c919b7eca89ad8e7664fc1589eadade69f8fb3b2a99d667449e2e8a570a3ab7256b9106b2bf3d11139327f2f88d2ce0df65a4f20046bfb4ce57514f7b50773193fae4c81b5ec485aae01b9646bc832398401e9e3f4bfaf9b6215b3cd08190b978a25ad3476aea525aaf2e69db3bcd2dbd61db505b4376b28a607835c35f8cf8577197e41836a0fd74857f6306f3300a0c283d23b6bbedf9f2914b3518b0910b16e30fb5732ef3642fdc2db5260244bd360bc0936924cd948befd088acab32c7b56d2c712a777fd601a7dd0e941f96aeb2787c2a09c7b1fcce83c951df491a316e0a76601f7ad6ee32796293bfb07bcedb9878895a69af4738be60aed482e9db589e1f00ab63a0f0a22e539e9cdda16d5cd1c2d32980c8a4192af56204623f872d54c55ae7fe5daf7115c22947724364098ac721de2db5fb3407b6b3106aac3575bc841108a6b4e9591974124ab95d247d136784cf04680db2641249737fd01917b6bf22e6b10fedf810efbe7bcaedeb909eb00023ccee2f1f886702f5dee408e8f210ec77ec94294782d0cf9d95a766e2621d3b54942aaa6b86d689f3bb17337de6ae7f5cabe24d80540fc60b6539123947e447f1a8afe4c727ba32b30bf09a5ad29ba0eaa98064d7d2adec77140ffaa44b094bd9addd741600e0d96d83270afcf2d6a880e922782519bf6b764801880b838ae7eab7ce524429b555f640a7de56971c5f03c8938a39ef4b8ebefe414f522fe5f9c2bde655d788d4489508f654587ee8b87cf553035471aa2bede7e320de8830f082f3fb7f2603f04b1b444d20b7189bc457a9612a03f728e0b4a667451b8eb873b47a30d9672a67e603abc1c63cf928097da9bcebc14c38d82219135d76c6f23d05f9fe724856576183a3b2486df926ed669de78238f4710953bed5879b1fe0567dc619ca226775f532237fe913ad0d7ea471404468146f88df2590ec61a87cf8b4260bdd3de0f1cd77b6c3f74a304c78c7154e3173ff309fde093743d1f67d43d6b63ae7b2425dbc81ad0217acff98ee029a4df973c276b4e53cd4d905b9b3a00fa6aa5ac3f60e89a2d2a42ee2e26436b2889744c736d6e1f4a64fbaae489ac85c9161236b749b5d824e51543d3fc75c273a0d7e52015fc933f42a19063d79eb061554c489848df5b5da3ebf4f7bfdb2cc6c5375e2dc6b5b23d733eec99737cfeb52078100fbf003a07d5be21da6ae934f81ce2988b12d8940944faabb01d8748e0cd9147027b6922f2055b577edc48a126cb7cfbd944ca6b3000c0f22b254c8085860ae92e8c4b59660e3a0ce09f8f834599e9b067f1f9200ad5ef4058ae440a8fb2bc8cdd65a6c507921320cadedc47518c889c925cc7f389fb30fdae7df148ea2c2575e5234bbf87c7eb2741364afd9568548a0b99dc99b5aea798c0a3cd4692c793f371ac1d618cb9b0d9561c5245a261604590eacfd7d8d1cc1763400b83fd23b6677c31aca7c0b68faf9be9604215fd5e0658a8773c3e2c9c3a2869da0d6c313091ef37bbc0ba33a7e26bd5d659559a52003ab374066f0b020d9a555d04d0dbe5b1f0c91efa3c444d8114b24619e9b4def371264b9a3641fbebae6a40fc112ec6d0b36fc712c8e2f876bd817ae0b087342d38cd2d0790164d46a1693a6991a613b5110e66f949acca854ee81bfa2adc3c59f424598c85d060ed3aa3eb8df29209275b360ef7416eb0555ad1449d6045efa261e47e4a67f14b35834ef827a59f95fd3edd64f82028945972e1d93d4f7fe08d84a4de8abe6217f48ac5dcff28a6fb438f62ed50e10494dbaea39050dfcc3bc6c3e87d20ef377f7d86da61169cd51921b36e65fe3a335e5fd2b5773ac631e9541dbbb0c93843eecb2b7749b908b3ca5d7baf7d5fcacaae1df3ec810e190d00e171e91c5d87984a7f04a91689219</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Others</category>
      </categories>
  </entry>
  <entry>
    <title>Android JNI原理-loadLibrary动态库加载过程</title>
    <url>/2019/10/25/Android/JNI-Study/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><strong>JNI</strong> （<strong>Java Native Interface, Java 本地接口</strong>）是一种<a href="https://zh.wikipedia.org/w/index.php?title=%E7%BC%96%E7%A8%8B%E6%A1%86%E6%9E%B6&action=edit&redlink=1">编程框架</a>，使得 <a href="https://zh.wikipedia.org/wiki/Java%E8%99%9A%E6%8B%9F%E6%9C%BA">Java虚拟机</a>中的 <a href="https://zh.wikipedia.org/wiki/Java">Java</a> 程序可以调用本地应用或库，也可以被其他程序调用。 本地程序一般是用其它语言（<a href="https://zh.wikipedia.org/wiki/C%E8%AF%AD%E8%A8%80">C</a>、<a href="https://zh.wikipedia.org/wiki/C%2B%2B">C++</a>或<a href="https://zh.wikipedia.org/wiki/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80">汇编语言</a>等）编写的，并且被编译为基于本机硬件和操作系统的程序。JNI 用于打通 Java 层与 Native(C&#x2F;C++) 层，并非 Android 系统独有，而是 Java 所有。Java语言是跨平台的语言，而这跨平台的背后都是依靠Java虚拟机，虚拟机采用C&#x2F;C++编写，适配各个系统，通过JNI为上层Java提供各种服务，保证跨平台性。本文基于 android-10.0.0_r6 源码。</p>
</blockquote>
<span id="more"></span>

<h3 id="1-JNI-loadLibrary-动态库加载过程"><a href="#1-JNI-loadLibrary-动态库加载过程" class="headerlink" title="1. JNI loadLibrary 动态库加载过程"></a>1. JNI loadLibrary 动态库加载过程</h3><p>在 Android 上层 Java 代码中，只需要一行代码即可加载动态库：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.load(<span class="string">&quot;/data/local/tmp/lib***.so&quot;</span>);</span><br><span class="line">System.loadLibrary(<span class="string">&quot;xxx&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>load 和 loadLibrary 区别如下：</p>
<ul>
<li>load 指定动态库的完整路径，不会自动加载依赖库；</li>
<li>loadLibrary 只从指定的 lib 目录查找，并加上 lib 前缀和 .so 后缀；</li>
</ul>
<p>JAVA 层和 Native 层方法是怎样注册并映射的？以 Bluetooth 为例，在 <a href="http://androidxref.com/9.0.0_r3/xref/packages/apps/Bluetooth/src/com/android/bluetooth/btservice/AdapterApp.java">AdapterApp.java</a> 中调用 <code>System.loadLibrary(&quot;bluetooth_jni&quot;);</code> ，加载 libbluetooth_jni.so 动态库到内存。</p>
<p> <a href="https://android.googlesource.com/platform/packages/apps/Bluetooth/+/refs/tags/android-10.0.0_r6/src/com/android/bluetooth/btservice/AdapterApp.java">&#x2F;packages&#x2F;apps&#x2F;Bluetooth&#x2F;src&#x2F;com&#x2F;android&#x2F;bluetooth&#x2F;btservice&#x2F;AdapterApp.java</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdapterApp</span> <span class="keyword">extends</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    ... ...</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (DBG) &#123;</span><br><span class="line">            Log.d(TAG, <span class="string">&quot;Loading JNI Library&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.loadLibrary(<span class="string">&quot;bluetooth_jni&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-1-loadLibrary"><a href="#1-1-loadLibrary" class="headerlink" title="1.1 loadLibrary"></a>1.1 loadLibrary</h4><h5 id="1-1-1-System-loadLibrary"><a href="#1-1-1-System-loadLibrary" class="headerlink" title="1.1.1 System.loadLibrary"></a>1.1.1 System.loadLibrary</h5><p><a href="https://android.googlesource.com/platform/libcore/+/refs/tags/android-10.0.0_r6/ojluni/src/main/java/java/lang/System.java">libcore&#x2F;ojluni&#x2F;src&#x2F;main&#x2F;java&#x2F;java&#x2F;lang&#x2F;System.java</a> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">System</span> &#123;</span><br><span class="line">    ... ...</span><br><span class="line">    <span class="meta">@CallerSensitive</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">loadLibrary</span><span class="params">(String libname)</span> &#123;</span><br><span class="line">        Runtime.getRuntime().loadLibrary0(Reflection.getCallerClass(), libname);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-1-2-Runtime-loadLibrary0"><a href="#1-1-2-Runtime-loadLibrary0" class="headerlink" title="1.1.2 Runtime.loadLibrary0"></a>1.1.2 Runtime.loadLibrary0</h5><p><a href="https://android.googlesource.com/platform/libcore/+/refs/tags/android-10.0.0_r6/ojluni/src/main/java/java/lang/Runtime.java">libcore&#x2F;ojluni&#x2F;src&#x2F;main&#x2F;java&#x2F;java&#x2F;lang&#x2F;Runtime.java</a> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">loadLibrary0</span><span class="params">(Class&lt;?&gt; fromClass, String libname)</span> &#123;</span><br><span class="line">    <span class="comment">// getClassLoader 返回 调用者(getCallerClass) fromClass 定义的 ClassLoader</span></span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> ClassLoader.getClassLoader(fromClass);</span><br><span class="line">    loadLibrary0(classLoader, fromClass, libname);</span><br><span class="line">&#125;</span><br><span class="line">... ...</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">loadLibrary0</span><span class="params">(ClassLoader loader, Class&lt;?&gt; callerClass, String libname)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (libname.indexOf((<span class="type">int</span>)File.separatorChar) != -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 目录分隔符不应该出现在 library 名称中</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsatisfiedLinkError</span>(</span><br><span class="line"><span class="string">&quot;Directory separator should not appear in library name: &quot;</span> + libname);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">libraryName</span> <span class="operator">=</span> libname;</span><br><span class="line">    <span class="comment">// 如果 loader 不为 null，就调用 findLibrary</span></span><br><span class="line">    <span class="keyword">if</span> (loader != <span class="literal">null</span> &amp;&amp; !(loader <span class="keyword">instanceof</span> BootClassLoader)) &#123;</span><br><span class="line">        <span class="comment">// 根据动态库名获取动态库的文件路径，见 1.2</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> loader.findLibrary(libraryName);</span><br><span class="line">        <span class="keyword">if</span> (filename == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsatisfiedLinkError</span>(loader + <span class="string">&quot; couldn&#x27;t find \&quot;&quot;</span> +</span><br><span class="line">                                           System.mapLibraryName(libraryName) + <span class="string">&quot;\&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 在 nativeLoad 中加载库，如果加载成功则 return，否则抛出异常</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">error</span> <span class="operator">=</span> nativeLoad(filename, loader);</span><br><span class="line">        <span class="keyword">if</span> (error != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 加载错误</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsatisfiedLinkError</span>(error);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当 loader 为 null 时执行如下操作</span></span><br><span class="line">    <span class="comment">// We know some apps use mLibPaths directly, potentially assuming it&#x27;s not null.</span></span><br><span class="line">    <span class="comment">// Initialize it here to make sure apps see a non-null value.</span></span><br><span class="line">    getLibPaths();<span class="comment">// 获取 mLibPaths 值: /system/lib64/</span></span><br><span class="line">    <span class="comment">// mapLibraryName 功能是将动态库 xxx 的名字转换为 libxxx.so，见 1.1.4</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> System.mapLibraryName(libraryName);</span><br><span class="line">    <span class="comment">// 真正加载库的函数 nativeLoad</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">error</span> <span class="operator">=</span> nativeLoad(filename, loader, callerClass);</span><br><span class="line">    <span class="keyword">if</span> (error != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsatisfiedLinkError</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> String[] mLibPaths = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">private</span> String[] getLibPaths() &#123;</span><br><span class="line">    <span class="keyword">if</span> (mLibPaths == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="built_in">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mLibPaths == <span class="literal">null</span>) &#123;</span><br><span class="line">                mLibPaths = initLibPaths();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mLibPaths;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String[] initLibPaths() &#123;</span><br><span class="line">    <span class="comment">// java.library.path = /system/lib64</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">javaLibraryPath</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;java.library.path&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (javaLibraryPath == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> EmptyArray.STRING;</span><br><span class="line">    &#125;</span><br><span class="line">    String[] paths = javaLibraryPath.split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">    <span class="comment">// Add a &#x27;/&#x27; to the end of each directory so we don&#x27;t have to do it every time.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; paths.length; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!paths[i].endsWith(<span class="string">&quot;/&quot;</span>)) &#123;</span><br><span class="line">            paths[i] += <span class="string">&quot;/&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> paths;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>loadLibrary0</strong> 主要目的是找到动态库所在路径，然后调用 **nativeLoad ** 来加载动态库，先判断 loader 是否为 null，当 loader 不为 null 时通过 loader.findLibrary() 查找动态库所在绝对路径，当 loader 为 null 时从默认目录 mLibPaths 下(比如 &#x2F;vendor&#x2F;lib, system&#x2F;lib, system&#x2F;lib64)查找是否存在该动态库，如果都没有找到就抛出异常。</p>
<h5 id="1-1-3-findLibrary"><a href="#1-1-3-findLibrary" class="headerlink" title="1.1.3 findLibrary"></a>1.1.3 findLibrary</h5><p><a href="https://android.googlesource.com/platform/libcore/+/refs/tags/android-10.0.0_r6/dalvik/src/main/java/dalvik/system/BaseDexClassLoader.java">libcore&#x2F;dalvik&#x2F;src&#x2F;main&#x2F;java&#x2F;dalvik&#x2F;system&#x2F;BaseDexClassLoader.java</a></p>
<p><strong>BaseDexClassLoader.findLibrary</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseDexClassLoader</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span> &#123;</span><br><span class="line">    <span class="meta">@UnsupportedAppUsage</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DexPathList pathList;</span><br><span class="line">    ... ...</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BaseDexClassLoader</span><span class="params">(String dexPath,</span></span><br><span class="line"><span class="params">            String librarySearchPath, ClassLoader parent, ClassLoader[] sharedLibraryLoaders,</span></span><br><span class="line"><span class="params">            <span class="type">boolean</span> isTrusted)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(parent);</span><br><span class="line">        ... ...</span><br><span class="line">        <span class="comment">// 初始化 DexPathList</span></span><br><span class="line">        <span class="built_in">this</span>.pathList = <span class="keyword">new</span> <span class="title class_">DexPathList</span>(<span class="built_in">this</span>, dexPath, librarySearchPath, <span class="literal">null</span>, isTrusted);</span><br><span class="line">        ... ...</span><br><span class="line">    &#125;</span><br><span class="line">    ... ...</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">findLibrary</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pathList.findLibrary(name);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://android.googlesource.com/platform/libcore/+/refs/tags/android-10.0.0_r6/dalvik/src/main/java/dalvik/system/DexPathList.java">libcore&#x2F;dalvik&#x2F;src&#x2F;main&#x2F;java&#x2F;dalvik&#x2F;system&#x2F;DexPathList.java</a></p>
<p>**初始化 DexPathList **</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">DexPathList</span> &#123;</span><br><span class="line">    ... ...</span><br><span class="line">    DexPathList(ClassLoader definingContext, String dexPath,</span><br><span class="line">            String librarySearchPath, File optimizedDirectory, <span class="type">boolean</span> isTrusted) &#123;</span><br><span class="line">        ... ...</span><br><span class="line">        <span class="built_in">this</span>.definingContext = definingContext;</span><br><span class="line">        ArrayList&lt;IOException&gt; suppressedExceptions = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;IOException&gt;();</span><br><span class="line">        <span class="comment">// save dexPath for BaseDexClassLoader</span></span><br><span class="line">        <span class="built_in">this</span>.dexElements = makeDexElements(splitDexPath(dexPath), optimizedDirectory,</span><br><span class="line">                                           suppressedExceptions, definingContext, isTrusted);</span><br><span class="line">        <span class="comment">// app 目录的 native 库</span></span><br><span class="line">        <span class="built_in">this</span>.nativeLibraryDirectories = splitPaths(librarySearchPath, <span class="literal">false</span>);</span><br><span class="line">        <span class="comment">// 系统目录的 native 库</span></span><br><span class="line">        <span class="built_in">this</span>.systemNativeLibraryDirectories =</span><br><span class="line">                splitPaths(System.getProperty(<span class="string">&quot;java.library.path&quot;</span>), <span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 记录所有的 native 动态库</span></span><br><span class="line">        <span class="built_in">this</span>.nativeLibraryPathElements = makePathElements(getAllNativeLibraryDirectories());</span><br><span class="line">        ... ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>DexPathList 构造函数主要是收集变量 dexElements(记录所有的 dexFile 文件) 和 nativeLibraryPathElements(记录所有的 native 动态库，包含 app 目录和 系统 目录的动态库) 的信息。</p>
<p><strong>DexPathList.findLibrary</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">DexPathList</span> &#123;</span><br><span class="line">    ... ...</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">findLibrary</span><span class="params">(String libraryName)</span> &#123;</span><br><span class="line">        <span class="comment">// 见 1.1.4 mapLibraryName</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> System.mapLibraryName(libraryName);</span><br><span class="line">        <span class="keyword">for</span> (NativeLibraryElement element : nativeLibraryPathElements) &#123;</span><br><span class="line">            <span class="comment">// 见 1.1.5 findNativeLibrary</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> element.findNativeLibrary(fileName);</span><br><span class="line">            <span class="keyword">if</span> (path != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> path;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>遍历 nativeLibraryPathElements ，从所有的动态库查询是否存在匹配的动态库，nativeLibraryPathElements 取值：</p>
<ul>
<li>&#x2F;data&#x2F;app&#x2F;packagename-xyz&#x2F;lib&#x2F;arm64:&#x2F;data&#x2F;app&#x2F;packagename-xyz&#x3D;&#x3D;&#x2F;base.apk!&#x2F;lib&#x2F;arm64-v8a</li>
<li>&#x2F;vendor&#x2F;lib64</li>
<li>&#x2F;system&#x2F;lib64</li>
</ul>
<h5 id="1-1-4-mapLibraryName"><a href="#1-1-4-mapLibraryName" class="headerlink" title="1.1.4 mapLibraryName"></a>1.1.4 mapLibraryName</h5><p><a href="https://android.googlesource.com/platform/libcore/+/refs/tags/android-10.0.0_r6/ojluni/src/main/native/System.c">libcore&#x2F;ojluni&#x2F;src&#x2F;main&#x2F;native&#x2F;System.c</a></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">cpchars</span><span class="params">(jchar *dst, <span class="type">char</span> *src, <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        dst[i] = src[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">JNIEXPORT jstring JNICALL</span><br><span class="line"><span class="title function_">System_mapLibraryName</span><span class="params">(JNIEnv *env, jclass ign, jstring libname)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    <span class="comment">// 在libcore/ojluni/src/main/native/jvm_md.h中定义：</span></span><br><span class="line">    <span class="comment">// #define JNI_LIB_PREFIX &quot;lib&quot;</span></span><br><span class="line">    <span class="comment">// #define JNI_LIB_SUFFIX &quot;.so&quot;</span></span><br><span class="line">    <span class="type">int</span> prefix_len = (<span class="type">int</span>) <span class="built_in">strlen</span>(JNI_LIB_PREFIX);</span><br><span class="line">    <span class="type">int</span> suffix_len = (<span class="type">int</span>) <span class="built_in">strlen</span>(JNI_LIB_SUFFIX);</span><br><span class="line">    jchar chars[<span class="number">256</span>];</span><br><span class="line">    <span class="keyword">if</span> (libname == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        JNU_ThrowNullPointerException(env, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    len = (*env)-&gt;GetStringLength(env, libname);</span><br><span class="line">    <span class="keyword">if</span> (len &gt; <span class="number">240</span>) &#123;</span><br><span class="line">        JNU_ThrowIllegalArgumentException(env, <span class="string">&quot;name too long&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cpchars(chars, JNI_LIB_PREFIX, prefix_len);<span class="comment">// chars = &quot;lib&quot;</span></span><br><span class="line">    (*env)-&gt;GetStringRegion(env, libname, <span class="number">0</span>, len, chars + prefix_len);<span class="comment">// chars = &quot;lib&quot;&lt;libname&gt;</span></span><br><span class="line">    len += prefix_len;</span><br><span class="line">    cpchars(chars + len, JNI_LIB_SUFFIX, suffix_len);<span class="comment">// chars = &quot;lib&quot;&lt;libname&gt;&quot;.so&quot;</span></span><br><span class="line">    len += suffix_len;</span><br><span class="line">    <span class="keyword">return</span> (*env)-&gt;NewString(env, chars, len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可见 mapLibraryName 的作用就是给 libname 加上 “lib” 前缀和 “.so” 后缀。</p>
<h5 id="1-1-5-findNativeLibrary"><a href="#1-1-5-findNativeLibrary" class="headerlink" title="1.1.5 findNativeLibrary"></a>1.1.5 findNativeLibrary</h5><p><a href="https://android.googlesource.com/platform/libcore/+/refs/tags/android-10.0.0_r6/dalvik/src/main/java/dalvik/system/DexPathList.java">libcore&#x2F;dalvik&#x2F;src&#x2F;main&#x2F;java&#x2F;dalvik&#x2F;system&#x2F;DexPathList.java</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">DexPathList</span> &#123;</span><br><span class="line">... ...</span><br><span class="line">    <span class="comment">/*package*/</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">NativeLibraryElement</span> &#123;</span><br><span class="line">        ... ...</span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">findNativeLibrary</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            maybeInit();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (zipDir == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">entryPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path, name).getPath();</span><br><span class="line">                <span class="keyword">if</span> (IoUtils.canOpenReadOnly(entryPath)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> entryPath;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (urlHandler != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// Having a urlHandler means the element has a zip file.</span></span><br><span class="line">                <span class="comment">// In this case Android supports loading the library iff</span></span><br><span class="line">                <span class="comment">// it is stored in the zip uncompressed.</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">entryName</span> <span class="operator">=</span> zipDir + <span class="string">&#x27;/&#x27;</span> + name;</span><br><span class="line">                <span class="keyword">if</span> (urlHandler.isEntryStored(entryName)) &#123;</span><br><span class="line">                  <span class="keyword">return</span> path.getPath() + zipSeparator + entryName;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>在Element 中查找对应的动态库。</p>
<h4 id="1-2-nativeLoad"><a href="#1-2-nativeLoad" class="headerlink" title="1.2 nativeLoad"></a>1.2 nativeLoad</h4><p><a href="https://android.googlesource.com/platform/libcore/+/refs/tags/android-10.0.0_r6/ojluni/src/main/java/java/lang/Runtime.java">libcore&#x2F;ojluni&#x2F;src&#x2F;main&#x2F;java&#x2F;java&#x2F;lang&#x2F;Runtime.java</a> </p>
<p>找到 so 后就开始加载 so 了，通过 nativeLoad 方法实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">nativeLoad</span><span class="params">(String filename, ClassLoader loader)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> nativeLoad(filename, loader, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用 native 方法</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title function_">nativeLoad</span><span class="params">(String filename, ClassLoader loader, Class&lt;?&gt; caller)</span>;</span><br></pre></td></tr></table></figure>

<p>java 层的 nativeLoad 对应 c 层的 Runtime_nativeLoad 方法：</p>
<p><a href="https://android.googlesource.com/platform/libcore/+/refs/tags/android-10.0.0_r6/ojluni/src/main/native/System.c">libcore&#x2F;ojluni&#x2F;src&#x2F;main&#x2F;native&#x2F;System.c</a></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> NATIVE_METHOD(className, functionName, signature) \</span></span><br><span class="line"><span class="meta">&#123; #functionName, signature, (void*)(className ## _ ## functionName) &#125;</span></span><br></pre></td></tr></table></figure>

<p><a href="https://android.googlesource.com/platform/libcore/+/refs/tags/android-10.0.0_r6/ojluni/src/main/native/Runtime.c">libcore&#x2F;ojluni&#x2F;src&#x2F;main&#x2F;native&#x2F;Runtime.c</a></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">JNIEXPORT jstring JNICALL</span><br><span class="line"><span class="title function_">Runtime_nativeLoad</span><span class="params">(JNIEnv* env, jclass ignored, jstring javaFilename,</span></span><br><span class="line"><span class="params">                   jobject javaLoader, jclass caller)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> JVM_NativeLoad(env, javaFilename, javaLoader, caller);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">static</span> JNINativeMethod gMethods[] = &#123;</span><br><span class="line">  FAST_NATIVE_METHOD(Runtime, freeMemory, <span class="string">&quot;()J&quot;</span>),</span><br><span class="line">  FAST_NATIVE_METHOD(Runtime, totalMemory, <span class="string">&quot;()J&quot;</span>),</span><br><span class="line">  FAST_NATIVE_METHOD(Runtime, maxMemory, <span class="string">&quot;()J&quot;</span>),</span><br><span class="line">  NATIVE_METHOD(Runtime, nativeGc, <span class="string">&quot;()V&quot;</span>),</span><br><span class="line">  NATIVE_METHOD(Runtime, nativeExit, <span class="string">&quot;(I)V&quot;</span>),</span><br><span class="line">  NATIVE_METHOD(Runtime, nativeLoad,</span><br><span class="line">                <span class="string">&quot;(Ljava/lang/String;Ljava/lang/ClassLoader;Ljava/lang/Class;)&quot;</span></span><br><span class="line">                    <span class="string">&quot;Ljava/lang/String;&quot;</span>),</span><br><span class="line">  <span class="comment">// 根据 System.c 中NATIVE_METHOD 的宏定义，相当于如下写法：</span></span><br><span class="line">  <span class="comment">// &#123;&quot;nativeLoad&quot;, &quot;(Ljava/lang/String;Ljava/lang/ClassLoader;)&quot;</span></span><br><span class="line">  <span class="comment">//                  &quot;Ljava/lang/String;&quot;, (void*)Runtime_nativeLoad&#125;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">register_java_lang_Runtime</span><span class="params">(JNIEnv* env)</span> &#123;</span><br><span class="line">  jniRegisterNativeMethods(env, <span class="string">&quot;java/lang/Runtime&quot;</span>, gMethods, NELEM(gMethods));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到 Runtime_nativeLoad 调用了 JVM_NativeLoad 方法，</p>
<p><a href="https://android.googlesource.com/platform/art/+/refs/tags/android-10.0.0_r6/openjdkjvm/OpenjdkJvm.cc">art&#x2F;openjdkjvm&#x2F;OpenjdkJvm.cc</a></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">JNIEXPORT jstring <span class="title function_">JVM_NativeLoad</span><span class="params">(JNIEnv* env,</span></span><br><span class="line"><span class="params">                                 jstring javaFilename,</span></span><br><span class="line"><span class="params">                                 jobject javaLoader,</span></span><br><span class="line"><span class="params">                                 jclass caller)</span> &#123;</span><br><span class="line">  ScopedUtfChars <span class="title function_">filename</span><span class="params">(env, javaFilename)</span>;</span><br><span class="line">  <span class="keyword">if</span> (filename.c_str() == nullptr) &#123;</span><br><span class="line">    <span class="keyword">return</span> nullptr;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> error_msg;</span><br><span class="line">  &#123;</span><br><span class="line">    art::JavaVMExt* vm = art::Runtime::Current()-&gt;GetJavaVM();</span><br><span class="line">    <span class="comment">// 真正加载 so 的地方</span></span><br><span class="line">    <span class="type">bool</span> success = vm-&gt;LoadNativeLibrary(env,</span><br><span class="line">                                         filename.c_str(),</span><br><span class="line">                                         javaLoader,</span><br><span class="line">                                         caller,</span><br><span class="line">                                         &amp;error_msg);</span><br><span class="line">    <span class="keyword">if</span> (success) &#123;</span><br><span class="line">      <span class="keyword">return</span> nullptr;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Don&#x27;t let a pending exception from JNI_OnLoad cause a CheckJNI issue with NewStringUTF.</span></span><br><span class="line">  env-&gt;ExceptionClear();</span><br><span class="line">  <span class="keyword">return</span> env-&gt;NewStringUTF(error_msg.c_str());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>真正加载 so 的方法是 LoadNativeLibrary 。</p>
<h4 id="1-3-LoadNativeLibrary"><a href="#1-3-LoadNativeLibrary" class="headerlink" title="1.3 LoadNativeLibrary"></a>1.3 LoadNativeLibrary</h4><p><a href="https://android.googlesource.com/platform/art/+/refs/tags/android-10.0.0_r6/runtime/jni/java_vm_ext.cc">art&#x2F;runtime&#x2F;jni&#x2F;java_vm_ext.cc</a></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">JavaVMExt::LoadNativeLibrary</span><span class="params">(JNIEnv* env,</span></span><br><span class="line"><span class="params">                                  <span class="type">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; path,</span></span><br><span class="line"><span class="params">                                  jobject class_loader,</span></span><br><span class="line"><span class="params">                                  jclass caller_class,</span></span><br><span class="line"><span class="params">                                  <span class="built_in">std</span>::<span class="built_in">string</span>* error_msg)</span> &#123;</span><br><span class="line">  error_msg-&gt;clear();</span><br><span class="line">  <span class="comment">// See if we&#x27;ve already loaded this library.  If we have, and the class loader</span></span><br><span class="line">  <span class="comment">// matches, return successfully without doing anything.</span></span><br><span class="line">  <span class="comment">// 判断是否已经加载过这个库，如果加载过直接返回</span></span><br><span class="line">  SharedLibrary* library;</span><br><span class="line">  Thread* self = Thread::Current();</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> move the locking (and more of this logic) into Libraries.</span></span><br><span class="line">    MutexLock <span class="title function_">mu</span><span class="params">(self, *Locks::jni_libraries_lock_)</span>;</span><br><span class="line">    library = libraries_-&gt;Get(path);</span><br><span class="line">  &#125;</span><br><span class="line">  ... ...</span><br><span class="line">  <span class="comment">// Open the shared library.  Because we&#x27;re using a full path, the system</span></span><br><span class="line">  <span class="comment">// doesn&#x27;t have to search through LD_LIBRARY_PATH.  (It may do so to</span></span><br><span class="line">  <span class="comment">// resolve this library&#x27;s dependencies though.)</span></span><br><span class="line">  <span class="comment">// Failures here are expected when java.library.path has several entries</span></span><br><span class="line">  <span class="comment">// and we have to hunt for the lib.</span></span><br><span class="line">  <span class="comment">// Below we dlopen but there is no paired dlclose, this would be necessary if we supported</span></span><br><span class="line">  <span class="comment">// class unloading. Libraries will only be unloaded when the reference count (incremented by</span></span><br><span class="line">  <span class="comment">// dlopen) becomes zero from dlclose.</span></span><br><span class="line">  <span class="comment">// Retrieve the library path from the classloader, if necessary.</span></span><br><span class="line">  ScopedLocalRef&lt;jstring&gt; <span class="title function_">library_path</span><span class="params">(env, GetLibrarySearchPath(env, class_loader))</span>;</span><br><span class="line">  Locks::mutator_lock_-&gt;AssertNotHeld(self);</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span>* path_str = path.empty() ? nullptr : path.c_str();</span><br><span class="line">  <span class="type">bool</span> needs_native_bridge = <span class="literal">false</span>;</span><br><span class="line">  <span class="type">char</span>* nativeloader_error_msg = nullptr;</span><br><span class="line">  <span class="comment">// 通过 OpenNativeLibrary 加载，旧版本中通过 dlopen</span></span><br><span class="line">  <span class="type">void</span>* handle = android::OpenNativeLibrary(</span><br><span class="line">      env,</span><br><span class="line">      runtime_-&gt;GetTargetSdkVersion(),</span><br><span class="line">      path_str,</span><br><span class="line">      class_loader,</span><br><span class="line">      (caller_location.empty() ? nullptr : caller_location.c_str()),</span><br><span class="line">      library_path.get(),</span><br><span class="line">      &amp;needs_native_bridge,</span><br><span class="line">      &amp;nativeloader_error_msg);</span><br><span class="line">  VLOG(jni) &lt;&lt; <span class="string">&quot;[Call to dlopen(\&quot;&quot;</span> &lt;&lt; path &lt;&lt; <span class="string">&quot;\&quot;, RTLD_NOW) returned &quot;</span> &lt;&lt; handle &lt;&lt; <span class="string">&quot;]&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (handle == nullptr) &#123;</span><br><span class="line">    <span class="comment">// 加载失败</span></span><br><span class="line">    *error_msg = nativeloader_error_msg;</span><br><span class="line">    android::NativeLoaderFreeErrorMessage(nativeloader_error_msg);</span><br><span class="line">    VLOG(jni) &lt;&lt; <span class="string">&quot;dlopen(\&quot;&quot;</span> &lt;&lt; path &lt;&lt; <span class="string">&quot;\&quot;, RTLD_NOW) failed: &quot;</span> &lt;&lt; *error_msg;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (env-&gt;ExceptionCheck() == JNI_TRUE) &#123;</span><br><span class="line">    LOG(ERROR) &lt;&lt; <span class="string">&quot;Unexpected exception:&quot;</span>;</span><br><span class="line">    env-&gt;ExceptionDescribe();</span><br><span class="line">    env-&gt;ExceptionClear();</span><br><span class="line">  &#125;</span><br><span class="line">  ... ...</span><br><span class="line">  <span class="comment">// Create a new entry.</span></span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> move the locking (and more of this logic) into Libraries.</span></span><br><span class="line">  <span class="type">bool</span> created_library = <span class="literal">false</span>;</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// Create SharedLibrary ahead of taking the libraries lock to maintain lock ordering.</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;SharedLibrary&gt; <span class="title function_">new_library</span><span class="params">(</span></span><br><span class="line"><span class="params">        new SharedLibrary(env,</span></span><br><span class="line"><span class="params">                          self,</span></span><br><span class="line"><span class="params">                          path,</span></span><br><span class="line"><span class="params">                          handle,</span></span><br><span class="line"><span class="params">                          needs_native_bridge,</span></span><br><span class="line"><span class="params">                          class_loader,</span></span><br><span class="line"><span class="params">                          class_loader_allocator))</span>;</span><br><span class="line">    MutexLock <span class="title function_">mu</span><span class="params">(self, *Locks::jni_libraries_lock_)</span>;</span><br><span class="line">    library = libraries_-&gt;Get(path);</span><br><span class="line">    <span class="keyword">if</span> (library == nullptr) &#123;  <span class="comment">// We won race to get libraries_lock.</span></span><br><span class="line">      library = new_library.release();</span><br><span class="line">      libraries_-&gt;Put(path, library);</span><br><span class="line">      created_library = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ... ...</span><br><span class="line">  <span class="type">bool</span> was_successful = <span class="literal">false</span>;</span><br><span class="line">  <span class="type">void</span>* sym = library-&gt;FindSymbol(<span class="string">&quot;JNI_OnLoad&quot;</span>, nullptr);</span><br><span class="line">  <span class="keyword">if</span> (sym == nullptr) &#123;</span><br><span class="line">    VLOG(jni) &lt;&lt; <span class="string">&quot;[No JNI_OnLoad found in \&quot;&quot;</span> &lt;&lt; path &lt;&lt; <span class="string">&quot;\&quot;]&quot;</span>;</span><br><span class="line">    was_successful = <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Call JNI_OnLoad.  We have to override the current class</span></span><br><span class="line">    <span class="comment">// loader, which will always be &quot;null&quot; since the stuff at the</span></span><br><span class="line">    <span class="comment">// top of the stack is around Runtime.loadLibrary().  (See</span></span><br><span class="line">    <span class="comment">// the comments in the JNI FindClass function.)</span></span><br><span class="line">    ScopedLocalRef&lt;jobject&gt; old_class_loader(env, env-&gt;NewLocalRef(self-&gt;GetClassLoaderOverride()));</span><br><span class="line">    self-&gt;SetClassLoaderOverride(class_loader);</span><br><span class="line">    VLOG(jni) &lt;&lt; <span class="string">&quot;[Calling JNI_OnLoad in \&quot;&quot;</span> &lt;&lt; path &lt;&lt; <span class="string">&quot;\&quot;]&quot;</span>;</span><br><span class="line">    using JNI_OnLoadFn = <span class="type">int</span>(*)(JavaVM*, <span class="type">void</span>*);</span><br><span class="line">    JNI_OnLoadFn jni_on_load = reinterpret_cast&lt;JNI_OnLoadFn&gt;(sym);</span><br><span class="line">    <span class="type">int</span> version = (*jni_on_load)(this, nullptr);</span><br><span class="line">    <span class="keyword">if</span> (IsSdkVersionSetAndAtMost(runtime_-&gt;GetTargetSdkVersion(), SdkVersion::kL)) &#123;</span><br><span class="line">      <span class="comment">// Make sure that sigchain owns SIGSEGV.</span></span><br><span class="line">      EnsureFrontOfChain(SIGSEGV);</span><br><span class="line">    &#125;</span><br><span class="line">    self-&gt;SetClassLoaderOverride(old_class_loader.get());</span><br><span class="line">    <span class="keyword">if</span> (version == JNI_ERR) &#123;</span><br><span class="line">      StringAppendF(error_msg, <span class="string">&quot;JNI_ERR returned from JNI_OnLoad in \&quot;%s\&quot;&quot;</span>, path.c_str());</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (JavaVMExt::IsBadJniVersion(version)) &#123;</span><br><span class="line">      StringAppendF(error_msg, <span class="string">&quot;Bad JNI version returned from JNI_OnLoad in \&quot;%s\&quot;: %d&quot;</span>,</span><br><span class="line">                    path.c_str(), version);</span><br><span class="line">      <span class="comment">// It&#x27;s unwise to call dlclose() here, but we can mark it</span></span><br><span class="line">      <span class="comment">// as bad and ensure that future load attempts will fail.</span></span><br><span class="line">      <span class="comment">// We don&#x27;t know how far JNI_OnLoad got, so there could</span></span><br><span class="line">      <span class="comment">// be some partially-initialized stuff accessible through</span></span><br><span class="line">      <span class="comment">// newly-registered native method calls.  We could try to</span></span><br><span class="line">      <span class="comment">// unregister them, but that doesn&#x27;t seem worthwhile.</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      was_successful = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    VLOG(jni) &lt;&lt; <span class="string">&quot;[Returned &quot;</span> &lt;&lt; (was_successful ? <span class="string">&quot;successfully&quot;</span> : <span class="string">&quot;failure&quot;</span>)</span><br><span class="line">              &lt;&lt; <span class="string">&quot; from JNI_OnLoad in \&quot;&quot;</span> &lt;&lt; path &lt;&lt; <span class="string">&quot;\&quot;]&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  library-&gt;SetResult(was_successful);</span><br><span class="line">  <span class="keyword">return</span> was_successful;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最终会通过 OpenNativeLibrary 加载 so 库，随后会判断 JNI_OnLoad 方法是否存在，存在则调用其方法，所以做 JNI 开发时要实现 JNI_OnLoad 方法来做一些初始化的操作。</p>
<p>主要工作：</p>
<ul>
<li>检查动态库是否已加载，如果已加载则直接返回；</li>
<li>通过 OpenNativeLibrary 打开 so 库；</li>
<li>创建 SharedLibrary 共享库，并添加到 libraries_ 列表；</li>
<li>调用 JNI_OnLoad 方法；</li>
</ul>
<p><strong>OpenNativeLibrary</strong></p>
<p><a href="https://android.googlesource.com/platform/system/core/+/refs/tags/android-10.0.0_r6/libnativeloader/native_loader.cpp">system&#x2F;core&#x2F;libnativeloader&#x2F;native_loader.cpp</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span>* <span class="title">OpenNativeLibrary</span><span class="params">(JNIEnv* env, <span class="type">int32_t</span> target_sdk_version, <span class="type">const</span> <span class="type">char</span>* path,</span></span></span><br><span class="line"><span class="params"><span class="function">                        jobject class_loader, <span class="type">const</span> <span class="type">char</span>* caller_location, jstring library_path,</span></span></span><br><span class="line"><span class="params"><span class="function">                        <span class="type">bool</span>* needs_native_bridge, <span class="type">char</span>** error_msg)</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(__ANDROID__)</span></span><br><span class="line">  <span class="built_in">UNUSED</span>(target_sdk_version);</span><br><span class="line">  <span class="keyword">if</span> (class_loader == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">    *needs_native_bridge = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (caller_location != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">      <span class="type">android_namespace_t</span>* boot_namespace = <span class="built_in">FindExportedNamespace</span>(caller_location);</span><br><span class="line">      <span class="keyword">if</span> (boot_namespace != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="type">const</span> android_dlextinfo dlextinfo = &#123;</span><br><span class="line">            .flags = ANDROID_DLEXT_USE_NAMESPACE,</span><br><span class="line">            .library_namespace = boot_namespace,</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">void</span>* handle = <span class="built_in">android_dlopen_ext</span>(path, RTLD_NOW, &amp;dlextinfo);</span><br><span class="line">        <span class="keyword">if</span> (handle == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">          *error_msg = <span class="built_in">strdup</span>(<span class="built_in">dlerror</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> handle;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">void</span>* handle = <span class="built_in">dlopen</span>(path, RTLD_NOW);</span><br><span class="line">    <span class="keyword">if</span> (handle == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">      *error_msg = <span class="built_in">strdup</span>(<span class="built_in">dlerror</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> handle;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">guard</span><span class="params">(g_namespaces_mutex)</span></span>;</span><br><span class="line">  NativeLoaderNamespace* ns;</span><br><span class="line">  <span class="keyword">if</span> ((ns = g_namespaces-&gt;<span class="built_in">FindNamespaceByClassLoader</span>(env, class_loader)) == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">    <span class="comment">// This is the case where the classloader was not created by ApplicationLoaders</span></span><br><span class="line">    <span class="comment">// In this case we create an isolated not-shared namespace for it.</span></span><br><span class="line">    std::string create_error_msg;</span><br><span class="line">    <span class="keyword">if</span> ((ns = g_namespaces-&gt;<span class="built_in">Create</span>(env, target_sdk_version, class_loader, <span class="literal">false</span> <span class="comment">/* is_shared */</span>,</span><br><span class="line">                                   <span class="literal">nullptr</span>, library_path, <span class="literal">nullptr</span>, &amp;create_error_msg)) == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">      *error_msg = <span class="built_in">strdup</span>(create_error_msg.<span class="built_in">c_str</span>());</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">OpenNativeLibraryInNamespace</span>(ns, path, needs_native_bridge, error_msg);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">  <span class="built_in">UNUSED</span>(env, target_sdk_version, class_loader, caller_location);</span><br><span class="line">  <span class="comment">// Do some best effort to emulate library-path support. It will not</span></span><br><span class="line">  <span class="comment">// work for dependencies.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// Note: null has a special meaning and must be preserved.</span></span><br><span class="line">  std::string c_library_path;  <span class="comment">// Empty string by default.</span></span><br><span class="line">  <span class="keyword">if</span> (library_path != <span class="literal">nullptr</span> &amp;&amp; path != <span class="literal">nullptr</span> &amp;&amp; path[<span class="number">0</span>] != <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">    <span class="function">ScopedUtfChars <span class="title">library_path_utf_chars</span><span class="params">(env, library_path)</span></span>;</span><br><span class="line">    c_library_path = library_path_utf_chars.<span class="built_in">c_str</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  std::vector&lt;std::string&gt; library_paths = base::<span class="built_in">Split</span>(c_library_path, <span class="string">&quot;:&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">const</span> std::string&amp; lib_path : library_paths) &#123;</span><br><span class="line">    *needs_native_bridge = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* path_arg;</span><br><span class="line">    std::string complete_path;</span><br><span class="line">    <span class="keyword">if</span> (path == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">      <span class="comment">// Preserve null.</span></span><br><span class="line">      path_arg = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      complete_path = lib_path;</span><br><span class="line">      <span class="keyword">if</span> (!complete_path.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        complete_path.<span class="built_in">append</span>(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      complete_path.<span class="built_in">append</span>(path);</span><br><span class="line">      path_arg = complete_path.<span class="built_in">c_str</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">void</span>* handle = <span class="built_in">dlopen</span>(path_arg, RTLD_NOW);</span><br><span class="line">    <span class="keyword">if</span> (handle != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> handle;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">NativeBridgeIsSupported</span>(path_arg)) &#123;</span><br><span class="line">      *needs_native_bridge = <span class="literal">true</span>;</span><br><span class="line">      handle = <span class="built_in">NativeBridgeLoadLibrary</span>(path_arg, RTLD_NOW);</span><br><span class="line">      <span class="keyword">if</span> (handle != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> handle;</span><br><span class="line">      &#125;</span><br><span class="line">      *error_msg = <span class="built_in">strdup</span>(<span class="built_in">NativeBridgeGetError</span>());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      *error_msg = <span class="built_in">strdup</span>(<span class="built_in">dlerror</span>());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Android 7.0 开始，禁止加载非NDK库，也就是说系统禁止了应用去链接系统的私有库，它通过名字空间的方式来实现其方法。所以就看到了，我们加载 so 的时候是用 OpenNativeLibrary 方法，而不是以往的 dlopen 方法。</p>
<p>参考：</p>
<p><a href="http://gityuan.com/2016/05/28/android-jni/">http://gityuan.com/2016/05/28/android-jni/</a></p>
<p><a href="http://gityuan.com/2017/03/26/load_library/">http://gityuan.com/2017/03/26/load_library/</a></p>
<p><a href="https://blog.csdn.net/QQxiaoqiang1573/article/details/101781380">https://blog.csdn.net/QQxiaoqiang1573/article/details/101781380</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>HomeAssistant 集成和风天气</title>
    <url>/2019/06/28/HomeAssistant/HassHeWeatherIntegrate/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>HomeAssistant 接入和风天气。</p>
</blockquote>
<span id="more"></span>

<p>HA Version: 0.94.4</p>
<p>首先用京东帐号申请一个<a href="https://wx.jdcloud.com/market/datas/26/10610">和风API</a>，请注意，是京东万象平台，不是从风天气官网申请的 API 。</p>
<h2 id="1-hf-weather-组件实现"><a href="#1-hf-weather-组件实现" class="headerlink" title="1. hf_weather 组件实现"></a>1. hf_weather 组件实现</h2><h3 id="1-1-预览"><a href="#1-1-预览" class="headerlink" title="1.1. 预览"></a>1.1. 预览</h3><p><img src="https://raw.githubusercontent.com/rangerzhou/ImageHosting/master/blog_resource/2019/HeWeather_001.PNG" alt="001"></p>
<p><img src="https://raw.githubusercontent.com/rangerzhou/ImageHosting/master/blog_resource/2019/HeWeather_002.PNG" alt="002"></p>
<h3 id="1-2-下载组件"><a href="#1-2-下载组件" class="headerlink" title="1.2 下载组件"></a>1.2 下载组件</h3><p><a href="https://github.com/rangerzhou/HomeAssistant/tree/master/hf_weather">下载组件</a> ,放入 HA 对应目录。</p>
<h3 id="1-3-配置-configurations-yaml"><a href="#1-3-配置-configurations-yaml" class="headerlink" title="1.3. 配置 configurations.yaml"></a>1.3. 配置 configurations.yaml</h3><p>配置 configuration.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">weather:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">platform:</span> <span class="string">hf_weather</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">hefengweather</span></span><br><span class="line">    <span class="attr">city:</span> <span class="string">shanghai</span></span><br><span class="line">    <span class="attr">appkey:</span> <span class="string">YOUR_API_KEY</span></span><br></pre></td></tr></table></figure>

<p>启用 sun 组件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">sun:</span></span><br></pre></td></tr></table></figure>

<p>lovelace 启用天气卡片（首页右上角“配置 UI - 原始配置编辑器”）</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 引入自定义卡片hf_weather-card</span></span><br><span class="line"><span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">module</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/local/custom-lovelace/hf_weather-card/hf_weather-card.js</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">module</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/local/custom-lovelace/hf_weather-card/hf_weather-more-info.js</span></span><br><span class="line"><span class="comment"># 在view里面的cards节点，增加天气卡片类型</span></span><br><span class="line"><span class="attr">views:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">default_view</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">Home</span></span><br><span class="line">    <span class="attr">cards:</span></span><br><span class="line">    <span class="string">...</span> <span class="string">...</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">&#x27;custom:hf_weather-card&#x27;</span> <span class="comment"># card类型</span></span><br><span class="line">        <span class="attr">entity:</span> <span class="string">weather.hefengweather</span> <span class="comment"># entityid</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="string">daily</span> <span class="comment"># hourly按小时天气预报、daily按天天气预报，不设置则同时显示</span></span><br><span class="line">        <span class="attr">title:</span> <span class="string">和风天气</span> <span class="comment"># 标题，不设置则使用entity的friendly_name</span></span><br><span class="line">        <span class="attr">icons:</span> <span class="string">/local/custom-lovelace/hf_weather-card/icons/animated/</span>  <span class="comment"># 图标路径，不设置则采用cdn，结尾要有&quot;/&quot;</span></span><br></pre></td></tr></table></figure>

<p>如果不从原始编辑器中添加，也可添加 ENTITY，在 entity 的编辑器中编辑如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">entity:</span> <span class="string">weather.hefengweather</span></span><br><span class="line"><span class="attr">icons:</span> <span class="string">/local/custom-lovelace/hf_weather-card/icons/animated/</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">和风天气</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&#x27;custom:hf_weather-card&#x27;</span></span><br><span class="line"><span class="attr">mode:</span> <span class="string">hourly</span></span><br></pre></td></tr></table></figure>



<h2 id="2-HeWeather组件实现"><a href="#2-HeWeather组件实现" class="headerlink" title="2. HeWeather组件实现"></a>2. HeWeather组件实现</h2><p><img src="https://raw.githubusercontent.com/rangerzhou/ImageHosting/master/Hass_Resources/HeWeather.png" alt="HeWeather"></p>
<h3 id="2-1-下载组件"><a href="#2-1-下载组件" class="headerlink" title="2.1 下载组件"></a>2.1 下载组件</h3><p><a href="https://github.com/rangerzhou/HomeAssistant/tree/master/HeWeather">下载组件</a> ，放入 HA 对应目录。</p>
<h3 id="2-2-配置"><a href="#2-2-配置" class="headerlink" title="2.2 配置"></a>2.2 配置</h3><p>编辑 <a href="https://github.com/rangerzhou/HomeAssistant/blob/master/HeWeather/packages/heweather.yaml">heweather.yaml</a> ，填充对应 appkey ，</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">sensor:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">platform:</span> <span class="string">heweather</span></span><br><span class="line">    <span class="attr">city:</span> <span class="string">shanghai</span></span><br><span class="line">    <span class="attr">appkey:</span> <span class="number">905195</span><span class="string">***************3627c7f781d</span></span><br><span class="line">    <span class="string">...</span> <span class="string">...</span></span><br></pre></td></tr></table></figure>

<p>配置 configurations.yaml ，添加 packages：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">homeassistant:</span></span><br><span class="line">  <span class="string">...</span> <span class="string">...</span></span><br><span class="line">  <span class="attr">customize:</span> <span class="type">!include</span> <span class="string">customize.yaml</span></span><br><span class="line">  <span class="attr">packages:</span> <span class="type">!include_dir_named</span> <span class="string">packages</span> <span class="comment"># 添加此行</span></span><br></pre></td></tr></table></figure>

<h3 id="2-3-HA-中添加-entity"><a href="#2-3-HA-中添加-entity" class="headerlink" title="2.3 HA 中添加 entity"></a>2.3 HA 中添加 entity</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">cards:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">entity:</span> <span class="string">weather.localweather</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">上海天气</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">weather-forecast</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">entities:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">entity:</span> <span class="string">sensor.remind</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">entity:</span> <span class="string">sensor.hourly_forcast_3</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">entity:</span> <span class="string">sensor.hourly_forcast_6</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">entity:</span> <span class="string">sensor.hourly_forcast_9</span></span><br><span class="line">      <span class="attr">show_header_toggle:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">title:</span> <span class="string">小时天气预报</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">entities</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">entities:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">entity:</span> <span class="string">sensor.suggestion_air</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">entity:</span> <span class="string">sensor.suggestion_comf</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">entity:</span> <span class="string">sensor.suggestion_cw</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">entity:</span> <span class="string">sensor.suggestion_drsg</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">entity:</span> <span class="string">sensor.suggestion_flu</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">entity:</span> <span class="string">sensor.suggestion_sport</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">entity:</span> <span class="string">sensor.suggestion_trav</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">entity:</span> <span class="string">sensor.suggestion_uv</span></span><br><span class="line">      <span class="attr">show_header_toggle:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">title:</span> <span class="string">品质生活</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">entities</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">entities:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">entity:</span> <span class="string">sensor.heweather_qlty</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">entity:</span> <span class="string">sensor.heweather_no2</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">entity:</span> <span class="string">sensor.heweather_pm25</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">entity:</span> <span class="string">sensor.heweather_co</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">entity:</span> <span class="string">sensor.heweather_so2</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">entity:</span> <span class="string">sensor.heweather_o3</span></span><br><span class="line">      <span class="attr">show_header_toggle:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">title:</span> <span class="string">本地空气质量</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">entities</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>HomeAssistant</category>
      </categories>
      <tags>
        <tag>HeWeather</tag>
      </tags>
  </entry>
  <entry>
    <title>HomeAssistant 集成小米空气净化器2</title>
    <url>/2019/06/03/HomeAssistant/HASS-Xiaomi-Airpurifier-integrate/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>在 Home Assistant 中集成小米空气净化器2（底部标签型号：AC-M2-AA），网上各种配置比较杂乱，且没有找到针对此净化器完美的配置，可能是因为 HA 更新了，旧的配置失效了，本文写作时 HA 的版本是 0.93.2</p>
</blockquote>
<span id="more"></span>

<p>HA Release: 0.94.4</p>
<p>净化器型号: AC-M2-AA</p>
<p>Model info: zhimi.airpurifier.m2</p>
<p>首先上图：</p>
<p><img src="https://raw.githubusercontent.com/rangerzhou/ImageHosting/master/Hass_Resources/ScreenShots_AirPurifier2.PNG" alt="米空气净化器2"></p>
<p>参考了 2 篇小米空气净化器2配置的文章：</p>
<ul>
<li><a href="https://bbs.hassbian.com/thread-1657-1-1.html">最新小米空气净化器2代接入HASS方法及HA控制面板</a> </li>
<li><a href="https://bbs.hassbian.com/thread-6065-1-1.html">小米空气净化器2代接入HA控制面板问题</a></li>
</ul>
<p>此文配置针对这两篇文章的配置文件有所修改，以解决可能由于 HA 版本更新出现的问题，下面是详细配置步骤。</p>
<h3 id="1-获取-Token"><a href="#1-获取-Token" class="headerlink" title="1. 获取 Token"></a>1. 获取 Token</h3><p>有 3 种方法获取 token 。</p>
<p>第一种，HACHINA 定制的树莓派集成了 miio 工具，可直接使用命令获取 token：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">miio discover</span></span><br><span class="line">INFO  Discovering devices. Press Ctrl+C to stop.</span><br><span class="line"></span><br><span class="line">Device ID: 6264xxxx</span><br><span class="line">Model info: zhimi.airpurifier.m2</span><br><span class="line">Address: 192.168.xxx.xxx</span><br><span class="line">Token: 9c9aa**************************** via auto-token</span><br><span class="line">Support: At least basic</span><br></pre></td></tr></table></figure>

<p>第二种，安装 <a href="https://github.com/rangerzhou/ImageHosting/tree/master/apps">米家 APP (5.4.63版本)</a>，此版本可以直接显示 token ，不知道会不会哪天就被封了……</p>
<p>第三种，安装 python-miio 工具：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo pip3 install python-miio</span><br><span class="line">mirobo discover --handshake 1</span><br></pre></td></tr></table></figure>

<h3 id="2-新建-packages-目录"><a href="#2-新建-packages-目录" class="headerlink" title="2. 新建 packages 目录"></a>2. 新建 packages 目录</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在 /home/pi/homeassistant/ 新建 packages 目录</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> packages</span></span><br></pre></td></tr></table></figure>

<h3 id="3-在-configuration-yaml-中配置-packages"><a href="#3-在-configuration-yaml-中配置-packages" class="headerlink" title="3. 在 configuration.yaml 中配置 packages"></a>3. 在 configuration.yaml 中配置 packages</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vim configuration.yaml</span></span><br><span class="line">homeassistant:</span><br><span class="line">  name: Home</span><br><span class="line">  latitude: </span><br><span class="line">  longitude:</span><br><span class="line">  unit_system: metric</span><br><span class="line">  time_zone: Asia/Shanghai</span><br><span class="line">  customize: !include customize.yaml</span><br><span class="line">  packages: !include_dir_named packages</span><br></pre></td></tr></table></figure>

<h3 id="4-下载-packages-文件"><a href="#4-下载-packages-文件" class="headerlink" title="4. 下载 packages 文件"></a>4. 下载 packages 文件</h3><p>下载 <a href="https://github.com/rangerzhou/HomeAssistant/tree/master/xiaomiAirPurifier2/packages"> xiaomi_air_pufifier.yaml</a> 放入 <code>~/homeassistant/packages</code> 目录下，此文件修复了上面参考链接里的bug和 HA 升级导致的几个问题，主要为：</p>
<ul>
<li>增加 sensors: xiaomi_ap_filter_used 和 xiaomi_ap_filter_life，以在主界面显示滤芯使用时长和滤芯寿命</li>
<li>修复提示音无效（HA 升级，service 名称改变导致）</li>
</ul>
<p><strong>注意：需要替换文件中的 host 和 token ！！！</strong>  </p>
<h3 id="5-配置-home-assistant-custom-ui"><a href="#5-配置-home-assistant-custom-ui" class="headerlink" title="5. 配置 home-assistant-custom-ui"></a>5. 配置 home-assistant-custom-ui</h3><p>根据 <a href="https://github.com/andrey-git/home-assistant-custom-ui">home-assistant-custom-ui 官方 github</a> 中的 README 配置，具体如下：</p>
<p><strong>a. Installing:</strong> <a href="https://github.com/andrey-git/home-assistant-custom-ui/blob/master/docs/installing.md">详细参考此文</a> </p>
<p><strong>自动安装</strong>，在 ~&#x2F;home&#x2F;homeassistant&#x2F; 下载 update.sh ：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在 ~/home/homeassistant/ 下载 update.sh</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl -o update.sh <span class="string">&quot;https://raw.githubusercontent.com/andrey-git/home-assistant-custom-ui/master/update.sh?raw=true&quot;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>手动安装</strong>：</p>
<p>在 <code>~/homeassistant/</code> 创建 <code>www/custom_ui</code> 目录，从 <a href="https://github.com/andrey-git/home-assistant-custom-ui">Github</a> 下载 state-card-custom-ui.html, state-card-custom-ui.html.gz, state-card-custom-ui-es5.html, state-card-custom-ui-es5.html.gz 放入到 <code>~/.homeassistant/www/custom_ui/</code> 。</p>
<p>下载 <a href="https://github.com/andrey-git/home-assistant-customizer/tree/master/customizer">此链接文件</a>  到 <code>~/home/homeassistant/custom_components/customizer</code> 。</p>
<p><strong>b. Activating:</strong> <a href="https://github.com/andrey-git/home-assistant-custom-ui/blob/master/docs/activating.md">详细参考此文</a> ，1.1 ～ 1.8 选择其中一种方法即可，我是选的 1.2，配置 configuration.yaml:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">homeassistant:</span></span><br><span class="line">  <span class="attr">name:</span></span><br><span class="line">  <span class="attr">latitude:</span></span><br><span class="line">  <span class="attr">longitude:</span></span><br><span class="line">  <span class="string">...</span> <span class="string">...</span></span><br><span class="line">  <span class="attr">packages:</span> <span class="type">!include_dir_named</span> <span class="string">packages</span></span><br><span class="line">  <span class="attr">customize_glob:</span></span><br><span class="line">    <span class="string">&quot;*.*&quot;</span><span class="string">:</span></span><br><span class="line">      <span class="attr">custom_ui_state_card:</span> <span class="string">state-card-custom-ui</span></span><br><span class="line"><span class="string">...</span> <span class="string">...</span></span><br><span class="line"><span class="attr">frontend:</span></span><br><span class="line">  <span class="attr">extra_html_url:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/local/custom_ui/state-card-custom-ui.html</span></span><br><span class="line">  <span class="attr">extra_html_url_es5:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/local/custom_ui/state-card-custom-ui-es5.html</span></span><br><span class="line">    </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="6-添加-HA-已有的空气净化器组件-可选，加不加不影响，这个是官方支持的"><a href="#6-添加-HA-已有的空气净化器组件-可选，加不加不影响，这个是官方支持的" class="headerlink" title="6. 添加 HA 已有的空气净化器组件 (可选，加不加不影响，这个是官方支持的)"></a>6. 添加 HA 已有的空气净化器组件 (可选，加不加不影响，这个是官方支持的)</h3><p>configuration.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">fan:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">platform:</span> <span class="string">xiaomi_miio</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">AirPurifierm2</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.31</span><span class="number">.174</span></span><br><span class="line">    <span class="attr">token:</span> <span class="string">*****************</span></span><br><span class="line">    <span class="attr">model:</span> <span class="string">zhimi.airpurifier.m2</span></span><br></pre></td></tr></table></figure>

<p>HA 官方支持小米空气净化器的，只是面板选项较少，如上图中的风扇卡片。</p>
<h3 id="7-检测配置并运行"><a href="#7-检测配置并运行" class="headerlink" title="7. 检测配置并运行"></a>7. 检测配置并运行</h3><p>保存以上配置文件后检测配置，可能会出现如下提示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Invalid config for [automation]: required key not provided @ data[&#x27;action&#x27;]. Got Nonerequired key not provided @ data[&#x27;trigger&#x27;]. Got None. (See ?, line ?). Please check the docs at https://home-assistant.io/components/automation/</span><br></pre></td></tr></table></figure>

<p>原因是你的 automations.yaml 中没有内容，有人测试必须包含 <code>trigger:</code> 和 <code>action:</code> 两项内容才不报错，或者在 <code>configuration.yaml</code> 中注释 <code>automation: !include automations.yaml</code> 也可以。</p>
<p>重新运行 HA 不出意外应该可以显示上图中的内容了。</p>
]]></content>
      <categories>
        <category>HomeAssistant</category>
      </categories>
  </entry>
  <entry>
    <title>HomeAssistant device_tracker 组件</title>
    <url>/2019/05/29/HomeAssistant/HomeAssistantDeviceTracker/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>device</p>
</blockquote>
<span id="more"></span>

<p><a href="https://www.hachina.io/docs/3043.html">https://www.hachina.io/docs/3043.html</a></p>
<h3 id="位置追踪（device-tracker）组件"><a href="#位置追踪（device-tracker）组件" class="headerlink" title="位置追踪（device_tracker）组件"></a>位置追踪（device_tracker）组件</h3><h3 id="通过-WIFI-路由器追踪设备"><a href="#通过-WIFI-路由器追踪设备" class="headerlink" title="通过 WIFI 路由器追踪设备"></a>通过 WIFI 路由器追踪设备</h3><h3 id="通过网络扫描（NMAP）追踪设备"><a href="#通过网络扫描（NMAP）追踪设备" class="headerlink" title="通过网络扫描（NMAP）追踪设备"></a>通过网络扫描（NMAP）追踪设备</h3><h3 id="通过HomeAssistant的IOS-APP跟踪手机位置"><a href="#通过HomeAssistant的IOS-APP跟踪手机位置" class="headerlink" title="通过HomeAssistant的IOS APP跟踪手机位置"></a>通过HomeAssistant的IOS APP跟踪手机位置</h3><h3 id="通过-OwnTracks-跟踪手机位置"><a href="#通过-OwnTracks-跟踪手机位置" class="headerlink" title="通过 OwnTracks 跟踪手机位置"></a>通过 OwnTracks 跟踪手机位置</h3><p><a href="https://www.home-assistant.io/components/owntracks/">https://www.home-assistant.io/components/owntracks/</a></p>
<h3 id="通过云服务跟踪位置（iCloud、Tesla、Volvo-on-Call）"><a href="#通过云服务跟踪位置（iCloud、Tesla、Volvo-on-Call）" class="headerlink" title="通过云服务跟踪位置（iCloud、Tesla、Volvo on Call）"></a>通过云服务跟踪位置（iCloud、Tesla、Volvo on Call）</h3><h3 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h3><p><a href="https://www.hachina.io/docs/2415.html">https://www.hachina.io/docs/2415.html</a></p>
]]></content>
      <categories>
        <category>HomeAssistant</category>
      </categories>
      <tags>
        <tag>HomeAssistant, HASS, NMAP, ping, Owntracks, iCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>HomeAssistant</title>
    <url>/2019/05/20/HomeAssistant/HomeAssistant/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="708e7ef1ba62a6d37c55a1eff1a470f1c1c799aa329fbd6824fc85be190a6fe5"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>HomeAssistant</category>
      </categories>
  </entry>
  <entry>
    <title>Hexo Features</title>
    <url>/2019/04/30/Hexo/HexoBlogFeatures/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>Hexo Blog 各种配置及定制化，之前做的很多定制化经常忘记，特写此文记录。</p>
</blockquote>
<span id="more"></span>

<hr>
<center><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=500 height=86 src="http://music.163.com/outchain/player?type=2&id=29722263&auto=0&height=66"></iframe></center>

<h3 id="1-添加评论系统"><a href="#1-添加评论系统" class="headerlink" title="1. 添加评论系统"></a>1. 添加评论系统</h3><p>Next 主题支持多种评论系统：</p>
<ul>
<li><a href="https://disqus.com/">Disqus</a>：欧美 UI 风格，支持 Tweet、Facebook 等国外社交软件的三方登陆和一键分享。</li>
<li><a href="https://gitalk.github.io/">Gitalk</a>：必须用 github 账号登陆才能评论，支持 Markdown 语法，与 github issues 页面风格一致。</li>
<li><a href="https://www.livere.com/">Livere</a>：韩国的来必力，支持插入图片和 GIF，支持国内外多种社交媒体的三方登陆。</li>
<li><a href="https://valine.js.org/">Valine</a>：支持匿名评论，支持 Markdown 语法，界面简洁美观。</li>
<li><a href="http://changyan.kuaizhan.com/">畅言</a>：国产评论系统，可区分热评和最新评论，论坛贴吧风。</li>
</ul>
<p>并且 Next 主题允许同时加载多种评论系统，我选择了 Disqus、Gitalk 和 Livere 。</p>
<h4 id="1-1-DISQUS"><a href="#1-1-DISQUS" class="headerlink" title="1.1 DISQUS"></a>1.1 DISQUS</h4><p>首页点击 <code>GET STARTED</code></p>
<p><img src="https://raw.githubusercontent.com/rangerzhou/ImageHosting/master/blog_resource/2020/disqus_01.png" alt="GET STARTED"></p>
<p>点击 <code>I want to install Disqus on my site</code></p>
<p><img src="https://raw.githubusercontent.com/rangerzhou/ImageHosting/master/blog_resource/2020/disqus_02.png" alt="install"></p>
<p>输入 <code>Website Name</code> ，这个名字会成为你的 <code>shortname</code> ，点击 <code>Create Site</code></p>
<p><img src="https://raw.githubusercontent.com/rangerzhou/ImageHosting/master/blog_resource/2020/disqus_03.png" alt="CreateNewSite"></p>
<p>直接点击 <code>Install Disqus</code> ，选择最下面</p>
<p><img src="https://raw.githubusercontent.com/rangerzhou/ImageHosting/master/blog_resource/2020/disqus_04.png" alt="Install Disqus"></p>
<p>点击 <code>Configure</code></p>
<p><img src="https://raw.githubusercontent.com/rangerzhou/ImageHosting/master/blog_resource/2020/disqus_05.png" alt="Configure"></p>
<p>此处的 <code>Website Name</code> 可以和上面不一样，<code>shortname</code> 已经生成了</p>
<p><img src="https://raw.githubusercontent.com/rangerzhou/ImageHosting/master/blog_resource/2020/disqus_06.png" alt="Configure Disqus"></p>
<p>可以点击左侧 <code>General</code> 查看 <code>shortname</code></p>
<p><img src="https://raw.githubusercontent.com/rangerzhou/ImageHosting/master/blog_resource/2020/disqus_07.png" alt="General"></p>
<p>修改 next 主题配置文件 _config.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Multiple Comment System Support</span></span><br><span class="line"><span class="attr">comments:</span></span><br><span class="line">  <span class="comment"># Available values: tabs | buttons</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">tabs</span></span><br><span class="line">  <span class="comment"># Choose a comment system to be displayed by default.</span></span><br><span class="line">  <span class="comment"># Available values: changyan | disqus | disqusjs | gitalk | livere | valine</span></span><br><span class="line">  <span class="attr">active:</span> <span class="string">disqus</span></span><br><span class="line">  <span class="comment"># Setting `true` means remembering the comment system selected by the visitor.</span></span><br><span class="line">  <span class="attr">storage:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Lazyload all comment systems.</span></span><br><span class="line">  <span class="attr">lazyload:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Modify texts or order for any navs, here are some examples.</span></span><br><span class="line">  <span class="attr">nav:</span></span><br><span class="line">    <span class="comment">#disqus:</span></span><br><span class="line">    <span class="comment">#  text: Load Disqus</span></span><br><span class="line">    <span class="comment">#  order: -1</span></span><br><span class="line">    <span class="comment">#gitalk:</span></span><br><span class="line">    <span class="comment">#  order: -2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Disqus</span></span><br><span class="line"><span class="attr">disqus:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">shortname:</span> <span class="string">yourshortname</span></span><br><span class="line">  <span class="attr">count:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment">#post_meta_order: 0</span></span><br></pre></td></tr></table></figure>

<p>重新部署博客即可显示 Disqus 评论系统。</p>
<h4 id="1-2-Gitalk"><a href="#1-2-Gitalk" class="headerlink" title="1.2 Gitalk"></a>1.2 Gitalk</h4><p>创建 OAuth Apps：<a href="https://github.com/settings/developers">https://github.com/settings/developers</a></p>
<p><img src="https://raw.githubusercontent.com/rangerzhou/ImageHosting/master/blog_resource/2020/gitalk.png" alt="Gitalk"></p>
<p>注册后会生成 <code>Client ID</code> 和 <code>Client Secret</code> .</p>
<p>修改 next 主题配置文件 _config.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Gitalk</span></span><br><span class="line"><span class="comment"># For more information: https://gitalk.github.io, https://github.com/gitalk/gitalk</span></span><br><span class="line"><span class="attr">gitalk:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">github_id:</span> <span class="string">rangerzhou</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">rangerzhou.github.io</span></span><br><span class="line">  <span class="attr">client_id:</span> <span class="string">xxx</span></span><br><span class="line">  <span class="attr">client_secret:</span> <span class="string">xxx</span></span><br><span class="line">  <span class="attr">admin_user:</span> <span class="string">rangerzhou</span></span><br><span class="line">  <span class="attr">distraction_free_mode:</span> <span class="literal">true</span> <span class="comment"># Facebook-like distraction free mode</span></span><br><span class="line">  <span class="comment"># Gitalk&#x27;s display language depends on user&#x27;s browser or system environment</span></span><br><span class="line">  <span class="comment"># If you want everyone visiting your site to see a uniform language, you can set a force language value</span></span><br><span class="line">  <span class="comment"># Available values: en | es-ES | fr | ru | zh-CN | zh-TW</span></span><br><span class="line">  <span class="attr">language:</span> <span class="string">zh-CN</span></span><br></pre></td></tr></table></figure>

<p>重新部署博客即可显示 Gitalk 评论系统。</p>
<h4 id="1-3-Livere"><a href="#1-3-Livere" class="headerlink" title="1.3 Livere"></a>1.3 Livere</h4><p>登录注册后，点击顶部 <code>安装</code>，安装完成后进入管理页面，点击左侧 <a href="https://www.livere.com/insight/myCode">代码管理</a> ，复制 <code>data-uid</code> 的值。</p>
<p><img src="https://raw.githubusercontent.com/rangerzhou/ImageHosting/master/blog_resource/2020/livere.png" alt="Livere"></p>
<p>修改 next主题配置文件 _config.yml，输入刚才复制的 <code>data-uid</code> 即可。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># LiveRe comments system</span></span><br><span class="line"><span class="comment"># You can get your uid from https://livere.com/insight/myCode (General web site)</span></span><br><span class="line"><span class="attr">livere_uid:</span> <span class="string">data-uid-value</span></span><br></pre></td></tr></table></figure>

<p>重新部署博客即可显示 Livere 评论系统。</p>
<h3 id="2-添加页面加载进度条"><a href="#2-添加页面加载进度条" class="headerlink" title="2. 添加页面加载进度条"></a>2. 添加页面加载进度条</h3><p>新建 <code>source/_data/head.swig</code> ，添加如下 2 行：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">&lt;script</span> <span class="string">src=&quot;//cdn.bootcss.com/pace/1.0.2/pace.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;link</span> <span class="string">href=&quot;//cdn.bootcss.com/pace/1.0.2/themes/pink/pace-theme-flash.css&quot;</span> <span class="string">rel=&quot;stylesheet&quot;&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-添加音乐播放器"><a href="#3-添加音乐播放器" class="headerlink" title="3. 添加音乐播放器"></a>3. 添加音乐播放器</h3><h4 id="3-1-方法一"><a href="#3-1-方法一" class="headerlink" title="3.1 方法一"></a>3.1 方法一</h4><p><a href="https://enfangzhong.github.io/2019/12/08/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0APlayer%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8%E5%8A%9F%E8%83%BD/">参考</a></p>
<h5 id="3-1-1-下载-APlayer-源码"><a href="#3-1-1-下载-APlayer-源码" class="headerlink" title="3.1.1 下载 APlayer 源码"></a>3.1.1 下载 APlayer 源码</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/DIYgod/APlayer.git</span><br></pre></td></tr></table></figure>

<p>把 <em>dist</em> 文件夹复制到 <em>\themes\next\source</em> 目录中。</p>
<h5 id="3-1-2-编辑喜欢的音乐列表"><a href="#3-1-2-编辑喜欢的音乐列表" class="headerlink" title="3.1.2 编辑喜欢的音乐列表"></a>3.1.2 编辑喜欢的音乐列表</h5><p>在 <em>dist</em> 目录里，新建 <em>music.js</em> 文件，并把如下代码粘贴进去：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ap = <span class="keyword">new</span> <span class="title class_">APlayer</span>(&#123;</span><br><span class="line">    <span class="attr">container</span>: <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;aplayer&#x27;</span>),</span><br><span class="line">    <span class="attr">fixed</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">autoplay</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">order</span>: <span class="string">&#x27;random&#x27;</span>, <span class="comment">// 音频循环顺序, 可选值: &#x27;list&#x27;列表循环, &#x27;random&#x27;随机循环</span></span><br><span class="line">    <span class="attr">preload</span>: <span class="string">&#x27;auto&#x27;</span>, <span class="comment">// 预加载，可选值: &#x27;none&#x27;, &#x27;metadata&#x27;, &#x27;auto&#x27;</span></span><br><span class="line">    <span class="attr">theme</span>: <span class="string">&#x27;#FADFA3&#x27;</span>, <span class="comment">// 主题</span></span><br><span class="line">    <span class="attr">volume</span>: <span class="number">0.7</span>, <span class="comment">// 默认音量</span></span><br><span class="line">    <span class="attr">mutex</span>: <span class="literal">false</span>, <span class="comment">// 互斥，阻止多个播放器同时播放，当前播放器播放时暂停其他播放器</span></span><br><span class="line">    <span class="attr">listFolded</span>: <span class="literal">false</span>, <span class="comment">// 列表默认折叠</span></span><br><span class="line">    <span class="comment">//lrcType: 3, // 歌词传递方式</span></span><br><span class="line">    <span class="attr">audio</span>: [&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;麻雀&#x27;</span>,</span><br><span class="line">        <span class="attr">artist</span>: <span class="string">&#x27;李荣浩&#x27;</span>,</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;/dist/MusicList/麻雀.mp3&#x27;</span>,</span><br><span class="line">        <span class="attr">cover</span>: <span class="string">&#x27;http://p1.music.126.net/c5NVKUIAUcyN4BQUDbGnEg==/109951163221157827.jpg?param=130y130&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;平凡之路&quot;</span>,</span><br><span class="line">        <span class="attr">artist</span>: <span class="string">&#x27;朴树&#x27;</span>,</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;http://www.ytmp3.cn/down/59211.mp3&#x27;</span>,</span><br><span class="line">        <span class="attr">cover</span>: <span class="string">&#x27;http://p1.music.126.net/W_5XiCv3rGS1-J7EXpHSCQ==/18885211718782327.jpg?param=130y130&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;这些民谣 - 一次听个够&#x27;</span>,</span><br><span class="line">        <span class="attr">artist</span>: <span class="string">&#x27;翁大涵&#x27;</span>,</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;http://www.ytmp3.cn/down/60222.mp3&#x27;</span>,</span><br><span class="line">        <span class="attr">cover</span>: <span class="string">&#x27;http://p2.music.126.net/Wx5GNJEpay2JbfVUJc4Aew==/109951163094853876.jpg?param=130y130&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;你的酒馆对我打了烊&#x27;</span>,</span><br><span class="line">        <span class="attr">artist</span>: <span class="string">&#x27;陈雪凝&#x27;</span>,</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;http://www.ytmp3.cn/down/59770.mp3&#x27;</span>,</span><br><span class="line">        <span class="attr">cover</span>: <span class="string">&#x27;http://p1.music.126.net/LiRR__0pJHSivqBHZzbMUw==/109951163816225567.jpg?param=130y130&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;Something Just Like This&#x27;</span>,</span><br><span class="line">        <span class="attr">artist</span>: <span class="string">&#x27;The Chainsmokers&#x27;</span>,</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;http://www.ytmp3.cn/down/50463.mp3&#x27;</span>,</span><br><span class="line">        <span class="attr">cover</span>: <span class="string">&#x27;http://p2.music.126.net/ggnyubDdMxrhpqYvpZbhEQ==/3302932937412681.jpg?param=130y130&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;Good Time&#x27;</span>,</span><br><span class="line">        <span class="attr">artist</span>: <span class="string">&#x27;Owl City&amp;Carly Rae Jepsen&#x27;</span>,</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;http://www.ytmp3.cn/down/34148.mp3&#x27;</span>,</span><br><span class="line">        <span class="attr">cover</span>: <span class="string">&#x27;http://p1.music.126.net/c5NVKUIAUcyN4BQUDbGnEg==/109951163221157827.jpg?param=130y130&#x27;</span>,</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>可以使用网上链接，也可以使用本地音乐文件（比如麻雀.mp3）。</p>
<h5 id="3-1-3-在-next-主题下的-layout-中引入-APlayer-音乐播放器源码"><a href="#3-1-3-在-next-主题下的-layout-中引入-APlayer-音乐播放器源码" class="headerlink" title="3.1.3 在 next 主题下的 layout 中引入 APlayer 音乐播放器源码"></a>3.1.3 在 next 主题下的 layout 中引入 APlayer 音乐播放器源码</h5><p>在 <em>\themes\next\layout_layout.swig</em> 文件 <em>body</em> 标签体内中，里新增如下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">itemscope</span> <span class="attr">itemtype</span>=<span class="string">&quot;http://schema.org/WebPage&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 加入APlayer音乐播放器 start--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/dist/APlayer.min.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;aplayer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/dist/APlayer.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/dist/music.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 加入APlayer音乐播放器 end--&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&#123;%- if theme.motion.enable %&#125; use-motion&#123;%- endif %&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;headband&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>其实也可以添加到这个  <em>&#x2F;themes&#x2F;next&#x2F;layout&#x2F;<em>partials&#x2F;head&#x2F;head.swig</em></em> 中，添加位置：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;%- if theme.favicon.apple_touch_icon %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;apple-touch-icon&quot;</span> <span class="attr">sizes</span>=<span class="string">&quot;180x180&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(theme.favicon.apple_touch_icon) &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 加入APlayer音乐播放器 start--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/dist/APlayer.min.css&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;aplayer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/dist/APlayer.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/dist/music.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 加入APlayer音乐播放器 end--&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="3-1-4-配置-pjax-防止页面切换时音乐暂停"><a href="#3-1-4-配置-pjax-防止页面切换时音乐暂停" class="headerlink" title="3.1.4 配置 pjax 防止页面切换时音乐暂停"></a>3.1.4 配置 pjax 防止页面切换时音乐暂停</h5><p>在 <em>&#x2F;themes&#x2F;next&#x2F;layout&#x2F;<em>partials&#x2F;head&#x2F;head.swig</em></em> 中 meta 标签下面添加如下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;generator&quot;</span> <span class="attr">content</span>=<span class="string">&quot;Hexo &#123;&#123; hexo_version &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- pjax：防止跳转页面音乐暂停 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/pjax@0.2.8/pjax.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>但是添加这行代码后会影响方法二，方法二歌单页面必须按 F5 刷新一下才显示播放器，蛋疼。。。</p>
<p>修改主题 _config.yml 启动 pjax</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pjax:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>



<h5 id="3-1-5-重新部署"><a href="#3-1-5-重新部署" class="headerlink" title="3.1.5 重新部署"></a>3.1.5 重新部署</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean;hexo g;hexo d</span><br></pre></td></tr></table></figure>

<h4 id="3-2-方法二"><a href="#3-2-方法二" class="headerlink" title="3.2 方法二"></a>3.2 方法二</h4><h5 id="3-2-1-安装插件"><a href="#3-2-1-安装插件" class="headerlink" title="3.2.1 安装插件"></a>3.2.1 安装插件</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-tag-aplayer</span><br></pre></td></tr></table></figure>

<h5 id="3-2-2-config-yml-部署"><a href="#3-2-2-config-yml-部署" class="headerlink" title="3.2.2 _config.yml 部署"></a>3.2.2 _config.yml 部署</h5><p>根目录 <em>_config.yml</em> 文件添加如下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">aplayer:</span></span><br><span class="line">  <span class="attr">meting:</span> <span class="literal">true</span>       <span class="comment"># MetingJS 支持</span></span><br><span class="line"><span class="comment">#  cdn: https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js  # 引用 APlayer.js 外部 CDN 地址 (默认不开启)</span></span><br><span class="line"><span class="comment">#  style_cdn: https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css</span></span><br><span class="line"><span class="comment">#  meting_cdn: https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js # 引用 Meting.js 外部 CDN 地址 (默认不开启)</span></span><br></pre></td></tr></table></figure>

<h5 id="3-2-3-创建歌单页面"><a href="#3-2-3-创建歌单页面" class="headerlink" title="3.2.3 创建歌单页面"></a>3.2.3 创建歌单页面</h5><p><strong>新建页面</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new page playlist</span><br></pre></td></tr></table></figure>

<p>这时候在 &#x2F;source 文件夹下会生成一个 playlist 文件夹，修改 index.md：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% meting &quot;3796675695&quot; &quot;tencent&quot; &quot;playlist&quot; &quot;autoplay&quot; &quot;order:random&quot; &quot;mutex:false&quot; &quot;listmaxheight:340px&quot; &quot;preload:none&quot; &quot;theme:#228B22&quot;%&#125;</span><br></pre></td></tr></table></figure>

<p><strong>配置歌单 menu</strong></p>
<p>修改主题 _config.yml 文件，menu 选项添加：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">playlist:</span> <span class="string">/playlist/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-music</span></span><br></pre></td></tr></table></figure>

<p>图标选择：<a href="http://www.fontawesome.com.cn/faicons/">http://www.fontawesome.com.cn/faicons/</a></p>
<p><strong>汉化 menu</strong></p>
<p>修改 themes&#x2F;next&#x2F;languages&#x2F;zh-CN.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">首页</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">归档</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">分类</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">标签</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">关于</span></span><br><span class="line">  <span class="attr">playlist:</span> <span class="string">歌单</span></span><br><span class="line">  <span class="attr">search:</span> <span class="string">搜索</span></span><br><span class="line">  <span class="attr">schedule:</span> <span class="string">日程表</span></span><br><span class="line">  <span class="attr">sitemap:</span> <span class="string">站点地图</span></span><br><span class="line">  <span class="attr">commonweal:</span> <span class="string">公益</span> <span class="number">404</span></span><br></pre></td></tr></table></figure>

<h5 id="3-2-4-配置-pjax-防止页面切换时音乐暂停"><a href="#3-2-4-配置-pjax-防止页面切换时音乐暂停" class="headerlink" title="3.2.4 配置 pjax 防止页面切换时音乐暂停"></a>3.2.4 配置 pjax 防止页面切换时音乐暂停</h5><p>方法同 3.1.4，不过配置此选项后，点击博客 menu 中的歌单页面不显示播放器，必须刷新一下页面才显示；</p>
<h3 id="4-添加动画"><a href="#4-添加动画" class="headerlink" title="4. 添加动画"></a>4. 添加动画</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装hexo-helper-live2d 插件</span></span><br><span class="line">npm install --save hexo-helper-live2d</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载live2d模型</span></span><br><span class="line">npm install --save live2d-widget-model-haru</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可安装的模型，预览：https://huaji8.top/post/live2d-plugin-2.0/</span></span><br><span class="line">live2d-widget-model-chitose</span><br><span class="line">live2d-widget-model-epsilon2_1</span><br><span class="line">live2d-widget-model-gf</span><br><span class="line">live2d-widget-model-haru/01 (use npm install --save live2d-widget-model-haru) # 白色衣服</span><br><span class="line">live2d-widget-model-haru/02 (use npm install --save live2d-widget-model-haru) # 咖色衣服</span><br><span class="line">live2d-widget-model-haruto</span><br><span class="line">live2d-widget-model-hibiki</span><br><span class="line">live2d-widget-model-hijiki</span><br><span class="line">live2d-widget-model-izumi</span><br><span class="line">live2d-widget-model-koharu</span><br><span class="line">live2d-widget-model-miku</span><br><span class="line">live2d-widget-model-ni-j</span><br><span class="line">live2d-widget-model-nico</span><br><span class="line">live2d-widget-model-nietzsche</span><br><span class="line">live2d-widget-model-nipsilon</span><br><span class="line">live2d-widget-model-nito</span><br><span class="line">live2d-widget-model-shizuku</span><br><span class="line">live2d-widget-model-tororo</span><br><span class="line">live2d-widget-model-tsumiki</span><br><span class="line">live2d-widget-model-unitychan</span><br><span class="line">live2d-widget-model-wanko</span><br><span class="line">live2d-widget-model-z16</span><br></pre></td></tr></table></figure>

<p>配置 _config.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Live2D 右下角动画</span></span><br><span class="line"><span class="comment">## https://github.com/EYHN/hexo-helper-live2d</span></span><br><span class="line"><span class="attr">live2d:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">scriptFrom:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">pluginRootPath:</span> <span class="string">live2dw/</span></span><br><span class="line">  <span class="attr">pluginJsPath:</span> <span class="string">lib/</span></span><br><span class="line">  <span class="attr">pluginModelPath:</span> <span class="string">assets/</span></span><br><span class="line">  <span class="attr">tagMode:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">debug:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">model:</span></span><br><span class="line">    <span class="attr">use:</span> <span class="string">live2d-widget-model-haru</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">right</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">300</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">800</span></span><br><span class="line">  <span class="attr">mobile:</span></span><br><span class="line">    <span class="attr">show:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>如果是配置 haru 这个模型，有可能 hexo s 的时候有异常，提示缺少 assets，把 <em>node_modules&#x2F;live2d-widget-model-haru</em> 下 01 或 02 目录的 assets 目录拷贝到 <em>node_modules&#x2F;live2d-widget-model-haru</em> 目录下即可；</p>
<p>github 参考</p>
<p><a href="https://github.com/xiazeyu/live2d-widget-models">https://github.com/xiazeyu/live2d-widget-models</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title>SocketStudy</title>
    <url>/2019/04/18/Technical/SocketStudy/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="b3df85bc0f6a426ef45ddd1bf817e2500c063858a415a202a31dfb1a9da57d95">8a594f550020b2c4c53139d4c120877c670d47411eb78fc0c4abbfbe587bcfe2cb113c41bfd328c5065f6f2b39026d346a12ba8473dca30b30f240c25870a030489e615608fa9f6e76f98000ee177152e76d6a95c217e988b4d906c34b48bd06c561fecb61502376067f4deb2da17be1dcbae3e86c8e69f0e1e448dfd4040abf79f321fb32109ecc1343fcac9e185e6d4544677b561fc43351e23ea5518574b2139e272c97b707a613cb5296f5b3e348b5c8d88480ff605033b6598baa43b3225d7173fa010cb6f3d7f9524f0af91f4443071921465f954317130cef99ab094885d44414fa40e44effe17f7a3c69c8dbd50e8a7985ceed135d184c0f061dd66cdd5ce7c1470033e87b22bc8db3dfd0e4c4c5869bd579acfdfdad9db03e4d4fb5a835bdd8136c6d9044da70436e7175159c46fa3e2ce9ee95b3ad0ce43cdd2cad89c8960c04a31ecf2a6b6f33b1aee5b26df316645183b9dc2ec36a10bafbafc9cbc78d09a1620a2de8471afa01d21c597d738761080d231a51467d782ee06c743be04af6dd3724070af7467a97143b293beeb5629d72d52879f2526df3a79707ca8e4b3d2b660e8e6861d2627e57a85fc74297bd2de48f7e7dbbac15e9d6987949b7450f579a14bbf63c99af67a3ed4719d098b42b0a2d5a3754f831fa5f3d8190f22ac3aef18d934485033927c5e2aa0d649b418ceafccbcfe498c24aa199e32763cbd0ee7c06b0edf5d12de4a72ef348ffb93fe22b70156c1ea6e4a40a2caa285aa0ff443a9e3fc0b706f15165c4007a7eeab6f097e2b2d52e9225333afe3190914d5afc016a7a1339ea8234cca3e50be7bb1caa154f490be1ecf79122e24a92919d6966ac622f348b6b3109d62f61432edc6dc9cbea2f35ef748ec2500cd931145289ef49c9b7b6683e60f43b4e5fef3bb3c1463716b9317ed5bc9bbaa84477db415d656991558be93516b927f7c4916b29d31c79dda25c00940e7b5483a315c6978f9a9a0c761e869ea4b29715a97c413c55f78aa2143a43ed208a6eb7c1dd00ea21dc330bd874f5f071b3c9130a7f59bd3e3ecd6ebcc067a9a33a09ef7c07db812c451126072b7818ebaf05f114283d487f4ef5bc3177b4e4451a3d2b28d05940c2fbee32f1e2911d5208066e54c6b029229d3867666ed3c7729bdf6505d3cff027606f0aa8343cb077b43734035dbdc4b6a0cba323f534a171c7b4724b60b1b119e6e41a5202e698512118b128e9b15790416803634c7b0353d6e4f128a87ba97e04c7e8b2764a9998b94e1b64272f454093e3c7fe3c05f31cb3a710d67e76a17cb65fbdd167b491e51cc5e258139a7505da57f02b82ce8ffce27c87c5eb4961228ed31534334a1ef492a0de5c7722435837302cf867d01fc165b505f18254ab22097ed3ffb11d71eb18da065e14f830d07c59e1c36d6f6b87568fad3a446876985509a0ae04f74dd1999e8d945a8be9bebe6c3a69bd231d0b373c4e3f40914ea8a0263a7eedc4cb0a7dcb48607e6055eea7db417449a1bced45b5e7985b6f9a9a351e5a503dfa360a04dcbd824faee38b9323bb6e0f2df5282ef1ec394a496d5bb5957acc919b1e2fb91d9ba44f46b21ce60272702a8b7713600fed40be52f6fdaced39566672b32f513d96c84a8f7d6663a356bd06dd89e209794b8f7647ee8ee6538f7699ebabb00ee207f596b3081fb137b2a01e46df8a52ce2bc32607f2d3beead1b86351848076e4026fe4452243e88fd3d2c4ba4cc0d48cbc97f7fc7e2743a0ef7330b5a461bd57e3ab16d8c2db279234222ed65b737b4cde2fd0a725e90a83c328a62052344590a1b8a5b553986f696cdddfae6a2aecd49880485d16719c362346b726c2df888fa85c819e21b2d11afe34bdc4db7d98d6201b18050ca977cb59c1fc231afbd8e42afb6314161d1eceb808a8d07ca915539618dc6dfc66e22ec983a2f2b760479f727e82acaf2b9714a9a2e29ea27f0e5d8c7f278dfcf922678700f26012de83d455f14d33630dae670a33cc813e1d86d05cda2d81d541f5bb9861f88bdbf685b78b41fc4e19d78d4bf9dbff69fac5ac5c24258b2d8b4b6dc0ac5586c826df0da82d20bf1ebd2eccfdd692109f6417479ffad680f4fc04b5c0a41a5529bf59247950a3a57f916ffc3b7ef74458f00101cbb697cdb036ffdb670de96f6692c819fc43ef95f5141518debf9820ea39678c5ad03080e04d31a653f3ead71d74f8f6d7a62fcdc6729085d57c3cee2ef923b2403be78a9000dc677b99f3d74b8070a8d489966b40cc86230936bd23ffb07a0fe1533d5f45c8e165d545c02985c3564b3d8bc6be3a3c1a82c4af35343a17fa563ea186c832b234fcac913a8f1353f5e88413725a3d7dca31eba97bf56f57b237c293aac99acb0dfde69288e8bc6fc685200075</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Technical</category>
      </categories>
  </entry>
  <entry>
    <title>Java中的强引用、软引用、弱引用、虚引用</title>
    <url>/2019/02/27/Technical/Java-Strong-Soft-Weak-Phantom-reference/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="https://raw.githubusercontent.com/rangerzhou/ImageHosting/master/blog_resource/2020/SenXi.jpg"></p>
<blockquote>
<p>在 JDK 1.2 之后，Java 对引用的概念进行了扩充，将引用分为<strong>强引用（Strong Reference）</strong>、<strong>软引用（Soft Reference）</strong>、<strong>弱引用（Weak Reference）</strong>、<strong>虚引用（Phantom Reference）</strong>四种，引用强度：强引用 &gt; 软引用 &gt; 弱引用 &gt; 虚引用。</p>
</blockquote>
<span id="more"></span>

<h3 id="0-对象和引用"><a href="#0-对象和引用" class="headerlink" title="0. 对象和引用"></a>0. 对象和引用</h3><p>在 Java 中，有一组名词经常一起出现，就是“对象和对象引用”，这 2 个概念很容易混淆。</p>
<p><strong>何谓对象？</strong></p>
<p>在 Java 中有一句比较流行的话，叫做“万物皆对象”，这是 Java 语言设计之初的理念之一。要理解什么是对象，需要跟类一起结合起来理解。下面这段话引自《Java 编程思想》中的一段原话：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">按照通俗的说法，每个对象都是某个类（class）的一个实例（instance），这里，‘类’就是‘类型’的同义词。</span><br></pre></td></tr></table></figure>

<p>从这一句话就可以理解到对象的本质，简而言之，它就是类的实例，比如所有的人统称为“人类”，这里的“人类”就是一个类（物种的一种类型），而具体到每个人，比如张三这个人，它就是对象，就是“人类”的实例。</p>
<p><strong>何谓对象引用？</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">每种编程语言都有自己的数据处理方式。有些时候，程序员必须注意将要处理的数据是什么类型。你是直接操纵元素，还是用某种基于特殊语法的间接表示（例如 C/C++ 里的指针）来操作对象。所有这些在 Java 里都得到了简化，一切都被视为对象。因此，我们可采用一种统一的语法。尽管将一切都“看作”对象，但操纵的标识符实际是指向一个对象的“引用”（reference）。</span><br></pre></td></tr></table></figure>

<p>这段话来自于《Java 编程思想》，很显然，从这段话可以看出对象和对象引用不是一回事，是两个完全不同的概念。举个例子，我们通常会用下面这一行代码来创建一个对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>有人会说，这里的 person 是一个对象，是 Person 类的一个实例。</p>
<p>也有人会说，这里的 person 并不是真正的对象，而是指向所创建的对象的引用。</p>
<p>到底哪种说法是对的？我们先不急着纠结哪种说法是对的，再看两行代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Person person;</span><br><span class="line">person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>这两行代码实现的功能和上面的一行代码是完全一样的。大家都知道，<strong>在 Java 中 new 是用来在堆上创建对象用的</strong>，如果 person 是一个对象的话，那么第二行为何还要通过 new 来创建对象呢？由此可见，person 并不是所创建的对象，是什么？上面的一段话说的很清楚，“操纵的标识符实际是指向一个对象的引用”，也就是说 person 是一个引用，是指向一个可以指向 Person 类的对象的引用。真正创建对象的语句是右边的 new Person(“张三”)。</p>
<p>再看一个例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Person person;</span><br><span class="line">person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;李四&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>这里让 person 先指向了“张三”这个对象，然后又指向了“李四”这个对象。也就是说，Person person，这句话只是声明了一个 Person 类的引用，它可以指向任何 Person 类的实例。</p>
<p>也就是说，一个引用可以指向多个对象，而一个对象可不可以被多个引用所指呢？答案当然是可以的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">person1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line"><span class="type">Person</span> <span class="variable">person2</span> <span class="operator">=</span> person1;</span><br></pre></td></tr></table></figure>

<p>person1 和 person2 都指向了“张三”这个对象。</p>
<hr>
<p>在 JDK 1.2 之后，Java 对引用的概念进行了扩充，将引用分为强引用（Strong Reference）<strong>、</strong>软引用（Soft Reference）<strong>、</strong>弱引用（Weak Reference）<strong>、</strong>虚引用（Phantom Reference）4 种，这 4 种引用强度依次逐渐减弱，引用强度：强引用 &gt; 软引用 &gt; 弱引用 &gt; 虚引用。</p>
<h3 id="1-强引用-StrongReference"><a href="#1-强引用-StrongReference" class="headerlink" title="1. 强引用 StrongReference"></a>1. 强引用 StrongReference</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">强引用就是指在程序代码之中普遍存在的，类似“Object obj = new Object()” 这类的引用，只要强引用还存在，垃圾收集器永远不会回收掉被引用的对象。---《深入理解 Java 虚拟机》</span><br></pre></td></tr></table></figure>

<p>可将对象的引用显示的置为 null：<code>o = null;//帮助垃圾收集器回收此对象</code> 。</p>
<p>当内存空间不足，Java 虚拟机宁愿抛出 OutOfMemoryError 错误，使程序异常终止，也不会靠随意回收具有强引用的对象来解决内存不足的问题。</p>
<p>例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line"><span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>(a);</span><br></pre></td></tr></table></figure>

<p>上面两个强引用就这样产生了，并且 a 是对象 A 的引用，b 是对象 B 的引用，而且 B 还依赖于 A ，那么就认为 B 是可以到达 A 的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line"><span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>(a);</span><br><span class="line">a = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>

<p>当把 a &#x3D; null 时，这时 a 不再指向 A 的地址。按道理：当某个对象不再被其它对象引用的时候，会被 GC 回收，而 a &#x3D; null 时，A 对象不能被回收，B 还依赖于 A，造成了内存泄漏。</p>
<p>强引用最重要的就是它能够让引用变强，这就决定了它和 GC 的交互，如果一个对象通过强引用链接可到达，它就不会被 GC 回收。</p>
<h3 id="2-软引用-SoftReference"><a href="#2-软引用-SoftReference" class="headerlink" title="2. 软引用 SoftReference"></a>2. 软引用 SoftReference</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">软引用是用来描述一些还有用但并非必须的对象。对于软引用关联着的对象，在系统将要发生内存溢出异常之前，将会把这些对象列进回收范围之中进行第二次回收。如果这次回收还没有足够的内存，才会抛出内存溢出异常。在 JDK 1.2 之后，提供了 SoftReference 类来实现软引用。---《深入理解 Java 虚拟机》</span><br></pre></td></tr></table></figure>

<p><a href="https://developer.android.com/reference/java/lang/ref/SoftReference">SoftReference</a> 只有在内存不足的时候 JVM 才会回收该对象，当 JVM 中的内存不足的时候，垃圾回收器会释放那些只被软引用所指向的对象。如果全部释放完这些对象之后，内存还不足，才会抛出 OutOfMemoryError。</p>
<p>由于软引用可到达的对象比弱引用可达到的对象滞留内存时间会长一些，我们可以利用这个特性来做缓存，比如网页缓存、图片缓存等。</p>
<p><strong>浏览器网页缓存实例</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Browser prev = new Browser();					// 获取页面进行浏览</span><br><span class="line">SoftReference sr = new SoftReference(prev);		// 浏览完毕后置为软引用</span><br><span class="line">if(sr.get()!=null) &#123;</span><br><span class="line">    rev = (Browser)sr.get();					// 还没有被回收器回收，直接获取</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    prev = new Browser();						// 由于内存吃紧，所以回收了软引用的对象</span><br><span class="line">    sr = new SoftReference(prev);				// 重新构建</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>相比弱引用，它阻止垃圾回收器其指向的对象的能力强一些。如果一个对象是弱引用可到达，那么这个对象会被垃圾回收器接下来的回收周期销毁。但是如果是软引用可以到达，那么这个对象会停留在内存更时间上长一些，<strong>当内存不足时垃圾回收器才会回收这些软引用可到达的对象</strong>。</p>
<p>软引用可以和一个引用队列（ReferenceQueue）联合使用，如果软引用所引用的对象被垃圾回收器回收，JVM 就会把这个软引用加入到与之关联的引用队列中。</p>
<h3 id="3-弱引用-WeakReference"><a href="#3-弱引用-WeakReference" class="headerlink" title="3. 弱引用 WeakReference"></a>3. 弱引用 WeakReference</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">弱引用也是用来描述非必须对象的，但是它的强度比软引用更弱一些，被弱引用关联的对象只能生存到下一次垃圾收集发生之前。当垃圾收集器工作时，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。在 JDK 1.2 之后，提供了 WeakReference 类来实现弱引用。---《深入理解 Java 虚拟机》</span><br></pre></td></tr></table></figure>

<p><a href="https://developer.android.com/reference/java/lang/ref/WeakReference.html">WeakReference</a> 与软引用的区别在于：只具有弱引用的对象拥有更短暂的生命周期。在垃圾回收器线程扫描它所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。不过，由于垃圾回收器是一个优先级很低的线程，因此不一定会很快发现那些只具有弱引用的对象。</p>
<p>一旦弱引用对象开始返回 null，该弱引用指向的对象就被标记成了垃圾。而这个弱引用对象（非其指向的对象）就没有什么用了。弱引用可以和一个引用队列（ReferenceQueue）联合使用，如果弱引用所指向的对象被垃圾回收，Java 虚拟机就会把这个弱引用加入到与之关联的引用队列中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line"><span class="type">WeakReference</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WeakReference</span>(a);</span><br></pre></td></tr></table></figure>

<p>当 a &#x3D; null 时，这个时候 <strong>A 只被弱引用依赖</strong>，GC 会立刻回收 A 对象，这就是弱引用的好处，避免内存泄漏。</p>
<h3 id="4-虚引用-PhantomReference"><a href="#4-虚引用-PhantomReference" class="headerlink" title="4. 虚引用 PhantomReference"></a>4. 虚引用 PhantomReference</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">虚引用也称为幽灵引用或者幻影引用，它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的就是能在这个对象被收集器回收时收到一个系统通知。在 JDK 1.2 之后，提供了 PhantomReference 类来实现虚引用。---《深入理解 Java 虚拟机》</span><br></pre></td></tr></table></figure>

<p><a href="https://developer.android.com/reference/java/lang/ref/PhantomReference">PhantomReference</a> 与软引用，弱引用不同，虚引用指向的对象十分脆弱，我们不可以通过 get 方法来得到其指向的对象，get() 永远返回 null 。它的唯一作用就是当其指向的对象被回收之后，自己被加入到引用队列，用作记录该引用指向的对象已被销毁。</p>
<h3 id="5-引用队列-ReferenceQueue"><a href="#5-引用队列-ReferenceQueue" class="headerlink" title="5. 引用队列 ReferenceQueue"></a>5. 引用队列 ReferenceQueue</h3><p><a href="https://developer.android.com/reference/java/lang/ref/ReferenceQueue.html">ReferenceQueue</a> 配合 Reference 子类等使用，当引用对象所指向的内存空间被 GC 回收后，该引用对象则被追加到引用队列的末尾。</p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p>Java 到底是值传递还是引用传递？ <a href="https://www.zhihu.com/question/31203609">https://www.zhihu.com/question/31203609</a></p>
<p>理解 Java 中的弱引用 <a href="https://droidyue.com/blog/2014/10/12/understanding-weakreference-in-java/index.html">https://droidyue.com/blog/2014/10/12/understanding-weakreference-in-java/index.html</a></p>
<p>Java 中的强引用、软引用、弱引用、虚引用有什么用？ <a href="https://www.zhihu.com/question/37401125">https://www.zhihu.com/question/37401125</a></p>
<p>《深入理解 Java 虚拟机：JVM 高级特性与最佳实践》</p>
]]></content>
      <categories>
        <category>Technical</category>
      </categories>
  </entry>
  <entry>
    <title>Android9 Pie 新特性</title>
    <url>/2019/01/18/Android/Android_9_New_Features/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>2018 年 8 月 7 日凌晨，google 推出了 Android 9.0。</p>
</blockquote>
<span id="more"></span>

<h4 id="1-全面屏支持"><a href="#1-全面屏支持" class="headerlink" title="1. 全面屏支持"></a>1. 全面屏支持</h4><p>Android P 加入了对刘海屏的支持，谷歌称之为凹口屏幕（display with a cutout）。借助最新的提供的 DisplayCutout 类，开发者可以找到非功能区域的位置和形状，而非功能区域是不应显示功能的；使用 getDisplayCutout( )就可以获取这个区域的详细信息，未来刘海屏手机很有可能成为主流趋势，在前摄像头没有比较好的隐藏方案出现之前，这可能是提高屏占比的好方法。</p>
<h4 id="2-通知栏的多种通知"><a href="#2-通知栏的多种通知" class="headerlink" title="2. 通知栏的多种通知"></a>2. 通知栏的多种通知</h4><p>从牛轧糖开始，你就可以增加一个 action 以对消息或从通知直接进入文字的行为作出反应。而在 Android P 版本中，你还可以在消息中展示图像；新的 Notification.Person 类可以识别对话中的任务，包括他们的头像和 URI ；当用户关闭消息通知时，你的 app 可以获取由系统发出的 EXTRAREMOTEINPUT_DRAFT 。你可以使用这个 extra 值来在 app 中进行预填充。</p>
<h4 id="3-多摄像头的更多画面"><a href="#3-多摄像头的更多画面" class="headerlink" title="3. 多摄像头的更多画面"></a>3. 多摄像头的更多画面</h4><p>可以即时获取到两个或者更多的相机数据流，可以想象将有更多有趣的设计和实现出来</p>
<h4 id="4-GPS定位之外的WiFi定位"><a href="#4-GPS定位之外的WiFi定位" class="headerlink" title="4. GPS定位之外的WiFi定位"></a>4. GPS定位之外的WiFi定位</h4><p>Android P 增加了平台级支持 IEEE 802.11 mc Wi-Fi 协议(即 Wi-Fi Round-Trip-Time ,RTT), 从而让开发者可在 App 中使用室内定位。使用有硬件支持的 Android P 设备上，你的应用可以使用最新的 RTT API 以测量附近具有 RTT 功能的 Wi-Fi AP 。当然，前提是你的设备必须有定位功能而且你的 App 已经获取了 ACCESS_COARSE_LOCATION 及其以上的权限，可以想象将来更加精准的定位所带来的丰富的应用场景。</p>
<h4 id="5-网络和神经网络"><a href="#5-网络和神经网络" class="headerlink" title="5. 网络和神经网络"></a>5. 网络和神经网络</h4><p>在 Android P 上，任务可以声明它们估算的数据大小，信号预读取并且指定详细的网络需求–任务载体则可以报告网络是否拥挤或是否不计量。JobScheduler 便可按照网络状态管理任务。另一方面，神经网络 API 在 Android 8.1 引入，目的是加速 Android 设备上的机器学习。Android P 扩展并改进了这些 API , 为 9 个操作增加了支持，分别是 Pad, BatchToSpaceND, SpaceToBatchND, Transpose, Strided Slice, Mean, Div, Sub 和 Squeeze 。在 Android P 之后，设备将会对网络有更精细的调整：根据任务需求的数据大小和当前的网络环境。在收费网络里延迟一些网络要求，而在不计费的网络里可以通过消息预获取来得到更好的用户体验。神经网络 API 的更多操作则是让设备变得更智能、更聪明。智能的一种体现，节省流量和网络速度优化体验的一种好的改进。</p>
<h4 id="6-Material-Design"><a href="#6-Material-Design" class="headerlink" title="6. Material Design"></a>6. Material Design</h4><p>Material Design 迎来2.0时代，神经网络 Android 9.0 加入了大量的圆角设计，UI 方面的优化，感觉有些鸡肋，在现在各种模仿的设计趋势和各种定制化 UI 下，许多功能只是看看而已，用不到多少。</p>
<h4 id="7-Android-Dashboard"><a href="#7-Android-Dashboard" class="headerlink" title="7. Android Dashboard"></a>7. Android Dashboard</h4><p>用户可以看清楚自己在手机上都干了哪些事情，从而提醒自己是否过多的浪费了不必要的时间，比如后是否看电影看视频太多，是否玩游戏太多等等。并在必要的时候提醒你应当休息一下。对某一款应用进行时间限制，用户使用到一定时间之后就会提醒，甚至让图标变灰色，以提醒用户尽量少用这个 APP 。</p>
<h4 id="8-Wind-Down"><a href="#8-Wind-Down" class="headerlink" title="8. Wind Down"></a>8. Wind Down</h4><p>设置一个时间表来启用 DND (Do Not Distur,免打扰)模式，并在规定的时间内将屏幕变为灰色。</p>
<h4 id="9-App-timers（app计时器）"><a href="#9-App-timers（app计时器）" class="headerlink" title="9. App timers（app计时器）"></a>9. App timers（app计时器）</h4><p>允许您设置应用程序的使用限制。这样系统就会在你即将达到预设的使用极限时提醒你，防止你过度使用应用程序和手机。</p>
<h4 id="10-Adaptive-Battery"><a href="#10-Adaptive-Battery" class="headerlink" title="10. Adaptive Battery"></a>10. Adaptive Battery</h4><p>使用设备上的<code>机器学习</code>来了解用户的使用应用程序情况，并优先考虑最常用的应用程序和服务的电池电量，根据您的使用情况优化应用程序的后台进程，防止电量浪费流失。应用程序如果过度使用电量，系统还会提醒你，通过AI 可以改进电池的寿命，谷歌指出可以减少 30% 获取 <code>Wake Lock</code> 的情况，(Wake Lock 是一种锁的机制, 只要有人拿着这个锁,系统就无法进入休眠, 可以被用户态程序和内核获得） 。更智能的方式来适应电池和屏幕，从而整体改善续航能力。谷歌加入了 Adaptive Battery 功能，不过这个模式需要单独开启，在该模式下，程序不需要唤醒可以极大的降低资源占用，更关注用户最常用的服务和应用程序，也算是AI技术的应用之一。这样就可以最大限度的降低后台占用，从而提升电池续航能力。这是 Android 团队与 Google DeepMiind 团队合作开发的成果，不仅可以预测用户接下来几个小时内将使用的应用程序，而且还包括在当天用户何时会使用哪些应用程序。智能的一种应用。</p>
<h4 id="11-Shush"><a href="#11-Shush" class="headerlink" title="11. Shush"></a>11. Shush</h4><p>屏幕朝下时进入完全勿扰状态；除了能够阻挡电话和通知的打扰，还有视觉免打扰的功能，屏幕不会点亮，直到用户主动打开手机。有趣的是在这个模式下，如果用户将手机屏幕朝下放置，那么手机会自动调整为震动或者静音模式，只保留闹钟的声音。</p>
<h4 id="12-Actions和Slices"><a href="#12-Actions和Slices" class="headerlink" title="12. Actions和Slices"></a>12. Actions和Slices</h4><p>通过检测用户的行为，让系统作出对应的动作。如插入耳机孔自动播放音乐，搜索“打车”自动显示打车软件等。</p>
<h4 id="13-Security-and-privacy-features（安全和隐私特性）"><a href="#13-Security-and-privacy-features（安全和隐私特性）" class="headerlink" title="13. Security and privacy features（安全和隐私特性）"></a>13. Security and privacy features（安全和隐私特性）</h4><p>Android Pie 引入了大量新的安全和隐私特性，以帮助您保持数据的安全性。更新中引入的最有用的特性之一是，当你的麦克风、摄像头或传感器空闲时，应用程序将不再能够访问它们。怎么做到的，AI</p>
<h4 id="14-Manual-rotation（手动旋转）"><a href="#14-Manual-rotation（手动旋转）" class="headerlink" title="14. Manual rotation（手动旋转）"></a>14. Manual rotation（手动旋转）</h4><p>那些很烦的自动旋转现在可能成为过去。现在旋转屏幕也可以是手动的了，在导航栏上有一个指示器可供点击。</p>
<h4 id="15-New-gesture-navigation-新的手势导航栏"><a href="#15-New-gesture-navigation-新的手势导航栏" class="headerlink" title="15. New gesture navigation(新的手势导航栏)"></a>15. New gesture navigation(新的手势导航栏)</h4><p>在跟随时代潮流下，Google 一向推崇于 Cool 的东西，即将推出的谷歌像素或 Android One 系列的 Android 手机，Android 9.0 Pie 的特点是使用一种新的方式在设备中导航。传统的 back、home 和最近应用程序键都消失了。将在底部有一个新的 HomeBar 指示器——就像 iPhone X 一样，只是短了一点。应用程序按钮的职责被一个非常熟悉的手势取代了。在椭圆指示器上滑动可以作为滚动条，但是在新的导航条上仍然有一个返回键。向右滑动可以访问最近的应用，或者向上滑动可以访问你的应用抽屉和应用建议。它在 Pixel 手机上非常流畅。切换到以前的应用程序，在浏览窗口后，在底部添加一个滑块。 </p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>Ubuntu_Gerrit搭建</title>
    <url>/2019/01/08/Technical/Ubuntu_Gerrit_build/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>Gerrit</p>
</blockquote>
<span id="more"></span>



<p><a href="https://www.gerritcodereview.com/">Gerrit下载链接</a> ，下载后是一个 *.war 文件，使用 <code>java -jar Downloads/gerrit-2.16.2.war init -d gerrit</code> 安装 gerrit，安装前首先安装 mysql，并且新建 安装 gerrit 时使用到的数据库：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -u root –p</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">create database gerritdb;</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">grant all on gerritdb.* to <span class="string">&#x27;gerrituser&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified by <span class="string">&#x27;gerritpass&#x27;</span>;</span></span><br></pre></td></tr></table></figure>



<p>如下命令安装 Gerrit</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gerrit@aptivadp:~ $ java -jar Downloads/gerrit-2.16.2.war init -d gerrit</span><br><span class="line">Using secure store: com.google.gerrit.server.securestore.DefaultSecureStore</span><br><span class="line">[2019-01-08 16:39:04,277] [main] INFO  com.google.gerrit.server.config.GerritServerConfigProvider : No /home/gerrit/gerrit/etc/gerrit.config; assuming defaults</span><br><span class="line"></span><br><span class="line">*** Gerrit Code Review 2.16.2</span><br><span class="line">*** </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*** Git Repositories</span><br><span class="line">*** </span><br><span class="line"></span><br><span class="line">Location of Git repositories   [git]: </span><br><span class="line"></span><br><span class="line">*** SQL Database</span><br><span class="line">*** </span><br><span class="line"></span><br><span class="line">Database server type           [h2]: mysql</span><br><span class="line">Server hostname                [localhost]: </span><br><span class="line">Server port                    [(mysql default)]: </span><br><span class="line">Database name                  [reviewdb]: gerritdb #前面设置的数据库名</span><br><span class="line">Database username              [gerrit]: gerrituser #前面授权的用户</span><br><span class="line">gerrituser&#x27;s password          : #连续输入两次密码gerritpass</span><br><span class="line">              confirm password : </span><br><span class="line"></span><br><span class="line">*** Index</span><br><span class="line">*** </span><br><span class="line"></span><br><span class="line">Type                           [lucene/?]: </span><br><span class="line"></span><br><span class="line">*** User Authentication</span><br><span class="line">*** </span><br><span class="line"></span><br><span class="line">Authentication method          [openid/?]: http</span><br><span class="line">Get username from custom HTTP header [y/N]? </span><br><span class="line">SSO logout URL                 : </span><br><span class="line">Enable signed push support     [y/N]? </span><br><span class="line"></span><br><span class="line">*** Review Labels</span><br><span class="line">*** </span><br><span class="line"></span><br><span class="line">Install Verified label         [y/N]? </span><br><span class="line"></span><br><span class="line">*** Email Delivery</span><br><span class="line">*** </span><br><span class="line"></span><br><span class="line">SMTP server hostname           [localhost]: </span><br><span class="line">SMTP server port               [(default)]: </span><br><span class="line">SMTP encryption                [none/?]: </span><br><span class="line">SMTP username                  : </span><br><span class="line"></span><br><span class="line">*** Container Process</span><br><span class="line">*** </span><br><span class="line"></span><br><span class="line">Run as                         [gerrit]: gerrit</span><br><span class="line">Java runtime                   [/usr/lib/jvm/java-8-openjdk-amd64/jre]: </span><br><span class="line">Copy gerrit-2.16.2.war to gerrit/bin/gerrit.war [Y/n]? </span><br><span class="line">Copying gerrit-2.16.2.war to gerrit/bin/gerrit.war</span><br><span class="line"></span><br><span class="line">*** SSH Daemon</span><br><span class="line">*** </span><br><span class="line"></span><br><span class="line">Listen on address              [*]: </span><br><span class="line">Listen on port                 [29418]: </span><br><span class="line">Generating SSH host key ... rsa... ed25519... ecdsa 256... ecdsa 384... ecdsa 521... done</span><br><span class="line"></span><br><span class="line">*** HTTP Daemon</span><br><span class="line">*** </span><br><span class="line"></span><br><span class="line">Behind reverse proxy           [y/N]? y #选择y</span><br><span class="line">Proxy uses SSL (https://)      [y/N]? </span><br><span class="line">Subdirectory on proxy server   [/]: </span><br><span class="line">Listen on address              [*]: </span><br><span class="line">Listen on port                 [8081]: 8082</span><br><span class="line">Canonical URL                  [http://aptivadp.com/]: http://10.243.54.188 </span><br><span class="line"></span><br><span class="line">*** Cache</span><br><span class="line">*** </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*** Plugins</span><br><span class="line">*** </span><br><span class="line"></span><br><span class="line">Installing plugins.</span><br><span class="line">Install plugin codemirror-editor version v2.16.2 [y/N]? y</span><br><span class="line">Installed codemirror-editor v2.16.2</span><br><span class="line">Install plugin commit-message-length-validator version v2.16.2 [y/N]? y</span><br><span class="line">Installed commit-message-length-validator v2.16.2</span><br><span class="line">Install plugin download-commands version v2.16.2 [y/N]? y</span><br><span class="line">Installed download-commands v2.16.2</span><br><span class="line">Install plugin hooks version v2.16.2 [y/N]? y</span><br><span class="line">Installed hooks v2.16.2</span><br><span class="line">Install plugin replication version v2.16.2 [y/N]? y</span><br><span class="line">Installed replication v2.16.2</span><br><span class="line">Install plugin reviewnotes version v2.16.2 [y/N]? y</span><br><span class="line">Installed reviewnotes v2.16.2</span><br><span class="line">Install plugin singleusergroup version v2.16.2 [y/N]? y</span><br><span class="line">Installed singleusergroup v2.16.2</span><br><span class="line">Initializing plugins.</span><br><span class="line"></span><br><span class="line">Initialized /home/gerrit/gerrit</span><br><span class="line">Reindexing projects:    100% (2/2) with: reindex --site-path gerrit --threads 1 --index projects</span><br><span class="line">Reindexed 2 documents in projects index in 0.1s (32.8/s)</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gerrit@aptivadp:~ $ netstat -lntup</span><br><span class="line">gerrit@aptivadp:~ $ sudo kill 22693</span><br><span class="line">gerrit@aptivadp:~ $ sudo gerrit/bin/gerrit.sh restart</span><br><span class="line">Stopping Gerrit Code Review: OK</span><br><span class="line">Starting Gerrit Code Review: OK</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">touch</span> ./review_site/etc/passwd</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">htpasswd -b ./review_site/etc/passwd admin admin</span></span><br></pre></td></tr></table></figure>

<p><em>&#x2F;etc&#x2F;apache2&#x2F;sites-available&#x2F;000-default.conf</em> 配置如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;VirtualHost *:8888&gt;</span><br><span class="line">    ServerName 10.243.54.188</span><br><span class="line">    ProxyPreserveHost On</span><br><span class="line">    ProxyRequests Off</span><br><span class="line">    &lt;Proxy *&gt;</span><br><span class="line">        Order deny,allow</span><br><span class="line">        Allow from all</span><br><span class="line">    &lt;/Proxy&gt;</span><br><span class="line">    &lt;Location /&gt;</span><br><span class="line">        AuthType Basic</span><br><span class="line">        AuthName &quot;Gerrit Code Review&quot;</span><br><span class="line">        Require valid-user</span><br><span class="line">        AuthUserFile /home/gerrit/gerrit/etc/passwd</span><br><span class="line">    &lt;/Location&gt;</span><br><span class="line">    ProxyPass / http://10.243.54.188:8088/</span><br><span class="line">    proxyPassReverse / http://127.0.0.1:8088/</span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如上是参考网上其他人的配置，在 Gerrit官网 也给出了相关文档：<a href="https://gerrit-documentation.storage.googleapis.com/Documentation/2.16.2/config-reverseproxy.html">https://gerrit-documentation.storage.googleapis.com/Documentation/2.16.2/config-reverseproxy.html</a> ，参考配置如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;VirtualHost *&gt;</span><br><span class="line">    ServerName 10.243.54.188</span><br><span class="line"></span><br><span class="line">    ProxyRequests Off</span><br><span class="line">    ProxyVia Off</span><br><span class="line">    ProxyPreserveHost On</span><br><span class="line"></span><br><span class="line">    &lt;Proxy *&gt;</span><br><span class="line">        # Order deny,allow</span><br><span class="line">        # Allow from all</span><br><span class="line">        # 在 Apache &gt;= 2.4的版本上可以用下面这句代替上面两句</span><br><span class="line">        # Use following line instead of the previous two on Apache &gt;= 2.4</span><br><span class="line">        Require all granted</span><br><span class="line">    &lt;/Proxy&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Location /&gt;</span><br><span class="line">        AuthType Basic</span><br><span class="line">        AuthName &quot;Gerrit Code Review&quot;</span><br><span class="line">        Require valid-user</span><br><span class="line">        AuthUserFile /home/gerrit/gerrit/etc/passwd</span><br><span class="line">    &lt;/Location&gt;</span><br><span class="line"></span><br><span class="line">    #ProxyPass / http://10.243.54.188:8088/</span><br><span class="line">    #proxyPassReverse / http://127.0.0.1:8088/</span><br><span class="line">    AllowEncodedSlashes On</span><br><span class="line">    ProxyPass / http://127.0.0.1:8088/ nocanon</span><br><span class="line">    # The two options &#x27;AllowEncodedSlashes On&#x27; and &#x27;ProxyPass .. nocanon&#x27; are required since Gerrit 2.6.</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>

<p>同时需要配置 <em>&#x2F;etc&#x2F;apache2&#x2F;ports.conf</em> ，添加所需的端口：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">If you just change the port or add more ports here, you will likely also</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">have to change the VirtualHost statement <span class="keyword">in</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/etc/apache2/sites-enabled/000-default.conf</span></span><br><span class="line"></span><br><span class="line">Listen 80</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如下添加 2 个端口，在浏览器中输入</span></span><br><span class="line">Listen 8888</span><br><span class="line">Listen 9999</span><br><span class="line"></span><br><span class="line">&lt;IfModule ssl_module&gt;</span><br><span class="line">	Listen 443</span><br><span class="line">&lt;/IfModule&gt;</span><br><span class="line"></span><br><span class="line">&lt;IfModule mod_gnutls.c&gt;</span><br><span class="line">	Listen 443</span><br><span class="line">&lt;/IfModule&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">vim: syntax=apache ts=4 sw=4 sts=4 sr noet</span></span><br></pre></td></tr></table></figure>

<p>配置了 2 个端口 8888 和 9999，在浏览器中输入 <a href="http://10.243.54.188:8888/">http://10.243.54.188:8888/</a> 或者 <a href="http://10.243.54.188:9999/">http://10.243.54.188:9999/</a> 都是可以访问的。</p>
<p><em>&#x2F;home&#x2F;gerrit&#x2F;gerrit&#x2F;etc&#x2F;gerrit.config</em></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[gerrit]</span><br><span class="line">	basePath = git</span><br><span class="line">	serverId = f5a6836d-abf5-47e3-b79e-1c24f6b8700a</span><br><span class="line">	canonicalWebUrl = http://10.243.54.188:8088</span><br><span class="line">[database]</span><br><span class="line">	type = mysql</span><br><span class="line">	hostname = localhost</span><br><span class="line">	database = gerritdb</span><br><span class="line">	username = gerrituser</span><br><span class="line">[container]</span><br><span class="line">	javaOptions = &quot;-Dflogger.backend_factory=com.google.common.flogger.backend.log4j.Log4jBackendFactory#getInstance&quot;</span><br><span class="line">	javaOptions = &quot;-Dflogger.logging_context=com.google.gerrit.server.logging.LoggingContext#getInstance&quot;</span><br><span class="line">	user = gerrit</span><br><span class="line">	javaHome = /usr/lib/jvm/java-8-openjdk-amd64/jre</span><br><span class="line">[index]</span><br><span class="line">	type = LUCENE</span><br><span class="line">[auth]</span><br><span class="line">	type = HTTP</span><br><span class="line">[receive]</span><br><span class="line">	enableSignedPush = false</span><br><span class="line">[sendemail]</span><br><span class="line">	smtpServer = localhost</span><br><span class="line">[sshd]</span><br><span class="line">	listenAddress = *:29418</span><br><span class="line">[httpd]</span><br><span class="line">	listenUrl = proxy-http://*:8088/</span><br><span class="line">[cache]</span><br><span class="line">	directory = cache</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>gerrit.config 中的 <strong>httpd.listenUrl</strong> 的端口号和 ports.conf 中 <strong>Listen</strong> 的端口号不能一样，否则 gerrit 或者 apache 有一个无法启动。</p>
<p><strong>设置第一个 Gerrit 用户名和密码</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">touch</span> ./review_site/etc/passwd</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">htpasswd -b ./review_site/etc/passwd admin admin</span></span><br><span class="line">Adding password for user admin</span><br></pre></td></tr></table></figure>

<p>后续再添加 Gerrit 用户可使用 <code>htpasswd -b ./review_site/etc/passwd UserName PassWord</code> 。</p>
<p>查看端口状态：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -lntup</span><br><span class="line">sudo lsof -i -P</span><br></pre></td></tr></table></figure>

<p>配置 &#x2F;etc&#x2F;hosts ，以别名访问：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ranger@zr:~/work/renesas_v3 $ sudo cat /etc/hosts</span><br><span class="line">127.0.0.1	localhost</span><br><span class="line">127.0.1.1	zr</span><br><span class="line">10.243.54.188   gerrit.aptivadp.com</span><br><span class="line">... ...</span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gerrit@aptivadp:~/work $ ssh -p 29418 -i ~/.ssh/id_rsa 10.243.54.188 -l admin</span><br><span class="line"></span><br><span class="line">  ****    Welcome to Gerrit Code Review    ****</span><br><span class="line"></span><br><span class="line">  Hi admin, you have successfully connected over SSH.</span><br><span class="line"></span><br><span class="line">  Unfortunately, interactive shells are disabled.</span><br><span class="line">  To clone a hosted Git repository, use:</span><br><span class="line"></span><br><span class="line">  git clone ssh://admin@10.243.54.188:29418/REPOSITORY_NAME.git</span><br><span class="line"></span><br><span class="line">Connection to 10.243.54.188 closed by remote host.</span><br><span class="line">Connection to 10.243.54.188 closed.</span><br><span class="line"></span><br><span class="line">gerrit@aptivadp:~/work $ ssh -p 29418 admin@10.243.54.188</span><br><span class="line"></span><br><span class="line">  ****    Welcome to Gerrit Code Review    ****</span><br><span class="line"></span><br><span class="line">  Hi admin, you have successfully connected over SSH.</span><br><span class="line"></span><br><span class="line">  Unfortunately, interactive shells are disabled.</span><br><span class="line">  To clone a hosted Git repository, use:</span><br><span class="line"></span><br><span class="line">  git clone ssh://admin@10.243.54.188:29418/REPOSITORY_NAME.git</span><br><span class="line"></span><br><span class="line">Connection to 10.243.54.188 closed by remote host.</span><br><span class="line">Connection to 10.243.54.188 closed.</span><br></pre></td></tr></table></figure>

<p>配置~&#x2F;.ssh&#x2F;config文件来为ssh连接设置别名:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Host gerrit</span><br><span class="line">     User admin</span><br><span class="line">     Port 29418</span><br><span class="line">     HostName 10.243.54.188</span><br><span class="line">     IdentityFile ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>

<p>使用别名连接 ssh：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gerrit@aptivadp:~/work $ ssh gerrit</span><br><span class="line"></span><br><span class="line">  ****    Welcome to Gerrit Code Review    ****</span><br><span class="line"></span><br><span class="line">  Hi admin, you have successfully connected over SSH.</span><br><span class="line"></span><br><span class="line">  Unfortunately, interactive shells are disabled.</span><br><span class="line">  To clone a hosted Git repository, use:</span><br><span class="line"></span><br><span class="line">  git clone ssh://admin@10.243.54.188:29418/REPOSITORY_NAME.git</span><br><span class="line"></span><br><span class="line">Connection to 10.243.54.188 closed by remote host.</span><br><span class="line">Connection to 10.243.54.188 closed.</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>创建项目，创建后会在 <em>&#x2F;gerrit&#x2F;gerrit&#x2F;git</em>  下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gerrit@aptivadp:~ $ ssh -p 29418 admin@10.243.54.188 gerrit create-project Demo-project</span><br></pre></td></tr></table></figure>



<p>配置自动启动，首先查看 gerrit.sh</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> gerit/bin/gerrit.sh | <span class="built_in">head</span> -n 50</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Configuration files:</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># /etc/default/gerritcodereview</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  If it exists, sourced at the start of this script. It may perform any</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  sequence of shell commands, like setting relevant environment variables.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># The files will be checked for existence before being sourced.</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Configuration variables.  These may be <span class="built_in">set</span> <span class="keyword">in</span> /etc/default/gerritcodereview.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># GERRIT_SITE</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  Path of the Gerrit site to run.  <span class="variable">$GERRIT_SITE</span>/etc/gerrit.config</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  will be used to configure the process.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># GERRIT_WAR</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  Location of the gerrit.war download that we will execute.  Defaults to</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  container.war property <span class="keyword">in</span> <span class="variable">$GERRIT_SITE</span>/etc/gerrit.config.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># NO_START</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  If <span class="built_in">set</span> to <span class="string">&quot;1&quot;</span> disables Gerrit from starting.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从以上注释得知 /etc/default/gerritcodereview 为配置文件，如下配置开机启动</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo <span class="built_in">ln</span> -snf /home/gerrit/gerrit/bin/gerrit.sh /etc/init.d/gerrit.sh</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sduo <span class="built_in">ln</span> -snf /etc/init.d/gerrit.sh /etc/rc2.d/S90gerrit</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sduo <span class="built_in">ln</span> -snf /etc/init.d/gerrit.sh /etc/rc3.d/S90gerrit</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">自动启动脚本 /etc/init.d/gerrit.sh 需要通过 /etc/default/gerritcodereview 文件来提供一些配置</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo <span class="built_in">cat</span> /etc/default/gerritcodereview</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">内容如下</span></span><br><span class="line">GERRIT_SITE=/home/gerrit/gerrit</span><br><span class="line">NO_START=0 # 值为 1 时取消开机启动</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p>Reference: </p>
<p><a href="https://scm002.iteye.com/blog/2293641">https://scm002.iteye.com/blog/2293641</a></p>
<p><a href="https://www.zxblinux.com/archives/332">https://www.zxblinux.com/archives/332</a></p>
<p><a href="https://www.gerritcodereview.com/">https://www.gerritcodereview.com/</a></p>
<p><a href="http://www.hovercool.com/en/Gerrit%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA">http://www.hovercool.com/en/Gerrit%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA</a></p>
<p><a href="http://www.mywiki.cn/hovercool/index.php/Gerrit%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA">http://www.mywiki.cn/hovercool/index.php/Gerrit%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA</a></p>
<p>ssh连接gerrit</p>
<p><a href="http://www.gerrit.com.cn/1571.html">http://www.gerrit.com.cn/1571.html</a></p>
]]></content>
      <categories>
        <category>Technical</category>
      </categories>
      <tags>
        <tag>Gerrit</tag>
      </tags>
  </entry>
  <entry>
    <title>BigDataProject_Guide</title>
    <url>/2018/12/14/Work/BigDataProject_Guide/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>BigData Project Guide</p>
</blockquote>
<span id="more"></span>

<h3 id="1-Android"><a href="#1-Android" class="headerlink" title="1. Android"></a>1. Android</h3><h4 id="1-1-Compile-c-ares"><a href="#1-1-Compile-c-ares" class="headerlink" title="1.1 Compile c-ares"></a>1.1 Compile c-ares</h4><p><a href="https://c-ares.haxx.se/">点击此处下载</a> ，<a href="https://github.com/c-ares/c-ares">官方 Github</a> ，关于 <strong>c-ares</strong> 的介绍可查看 <strong>README.MD</strong> 文件，此处示例版本为 <strong>c-ares-1.15.0</strong> 。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">放入 /external/bigdata/ 目录下，添加 Android.mk 和 ares_config.h</span></span><br></pre></td></tr></table></figure>



<p>Android.mk</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">LOCAL_PATH := <span class="variable">$(<span class="built_in">call</span> my-<span class="built_in">dir</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(LOCAL_PATH)</span>/Makefile.inc</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(CLEAR_VARS)</span></span><br><span class="line">LOCAL_MODULE := libcares</span><br><span class="line">LOCAL_CFLAGS += -DHAVE_CONFIG_H</span><br><span class="line">LOCAL_EXPORT_C_INCLUDE_DIRS := <span class="variable">$(LOCAL_PATH)</span></span><br><span class="line">LOCAL_SRC_FILES := <span class="variable">$(CSOURCES)</span></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(BUILD_SHARED_LIBRARY)</span></span><br></pre></td></tr></table></figure>

<p>编译 <strong>c-ares</strong> 模块生成 <strong>libcares.so</strong> ，此文件用于编译下文的 <strong>data_service</strong> 和 <strong>mosquitto</strong> ：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">mmm external/bigdata/c-ares</span></span><br></pre></td></tr></table></figure>



<h4 id="1-2-Compile-mosquitto"><a href="#1-2-Compile-mosquitto" class="headerlink" title="1.2 Compile mosquitto"></a>1.2 Compile mosquitto</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ll mosquitto/</span></span><br><span class="line">total 1904</span><br><span class="line">drwxr-xr-x 14 ranger ranger    4096 Dec 13 14:02 ./</span><br><span class="line">drwxr-xr-x  6 ranger ranger    4096 Dec 18 09:57 ../</span><br><span class="line">-rw-r--r--  1 ranger ranger      83 Dec 13 14:02 Android.mk</span><br><span class="line">-rw-r--r--  1 ranger ranger    2745 Dec 13 14:02 CMakeLists.txt</span><br><span class="line">-rw-r--r--  1 ranger ranger    3941 Dec 13 14:02 CONTRIBUTING.md</span><br><span class="line">-rw-r--r--  1 ranger ranger   64076 Dec 13 14:02 ChangeLog.txt</span><br><span class="line">-rw-r--r--  1 ranger ranger     155 Dec 13 14:02 LICENSE.txt</span><br><span class="line">-rw-r--r--  1 ranger ranger    2593 Dec 13 14:02 Makefile</span><br><span class="line">-rw-r--r--  1 ranger ranger     637 Dec 13 14:02 README.txt</span><br><span class="line">-rw-r--r--  1 ranger ranger    2026 Dec 13 14:02 about.html</span><br><span class="line">-rw-r--r--  1 ranger ranger     230 Dec 13 14:02 aclfile.example</span><br><span class="line">drwxr-xr-x  5 ranger ranger    4096 Dec 13 14:02 certs/</span><br><span class="line">drwxr-xr-x  2 ranger ranger    4096 Dec 13 17:00 client/</span><br><span class="line">-rw-r--r--  1 ranger ranger     873 Dec 13 14:02 compiling.txt</span><br><span class="line">-rw-r--r--  1 ranger ranger     782 Dec 13 14:02 config.h</span><br><span class="line">-rw-r--r--  1 ranger ranger    7889 Dec 13 14:02 config.mk</span><br><span class="line">-rw-r--r--  1 ranger ranger   36920 Dec 13 14:02 dash2-mosquitto.conf</span><br><span class="line">-rw-r--r--  1 ranger ranger    1569 Dec 13 14:02 edl-v10</span><br><span class="line">-rw-r--r--  1 ranger ranger   11695 Dec 13 14:02 epl-v10</span><br><span class="line">-rw-r--r--  1 ranger ranger   13127 Dec 13 14:02 host-build-output.txt</span><br><span class="line">drwxr-xr-x  2 ranger ranger    4096 Dec 13 14:02 installer/</span><br><span class="line">drwxr-xr-x  3 ranger ranger    4096 Dec 13 17:00 lib/</span><br><span class="line">drwxr-xr-x  3 ranger ranger    4096 Dec 13 14:02 logo/</span><br><span class="line">-rw-r--r--  1 ranger ranger   37117 Dec 13 14:02 m2.conf</span><br><span class="line">drwxr-xr-x  2 ranger ranger    4096 Dec 13 14:02 man/</span><br><span class="line">drwxr-xr-x  3 ranger ranger    4096 Dec 13 14:02 misc/</span><br><span class="line">-rw-r--r--  1 ranger ranger   37068 Dec 13 14:02 mosq-test.conf</span><br><span class="line">-rw-r--r--  1 ranger ranger   37049 Dec 13 14:02 mosquitto.conf</span><br><span class="line">-rw-r--r--  1 ranger ranger   36999 Dec 13 14:02 mrb-mosquitto.conf</span><br><span class="line">-rw-r--r--  1 ranger ranger   36920 Dec 13 14:02 nexus-mosquitto.conf</span><br><span class="line">-rw-r--r--  1 ranger ranger    9230 Dec 13 14:02 notice.html</span><br><span class="line">-rw-r--r--  1 ranger ranger      23 Dec 13 14:02 pskfile.example</span><br><span class="line">-rw-r--r--  1 ranger ranger     355 Dec 13 14:02 pwfile.example</span><br><span class="line">-rw-r--r--  1 ranger ranger     696 Dec 13 14:02 qnx-env-setup</span><br><span class="line">-rw-r--r--  1 ranger ranger    2096 Dec 13 14:02 readme-windows.txt</span><br><span class="line">-rw-r--r--  1 ranger ranger    3026 Dec 13 14:02 readme.md</span><br><span class="line">drwxr-xr-x  2 ranger ranger    4096 Dec 13 14:02 security/</span><br><span class="line">drwxr-xr-x  5 ranger ranger    4096 Dec 13 14:02 service/</span><br><span class="line">drwxr-xr-x  3 ranger ranger    4096 Dec 13 17:01 src/</span><br><span class="line">-rw-r--r--  1 ranger ranger     268 Dec 13 14:02 tcu-env-setup</span><br><span class="line">drwxr-xr-x  5 ranger ranger    4096 Dec 13 14:02 test/</span><br><span class="line">drwxr-xr-x  2 ranger ranger    4096 Dec 13 14:02 tls/</span><br><span class="line">-rw-r--r--  1 ranger ranger 1460649 Dec 13 14:02 understand-mosquitto.udb</span><br></pre></td></tr></table></figure>







<h4 id="1-3-Compile-data-service"><a href="#1-3-Compile-data-service" class="headerlink" title="1.3 Compile data_service"></a>1.3 Compile data_service</h4><p>此模块编译需要 <em>external&#x2F;bigdata&#x2F;protobuf</em> 同时存在，data_service 依赖 libpbdata 。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ll data_service/</span></span><br><span class="line">total 208</span><br><span class="line">drwxr-xr-x 3 ranger ranger  4096 Dec 13 18:08 ./</span><br><span class="line">drwxr-xr-x 6 ranger ranger  4096 Dec 18 09:57 ../</span><br><span class="line">-rw-r--r-- 1 ranger ranger   905 Dec 13 14:02 Android.mk</span><br><span class="line">-rw-r--r-- 1 ranger ranger  9698 Dec 13 15:24 android_data_retriever.cpp</span><br><span class="line">-rw-r--r-- 1 ranger ranger   852 Dec 13 14:02 android_data_retriever.h</span><br><span class="line">-rw-r--r-- 1 ranger ranger  7831 Dec 13 14:02 data_binder.cpp</span><br><span class="line">-rw-r--r-- 1 ranger ranger    93 Dec 13 14:02 data_binder.h</span><br><span class="line">-rw-r--r-- 1 ranger ranger   528 Dec 13 14:02 data_pool.h</span><br><span class="line">-rw-r--r-- 1 ranger ranger  1931 Dec 13 14:02 data_report.cpp</span><br><span class="line">-rw-r--r-- 1 ranger ranger  1506 Dec 13 14:02 data_report.h</span><br><span class="line">-rw-r--r-- 1 ranger ranger 11098 Dec 13 14:02 data_retriever.cpp</span><br><span class="line">-rw-r--r-- 1 ranger ranger  2408 Dec 13 14:02 data_retriever.h</span><br><span class="line">-rw-r--r-- 1 ranger ranger   478 Dec 13 14:02 data_service.cpp</span><br><span class="line">drwxr-xr-x 2 ranger ranger  4096 Dec 13 14:02 data_svc/</span><br><span class="line">-rw-r--r-- 1 ranger ranger    89 Dec 13 14:02 data_svc.rc</span><br><span class="line">-rw-r--r-- 1 ranger ranger 11155 Dec 13 14:02 data_types.cpp</span><br><span class="line">-rw-r--r-- 1 ranger ranger  6086 Dec 13 14:02 data_types.h</span><br><span class="line">-rw-r--r-- 1 ranger ranger  7979 Dec 13 15:37 error_detector.cpp</span><br><span class="line">-rw-r--r-- 1 ranger ranger   172 Dec 13 14:02 error_detector.h</span><br><span class="line">-rw-r--r-- 1 ranger ranger  9436 Dec 13 14:02 event_data.cpp</span><br><span class="line">-rw-r--r-- 1 ranger ranger   231 Dec 13 14:02 event_data.h</span><br><span class="line">-rw-r--r-- 1 ranger ranger  5898 Dec 13 14:02 idc_client_base_api.h</span><br><span class="line">-rw-r--r-- 1 ranger ranger  8892 Dec 13 18:08 linux_data_retriever.cpp</span><br><span class="line">-rw-r--r-- 1 ranger ranger   901 Dec 13 14:02 linux_data_retriever.h</span><br><span class="line">-rw-r--r-- 1 ranger ranger   937 Dec 13 14:02 mqtt_data_publisher.cpp</span><br><span class="line">-rw-r--r-- 1 ranger ranger   602 Dec 13 14:02 mqtt_data_publisher.h</span><br><span class="line">-rw-r--r-- 1 ranger ranger 13787 Dec 13 14:02 mqtt_data_report.cpp</span><br><span class="line">-rw-r--r-- 1 ranger ranger  1453 Dec 13 14:02 mqtt_data_report.h</span><br><span class="line">-rw-r--r-- 1 ranger ranger  7891 Dec 13 14:02 usb_writer.cpp</span><br><span class="line">-rw-r--r-- 1 ranger ranger   198 Dec 13 14:02 usb_writer.h</span><br><span class="line">-rw-r--r-- 1 ranger ranger    39 Dec 13 14:02 usb_writer_cfg.h</span><br><span class="line">-rw-r--r-- 1 ranger ranger  7563 Dec 13 14:02 utils.cpp</span><br><span class="line">-rw-r--r-- 1 ranger ranger  1659 Dec 13 14:02 utils.h</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ll protobuf/</span></span><br><span class="line">total 20</span><br><span class="line">drwxr-xr-x 2 ranger ranger 4096 Dec 13 17:23 ./</span><br><span class="line">drwxr-xr-x 6 ranger ranger 4096 Dec 18 09:57 ../</span><br><span class="line">-rw-r--r-- 1 ranger ranger  573 Dec 13 14:02 Android.mk</span><br><span class="line">-rw-r--r-- 1 ranger ranger    0 Dec 13 14:02 README.txt</span><br><span class="line">-rw-r--r-- 1 ranger ranger 6350 Dec 13 14:02 big_data.proto</span><br></pre></td></tr></table></figure>

<p><strong>Note:</strong></p>
<p>a. <strong>linux_data_retriever.cpp</strong> and <strong>android_data_retriever.cpp</strong></p>
<p>Add “namespace android{}” before “using namespace android”</p>
<p>b. <strong>error_detector.cpp</strong></p>
<p>Add “static_cast<int>()” at line 102</p>
<h3 id="2-Ubuntu"><a href="#2-Ubuntu" class="headerlink" title="2. Ubuntu"></a>2. Ubuntu</h3><p>此处示例版本为 <strong>mosquitto-1.5.5</strong> 。</p>
<p><strong>Download:</strong></p>
<p><a href="https://github.com/eclipse/mosquitto">https://github.com/eclipse/mosquitto</a>    — Build Dependencies</p>
<p><a href="https://mosquitto.org/download/">https://mosquitto.org/download/</a></p>
<h4 id="2-1-Install-mosquitto"><a href="#2-1-Install-mosquitto" class="headerlink" title="2.1 Install mosquitto"></a>2.1 Install mosquitto</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo make install</span></span><br></pre></td></tr></table></figure>

<p><strong>Note:</strong></p>
<p>$ make WITH_SRV&#x3D;no WITH_UUID&#x3D;no</p>
<p>$ sudo make install</p>
<h3 id="Build-Dependencies"><a href="#Build-Dependencies" class="headerlink" title="Build Dependencies"></a>Build Dependencies</h3><ul>
<li>c-ares (libc-ares-dev on Debian based systems) - disable with <code>make WITH_SRV=no</code></li>
<li>libuuid (uuid-dev) - disable with <code>make WITH_UUID=no</code></li>
<li>libwebsockets (libwebsockets-dev) - enable with <code>make WITH_WEBSOCKETS=yes</code></li>
<li>openssl (libssl-dev on Debian based systems) - disable with <code>make WITH_TLS=no</code></li>
<li>xsltproc (xsltproc and docbook-xsl on Debian based systems) - only needed when building from git sources - disable with <code>make WITH_DOCS=no</code></li>
</ul>
<p>安装完成后检查是否生成如下文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ll /usr/local/bin/mosquitto*</span></span><br><span class="line">-rwxr-xr-x 1 root root  53016 Dec 17 19:08 /usr/local/bin/mosquitto_passwd*</span><br><span class="line">-rwxr-xr-x 1 root root 117312 Dec 17 19:08 /usr/local/bin/mosquitto_pub*</span><br><span class="line">-rwxr-xr-x 1 root root 131000 Dec 17 19:08 /usr/local/bin/mosquitto_sub*</span><br><span class="line"></span><br><span class="line">ll /usr/local/sbin/mosquitto*</span><br><span class="line">-rwxr-xr-x 1 root root 1017600 Dec 17 19:08 /usr/local/sbin/mosquitto*</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ll /usr/local/lib/*mosq*</span></span><br><span class="line">lrwxrwxrwx 1 root root     17 Dec 17 19:08 /usr/local/lib/libmosquitto.so -&gt; libmosquitto.so.1*</span><br><span class="line">-rwxr-xr-x 1 root root 403376 Dec 17 19:08 /usr/local/lib/libmosquitto.so.1*</span><br><span class="line">lrwxrwxrwx 1 root root     19 Dec 17 19:08 /usr/local/lib/libmosquittopp.so -&gt; libmosquittopp.so.1*</span><br><span class="line">-rwxr-xr-x 1 root root  64912 Dec 17 19:08 /usr/local/lib/libmosquittopp.so.1*</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">旧版本 /usr/local/lib/ 下有如下6个文件：</span></span><br><span class="line">ll /usr/local/lib/*mos*</span><br><span class="line">-rw-r--r-- 1 root root 1269118 Dec 13 17:02 /usr/local/lib/libmosquitto.a</span><br><span class="line">lrwxrwxrwx 1 root root      17 Dec 13 17:02 /usr/local/lib/libmosquitto.so -&gt; libmosquitto.so.1*</span><br><span class="line">-rwxr-xr-x 1 root root   64392 Dec 13 17:02 /usr/local/lib/libmosquitto.so.1*</span><br><span class="line">-rw-r--r-- 1 root root   80912 Dec 13 17:02 /usr/local/lib/libmosquittopp.a</span><br><span class="line">lrwxrwxrwx 1 root root      19 Dec 13 17:02 /usr/local/lib/libmosquittopp.so -&gt; libmosquittopp.so.1*</span><br><span class="line">-rwxr-xr-x 1 root root   18864 Dec 13 17:02 /usr/local/lib/libmosquittopp.so.1*</span><br></pre></td></tr></table></figure>

<p>事实证明 <strong>libmosquitto.a</strong> 和 <strong>libmosquittopp.a</strong> 在编译 <strong>data_receiver</strong> 时会用到，所以还是用旧版本 <strong>mosquitto</strong> 编译。</p>
<h4 id="2-2-Install-protobuf"><a href="#2-2-Install-protobuf" class="headerlink" title="2.2 Install protobuf"></a>2.2 Install protobuf</h4><p><a href="https://developers.google.com/protocol-buffers/docs/downloads">https://developers.google.com/protocol-buffers/docs/downloads</a></p>
<p>报错：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">autogen.sh:31:# The absence of a m4 directory in googletest causes autoreconf to fail when</span><br><span class="line">autogen.sh:37:autoreconf -f -i -Wall,no-obsolete</span><br></pre></td></tr></table></figure>

<p>原因是 linux 缺少 autoreconf 工具，安装后即可解决：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install autoconf automake libtool</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./autogen.sh</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./configure –disable-shared</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo make install</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo ldconfig</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">protoc --version</span> </span><br><span class="line">libprotoc 3.6.1</span><br></pre></td></tr></table></figure>



<h4 id="2-3-Install-LAMP-Linux-Apache-MySQL-PHP-Server"><a href="#2-3-Install-LAMP-Linux-Apache-MySQL-PHP-Server" class="headerlink" title="2.3 Install LAMP(Linux, Apache, MySQL, PHP) Server"></a>2.3 Install LAMP(Linux, Apache, MySQL, PHP) Server</h4><h4 id="2-3-1-Apache"><a href="#2-3-1-Apache" class="headerlink" title="2.3.1 Apache"></a>2.3.1 Apache</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 apache</span></span><br><span class="line">sudo apt install apache2</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">apache2 -v</span>       </span><br><span class="line">Server version: Apache/2.4.29 (Ubuntu)</span><br><span class="line">Server built:   2018-10-10T18:59:25</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开 http://10.244.6.199/</span> </span><br></pre></td></tr></table></figure>

<p>打开 <a href="http://your_server_ip_address/">http://your_server_IP_address</a> ，例如 <a href="http://10.244.6.199/">http://10.244.6.199/</a> ，会显示 <strong>Apache2 Ubuntu Default Page</strong> 页面，如果您看到此页面，则您的Web服务器现在可以正确安装并通过防火墙访问。</p>
<p>查找服务器公网 IP ：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ip addr show eno1 | grep inet | awk <span class="string">&#x27;&#123; print $2; &#125;&#x27;</span> | sed <span class="string">&#x27;s/\/.*$//&#x27;</span></span></span><br><span class="line">10.244.6.199</span><br><span class="line">fe80::882b:520d:3097:6d0c</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者 ifconfig</span></span><br></pre></td></tr></table></figure>

<h4 id="2-3-2-MySQL"><a href="#2-3-2-MySQL" class="headerlink" title="2.3.2 MySQL"></a>2.3.2 MySQL</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 mysql</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo apt install mysql-server</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">mysql --version</span></span><br><span class="line">mysql  Ver 14.14 Distrib 5.7.24, for Linux (x86_64) using  EditLine wrapper</span><br></pre></td></tr></table></figure>



<h4 id="2-3-3-PHP"><a href="#2-3-3-PHP" class="headerlink" title="2.3.3 PHP"></a>2.3.3 PHP</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 php</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo apt install php libapache2-mod-php php-mysql</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">php -v</span></span><br><span class="line">PHP 7.2.10-0ubuntu0.18.04.1 (cli) (built: Sep 13 2018 13:45:02) ( NTS )</span><br><span class="line">Copyright (c) 1997-2018 The PHP Group</span><br><span class="line">Zend Engine v3.2.0, Copyright (c) 1998-2018 Zend Technologies</span><br><span class="line">    with Zend OPcache v7.2.10-0ubuntu0.18.04.1, Copyright (c) 1999-2018, by Zend Technologies</span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重新启动Apache Web服务器</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo /etc/init.d/apache2 restart</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者</span></span><br><span class="line">sudo systemctl restart apache2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 apache2 服务的状态</span></span><br><span class="line">sudo systemctl status apache2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查 PHP</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">php -r <span class="string">&#x27;echo &quot;\n\nYour PHP installation is working fine.\n\n\n&quot;;&#x27;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Your PHP installation is working fine.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>在 Web 服务器上测试 PHP 处理</strong></p>
<p>为了测试您的系统配置是否适合 PHP ，请创建一个名为<code>info.php</code>的非常基本的 PHP 脚本。 为了让 Apache 找到这个文件并正确提供它，它必须保存到一个非常特定的目录中，这个目录称为“ web 根目录”。</p>
<p>在 Ubuntu 18.04 中，这个目录位于<code>/var/www/html/</code> 。 通过运行以下位置在该位置创建文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo vim /var/www/html/info.php</span></span><br><span class="line">&lt;?php</span><br><span class="line">phpinfo();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>现在您可以测试您的Web服务器是否能够正确显示由此PHP脚本生成的内容。 要尝试此操作，请在您的Web浏览器中访问此页面，例如 <code>http://10.244.6.199/info.php</code> 。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">http://your_server_ip/info.php</span><br></pre></td></tr></table></figure>

<h4 id="2-4-Login-mysql-and-import-the-specific-data-schema"><a href="#2-4-Login-mysql-and-import-the-specific-data-schema" class="headerlink" title="2.4 Login mysql and import the specific data schema"></a>2.4 Login mysql and import the specific data schema</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo mysql -u root -p</span></span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 760</span><br><span class="line">Server version: 5.7.24-0ubuntu0.18.04.1 (Ubuntu)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &#x27;help;&#x27; or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">create database iviData;</span></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">use iviData;</span></span><br><span class="line">Database changed</span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash"><span class="built_in">source</span> /home/ranger/work/Ubuntu_tools/10031472_data_receiver/database_schema/iviData.sql</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">... ...</span><br></pre></td></tr></table></figure>

<h4 id="2-5-Install-data-receiver"><a href="#2-5-Install-data-receiver" class="headerlink" title="2.5 Install data_receiver"></a>2.5 Install data_receiver</h4><p><strong>报错一：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make clean</span></span><br><span class="line">make: pkg-config: Command not found</span><br><span class="line">rm -rf ./generated/cpp ./generated/java ./bin ./lib ./obj</span><br><span class="line">rm -f .gen_cpp .gen_java</span><br></pre></td></tr></table></figure>

<p><strong>pkg-config</strong> 是一个在<a href="https://zh.wikipedia.org/wiki/%E6%BA%90%E4%BB%A3%E7%A0%81">源代码</a><a href="https://zh.wikipedia.org/wiki/%E7%BC%96%E8%AF%91">编译</a>时查询已安装的<a href="https://zh.wikipedia.org/wiki/%E5%BA%93">库</a>的使用接口的计算机工具<a href="https://zh.wikipedia.org/wiki/%E8%BD%AF%E4%BB%B6">软件</a>。pkg-config原本是设计用于<a href="https://zh.wikipedia.org/wiki/Linux">Linux</a>的，但现在在各个版本的<a href="https://zh.wikipedia.org/wiki/BSD">BSD</a>、<a href="https://zh.wikipedia.org/wiki/Windows">windows</a>、<a href="https://zh.wikipedia.org/wiki/Mac_OS_X">Mac OS X</a>和<a href="https://zh.wikipedia.org/wiki/Solaris">Solaris</a>上都有着可用的版本。</p>
<p>它输出已安装的库的相关信息，包括：</p>
<ul>
<li><a href="https://zh.wikipedia.org/wiki/C">C</a>&#x2F;<a href="https://zh.wikipedia.org/wiki/C%2B%2B">C++</a><a href="https://zh.wikipedia.org/wiki/%E7%BC%96%E8%AF%91%E5%99%A8">编译器</a>需要的输入参数</li>
<li><a href="https://zh.wikipedia.org/wiki/%E9%93%BE%E6%8E%A5%E5%99%A8">链接器</a>需要的输入参数</li>
<li>已安装软件包的版本信息</li>
</ul>
<p>安装 <code>pkg-config</code> 解决如上问题：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install pkg-config</span><br></pre></td></tr></table></figure>

<p><strong>报错二：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo make clean</span></span><br><span class="line">rm -rf ./generated/cpp ./generated/java ./bin ./lib ./obj</span><br><span class="line">rm -f .gen_cpp .gen_java</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo make all</span></span><br><span class="line">... ...</span><br><span class="line">/bin/sh: 1: mysql_config: not found</span><br><span class="line">sub_bigdata_src/sub_bigdata.cpp:4:10: fatal error: mysql.h: No such file or directory</span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">include &lt;mysql.h&gt;</span></span><br><span class="line">          ^~~~~~~~~</span><br><span class="line">compilation terminated.</span><br><span class="line">sub_bigdata_src/mqtt_bigdata_client.cpp:10:10: fatal error: my_global.h: No such file or directory</span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">include &lt;my_global.h&gt;</span></span><br><span class="line">          ^~~~~~~~~~~~~</span><br><span class="line">compilation terminated.</span><br><span class="line">Makefile:52: recipe for target &#x27;bin/sub_bigdata&#x27; failed</span><br><span class="line">make: *** [bin/sub_bigdata] Error 1</span><br></pre></td></tr></table></figure>

<p>报错，安装如下解决：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install libmysqlclient-dev</span><br></pre></td></tr></table></figure>

<p><strong>报错三：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/bin/ld: cannot find -lcares</span><br><span class="line">collect2: error: ld returned 1 exit status</span><br><span class="line">Makefile:53: recipe for target &#x27;bin/sub_bigdata&#x27; failed</span><br><span class="line">make: *** [bin/sub_bigdata] Error 1</span><br></pre></td></tr></table></figure>

<p><code>/usr/bin/ld: cannot find -lxxx</code> 意思是缺少 <strong>libxxx.so</strong> 文件，即缺少 <strong>libcares.so</strong> ，此 so 为 <strong>c-ares</strong> 编译生成，<a href="https://github.com/c-ares/c-ares">c-ares Github 地址</a> ，下载后运行如下编译：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo ./configure</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo make</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo make install</span></span><br></pre></td></tr></table></figure>

<p>如此 <strong>libcares.so</strong>  就生成到 <em>&#x2F;usr&#x2F;local&#x2F;lib&#x2F;</em> 目录下。</p>
<p><strong>编译 data_receiver</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo make clean</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo make all</span></span><br></pre></td></tr></table></figure>



<h3 id="3-Run-the-application"><a href="#3-Run-the-application" class="headerlink" title="3. Run the application"></a>3. Run the application</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./SocketServer</span> </span><br><span class="line">./SocketServer: error while loading shared libraries: libjson-c.so.2: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure>

<p>解决（安装libjson-c2)：<a href="https://ubuntu.pkgs.org/16.04/ubuntu-main-amd64/libjson-c2_0.11-4ubuntu2_amd64.deb.html">https://ubuntu.pkgs.org/16.04/ubuntu-main-amd64/libjson-c2_0.11-4ubuntu2_amd64.deb.html</a></p>
]]></content>
      <categories>
        <category>Work</category>
      </categories>
  </entry>
  <entry>
    <title>20P_Flash_Guide</title>
    <url>/2018/12/11/Work/20P_Flash_Guide/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="7afce0a6d3c06589d99918e78124240eb2d890b5b508cf87e3e5bfb56c405a2a"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Work</category>
      </categories>
  </entry>
  <entry>
    <title>Renesas Flash guide</title>
    <url>/2018/11/20/Work/Renesas_flash_guide/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="5155a1e4c3924d30681b5c297369558212fcd3e11109f2f4078823cc0eca6eb3"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Work</category>
      </categories>
  </entry>
  <entry>
    <title>Ubuntu18.04安装后必备操作</title>
    <url>/2018/10/30/Technical/Ubuntu18.04_installation/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="一-Ubuntu-18-04-安装"><a href="#一-Ubuntu-18-04-安装" class="headerlink" title="一. Ubuntu 18.04 安装"></a>一. Ubuntu 18.04 安装</h2><h3 id="1-Download-Ubuntu-xxx-iso"><a href="#1-Download-Ubuntu-xxx-iso" class="headerlink" title="1. Download Ubuntu-xxx.iso"></a>1. Download Ubuntu-xxx.iso</h3><p><a href="https://www.ubuntu.com/download/desktop">https://www.ubuntu.com/download/desktop</a></p>
<h3 id="制作优盘镜像时，选择-GPT-模式；"><a href="#制作优盘镜像时，选择-GPT-模式；" class="headerlink" title="制作优盘镜像时，选择 GPT 模式；"></a>制作优盘镜像时，选择 GPT 模式；</h3><p>机器启动时，选择UEFI，Security off</p>
<span id="more"></span>

<p>安装 Linux Mint 双硬盘分区方案：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">SSD 500G分区</span><br><span class="line">EFI 分区：1024M # 500M 足够</span><br><span class="line">/boot 分区：2048M</span><br><span class="line">/swap 分区：32768M # 等于内存大小</span><br><span class="line">/ 分区：102400M</span><br><span class="line">/home 分区： 剩余所有空间</span><br><span class="line"></span><br><span class="line">HDD 1T分区：</span><br><span class="line">/home/xxx/work # 挂载到 /home/xxx/ 目录下</span><br></pre></td></tr></table></figure>

<h3 id="2-挂载硬盘"><a href="#2-挂载硬盘" class="headerlink" title="2. 挂载硬盘"></a>2. 挂载硬盘</h3><p>查看硬盘信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看硬盘信息</span></span><br><span class="line">sudo fdisk -l</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建挂载目录</span></span><br><span class="line">mkdir ~/work</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">挂载</span></span><br><span class="line">mount /dev/sda1 ~/work</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开机自动挂载</span></span><br><span class="line">sudo vim /etc/fstab</span><br><span class="line">/dev/sda1 ~/work（挂载目录） ext4（文件格式） defaults 0 0</span><br></pre></td></tr></table></figure>



<h2 id="二-Ubuntu-18-04-初始化"><a href="#二-Ubuntu-18-04-初始化" class="headerlink" title="二. Ubuntu 18.04 初始化"></a>二. Ubuntu 18.04 初始化</h2><h3 id="1-Update-and-Upgrade"><a href="#1-Update-and-Upgrade" class="headerlink" title="1. Update and Upgrade"></a>1. Update and Upgrade</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br></pre></td></tr></table></figure>

<h3 id="2-安装-Typora"><a href="#2-安装-Typora" class="headerlink" title="2. 安装 Typora"></a>2. 安装 Typora</h3><p><a href="https://www.typora.io/#linux">https://www.typora.io/#linux</a></p>
<h3 id="3-安装-Chrome"><a href="#3-安装-Chrome" class="headerlink" title="3. 安装 Chrome"></a>3. 安装 Chrome</h3><p><a href="https://www.google.com/chrome/">https://www.google.com/chrome/</a></p>
<h3 id="4-安装-Terminator"><a href="#4-安装-Terminator" class="headerlink" title="4. 安装 Terminator"></a>4. 安装 Terminator</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install terminator</span><br></pre></td></tr></table></figure>

<h3 id="5-安装搜狗输入法"><a href="#5-安装搜狗输入法" class="headerlink" title="5. 安装搜狗输入法"></a>5. 安装搜狗输入法</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载ibus</span></span><br><span class="line">sudo apt remove ibus</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">清除ibus配置</span></span><br><span class="line">sudo apt purge ibus</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载顶部面板任务栏上的键盘指示</span></span><br><span class="line">sudo  apt remove indicator-keyboard</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装fcitx输入法框架</span></span><br><span class="line">sudo apt install fcitx-table-wbpy fcitx-config-gtk</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换为 Fcitx输入法</span></span><br><span class="line">im-config -n fcitx</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">im-config 配置需要重启系统才能生效</span></span><br><span class="line">sudo shutdown -r now</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载安装包：https://pinyin.sogou.com/linux/?r=pinyin</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装搜狗输入法</span></span><br><span class="line">sudo dpkg -i ~/Downloads/sogoupinyin_2.2.0.0108_amd64.deb</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修复损坏缺少的包</span></span><br><span class="line">sudo apt-get install -f</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开 Fcitx 输入法配置</span></span><br><span class="line">fcitx-config-gtk3</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">点击 + 添加搜狗输入法，并把搜狗移动到顶端</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输入法皮肤透明</span></span><br><span class="line">fcitx设置 &gt;&gt;附加组件&gt;&gt;勾选高级 &gt;&gt;取消经典界面</span><br><span class="line"><span class="meta prompt_">Configure&gt;</span><span class="language-bash">&gt;  Addon  &gt;&gt;Advanced&gt;&gt;Classic</span></span><br></pre></td></tr></table></figure>

<p><strong>在 Linux mint 20(Ubuntu 20.04) 中安装搜狗输入法</strong></p>
<ul>
<li><a href="https://pinyin.sogou.com/linux/?r=pinyin">下载安装包并双击安装</a></li>
<li>注销电脑</li>
<li>点击电脑左下角，输入 fcitx，打开 Fcitx Configuration（或者使用命令：<code>fcitx-config-gtk3</code>），点击 + ，取消勾选 <em>Only Show Current Language</em> ，添加搜狗输入法即可。</li>
</ul>
<h3 id="6-sudo-no-password"><a href="#6-sudo-no-password" class="headerlink" title="6. sudo no password"></a>6. sudo no password</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo visudo</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在末尾添加如下</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">To allow a user to run all commands using sudo without a password</span></span><br><span class="line">ranger ALL=(ALL) NOPASSWD: ALL</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">All member of the sys group will run all commands using sudo without a passwo$</span></span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">sys ALL=(ALL) NOPASSWD: ALL</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="7-安装-wps"><a href="#7-安装-wps" class="headerlink" title="7. 安装 wps"></a>7. 安装 wps</h3><p>下载地址：<a href="http://www.wps.cn/product/wpslinux/">http://www.wps.cn/product/wpslinux/</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo dpkg -i libpng12-0*.deb  #安装依赖</span><br><span class="line">sudo dpkg -i wps*.deb  #安装wps</span><br></pre></td></tr></table></figure>

<h3 id="8-vim-配置"><a href="#8-vim-配置" class="headerlink" title="8. vim 配置"></a>8. vim 配置</h3><p>配置文件路径：<code>/etc/vim/vimrc</code> ，对所有用户生效，用户个人的配置在 <code>~/.vimrc</code> 。</p>
<p>参考：<a href="http://www.ruanyifeng.com/blog/2018/09/vimrc.html">http://www.ruanyifeng.com/blog/2018/09/vimrc.html</a></p>
<h3 id="9-终端-tab-忽略大小写"><a href="#9-终端-tab-忽略大小写" class="headerlink" title="9. 终端 tab 忽略大小写"></a>9. 终端 tab 忽略大小写</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim ~/.inputrc</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加如下</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">do</span> not show hidden files <span class="keyword">in</span> the list</span></span><br><span class="line">set match-hidden-files off</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">auto complete ignoring <span class="keyword">case</span></span></span><br><span class="line">set show-all-if-ambiguous on</span><br><span class="line">set completion-ignore-case on #忽略大小写</span><br><span class="line"></span><br><span class="line">&quot;\e[5~&quot;: history-search-backward</span><br><span class="line">&quot;\e[6~&quot;: history-search-forward</span><br></pre></td></tr></table></figure>

<h3 id="10-安装-git"><a href="#10-安装-git" class="headerlink" title="10. 安装 git"></a>10. 安装 git</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install git</span><br><span class="line">git config --global user.name &quot;Your Name&quot;</span><br><span class="line">git config --global user.email &quot;email@example.com&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过命令 git config –list,查看是否设置成功</span></span><br><span class="line">ranger@zr:~ $ git config --list</span><br><span class="line">user.name=xxx.xxxx</span><br><span class="line">user.email=xxx.xxxx@xxxxx.com</span><br></pre></td></tr></table></figure>



<h3 id="11-安装卸载-JDK"><a href="#11-安装卸载-JDK" class="headerlink" title="11. 安装卸载 JDK"></a>11. 安装卸载 JDK</h3><h4 id="11-1-安装-openjdk"><a href="#11-1-安装-openjdk" class="headerlink" title="11.1 安装 openjdk"></a>11.1 安装 openjdk</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ubuntu使用的是openjdk, 输入命令:</span></span><br><span class="line">apt-cache search openjdk</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">找到我们需要安装的jdk版本</span></span><br><span class="line">sudo apt install openjdk-11-jdk</span><br><span class="line">java -version</span><br></pre></td></tr></table></figure>

<h4 id="11-2-Ubuntu18-04-安装-jdk7"><a href="#11-2-Ubuntu18-04-安装-jdk7" class="headerlink" title="11.2 Ubuntu18.04 安装 jdk7"></a>11.2 Ubuntu18.04 安装 jdk7</h4><p>据说Ubuntu18.04已经去除了openJdk-7的源，所以本次进行了下载后手动安装：</p>
<p><a href="https://packages.debian.org/experimental/openjdk-7-jdk">openjdk-7-jdk</a></p>
<p><a href="https://packages.debian.org/experimental/openjdk-7-jre">openjdk-7-jre</a></p>
<p><a href="https://packages.debian.org/experimental/openjdk-7-jre-headless">openjdk-7-jre-headless</a></p>
<p><a href="https://packages.debian.org/sid/libjpeg62-turbo">libjpeg62-turbo</a></p>
<p><a href="https://packages.debian.org/sid/libfontconfig1">libfontconfig1</a></p>
<p><a href="https://packages.debian.org/sid/fontconfig-config">fontconfig-config</a></p>
<p>下载以上安装包，然后执行命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo dpkg -i openjdk-7-* libjpeg62-turbo* libfontconfig1* fontconfig-config*</span><br></pre></td></tr></table></figure>

<p>如果在安装过程中报错，则执行以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt --fix-broken install</span><br></pre></td></tr></table></figure>

<h4 id="11-4-切换-JDK"><a href="#11-4-切换-JDK" class="headerlink" title="11.4 切换 JDK"></a>11.4 切换 JDK</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install openjdk-7-jdk</span><br><span class="line">sudo update-alternatives --list java</span><br><span class="line">sudo update-alternatives --config java #选择默认JDK</span><br><span class="line">java -version</span><br></pre></td></tr></table></figure>

<h4 id="11-5-完整卸载-JDK"><a href="#11-5-完整卸载-JDK" class="headerlink" title="11.5 完整卸载 JDK"></a>11.5 完整卸载 JDK</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">移除所有 Java相关包 (Sun, Oracle, OpenJDK, IcedTea plugins, GIJ):</span></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt-cache search java | awk &#x27;&#123;print($1)&#125;&#x27; | grep -E -e &#x27;^(ia32-)?(sun|oracle)-java&#x27; -e &#x27;^openjdk-&#x27; -e &#x27;^icedtea&#x27; -e &#x27;^(default|gcj)-j(re|dk)&#x27; -e &#x27;^gcj-(.*)-j(re|dk)&#x27; -e &#x27;java-common&#x27; | xargs sudo apt-get -y remove</span><br><span class="line">sudo apt -y autoremove</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">清除配置信息</span></span><br><span class="line">dpkg -l | grep ^rc | awk &#x27;&#123;print($2)&#125;&#x27; | xargs sudo apt-get -y purge</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">清除java配置及缓存</span></span><br><span class="line">bash -c &#x27;ls -d /home/*/.java&#x27; | xargs sudo rm -rf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">手动清除JVMs</span></span><br><span class="line">rm -rf /usr/lib/jvm/*</span><br></pre></td></tr></table></figure>



<h3 id="12-终端配色"><a href="#12-终端配色" class="headerlink" title="12. 终端配色"></a>12. 终端配色</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PS1=&#x27;$&#123;debian_chroot:+($debian_chroot)&#125;\[\033[01;35;01m\]\u\[\033[00;00;01m\]@\[\033[01;35;01m\]\h\[\033[00;31;01m\]:\[\033[00;00;01m\]\w \[\033[01;32;01m\]\$ \[\033[01;01;01m\]&#x27;</span><br></pre></td></tr></table></figure>

<p>添加如上到 <code>~/.bashrc</code> 最后即可。</p>
<h3 id="13-编译-amp-其他必备工具"><a href="#13-编译-amp-其他必备工具" class="headerlink" title="13. 编译&amp;其他必备工具"></a>13. 编译&amp;其他必备工具</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install terminator # 替换终端</span><br><span class="line">sudo apt install m4</span><br><span class="line">sudo apt install bison</span><br><span class="line">sudo apt install g++-multilib gcc-multilib lib32ncurses5-dev lib32z1-dev</span><br><span class="line">sudo apt install gitk</span><br><span class="line">sudo apt install libxml2-utils</span><br><span class="line">sudo apt install libssl-dev</span><br><span class="line">sudo apt install device-tree-compiler</span><br><span class="line">sudo apt install liblz4-tool</span><br><span class="line">sudo apt install net-tools # 安装后才可使用 ifconfig, ping 等命令</span><br><span class="line">sudo apt install python-lunch</span><br><span class="line">sudo apt install python-pip</span><br><span class="line">pip install pycrypto</span><br><span class="line">pip install wand</span><br><span class="line">sudo apt install shutter # 截图软件</span><br><span class="line">sudo apt install build-essential</span><br><span class="line">sudo apt-get install rar unrar # 解压 rar 工具</span><br><span class="line">sudo apt-get install rar rar</span><br><span class="line">sudo apt install vim</span><br><span class="line">sudo apt install curl</span><br><span class="line">sudo apt install wget</span><br><span class="line">sudo apt install putty</span><br><span class="line">sudo apt install sshpass # 免密码 ssh 连接</span><br><span class="line">sudo apt install git</span><br><span class="line">sudo apt install vim</span><br><span class="line">sudo apt install flameshot # 截图,比 shutter 好用</span><br><span class="line">sudo apt install img2simg #编译 QNX 时用到</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="14-ssh-连接远程服务器"><a href="#14-ssh-连接远程服务器" class="headerlink" title="14. ssh 连接远程服务器"></a>14. ssh 连接远程服务器</h3><h4 id="14-1-直接使用-ssh-连接"><a href="#14-1-直接使用-ssh-连接" class="headerlink" title="14.1. 直接使用 ssh 连接"></a>14.1. 直接使用 ssh 连接</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh user@10.243.54.188 # 此命令需要输入密码</span><br></pre></td></tr></table></figure>

<h4 id="14-2-使用-ssh-key-登录服务器"><a href="#14-2-使用-ssh-key-登录服务器" class="headerlink" title="14.2. 使用 ssh-key 登录服务器"></a>14.2. 使用 ssh-key 登录服务器</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</span><br><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub  user@10.243.54.188</span><br><span class="line">ssh user@10.243.54.188</span><br></pre></td></tr></table></figure>

<h4 id="14-3-使用-sshpass-在命令中附带密码连接"><a href="#14-3-使用-sshpass-在命令中附带密码连接" class="headerlink" title="14.3. 使用 sshpass 在命令中附带密码连接"></a>14.3. 使用 sshpass 在命令中附带密码连接</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install sshpass</span><br><span class="line">sshpass -p password ssh user@10.243.54.188</span><br></pre></td></tr></table></figure>

<h3 id="15-安装-sublime3"><a href="#15-安装-sublime3" class="headerlink" title="15. 安装 sublime3"></a>15. 安装 sublime3</h3><p><a href="https://www.sublimetext.com/3">https://www.sublimetext.com/3</a></p>
<h3 id="16-截图"><a href="#16-截图" class="headerlink" title="16. 截图"></a>16. 截图</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install flameshot</span><br></pre></td></tr></table></figure>

<p>Settings - Devices - keyboard，设置一个自定义快捷键CTRL+ALT+A（拉到最下面）命令填写：<strong>flameshot gui</strong></p>
<p>截完图后保存Ctrl+S，复制到剪贴板 Ctrl+C</p>
<p>注：可能会和 terminator 快捷键冲突，禁用 terminator 中的 ctrl+alt+A 和 shift+ctrl+alt+A 即可。</p>
<h3 id="17-强制关闭UI"><a href="#17-强制关闭UI" class="headerlink" title="17. 强制关闭UI"></a>17. 强制关闭UI</h3><p>添加快捷键，Name: ForceQuit，Command: xkill，快捷键: shift+ctrl+X</p>
<h3 id="18-安装-AndroidStudio"><a href="#18-安装-AndroidStudio" class="headerlink" title="18. 安装 AndroidStudio"></a>18. 安装 AndroidStudio</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">快捷方式</span></span><br><span class="line">vim /usr/share/applicatons/Studio.desktop</span><br><span class="line">[Desktop Entry]</span><br><span class="line">Version=3.2</span><br><span class="line">Name=AndroidStudio</span><br><span class="line">Exec=/opt/android-studio/bin/studio.sh</span><br><span class="line">Termina=false</span><br><span class="line">Icon=/opt/android-studio/bin/studio.png</span><br><span class="line">Type=Application</span><br><span class="line">Categories=Development</span><br><span class="line">Name[en_US]=AndroidStudio.txt</span><br></pre></td></tr></table></figure>

<p>新版本生成方式：<code>Tools - Create Desktop Entry</code> 即可点击电脑左下角搜索 Studio.</p>
<p>无法输入中文：在 studio.sh 中 #!&#x2F;bin&#x2F;sh 下面添加如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export GTK_IM_MODULE=fcitx </span><br><span class="line">export QT_IM_MODULE=fcitx </span><br><span class="line">export XMODIFIERS=&quot;@im=fcitx&quot;</span><br></pre></td></tr></table></figure>



<h3 id="19-配置-samba-共享"><a href="#19-配置-samba-共享" class="headerlink" title="19. 配置 samba 共享"></a>19. 配置 samba 共享</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1. 安装</span></span><br><span class="line">sudo apt install samba</span><br><span class="line">sudo apt install smbclient</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2. 配置</span></span><br><span class="line">sudo cp /etc/samba/smb.conf /etc/samba/smb.conf.bak</span><br><span class="line">sudo vim /etc/samba/smb.conf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">末尾添加如下：</span></span><br><span class="line">[share]</span><br><span class="line">    comment = Shared Folder with username and password</span><br><span class="line">    path = /home/rangerzhou/share/</span><br><span class="line">    available = yes</span><br><span class="line">    browseable = yes</span><br><span class="line">    public = yes</span><br><span class="line">    writable = yes</span><br><span class="line">    </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">3. 创建共享目录</span></span><br><span class="line">mkdir ~/share</span><br><span class="line">chmod 777 ~/share</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">4. 创建Samba用户,如果创建共享目录，前三步就可以了</span></span><br><span class="line">sudo touch /etc/samba/smbpasswd</span><br><span class="line">sudo smbpasswd -a rangerzhou #设置Windows访问时需要的密码</span><br><span class="line">sudo samba restart</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https://www.cnblogs.com/phinecos/archive/2009/06/06/1497717.html</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">https://blog.csdn.net/qiqzhang/article/details/78148682</span></span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/dev/kvm permission denied. 使用自制镜像启动 Android 模拟器问题</span></span><br><span class="line">sudo apt install qemu-kvm</span><br><span class="line">sudo adduser &lt;Replace with username&gt; kvm</span><br><span class="line">sudo chown &lt;Replace with username&gt; /dev/kvm</span><br></pre></td></tr></table></figure>

<h3 id="20-安装-jd-gui-x2F-apktool"><a href="#20-安装-jd-gui-x2F-apktool" class="headerlink" title="20. 安装 jd-gui&#x2F;apktool"></a>20. 安装 jd-gui&#x2F;apktool</h3><p>jd-gui: <a href="http://jd.benow.ca/">http://jd.benow.ca/</a></p>
<p>apktool: <a href="https://ibotpeaches.github.io/Apktool/install/">https://ibotpeaches.github.io/Apktool/install/</a></p>
<ol>
<li>Download Linux <a href="https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/linux/apktool">wrapper script</a> (Right click, Save Link As <code>apktool</code>)</li>
<li>Download apktool-2 (<a href="https://bitbucket.org/iBotPeaches/apktool/downloads/">find newest here</a>)</li>
<li>Rename downloaded jar to <code>apktool.jar</code></li>
<li>Move both files (<code>apktool.jar</code> &amp; <code>apktool</code>) to <code>/usr/local/bin</code> (root needed)</li>
<li>Make sure both files are executable (<code>chmod +x</code>)</li>
<li>Try running apktool via cli</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mkdir ~/bin</span><br><span class="line">vim ~/.bashrc</span><br><span class="line">export PATH=$PATH:/home/ranger/bin</span><br><span class="line">source ~/.bashrc</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">把 apktol.jar 和 apktool 脚本 copy 到 ~/bin 下</span></span><br><span class="line">sudo chmod 777 ~/bin/apktool</span><br><span class="line">sudo chmod 777 ~/bin/apktool.jar</span><br></pre></td></tr></table></figure>

<h3 id="21-Ubuntu-18-04-美化"><a href="#21-Ubuntu-18-04-美化" class="headerlink" title="21. Ubuntu 18.04 美化"></a>21. Ubuntu 18.04 美化</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 gnome-tweak-tool</span></span><br><span class="line">sudo apt install gnome-tweak-tool</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装后即可在 tweak 中配置相关选项，但是发现 Appearance-Shell 项无法选择</span></span><br><span class="line">sudo apt-get install gnome-shell-extensions</span><br><span class="line">sudo apt install chrome-gnome-shell</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装完成后打开Tweaks选择 “Extensions”选项，“User themes” 按钮设置成 on 即可</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者安装 chrome-gnome-shell，再安装如下链接插件后即可：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https://extensions.gnome.org/extension/19/user-themes/</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装插件：pixel-saver（一款应用标题栏合并插件，可以把应用程序的窗口控制（最大/小化，关闭）和标题合并到顶栏中，以达到节约屏幕空间的目的），链接如下：</span></span><br><span class="line">https://extensions.gnome.org/extension/723/pixel-saver/</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>安装主题</p>
<p>主题目录 <code>/usr/share/themes</code>，或者 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir ~/.themes # </span><br><span class="line">mkdir ~/.icons</span><br></pre></td></tr></table></figure>

<ul>
<li><p>切换主题，下载主题解压到 <code>~/.themes</code> ，就可以在 tweak 中选择主题了，如下是两个不错的 mac 主题：</p>
<p><a href="https://www.opendesktop.org/s/Gnome/p/1241688">https://www.opendesktop.org/s/Gnome/p/1241688</a></p>
<p><a href="https://www.opendesktop.org/s/Gnome/p/1013714/">https://www.opendesktop.org/s/Gnome/p/1013714/</a></p>
</li>
<li><p>更换 icon，下载如下链接中的 icon 主题，解压到 .icons 目录，在 tweak 中切换即可</p>
<p><a href="https://www.opendesktop.org/s/Gnome/p/1102582/">https://www.opendesktop.org/s/Gnome/p/1102582/</a></p>
</li>
<li><p>更换 shell，下载如下链接中的 shell 主题，解压到 .themes 目录，在 tweak 中切换即可</p>
<p><a href="https://www.opendesktop.org/s/Gnome/p/1013741/">https://www.opendesktop.org/s/Gnome/p/1013741/</a></p>
</li>
</ul>
<h3 id="22-安装-wine"><a href="#22-安装-wine" class="headerlink" title="22. 安装 wine"></a>22. 安装 wine</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https://linuxconfig.org/install-wine-on-ubuntu-18-04-bionic-beaver-linux</span></span><br><span class="line">sudo dpkg --add-architecture i386 </span><br><span class="line">wget -qO- https://dl.winehq.org/wine-builds/Release.key | sudo apt-key add -</span><br><span class="line">sudo apt-add-repository &#x27;deb http://dl.winehq.org/wine-builds/ubuntu/ bionic main&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">To install development WineHQ packages</span></span><br><span class="line">sudo apt install wine-devel-amd64</span><br><span class="line">sudo apt install wine-devel-i386</span><br><span class="line">sudo apt install wine-devel</span><br><span class="line">sudo apt install --install-recommends winehq-devel</span><br><span class="line">wine --version</span><br><span class="line">wine-3.19</span><br></pre></td></tr></table></figure>

<h3 id="23-sublime-输入中文"><a href="#23-sublime-输入中文" class="headerlink" title="23. sublime 输入中文"></a>23. sublime 输入中文</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update &amp;&amp; sudo apt upgrade</span><br><span class="line">git clone https://github.com/lyfeyaj/sublime-text-imfix.git</span><br><span class="line">cd sublime-text-imfix &amp;&amp; ./sublime-imfix</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/lyfeyaj/sublime-text-imfix">https://github.com/lyfeyaj/sublime-text-imfix</a></p>
<h3 id="24-安装-anaconda"><a href="#24-安装-anaconda" class="headerlink" title="24. 安装 anaconda"></a>24. 安装 anaconda</h3><p><a href="https://zhuanlan.zhihu.com/p/32925500">https://zhuanlan.zhihu.com/p/32925500</a></p>
<p><strong>创建环境</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda create -n &lt;env_name&gt; python=3.7</span><br></pre></td></tr></table></figure>



<p><strong>切换环境</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source activate python2</span><br><span class="line">source activate python3</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者</span></span><br><span class="line">conda activate python2</span><br><span class="line">conda activate python3</span><br></pre></td></tr></table></figure>

<p><strong>退出环境至root</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source deactivate</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者</span></span><br><span class="line">conda deactivate</span><br></pre></td></tr></table></figure>

<p><strong>显示已创建环境</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda info --envs # 或者conda info -e，或者conda env list</span><br></pre></td></tr></table></figure>

<p><strong>删除环境</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">注意： &lt;env_name&gt; 为被删除环境的名称。环境名两边不加尖括号“&lt;&gt;”</span></span><br><span class="line">conda remove --name &lt;env_name&gt; --all </span><br></pre></td></tr></table></figure>

<p>安装好Anaconda后每次打开终端都会自动帮你激活基本环境（<code>base</code>），有时候确实自己不需要激活Conda环境（因为打开终端不一定要用到 Python），而且该项操作还会拖慢打开的终端的响应速度，在终端输入：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">conda config --<span class="built_in">set</span> auto_activate_base <span class="literal">false</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> ~/.condarc</span></span><br><span class="line">channels:</span><br><span class="line">  - defaults</span><br><span class="line">ssl_verify: true</span><br><span class="line">auto_activate_base: false</span><br></pre></td></tr></table></figure>

<p>第一次运行它时，它将在主目录中创建<code>~/.condarc</code>，并使用该设置覆盖默认值。</p>
<h3 id="25-切换-python-版本"><a href="#25-切换-python-版本" class="headerlink" title="25. 切换 python 版本"></a>25. 切换 python 版本</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">update-alternatives --list python</span></span><br><span class="line">update-alternatives: error: no alternatives for python</span><br></pre></td></tr></table></figure>

<p>如果出现以上所示的错误信息，则表示 Python 的替代版本尚未被 update-alternatives 命令识别。想解决这个问题，我们需要更新一下替代列表，将安装的 python 放入其中：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo update-alternatives --install /usr/bin/python python /usr/bin/python2.7 1</span></span><br><span class="line">update-alternatives: using /usr/bin/python2.7 to provide /usr/bin/python (python) in auto mode</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.6 2</span></span><br><span class="line">update-alternatives: using /usr/bin/python3.6 to provide /usr/bin/python (python) in auto mode</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo update-alternatives --install /usr/bin/python python /home/ranger/anaconda3/bin/python3.7 3</span></span><br><span class="line">update-alternatives: using /home/ranger/anaconda3/bin/python3.7 to provide /usr/bin/python (python) in auto mode</span><br></pre></td></tr></table></figure>

<p>–install 选项使用了多个参数用于创建符号链接。最后一个参数指定了此选项的优先级，如果我们没有手动来设置替代选项，那么具有最高优先级的选项就会被选中。这个例子中，我们为 &#x2F;usr&#x2F;bin&#x2F;python3.6 设置的优先级为2，所以update-alternatives 命令会自动将它设置为默认 Python 版本。现在开始，我们就可以使用下方的命令随时在列出的 Python 替代版本中任意切换了：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo update-alternatives --config python</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">由于安装了 anaconda，所以一直没切换成功，从 PATH 环境中移除 annconda 中的 /bin 目录即可，或者修改 anaconda 下的 bin 目录名称，使 PATH 找不到 bin 目录。</span></span><br></pre></td></tr></table></figure>

<h3 id="26-串口-log-工具"><a href="#26-串口-log-工具" class="headerlink" title="26. 串口 log 工具"></a>26. 串口 log 工具</h3><h4 id="26-1-minicom"><a href="#26-1-minicom" class="headerlink" title="26.1 minicom"></a>26.1 minicom</h4><p>minicom 是 linux 下常用的一款查看串口 log 的工具，安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install minicom</span><br></pre></td></tr></table></figure>

<p>配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo minicom -s</span><br></pre></td></tr></table></figure>

<p>使用方向键选择需要配置的选项，如 Serial port setup，回车进入配置，此时光标在最下方，输入对应修改配置项对应的字母，编辑，回车确认，光标重新回到最下方，一般只需修改如下三项：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">A -    Serial Device</span><br><span class="line">E -    Bps/Par/Bits</span><br><span class="line">F -    Hardware Flow Control</span><br></pre></td></tr></table></figure>

<p>A 配置项指定 USB 装置，使用命令 <code>ls -l /dev/ttyUSB*</code> 查看，修改成需要的 <strong>ttyUSB</strong>* 。</p>
<p>E配置项根据时间情况指定波特率，如115200。</p>
<p>F配置项为硬件流控，如果没有或者不确定则指定为 No。</p>
<p>修改完成后回车退到上一界面，选择 <strong>Save setup as dfl</strong> ，将刚才的修改存储为预设配置，避免下次使用重新配置，选择 <strong>Exit</strong> 退出配置界面，并开启 <strong>minicom</strong> 。</p>
<hr>
<p><strong>快捷键</strong></p>
<p><strong>Ctrl+A</strong>：执行特殊操作时都需要先按Ctrl+A，另一个功能是暂停屏幕输出，方便查看 log 。</p>
<p><strong>Ctrl+A, Z：</strong> 查看帮助，也可直接使用命令 <code>minicom -h</code> 。</p>
<p><strong>Ctrl+A, X：</strong> 退出。</p>
<p><strong>Ctrl+A, N：</strong> 启用时间戳，在每行 log 前添加当前系统的时间戳。</p>
<p><strong>Ctrl+A, W：</strong> 开启 minicom 的自动换行功能。</p>
<hr>
<p><strong>配置权限</strong></p>
<p>minicom 本身无序 sudo 权限，但是因为要开启串口 <em>&#x2F;dev&#x2F;xxx</em> ，所以需要 sudo 启动，修改如下信息即可免除输入 sudo。</p>
<ul>
<li><p>直接使用 chmod 命令修改</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo chmod 666 /dev/ttyUSB0</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置 udev 规则（推荐）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/udev/rules.d/70-ttyusb.rules</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加一行</span></span><br><span class="line">KERNEL==&quot;ttyUSB[0-9]*&quot;, MODE=&quot;0666&quot;</span><br></pre></td></tr></table></figure>

<p>修改后重新插拔设备即可。</p>
</li>
</ul>
<hr>
<p><strong>自动设置 ttyUSB</strong>*</p>
<p>如果日常只需一个设备，设备名指定为 <em>&#x2F;dev&#x2F;ttyUSB0</em> ，每次直接开启 minicom 即可，但当需要使用多个串口时，就需要每次查看 <code>ls /dev/ttyUSB*</code> ，手动修改配置才能使用，比较麻烦，使用如下 minicom 的 -D 参数可解决问题。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编写脚本</span></span><br><span class="line">vim ~/.minicom.sh</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输入如下</span></span><br><span class="line">com() &#123;</span><br><span class="line">    ports_USB=$(ls /dev/ttyUSB*)</span><br><span class="line">    ports_ACM=$(ls /dev/ttyACM*)  #arduino</span><br><span class="line">    ports=&quot;$ports_USB $ports_ACM&quot;</span><br><span class="line">    select port in $ports;do</span><br><span class="line">        if [ &quot;$port&quot; ]; then</span><br><span class="line">            echo &quot;You select the choice &#x27;$port&#x27;&quot;</span><br><span class="line">            minicom -D &quot;$port&quot; $@&quot;</span><br><span class="line">            break</span><br><span class="line">        else</span><br><span class="line">            echo &quot;Invaild selection&quot;</span><br><span class="line">        fi</span><br><span class="line">    done</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">随后在 ~/.bashrc 中引入</span></span><br><span class="line">echo &#x27;source ~/.minicom.sh&#x27; &gt;&gt; ~/.bashrc</span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure>

<p>这样就可以直接通过 <strong>com</strong> 命令调用 minicom 了。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ranger@zr:~ $ com</span><br><span class="line">1) /dev/ttyUSB0</span><br><span class="line">2) /dev/ttyUSB1</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">?</span></span><br></pre></td></tr></table></figure>

<hr>
<p>**自动存储 log **</p>
<p>minicom 可使用 -C 参数指定存储 log 文件，修改 minicom.sh 脚本，把 log 存储在指定目录下。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">com() &#123;</span><br><span class="line">    ports_USB=$(ls /dev/ttyUSB*)</span><br><span class="line">    ports_ACM=$(ls /dev/ttyACM*)  #arduino</span><br><span class="line">    ports=&quot;$ports_USB $ports_ACM&quot;</span><br><span class="line">    datename=$(date +%Y%m%d-%H%M%S)</span><br><span class="line">    select port in $ports;do</span><br><span class="line">        if [ &quot;$port&quot; ]; then</span><br><span class="line">            echo &quot;You select the choice &#x27;$port&#x27;&quot;</span><br><span class="line">            minicom -D &quot;$port&quot; -C /home/ranger/work/tmps/&quot;$datename&quot;.log &quot;$@&quot;</span><br><span class="line">            break</span><br><span class="line">        else</span><br><span class="line">            echo &quot;Invaild selection&quot;</span><br><span class="line">        fi</span><br><span class="line">    done</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改后</span></span><br><span class="line">com() &#123;</span><br><span class="line">    ports_USB=$(ls /dev/ttyUSB*)</span><br><span class="line">    #ports_ACM=$(ls /dev/ttyACM*)  #arduino</span><br><span class="line">    #ports=&quot;$ports_USB $ports_ACM&quot;</span><br><span class="line">    ports=&quot;$ports_USB&quot;</span><br><span class="line">    datename=$(date +%Y%m%d-%H%M%S)</span><br><span class="line">    select port in $ports;do</span><br><span class="line">        if [ &quot;$port&quot; ]; then</span><br><span class="line">            echo &quot;You select the choice &#x27;$port&#x27;&quot;</span><br><span class="line">            minicom -D &quot;$port&quot; -C /home/ranger/work/tmps/&quot;$datename&quot;.log &quot;$@&quot;</span><br><span class="line">            break</span><br><span class="line">        else</span><br><span class="line">            echo &quot;Invaild selection&quot;</span><br><span class="line">        fi</span><br><span class="line">    done</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>PS: 出现 <strong>Device &#x2F;dev&#x2F;ttyS0 is locked minicom</strong> 错误</p>
<p>通常是因为 minicom 上次使用时没有正常退出，系统自动在目录 <em>&#x2F;var&#x2F;lock</em> 中生成了 lockfile 所致，删除即可：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo rm -rf /var/lock/***</span><br></pre></td></tr></table></figure>

<p><em>Reference</em>: <a href="https://tw.saowen.com/a/72a306fdd0cf62f69032d77659e5667332140154cbe22e1e6b1b537f55ed77b7">https://tw.saowen.com/a/72a306fdd0cf62f69032d77659e5667332140154cbe22e1e6b1b537f55ed77b7</a></p>
<h4 id="26-2-picocom"><a href="#26-2-picocom" class="headerlink" title="26.2 picocom"></a>26.2 picocom</h4><p>picocom 可以看作是 minicom 的简化版，安装配置简单。</p>
<p><strong>安装</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install picocom</span><br></pre></td></tr></table></figure>

<p><strong>使用</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo picocom -b 115200 /dev/ttyUSB0</span><br></pre></td></tr></table></figure>

<p>可写入 <em>~&#x2F;.bashrc</em> 中快捷启动：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">alias seri=&#x27;sudo picocom -b 115200 /dev/ttyUSB0&#x27;</span><br></pre></td></tr></table></figure>

<p><strong>退出</strong></p>
<p>Ctrl+A, Ctrl+Q 即可退出（Ctrl+a 是转义键）。</p>
<p>优点：简单，文字可以有颜色，不会改变终端的背景。<br>缺点：启动和关闭的速度较慢。</p>
<h3 id="27-Wired-网络消失"><a href="#27-Wired-网络消失" class="headerlink" title="27. Wired 网络消失"></a>27. Wired 网络消失</h3><p>某天开机后突然发现 Settings-Network 中的 Wired 消失了，电脑无法上网，通过如下方法解决：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /etc/NetworkManager/NetworkManager.conf</span><br><span class="line">[main]</span><br><span class="line">plugins=ifupdown,keyfile</span><br><span class="line"></span><br><span class="line">[ifupdown]</span><br><span class="line">managed=true</span><br><span class="line"></span><br><span class="line">[device]</span><br><span class="line">wifi.scan-rand-mac-address=no</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>把 managed 值改为 true ，同时恢复了 <code>/etc/network/interfaces</code> 为默认，重启电脑，解决。</p>
<h3 id="28-文件管理器"><a href="#28-文件管理器" class="headerlink" title="28. 文件管理器"></a>28. 文件管理器</h3><p>查看默认的文件管理器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">xdg-mime query default inode/directory</span><br></pre></td></tr></table></figure>

<p>将默认的文件管理器设置为 nemo</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">xdg-mime default nemo.desktop inode/directory application/x-gnome-saved-search</span><br></pre></td></tr></table></figure>

<p>恢复 nautilus.desktop</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">xdg-mime default nautilus.desktop inode/directory application/x-gnome-saved-search</span><br></pre></td></tr></table></figure>

<p>使用 <code>xdg-open $HOME</code> 来验证有没有生效。</p>
<h3 id="29-终端中文只能显示-ASCII-码"><a href="#29-终端中文只能显示-ASCII-码" class="headerlink" title="29. 终端中文只能显示 ASCII 码"></a>29. 终端中文只能显示 ASCII 码</h3><p>使用 locale 命令查看</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">locale</span></span><br><span class="line">LANG=en_US.UTF-8</span><br><span class="line">LANGUAGE=en_US:en</span><br><span class="line">LC_CTYPE=&quot;C&quot;</span><br><span class="line">LC_NUMERIC=&quot;C&quot;</span><br><span class="line">LC_TIME=&quot;C&quot;</span><br><span class="line">LC_COLLATE=&quot;C&quot;</span><br><span class="line">LC_MONETARY=&quot;C&quot;</span><br><span class="line">LC_MESSAGES=&quot;C&quot;</span><br><span class="line">LC_PAPER=&quot;C&quot;</span><br><span class="line">LC_NAME=&quot;C&quot;</span><br><span class="line">LC_ADDRESS=&quot;C&quot;</span><br><span class="line">LC_TELEPHONE=&quot;C&quot;</span><br><span class="line">LC_MEASUREMENT=&quot;C&quot;</span><br><span class="line">LC_IDENTIFICATION=&quot;C&quot;</span><br><span class="line">LC_ALL=C</span><br></pre></td></tr></table></figure>

<p>随后执行 <code>sudo locale-gen zh_CN.UTF-8</code></p>
<p>再执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export LANG=en_US.UTF-8</span><br><span class="line">export LANGUAGE=</span><br><span class="line">export LC_CTYPE=&quot;en_US.UTF-8&quot;</span><br><span class="line">export LC_NUMERIC=zh_CN.UTF-8</span><br><span class="line">export LC_TIME=zh_CN.UTF-8</span><br><span class="line">export LC_COLLATE=&quot;en_US.UTF-8&quot;</span><br><span class="line">export LC_MONETARY=zh_CN.UTF-8</span><br><span class="line">export LC_MESSAGES=&quot;en_US.UTF-8&quot;</span><br><span class="line">export LC_PAPER=zh_CN.UTF-8</span><br><span class="line">export LC_NAME=zh_CN.UTF-8</span><br><span class="line">export LC_ADDRESS=zh_CN.UTF-8</span><br><span class="line">export LC_TELEPHONE=zh_CN.UTF-8</span><br><span class="line">export LC_MEASUREMENT=zh_CN.UTF-8</span><br><span class="line">export LC_IDENTIFICATION=zh_CN.UTF-8</span><br><span class="line">export LC_ALL=</span><br></pre></td></tr></table></figure>

<p>vim 中文乱码的解决方案：</p>
<p>设置 vimrc 文件，加上fileencodings、enc、fencs，代码如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/vim/vimrc <span class="comment"># 或者 vim ~/.vimrc</span></span><br><span class="line"><span class="comment"># 一般只需要这行就行了</span></span><br><span class="line"><span class="built_in">set</span> enc=utf8</span><br><span class="line"><span class="comment"># 如果还不行，可以再添加</span></span><br><span class="line"><span class="built_in">set</span> fileencodings=utf-8,gb2312,gb18030,gbk,ucs-bom,cp936,latin1</span><br><span class="line"><span class="comment"># 还不行就把第一行的utf8换成gbk，第二行的gbk挪到最前</span></span><br><span class="line"><span class="built_in">set</span> fencs=utf8,gbk,gb2312,gb18030</span><br></pre></td></tr></table></figure>



<h3 id="30-安装-nodejs-和-npm"><a href="#30-安装-nodejs-和-npm" class="headerlink" title="30. 安装 nodejs 和 npm"></a>30. 安装 nodejs 和 npm</h3><h4 id="30-1-卸载-node-和-npm"><a href="#30-1-卸载-node-和-npm" class="headerlink" title="30.1 卸载 node 和 npm"></a>30.1 卸载 node 和 npm</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">apt-get 卸载</span></span><br><span class="line">sudo apt remove --purge npm</span><br><span class="line">sudo apt remove --purge nodejs</span><br><span class="line">sudo apt remove --purge nodejs-legacy</span><br><span class="line">sudo apt autoremove</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">手动删除 npm 相关目录</span></span><br><span class="line">rm -r /usr/local/bin/npm</span><br><span class="line">rm -r /usr/local/lib/node-moudels</span><br><span class="line">find / -name npm</span><br><span class="line">rm -r /tmp/npm*</span><br></pre></td></tr></table></figure>

<h4 id="30-2-安装最新的-node-和-npm"><a href="#30-2-安装最新的-node-和-npm" class="headerlink" title="30.2 安装最新的 node 和 npm"></a>30.2 安装最新的 node 和 npm</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">apt-get 安装 nodejs</span></span><br><span class="line">sudo apt install nodejs</span><br><span class="line">sudo apt install nodejs-legacy</span><br><span class="line">node -v # v4.2.6</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装最新的 node v12.x  https://github.com/nodesource/distributions</span></span><br><span class="line">curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -</span><br><span class="line">sudo apt-get install -y nodejs</span><br><span class="line">node -v</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新 npm</span></span><br><span class="line">sudo npm install npm -g</span><br></pre></td></tr></table></figure>

<h3 id="31-vim-记忆位置不生效（只有加上-sudo-时才生效）"><a href="#31-vim-记忆位置不生效（只有加上-sudo-时才生效）" class="headerlink" title="31. vim 记忆位置不生效（只有加上 sudo 时才生效）"></a>31. vim 记忆位置不生效（只有加上 sudo 时才生效）</h3><p>原因：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[ubuntu: ~]$ ls -l ~/.viminfo</span><br><span class="line">-rw------- 1 root root 4558 2015-05-09 13:58 ~/.viminfo</span><br></pre></td></tr></table></figure>

<p>解决办法：<br>删除文件~&#x2F;.viminfo<br>然后重新打开vim(注意要以当前用户打开),vim会自动重建该文件.</p>
<h3 id="32-Ubuntu-LibreOffice-相关配置"><a href="#32-Ubuntu-LibreOffice-相关配置" class="headerlink" title="32. Ubuntu LibreOffice 相关配置"></a>32. Ubuntu LibreOffice 相关配置</h3><h4 id="32-1-关闭-LibreOffice-Calc-输入字母自动大写"><a href="#32-1-关闭-LibreOffice-Calc-输入字母自动大写" class="headerlink" title="32.1 关闭 LibreOffice Calc 输入字母自动大写"></a>32.1 关闭 LibreOffice Calc 输入字母自动大写</h4><p><code>Tools - AutoCorrect Options... - Options</code> 中取消勾选 <code>Capitalize first letter of every sentence</code> 即可。</p>
<h4 id="32-2-关闭-boolean-型值-true-x2F-false-自动变为-TRUE-x2F-FALSE"><a href="#32-2-关闭-boolean-型值-true-x2F-false-自动变为-TRUE-x2F-FALSE" class="headerlink" title="32.2 关闭 boolean 型值 true&#x2F;false 自动变为 TRUE&#x2F;FALSE"></a>32.2 关闭 boolean 型值 true&#x2F;false 自动变为 TRUE&#x2F;FALSE</h4><p>暂未知</p>
<h3 id="33-Ubuntu-终端录制工具"><a href="#33-Ubuntu-终端录制工具" class="headerlink" title="33. Ubuntu 终端录制工具"></a>33. Ubuntu 终端录制工具</h3><h4 id="33-1-ttygif"><a href="#33-1-ttygif" class="headerlink" title="33.1 ttygif"></a>33.1 ttygif</h4><p>安装和使用方式见 github： <a href="https://github.com/icholy/ttygif">https://github.com/icholy/ttygif</a></p>
<p><strong>1. Create ttyrec recording</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ttyrec myrecording</span><br></pre></td></tr></table></figure>

<ul>
<li>Hit CTRL-D or type <code>exit</code> when done recording.</li>
</ul>
<p><strong>2. Convert to gif</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ttygif myrecording</span><br></pre></td></tr></table></figure>

<h4 id="33-2-termtosvg"><a href="#33-2-termtosvg" class="headerlink" title="33.2 termtosvg"></a>33.2 termtosvg</h4><p>安装和使用方式见 github：<a href="https://github.com/nbedos/termtosvg">https://github.com/nbedos/termtosvg</a></p>
<p><strong>ttygif</strong> 使用更简单。</p>
<h3 id="34-安装-ohmyzsh"><a href="#34-安装-ohmyzsh" class="headerlink" title="34. 安装 ohmyzsh"></a>34. 安装 ohmyzsh</h3><p><a href="https://github.com/ohmyzsh/ohmyzsh">https://github.com/ohmyzsh/ohmyzsh</a></p>
<p>安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install zsh</span><br><span class="line">sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</span><br></pre></td></tr></table></figure>

<p>配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim ~/.zsh</span><br></pre></td></tr></table></figure>



<p>Reference: <a href="http://einverne.github.io/post/2018/08/nemo-file-manager.html">使用 NEMO 文件管理器</a> </p>
]]></content>
      <categories>
        <category>Technical</category>
      </categories>
  </entry>
  <entry>
    <title>数据结构与算法之美（1）——复杂度分析</title>
    <url>/2018/10/05/Technical/The_Beauty_of_Data_Structures_and_Algorithms/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="772f4b226b95b9118333aa1300c6579c2ff11e9ab0ff49018d0d7158ef328ecb">8a594f550020b2c4c53139d4c120877c670d47411eb78fc0c4abbfbe587bcfe2cb113c41bfd328c5065f6f2b39026d346a12ba8473dca30b30f240c25870a030489e615608fa9f6e76f98000ee177152e76d6a95c217e988b4d906c34b48bd06c561fecb61502376067f4deb2da17be1dcbae3e86c8e69f0e1e448dfd4040abf79f321fb32109ecc1343fcac9e185e6d4544677b561fc43351e23ea5518574b2139e272c97b707a613cb5296f5b3e348b5c8d88480ff605033b6598baa43b3225d7173fa010cb6f3d7f9524f0af91f4443071921465f954317130cef99ab094885d44414fa40e44effe17f7a3c69c8dbd50e8a7985ceed135d184c0f061dd66cdd5ce7c1470033e87b22bc8db3dfd0e4c4c5869bd579acfdfdad9db03e4d4fb5a835bdd8136c6d9044da70436e717515238c1cee34d9cb3ddba6656dce56e16f3c8db8a87a210bcb0589af77c9a28b0a40f3333f1aef341d4b2bd23faf5be5bac12c331500ea31e2c21133946575219c81501ca20b0ab837d94d9dda69cb96193a44962c570ffa8347521001d50f1b5e9328dc9406a8b1da7007f8b4625f18c731bb357db268b13ddf11a62a2c4b71f666d72ab45b5b7386763be276ee5fd63f2a87abee80bad5802ecd1af30b1af53bd5cb56c3b29fc32ec32182ab64bb79fe64e4817e640be6b4a3efbd7e1fc61ad524a39cafa7603c4762e226a5c4c9c45ca2d54bfab592dbc4b440c2de161895c114d82e2f770e4125ac1fcd9f89f79194d19c49f94e4e66be8ae515f2e17046752db60f9cb7f5983483a546b3c244c9fe43bd16b6d3ba0b340ac325d4e07773a6a9dcb9c585365f2f9475984b0e6a7eb5a05948a11b8fa8f3f531eb4cf9ba3d8a3b09da49a50688fc819ad542f818e82cd3dcc492266a0eeaf1fa504f6e597ac251db338a91aecbca002a2ae3333e7362e8bfd0c66986393bf5ba921a6fa530d467d420700c780fa9d3e19d6fb32a24997d972c0a3a1206c4a187338081a21441ae9dfb9820a700784f0844ad6b188404c7648726348c44503c8378e8bc7074658be1d1e9f83104b63802383f3789ee3abf2ee1334564109951bd12e31b75316ecf3d2d136ebadc42dd04878014c208928232336fa795943d0446a15fa95767727f73ac5b9ec9a79870a316ce5ccb2eb1c69d3d0b2a3c12d6a5fdebdc457cc51c52dfc3428b7871328660cb4d484822bb</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Technical</category>
      </categories>
  </entry>
  <entry>
    <title>Python学习笔记</title>
    <url>/2018/08/29/Python/Python_study/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="21a2e35d55b02ff1259864f978350003f1db03153971bac461c38d4fdceb5842">8a594f550020b2c4c53139d4c120877c670d47411eb78fc0c4abbfbe587bcfe2cb113c41bfd328c5065f6f2b39026d346a12ba8473dca30b30f240c25870a030489e615608fa9f6e76f98000ee177152e76d6a95c217e988b4d906c34b48bd06c561fecb61502376067f4deb2da17be1dcbae3e86c8e69f0e1e448dfd4040abf79f321fb32109ecc1343fcac9e185e6d4544677b561fc43351e23ea5518574b2139e272c97b707a613cb5296f5b3e348b5c8d88480ff605033b6598baa43b3225d7173fa010cb6f3d7f9524f0af91f4443071921465f954317130cef99ab094885d44414fa40e44effe17f7a3c69c8dbd50e8a7985ceed135d184c0f061dd66cdd5ce7c1470033e87b22bc8db3dfd0e4c4c5869bd579acfdfdad9db03e4d4fb5a835bdd8136c6d9044da70436e717515bf5bc37635d0131429e92945cb0703e63998d8319cd3fc6a026d29834c24964f028683ad512d0554c98a6a65e78ff20e15bfa8843552bff85c6fe6deed5c7bab0a3b642e86d665c67d9ce7874c34f9b3a86b0d6dc9d062a9a42406ecef8e6e3632266ffdd4d682f425b0812de7e94f0fbda4e2d826ccda44b131b8f0d5960dbfb3d2fcabc605bf800dbc4047825dbae50f2314edb93db01b2540b21ff6e05abbf8b4795cae1822484980395e9b0b105fe1f5e97420d4fcffbdb62543d57c3ec2f23dc4b3458bd8fba1369af50256b3a41d000999da3593221694d29d3ee6575ded8bc4dcfefcb8c9f0e9efb90e424359d42613e88ba4f07ac97c3778a481ae2a7de67c88e46b4888d59fe08eca0b748afde2e7ff5a11f5fd87a087359a63516968694e6753dd6360fa31cddadcfe53756f7dce60606d67fe75462ed86635fde11eb08707cb168e114d32397d779b75f2ae2684f6558e68dc37a664c4ba4f1b90c28d1c03a8e7d85d358ab77f9cbcc66b2e3f291799d9cdb2e8f9991d0e888fe78fd826094b51732dd373d24ae7d89250e273870239eded7e009fe2e73604e66bc15c119755825713d36c20491419738d1728693243000c763f9809be547c44081cabc6593f623a8e72edc6944ac11db7f2cb5d683c452a0a7ea63676699dca517990a8429a96cdeb38039ff612e643a07a74dde5de4e38b59f555e6828ea42c84822faeaafbd7e4784b439b94ffee64afa565e18d6c554bc82ff2133725cf6fd78f37c09d5757844b024fe4deff46139e906477cb66f3609978c2097e2a0f0e37a6cf214a5126c3254f93d10ab72abe7bd776abbd1ff1d7b50aec216337904c393680201495b5a3436d340dcbb1fa57c594b0e520a1943cb2e0f855c9e2d28f254e0a11b0a7d5960acbe4ec3d99fc4a85e72dff1139239c4115f240a1f5496fa7da0f33a67d7b79dc2e25dd2581e8f423283d3b522b03c7f6cbbb55b35f0c392e805d051d4ed994638d792ec8fe6a68ba620ad4710de45776683f3b592ed49f4773a5e58878aa0aaf6a13334e361f5786d4fb678b78c9d06167580c695542007f9e11b36ff86170740699df6a0ec940ab25994de0cbcae29a06f972904546833b8d3ef9575c276055a75df70e9e740e6ed722341d494a51f29e6feb71c83066843f5581d9ebac8c81e960cb5dcf704078aa1fe9fbca69f0ad828ea19904c9c678329816a8455277e41ae0706a8cf65f33dca11d8b0b85ca1c6096d62f33b1fd8b300837dadb06454cba3d2f7fe8f9b1934a8a7f8bf5bafdda43217523b6b6a377e5dde39153a382f7c0737d4d8668c5e91d9f7b1fe4a017558534eee49d241a4cd085f624edffddb95ce55d67d7888ec26b0f9e138b303eefdce1a0de853b4e753ba61abb114c5229845f8ddd9f65bd5104dca2e1a90441dc5cf39c9a99692ea2061dd086cf4a3110dcd5d3314a6889088181348c60e6adbe6c667a90edc6671e66719758736e602ebf6c2a7f10f8c5f3f0b6265ce0ff445e96ce2a54ba047f3a746996b859d6a322705a86f8d984a57257bada39b798cca8c75d6e963e22c7c4a869d968d9805fbfc0d909f426c0b267e38f77debe4769863e09c7c6337520be71686ec939dd847f94ddbaec41f6f04f6c22032119afe8b0927b88b7764f3b2f83fbbf84770c9a61cf74e0c100848546336fa8b74d8a6ae62008dd929061f3b93114030dd60dcf794c9cdc28955565c9af48025fc8b34ff7195b3704491cf763d9eefdbb61b02f65e7301edec35a1703b559ece5dbb5aa2f7a5794d27fe64fe21ecc09531cc8e6d37af95f778ef4c1faa1965963ab7e3d1de82a13f0eb6a6c28884f759dc9841e953b80bf36949edba96c217ab5eaf4ca574f71a02495a7d6adc5b6487436551588698343443931e913871c28a2122c407ad6bf90ca77c5a9bffd1e3b78d8c93a306f32e4fc6e91dc2dbd904468219c920218045b991b42a3fb14d45a2abfe65e46590dd18d001ca025fafb3c95cc8c007f54a99b8acf96d33c81bccf94cc0efa75ba7e098558ad113d7cc0a22f6426e2a08ce5c973be228914727b6c04392de9f73a9716a440889caa9e2dcd10c3e27b842ec4c3376b77c49af47b8eb03beed5879864aecdfb00d9c262621d8718650e3f9abb443e572ae46646af4109c7a2b40061386eef047bd2f25a68329e42b055c4bb05171f9f803717e8a151a88430f9f4b6d05549057d875b349f857c79d544107e67a35105d7cbd8fb28a0866a5c5649b35f266f9681c1de85dac7970dde66392a9ef33d6c6b9f86111324a6941a54223b99240621bc073bc269e9f2cf7d563a0d62aac1eab0a2ecce604c96753ceded6c003615b8f8ef720735169ab64944a4f181fffef993261704cc87d5c8f8d27bac11827852010baa79af56a2790bb325f4d199533cbf1f432c3567fbb8f49a4127985c9195eadba55b0811f094fd89e74fe54ce6b9e2f0e3744573035e5ef4cd168e7012b6a5856bd395adc6c117b91eee97da281563c14628742ebea3bc8313d84ad62e991f16a9243f5e92ee1b71c687cd38317fd92637a169af208f7b04d0bc7cd2d9eee8432f23084c10222cc3f859362febe074638e612fdccde48d94782f46fd12343f05f970cca0250753345fe4f0d618765eb24f522131cb7c137c29c7e836b07d79757973e8dbc5bbeddca1fa95f0ef49c6ed47c76a089ba7a63cc9b868164c0a0e9f80c4e3fd694c317c4725474f1634478c6</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu搭建OpenGrok在线代码浏览环境</title>
    <url>/2018/08/29/Technical/UbuntuBuildOpenGrok/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><code>OpenGrok</code> 是一个快速, 便于使用的源码搜索引擎与对照引擎, 它能够帮助我们快速的搜索、定位、对照代码树. 接下来就具体讲解一下 <code>OpenGrok</code> 的安装及使用。</p>
</blockquote>
<span id="more"></span>

<h3 id="1-安装-JDK"><a href="#1-安装-JDK" class="headerlink" title="1. 安装 JDK"></a>1. 安装 JDK</h3><p>需要安装java 1.8.x及以上：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install java</span><br></pre></td></tr></table></figure>



<h3 id="2-安装-exuberant-ctags"><a href="#2-安装-exuberant-ctags" class="headerlink" title="2. 安装 exuberant-ctags"></a>2. 安装 exuberant-ctags</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-getinstall exuberant-ctags</span><br></pre></td></tr></table></figure>



<h3 id="3-Tomcat-环境配置"><a href="#3-Tomcat-环境配置" class="headerlink" title="3. Tomcat 环境配置"></a>3. Tomcat 环境配置</h3><p>从 <a href="https://tomcat.apache.org/">https://tomcat.apache.org/</a> 下载tomcat 9.0（apache-tomcat-9.0.11.tar.gz），解压到 <code>/opt/</code> 目录下，赋予 <code>apache-tomcat-9.0.11/bin</code> 可执行权限，启动tomcat：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ranger@adp:/opt/tomcat-9.0.11 $ ./bin/startup.sh </span><br><span class="line">Using CATALINA_BASE:   /opt/tomcat-9.0.11</span><br><span class="line">Using CATALINA_HOME:   /opt/tomcat-9.0.11</span><br><span class="line">Using CATALINA_TMPDIR: /opt/tomcat-9.0.11/temp</span><br><span class="line">Using JRE_HOME:        /usr</span><br><span class="line">Using CLASSPATH:       /opt/tomcat-9.0.11/bin/bootstrap.jar:/opt/tomcat-9.0.11/bin/tomcat-juli.jar</span><br><span class="line">Tomcat started.</span><br></pre></td></tr></table></figure>

<p>在浏览器中输入 <a href="http://localhost:8080/">http://localhost:8080/</a> 检查tomcat是否正常启动，如显示欢迎页面则配置成功。</p>
<h3 id="4-配置-OpenGrok"><a href="#4-配置-OpenGrok" class="headerlink" title="4. 配置 OpenGrok"></a>4. 配置 OpenGrok</h3><ol>
<li><p>从 <a href="https://github.com/oracle/opengrok/releases">官方github</a> 下载最新版本，建议不要使用最新版本，反正我用最新版本 <code>opengrok-1.1-rc38</code> 没有成功，最终使用 <a href="https://github.com/oracle/opengrok/releases/tag/0.12.1.5">opengrok-0.12.1.5</a> 成功;</p>
</li>
<li><p>使用如下脚本命令创建索引</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">****************************************************************<span class="comment">#</span></span>                                                                                                                                     </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ScriptName: indexing_opengrok.sh</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Author: ZhouRan</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Create Date: 2018-08-29</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">***************************************************************<span class="comment">#</span></span></span><br><span class="line">     </span><br><span class="line">opengrok_path=&quot;/opt/opengrok-0.12.1.5&quot;</span><br><span class="line">source_root=&quot;$&#123;opengrok_path&#125;/source/code&quot;</span><br><span class="line">indexing_root=&quot;$&#123;opengrok_path&#125;/source/indexing&quot;</span><br><span class="line">     </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">indexing <span class="keyword">for</span> the <span class="built_in">source</span> code</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. remove the old indexing <span class="keyword">if</span> exist</span></span><br><span class="line">if [ -d $&#123;indexing_root&#125;/ ];then</span><br><span class="line">    rm -rf $&#123;indexing_root&#125;/</span><br><span class="line">fi</span><br><span class="line">mkdir -p $&#123;indexing_root&#125;</span><br><span class="line">     </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. <span class="built_in">export</span> the OpenGrok environment variables</span></span><br><span class="line">export OPENGROK_TOMCAT_BASE=/opt/apache-tomcat-9.0.11</span><br><span class="line">export OPENGROK_INSTANCE_BASE=opengrok</span><br><span class="line">     </span><br><span class="line">export JAVA_OPTS=&quot;-Xmx1024m&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">java -jar <span class="variable">$&#123;opengrok_path&#125;</span>/lib/opengrok.jar <span class="keyword">for</span> <span class="built_in">command</span> <span class="built_in">help</span></span></span><br><span class="line">java $JAVA_OPTS -jar $&#123;opengrok_path&#125;/lib/opengrok.jar -P -S -v \</span><br><span class="line">-s $&#123;source_root&#125; \</span><br><span class="line">-d $&#123;indexing_root&#125; \</span><br><span class="line">-W $&#123;indexing_root&#125;/configuration.xml \</span><br><span class="line">-w opengrok # webapp-context  $&#123;OPENGROK_TOMCAT_BASE&#125;/webapps/webapp-context</span><br></pre></td></tr></table></figure>


</li>
<li><p>复制 source.war 到 <code>/opt/apache-tomcat-9.0.11/webapps</code> ，source.war 会自动解压为 source 目录，可修改此目录名；</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp /opt/opengrok-0.12.1.5/lib/source.war /opt/apache-tomcat-9.0.11/webapps</span><br></pre></td></tr></table></figure>

<p>浏览器输入 <a href="http://localhost:8080/source">http://localhost:8080/source</a> ，显示搜索界面则成功；</p>
</li>
<li><p>修改 <code>/opt/apache-tomcat-9.0.11/webapps/mychain/WEB-INF/web.xml</code> ，将CONFIGURATION 设置为实际的 configuration.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">display-name</span>&gt;</span>OpenGrok<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>A wicked fast source browser<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>CONFIGURATION<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/opt/opengrok-0.12.1.5/source/indexing/configuration.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Full path to the configuration file where OpenGrok can read it&#x27;s configuration<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span>  </span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="5-启动-tomcat-，在线浏览代码"><a href="#5-启动-tomcat-，在线浏览代码" class="headerlink" title="5. 启动 tomcat ，在线浏览代码"></a>5. 启动 tomcat ，在线浏览代码</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bash /opt/apache-tomcat-9.0.11/bin/startup.sh</span><br></pre></td></tr></table></figure>

<p>浏览器输入 <a href="http://localhost:8080/source">http://localhost:8080/source</a> 浏览代码。</p>
<h3 id="6-Tomcat-开机启动"><a href="#6-Tomcat-开机启动" class="headerlink" title="6. Tomcat 开机启动"></a>6. Tomcat 开机启动</h3><p><a href="https://blog.csdn.net/wangli61289/article/details/37924785">https://blog.csdn.net/wangli61289/article/details/37924785</a></p>
<h3 id="7-OpenGrok-多项目索引配置"><a href="#7-OpenGrok-多项目索引配置" class="headerlink" title="7. OpenGrok 多项目索引配置"></a>7. OpenGrok 多项目索引配置</h3><p><a href="https://blog.csdn.net/luzhenrong45/article/details/52734781">https://blog.csdn.net/luzhenrong45/article/details/52734781</a></p>
<p>参考：<a href="https://blog.csdn.net/yzx_zjut/article/details/81951869">https://blog.csdn.net/yzx_zjut/article/details/81951869</a></p>
]]></content>
      <categories>
        <category>Technical</category>
      </categories>
  </entry>
  <entry>
    <title>Ubuntu18.04编译问题</title>
    <url>/2018/08/29/Android/Ubuntu18.04_compileIssue/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>Ubuntu18.04编译问题</p>
</blockquote>
<span id="more"></span>

<h3 id="一-XEN项目"><a href="#一-XEN项目" class="headerlink" title="一. XEN项目"></a>一. XEN项目</h3><h5 id="1-make-j4-ALLOW-MISSING-DEPENDENCIES-x3D-true"><a href="#1-make-j4-ALLOW-MISSING-DEPENDENCIES-x3D-true" class="headerlink" title="1.make -j4 ALLOW_MISSING_DEPENDENCIES&#x3D;true"></a>1.make -j4 ALLOW_MISSING_DEPENDENCIES&#x3D;true</h5><h5 id="2-sudo-apt-install-m4"><a href="#2-sudo-apt-install-m4" class="headerlink" title="2.sudo apt install m4"></a>2.sudo apt install m4</h5><h5 id="3-sudo-apt-install-bison"><a href="#3-sudo-apt-install-bison" class="headerlink" title="3.sudo apt install bison"></a>3.sudo apt install bison</h5><h5 id="4-sudo-apt-get-install-g-multilib-gcc-multilib-lib32ncurses5-dev-lib32z1-dev"><a href="#4-sudo-apt-get-install-g-multilib-gcc-multilib-lib32ncurses5-dev-lib32z1-dev" class="headerlink" title="4.sudo apt-get install  g++-multilib gcc-multilib lib32ncurses5-dev lib32z1-dev"></a>4.sudo apt-get install  g++-multilib gcc-multilib lib32ncurses5-dev lib32z1-dev</h5><h5 id="5"><a href="#5" class="headerlink" title="5."></a>5.</h5><p>FAILED: out&#x2F;target&#x2F;product&#x2F;gordon_peak_xen&#x2F;obj&#x2F;STATIC_LIBRARIES&#x2F;libedify_intermediates&#x2F;lexer.cpp<br>&#x2F;bin&#x2F;bash -c “prebuilts&#x2F;misc&#x2F;linux-x86&#x2F;flex&#x2F;flex-2.5.39 -oout&#x2F;target&#x2F;product&#x2F;gordon_peak_xen&#x2F;obj&#x2F;STATIC_LIBRARIES&#x2F;libedify_intermediates&#x2F;lexer.cpp bootable&#x2F;recovery&#x2F;edify&#x2F;lexer.ll”<br>flex-2.5.39: loadlocale.c:130: _nl_intern_locale_data: Assertion &#96;cnt &lt; (sizeof (_nl_value_type_LC_TIME) &#x2F; sizeof (_nl_value_type_LC_TIME[0]))’ failed.<br><strong>解决</strong>：</p>
<p>在这个链接中找到解法 <a href="https://stackoverflow.com/questions/49955137/error-when-build-lineageos-make-ninja-wrapper-error-1">https://stackoverflow.com/questions/49955137/error-when-build-lineageos-make-ninja-wrapper-error-1</a><br>把 export LC_ALL&#x3D;C 这行代码添加到bashrc 文件中，LC_ALL&#x3D;C 是为了去除所有本地化的设置，让命令能正确执行</p>
<h5 id="6"><a href="#6" class="headerlink" title="6."></a>6.</h5><p>FAILED: out&#x2F;target&#x2F;product&#x2F;gordon_peak_xen&#x2F;gen&#x2F;STATIC_LIBRARIES&#x2F;libmesa_glsl_intermediates&#x2F;glsl&#x2F;ir_expression_operation.h<br>&#x2F;bin&#x2F;bash -c “python vendor&#x2F;intel&#x2F;external&#x2F;mesa3d-intel&#x2F;src&#x2F;compiler&#x2F;glsl&#x2F;ir_expression_operation.py enum &gt; out&#x2F;target&#x2F;product&#x2F;gordon_peak_xen&#x2F;gen&#x2F;STATIC_LIBRARIES&#x2F;libmesa_glsl_intermediates&#x2F;glsl&#x2F;ir_expression_operation.h”<br>Traceback (most recent call last):<br>  File “vendor&#x2F;intel&#x2F;external&#x2F;mesa3d-intel&#x2F;src&#x2F;compiler&#x2F;glsl&#x2F;ir_expression_operation.py”, line 23, in <module><br>    import mako.template<br>ImportError: No module named mako.template<br>[  8% 6972&#x2F;83760] target  C++: libasou…artx_plugin&#x2F;IasAlsaSmartXConnector.cpp<br>ninja: build stopped: subcommand failed.<br><strong>解决</strong>：sudo apt-get install python-mako</p>
<h5 id="7"><a href="#7" class="headerlink" title="7."></a>7.</h5><p>FAILED: out&#x2F;target&#x2F;product&#x2F;gordon_peak_xen&#x2F;vendor&#x2F;etc&#x2F;permissions&#x2F;android.hardware.camera.xml<br>&#x2F;bin&#x2F;bash -c “(xmllint frameworks&#x2F;native&#x2F;data&#x2F;etc&#x2F;android.hardware.camera.xml &gt;&#x2F;dev&#x2F;null ) &amp;&amp; (mkdir -p out&#x2F;target&#x2F;product&#x2F;gordon_peak_xen&#x2F;vendor&#x2F;etc&#x2F;permissions&#x2F; ) &amp;&amp; (rm -f out&#x2F;target&#x2F;product&#x2F;gordon_peak_xen&#x2F;vendor&#x2F;etc&#x2F;permissions&#x2F;android.hardware.camera.xml ) &amp;&amp; (cp frameworks&#x2F;native&#x2F;data&#x2F;etc&#x2F;android.hardware.camera.xml out&#x2F;target&#x2F;product&#x2F;gordon_peak_xen&#x2F;vendor&#x2F;etc&#x2F;permissions&#x2F;android.hardware.camera.xml )”<br>&#x2F;bin&#x2F;bash: xmllint: command not found<br><strong>解决</strong>：sudo apt-get  install libxml2-utils</p>
<h5 id="8"><a href="#8" class="headerlink" title="8."></a>8.</h5><p>&#x2F;home&#x2F;rangerzhou&#x2F;work&#x2F;xen_o_ww09&#x2F;xen_o_ww09&#x2F;kernel&#x2F;bxt&#x2F;scripts&#x2F;sign-file.c:25:10: fatal error: openssl&#x2F;opensslv.h: No such file or directory<br> #include &lt;openssl&#x2F;opensslv.h&gt;<br>          ^~~~~~~~~~~~~~~~~~~~<br>compilation terminated.<br>scripts&#x2F;Makefile.host:107: recipe for target ‘scripts&#x2F;sign-file’ failed<br>make[2]: *** [scripts&#x2F;sign-file] Error 1<br>make[2]: *** Waiting for unfinished jobs….<br>&#x2F;home&#x2F;rangerzhou&#x2F;work&#x2F;xen_o_ww09&#x2F;xen_o_ww09&#x2F;kernel&#x2F;bxt&#x2F;Makefile:555: recipe for target ‘scripts’ failed<br>make[1]: *** [scripts] Error 2<br>make[1]: Leaving directory ‘&#x2F;home&#x2F;rangerzhou&#x2F;work&#x2F;xen_o_ww09&#x2F;xen_o_ww09&#x2F;out&#x2F;target&#x2F;product&#x2F;gordon_peak_xen&#x2F;obj&#x2F;kernel’<br>Makefile:150: recipe for target ‘sub-make’ failed<br>make: *** [sub-make] Error 2<br>make: Leaving directory ‘&#x2F;home&#x2F;rangerzhou&#x2F;work&#x2F;xen_o_ww09&#x2F;xen_o_ww09&#x2F;kernel&#x2F;bxt’<br>[ 98% 72231&#x2F;73211] target Strip (mini debug info): i965_dri (out&#x2F;target&#x2F;product&#x2F;gordon_peak_xen&#x2F;obj&#x2F;SHARED_LIBRARIES&#x2F;i965_dri_intermediates&#x2F;i965_dri.so)<br>ninja: build stopped: subcommand failed.<br><strong>解决</strong>：sudo apt-get install libssl-dev</p>
<h5 id="9"><a href="#9" class="headerlink" title="9."></a>9.</h5><p>make[1]: Leaving directory ‘&#x2F;home&#x2F;rangerzhou&#x2F;work&#x2F;xen_o_ww09&#x2F;xen_o_ww09&#x2F;out&#x2F;target&#x2F;product&#x2F;gordon_peak_xen&#x2F;obj&#x2F;kernel’<br>Makefile:150: recipe for target ‘sub-make’ failed<br>make: *** [sub-make] Error 2<br>make: Leaving directory ‘&#x2F;home&#x2F;rangerzhou&#x2F;work&#x2F;xen_o_ww09&#x2F;xen_o_ww09&#x2F;kernel&#x2F;bxt’<br>ninja: build stopped: subcommand failed.<br><strong>解决</strong>：apt-get install device-tree-compiler</p>
<h5 id="10"><a href="#10" class="headerlink" title="10."></a>10.</h5><p>&#x2F;bin&#x2F;bash: lz4c: command not found<br>&#x2F;home&#x2F;rangerzhou&#x2F;work&#x2F;xen_o_ww09&#x2F;xen_o_ww09&#x2F;kernel&#x2F;bxt&#x2F;arch&#x2F;x86&#x2F;boot&#x2F;compressed&#x2F;Makefile:134: recipe for target ‘arch&#x2F;x86&#x2F;boot&#x2F;compressed&#x2F;vmlinux.bin.lz4’ failed<br>make[3]: *** [arch&#x2F;x86&#x2F;boot&#x2F;compressed&#x2F;vmlinux.bin.lz4] Error 1<br>&#x2F;home&#x2F;rangerzhou&#x2F;work&#x2F;xen_o_ww09&#x2F;xen_o_ww09&#x2F;kernel&#x2F;bxt&#x2F;arch&#x2F;x86&#x2F;boot&#x2F;Makefile:111: recipe for target ‘arch&#x2F;x86&#x2F;boot&#x2F;compressed&#x2F;vmlinux’ failed<br>make[2]: *** [arch&#x2F;x86&#x2F;boot&#x2F;compressed&#x2F;vmlinux] Error 2<br>arch&#x2F;x86&#x2F;Makefile:255: recipe for target ‘bzImage’ failed<br>make[1]: *** [bzImage] Error 2<br><strong>解决</strong>：apt-get install liblz4-tool</p>
<h3 id="二-Google-sourcecode-android-8-1-0-r9"><a href="#二-Google-sourcecode-android-8-1-0-r9" class="headerlink" title="二. Google sourcecode android-8.1.0_r9"></a>二. Google sourcecode android-8.1.0_r9</h3><h5 id="1-error-ro-build-fingerprint-cannot-exceed-91-bytes"><a href="#1-error-ro-build-fingerprint-cannot-exceed-91-bytes" class="headerlink" title="1. error: ro.build.fingerprint cannot exceed 91 bytes"></a>1. error: ro.build.fingerprint cannot exceed 91 bytes</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1. #build/tools/post_process_props.py</span><br><span class="line">diff --git a/tools/post_process_props.py b/tools/post_process_props.py</span><br><span class="line">index 9355e4b22..2f0d47503 100755</span><br><span class="line">--- a/tools/post_process_props.py</span><br><span class="line">+++ b/tools/post_process_props.py</span><br><span class="line">@@ -22,7 +22,7 @@ import sys</span><br><span class="line"><span class="meta prompt_"> # </span><span class="language-bash">See PROP_VALUE_MAX <span class="keyword">in</span> system_properties.h.</span></span><br><span class="line"><span class="meta prompt_"> # </span><span class="language-bash">The constant <span class="keyword">in</span> system_properties.h includes the terminating NUL,</span></span><br><span class="line"><span class="meta prompt_"> # </span><span class="language-bash">so we decrease the value by 1 here.</span></span><br><span class="line">-PROP_VALUE_MAX = 91</span><br><span class="line">+PROP_VALUE_MAX = 128</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"> # </span><span class="language-bash">Put the modifications that you need to make into the /system/build.prop into this</span></span><br><span class="line"><span class="meta prompt_"> # </span><span class="language-bash"><span class="keyword">function</span>. The prop object has get(name) and put(name,value) methods.</span></span><br><span class="line"> </span><br><span class="line"> 2. #bionic/libc/include/sys/system_properties.h</span><br><span class="line"> diff --git a/libc/include/sys/system_properties.h b/libc/include/sys/system_properties.h</span><br><span class="line">index d07585936..1b2104dc7 100644</span><br><span class="line">--- a/libc/include/sys/system_properties.h</span><br><span class="line">+++ b/libc/include/sys/system_properties.h</span><br><span class="line">@@ -38,7 +38,7 @@ __BEGIN_DECLS</span><br><span class="line"> </span><br><span class="line"> typedef struct prop_info prop_info;</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">-#</span><span class="language-bash">define PROP_VALUE_MAX  92</span></span><br><span class="line">+#define PROP_VALUE_MAX  128</span><br><span class="line"> </span><br><span class="line"> /*</span><br><span class="line">  * Sets system property `key` to `value`, creating the system property if it doesn&#x27;t already exist.</span><br></pre></td></tr></table></figure>



<h5 id="2-ckati-failed-with-signal-killed"><a href="#2-ckati-failed-with-signal-killed" class="headerlink" title="2. ckati failed with: signal: killed"></a>2. ckati failed with: signal: killed</h5><p>内存问题</p>
<h5 id="3-frameworks-x2F-native-x2F-cmds-x2F-installd-x2F-installd-cpp-43-1-error-static-assert-failed-“Size-mismatch-”"><a href="#3-frameworks-x2F-native-x2F-cmds-x2F-installd-x2F-installd-cpp-43-1-error-static-assert-failed-“Size-mismatch-”" class="headerlink" title="3. frameworks&#x2F;native&#x2F;cmds&#x2F;installd&#x2F;installd.cpp:43:1: error: static_assert failed “Size mismatch.”"></a>3. frameworks&#x2F;native&#x2F;cmds&#x2F;installd&#x2F;installd.cpp:43:1: error: static_assert failed “Size mismatch.”</h5><p>frameworks&#x2F;native&#x2F;cmds&#x2F;installd&#x2F;installd_deps.h<br>&#x2F;&#x2F; constexpr size_t kPropertyValueMax &#x3D; 92u;<br>constexpr size_t kPropertyValueMax &#x3D; 128u</p>
<h5 id="4-Jack-out-of-memory-error，try-increasing-heap-size"><a href="#4-Jack-out-of-memory-error，try-increasing-heap-size" class="headerlink" title="4. Jack out of memory error，try increasing heap size"></a>4. Jack out of memory error，try increasing heap size</h5><p>export JACK_SERVER_VM_ARGUMENTS&#x3D;”-Dfile.encoding&#x3D;UTF-8 -XX:+TieredCompilation -Xmx4096m”<br>out&#x2F;host&#x2F;linux-x86&#x2F;bin&#x2F;jack-admin kill-server<br>out&#x2F;host&#x2F;linux-x86&#x2F;bin&#x2F;jack-admin start-server</p>
<h3 id="三-renesas编译问题"><a href="#三-renesas编译问题" class="headerlink" title="三. renesas编译问题"></a>三. renesas编译问题</h3><h5 id="1-文件缺失"><a href="#1-文件缺失" class="headerlink" title="1.文件缺失"></a>1.文件缺失</h5><p>error: external&#x2F;e2fsprogs&#x2F;lib&#x2F;ss&#x2F;Android.bp:3:1: module “libext2_ss” variant “linux_x86_64_static”: source path external&#x2F;e2fsprogs&#x2F;lib&#x2F;ss&#x2F;ss_err.c does not exist<br>error: external&#x2F;e2fsprogs&#x2F;lib&#x2F;ss&#x2F;Android.bp:3:1: module “libext2_ss” variant “linux_x86_64_static”: source path external&#x2F;e2fsprogs&#x2F;lib&#x2F;ss&#x2F;std_rqs.c does not exist</p>
<p>error: external&#x2F;e2fsprogs&#x2F;lib&#x2F;ext2fs&#x2F;Android.bp:3:1: module “libext2fs” variant “linux_x86_64_static”: source path external&#x2F;e2fsprogs&#x2F;lib&#x2F;ext2fs&#x2F;ext2_err.c does not exist</p>
<p>error: external&#x2F;e2fsprogs&#x2F;debugfs&#x2F;Android.bp:57:1: module “debugfs” variant “linux_x86_64”: source path external&#x2F;e2fsprogs&#x2F;debugfs&#x2F;debug_cmds.c does not exist<br>error: external&#x2F;e2fsprogs&#x2F;debugfs&#x2F;Android.bp:57:1: module “debugfs” variant “linux_x86_64”: source path external&#x2F;e2fsprogs&#x2F;debugfs&#x2F;extent_cmds.c does not exist</p>
<p>解决：从AOSP源码copy</p>
<h5 id="2-ImportError-No-module-named-Crypto-PublicKey"><a href="#2-ImportError-No-module-named-Crypto-PublicKey" class="headerlink" title="2. ImportError: No module named Crypto.PublicKey"></a>2. ImportError: No module named Crypto.PublicKey</h5><p>解决：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install pycrypto</span><br></pre></td></tr></table></figure>

<h5 id="3-ImportError-No-module-named-wand-image"><a href="#3-ImportError-No-module-named-wand-image" class="headerlink" title="3. ImportError: No module named wand.image"></a>3. ImportError: No module named wand.image</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install wand</span><br></pre></td></tr></table></figure>

<h5 id="4-x2F-common-x2F-android-x2F-extra-config-mk-165-JAVA-HOME-does-not-point-to-a-valid-java-installation-Stop"><a href="#4-x2F-common-x2F-android-x2F-extra-config-mk-165-JAVA-HOME-does-not-point-to-a-valid-java-installation-Stop" class="headerlink" title="4. ..&#x2F;common&#x2F;android&#x2F;extra_config.mk:165: *** JAVA_HOME does not point to a valid java installation.  Stop."></a>4. ..&#x2F;common&#x2F;android&#x2F;extra_config.mk:165: *** JAVA_HOME does not point to a valid java installation.  Stop.</h5><p>make: Entering directory ‘&#x2F;home&#x2F;rangerzhou&#x2F;work&#x2F;renesas&#x2F;device&#x2F;renesas&#x2F;proprietary&#x2F;imgtec&#x2F;rogue_km&#x2F;build&#x2F;linux&#x2F;r8a7795_android’<br>WARNING: USE_CLANG&#x3D;0 is deprecated for Android builds<br>******* Multiarch build: yes<br>******* Primary arch:    target_aarch64<br>******* Secondary arch:  none<br>..&#x2F;common&#x2F;android&#x2F;extra_config.mk:165: *** JAVA_HOME does not point to a valid java installation.  Stop.<br>make: Leaving directory ‘&#x2F;home&#x2F;rangerzhou&#x2F;work&#x2F;renesas&#x2F;device&#x2F;renesas&#x2F;proprietary&#x2F;imgtec&#x2F;rogue_km&#x2F;build&#x2F;linux&#x2F;r8a7795_android’<br>[ 40% 34093&#x2F;83351] &#x2F;&#x2F;frameworks&#x2F;av&#x2F;media&#x2F;libstagefright&#x2F;codecs&#x2F;m4v_h263&#x2F;dec:libstagefright_m4vh263dec clang++ src&#x2F;chv_filter.cpp [arm]</p>
<p>解决：~&#x2F;.bashrc中的JAVA_HOME指定路径要写到bin之前：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64 #不要写成export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64/bin</span><br></pre></td></tr></table></figure>



<h5 id="5-Syntax-error-“-“-unexpected"><a href="#5-Syntax-error-“-“-unexpected" class="headerlink" title="5. Syntax error: “(“ unexpected"></a>5. Syntax error: “(“ unexpected</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo dpkg-reconfigure dash</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>Android_O系统层授予APP权限</title>
    <url>/2018/08/29/Android/Android_O_grant_permission_in_system/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h3><blockquote>
<p>权限的目的是保护用户隐私， Andriod 应用访问用户敏感数据（例如联系人、短信）和某些系统功能（例如相机、网络）时必须申请权限，系统会根据不同的功能选择自动授予权限或者提示用户批准权限请求。</p>
</blockquote>
<span id="more"></span>

<h3 id="2-权限许可"><a href="#2-权限许可" class="headerlink" title="2. 权限许可"></a>2. 权限许可</h3><p>应用必须在 <code>AndroidManifest.xml</code> 中使用 <code>&lt;uses-permission&gt;</code> 标签对声明需要的权限，例如声明需要访问网络和发送短信的权限：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    package=&quot;com.aptiv.helloworld&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;</span><br><span class="line">    &lt;uses-permission android:name=&quot;android.permission.SEND_SMS&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;application ...&gt;</span><br><span class="line">		...</span><br><span class="line">    &lt;/application&gt;</span><br><span class="line"></span><br><span class="line">&lt;/manifest&gt;</span><br></pre></td></tr></table></figure>



<p>在 Android 5.1 或更低版本，或者应用的 targetSdk 为22 或更低，用户必须在安装应用时授予 manifest 中列出的权限，否则应用无法安装；</p>
<p>在 Android 6.0及以上，或者应用的 targetSdk 为23或者更高，应用必须在 manifest 中列出权限，并且必须在运行时请求其需要的每项 <strong>dangerous</strong> 权限，用户可以授予或拒绝每项权限，且即使用户拒绝权限请求，应用仍可以继续运行有限的功能；</p>
<p>系统权限分为几个保护级别，我们一般只需要了解最重要的保护级别： <strong>normal</strong> 和 <strong>dangerous</strong>：</p>
<ul>
<li><strong>normal：</strong>默认值，低风险的权限采用此级别，在 app 安装时系统会自动授予此 app 请求的所有 normal 权限，无需征求用户的同意；</li>
<li><strong>dangerous：</strong>较高风险的权限，如果应用声明其需要危险权限，则用户必须明确向应用授予该权限； 如果在 manifest 中列出的权限级别为 <strong>normal</strong> （也就是说，权限不会对用户的隐私或设备操作造成太大风险），系统会自动授予这些权限给应用。</li>
</ul>
<p>可以在&#x2F;<a href="http://androidxref.com/8.1.0_r33/xref/frameworks/">frameworks</a>&#x2F;<a href="http://androidxref.com/8.1.0_r33/xref/frameworks/base/">base</a>&#x2F;<a href="http://androidxref.com/8.1.0_r33/xref/frameworks/base/core/">core</a>&#x2F;<a href="http://androidxref.com/8.1.0_r33/xref/frameworks/base/core/res/">res</a>&#x2F;<a href="http://androidxref.com/8.1.0_r33/xref/frameworks/base/core/res/AndroidManifest.xml">AndroidManifest.xml</a>中查询各个权限的级别（protectionLevel属性）：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.INTERNET&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:description</span>=<span class="string">&quot;@string/permdesc_createNetworkSockets&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:label</span>=<span class="string">&quot;@string/permlab_createNetworkSockets&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:protectionLevel</span>=<span class="string">&quot;normal|instant&quot;</span> /&gt;</span></span><br><span class="line">... ...</span><br><span class="line"><span class="tag">&lt;<span class="name">permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.CAMERA&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:permissionGroup</span>=<span class="string">&quot;android.permission-group.CAMERA&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:label</span>=<span class="string">&quot;@string/permlab_camera&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:description</span>=<span class="string">&quot;@string/permdesc_camera&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:protectionLevel</span>=<span class="string">&quot;dangerous|instant&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>也可以通过 <code>adb shell pm list permissions -g -d</code>命令查看危险权限列表：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">rangerzhou@zr:~ <span class="variable">$</span> adb shell pm list permissions <span class="literal">-g</span> <span class="literal">-d</span></span><br><span class="line">Dangerous Permissions:</span><br><span class="line"></span><br><span class="line"><span class="built_in">group</span>:android.permission<span class="literal">-group</span>.CONTACTS</span><br><span class="line">  permission:android.permission.WRITE_CONTACTS</span><br><span class="line">  permission:android.permission.GET_ACCOUNTS</span><br><span class="line">  permission:android.permission.READ_CONTACTS</span><br><span class="line"></span><br><span class="line"><span class="built_in">group</span>:android.permission<span class="literal">-group</span>.PHONE</span><br><span class="line">  permission:android.permission.READ_CALL_LOG</span><br><span class="line">  permission:android.permission.ANSWER_PHONE_CALLS</span><br><span class="line">  permission:android.permission.READ_PHONE_NUMBERS</span><br><span class="line">  permission:android.permission.READ_PHONE_STATE</span><br><span class="line">  permission:android.permission.CALL_PHONE</span><br><span class="line">  permission:android.permission.WRITE_CALL_LOG</span><br><span class="line">  permission:android.permission.USE_SIP</span><br><span class="line">  permission:android.permission.PROCESS_OUTGOING_CALLS</span><br><span class="line">  permission:com.android.voicemail.permission.ADD_VOICEMAIL</span><br><span class="line"></span><br><span class="line">... ...</span><br><span class="line"></span><br><span class="line">ungrouped:</span><br><span class="line">  permission:com.xiaomi.xmsf.permission.PAYMENT</span><br><span class="line">  permission:miui.permission.ACCESS_BLE_SETTINGS</span><br></pre></td></tr></table></figure>



<h3 id="3-App简要安装流程"><a href="#3-App简要安装流程" class="headerlink" title="3. App简要安装流程"></a>3. App简要安装流程</h3><p><a href="http://rangerzhou.top/2017/06/26/Android_7.0_PackageManagerService%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/">点此查看安装流程</a> </p>
<p><img src="http://otqux1hnn.bkt.clouddn.com/rangerzhou/180821pkgGrantPermission.png" alt="pkgGrantPermission"></p>
<h3 id="4-系统层授予权限"><a href="#4-系统层授予权限" class="headerlink" title="4. 系统层授予权限"></a>4. 系统层授予权限</h3><p>假如在某些场景下我们需要 APP 无需申请，直接拥有某些权限，那么就需要在系统层直接授予相应的权限了。需要授予的权限分为安装时权限（ <strong>normal</strong> 级别）和运行时权限（ <strong>dangerous</strong> 级别）。</p>
<h4 id="4-1-添加运行时权限"><a href="#4-1-添加运行时权限" class="headerlink" title="4.1 添加运行时权限"></a>4.1 添加运行时权限</h4><p>添加运行时权限的方法有两种：</p>
<h5 id="4-1-1-在-system-etc-default-permissions-添加-default-permissions-xml-文件"><a href="#4-1-1-在-system-etc-default-permissions-添加-default-permissions-xml-文件" class="headerlink" title="4.1.1 在 system/etc/default-permissions 添加 default_permissions.xml 文件"></a>4.1.1 在 <code>system/etc/default-permissions</code> 添加 <code>default_permissions.xml</code> 文件</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">exceptions</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- This is an example of an exception:</span></span><br><span class="line"><span class="comment">    &lt;exception</span></span><br><span class="line"><span class="comment">        package=&quot;com.aptiv.helloworld&quot;</span></span><br><span class="line"><span class="comment">      &lt;permission name=&quot;android.permission.RECORD_AUDIO&quot; fixed=&quot;true&quot;/&gt;</span></span><br><span class="line"><span class="comment">      &lt;permission name=&quot;android.permission.ACCESS_FINE_LOCATION&quot; fixed=&quot;false&quot;/&gt;</span></span><br><span class="line"><span class="comment">&lt;/exception&gt; </span></span><br></pre></td></tr></table></figure>

<p>并添加权限(chmod a+r default_permissions.xml)：</p>
<p>源码依据：</p>
<p>&#x2F;<a href="http://androidxref.com/8.1.0_r33/xref/frameworks/">frameworks</a>&#x2F;<a href="http://androidxref.com/8.1.0_r33/xref/frameworks/base/">base</a>&#x2F;<a href="http://androidxref.com/8.1.0_r33/xref/frameworks/base/services/">services</a>&#x2F;<a href="http://androidxref.com/8.1.0_r33/xref/frameworks/base/services/core/">core</a>&#x2F;<a href="http://androidxref.com/8.1.0_r33/xref/frameworks/base/services/core/java/">java</a>&#x2F;<a href="http://androidxref.com/8.1.0_r33/xref/frameworks/base/services/core/java/com/">com</a>&#x2F;<a href="http://androidxref.com/8.1.0_r33/xref/frameworks/base/services/core/java/com/android/">android</a>&#x2F;<a href="http://androidxref.com/8.1.0_r33/xref/frameworks/base/services/core/java/com/android/server/">server</a>&#x2F;<a href="http://androidxref.com/8.1.0_r33/xref/frameworks/base/services/core/java/com/android/server/pm/">pm</a>&#x2F;<a href="http://androidxref.com/8.1.0_r33/xref/frameworks/base/services/core/java/com/android/server/pm/DefaultPermissionGrantPolicy.java">DefaultPermissionGrantPolicy.java</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">grantDefaultPermissions</span><span class="params">(<span class="type">int</span> userId)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mService.hasSystemFeature(PackageManager.FEATURE_EMBEDDED, <span class="number">0</span>)) &#123;</span><br><span class="line">            grantAllRuntimePermissions(userId);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            grantPermissionsToSysComponentsAndPrivApps(userId); <span class="comment">// runtime</span></span><br><span class="line">            grantDefaultSystemHandlerPermissions(userId); <span class="comment">// runtime</span></span><br><span class="line">            grantDefaultPermissionExceptions(userId); <span class="comment">// runtime</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">... ...</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">grantDefaultPermissionExceptions</span><span class="params">(<span class="type">int</span> userId)</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (mService.mPackages) &#123;</span><br><span class="line">            mHandler.removeMessages(MSG_READ_DEFAULT_PERMISSION_EXCEPTIONS);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (mGrantExceptions == <span class="literal">null</span>) &#123;</span><br><span class="line">                mGrantExceptions = readDefaultPermissionExceptionsLPw();</span><br><span class="line">            &#125;</span><br><span class="line">            ...</span><br><span class="line">    &#125;</span><br><span class="line">... ...</span><br><span class="line">    <span class="keyword">private</span> <span class="meta">@NonNull</span> ArrayMap&lt;String, List&lt;DefaultPermissionGrant&gt;&gt;</span><br><span class="line">            <span class="title function_">readDefaultPermissionExceptionsLPw</span><span class="params">()</span> &#123;</span><br><span class="line">        File[] files = getDefaultPermissionFiles();</span><br><span class="line">        <span class="keyword">if</span> (files == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayMap</span>&lt;&gt;(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    ...</span><br><span class="line">    &#125; </span><br><span class="line">... ...</span><br><span class="line">    <span class="keyword">private</span> File[] getDefaultPermissionFiles() &#123;</span><br><span class="line">        ArrayList&lt;File&gt; ret = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;File&gt;();</span><br><span class="line">        <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(Environment.getRootDirectory(), <span class="string">&quot;etc/default-permissions&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (dir.isDirectory() &amp;&amp; dir.canRead()) &#123;</span><br><span class="line">            Collections.addAll(ret, dir.listFiles());</span><br><span class="line">        &#125;</span><br><span class="line">        dir = <span class="keyword">new</span> <span class="title class_">File</span>(Environment.getVendorDirectory(), <span class="string">&quot;etc/default-permissions&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (dir.isDirectory() &amp;&amp; dir.canRead()) &#123;</span><br><span class="line">            Collections.addAll(ret, dir.listFiles());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret.isEmpty() ? <span class="literal">null</span> : ret.toArray(<span class="keyword">new</span> <span class="title class_">File</span>[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>可以看出系统会在 <code>system/etc/default-permissions/ </code> 目录下查找权限配置文件，只需按照格式添加 APP 对应的权限即可。</p>
<h5 id="4-1-2-通过修改源码实现"><a href="#4-1-2-通过修改源码实现" class="headerlink" title="4.1.2 通过修改源码实现"></a>4.1.2 通过修改源码实现</h5><p>调用 <a href="http://androidxref.com/8.1.0_r33/xref/frameworks/base/services/core/java/com/android/server/pm/PackageManagerService.java">PackageManagerService.java</a>.<strong>grantRuntimePermission(String packageName, String name, final int userId)</strong> 接口实现；</p>
<p>授予权限又分为2种情况，一种是原本在<strong>manifest</strong>文件中声明了，一种是没有在<strong>manifest</strong>中声明，前者直接调用申请即可，后者则还需要把相应的权限添加到  <strong>pkg.requestedPermissions</strong> 中。需要在系统起来后就授予，故可以在 <strong>PackageManagerService</strong> 启动后就开始授予：</p>
<p>&#x2F;<a href="http://androidxref.com/8.1.0_r33/xref/frameworks/">frameworks</a>&#x2F;<a href="http://androidxref.com/8.1.0_r33/xref/frameworks/base/">base</a>&#x2F;<a href="http://androidxref.com/8.1.0_r33/xref/frameworks/base/services/">services</a>&#x2F;<a href="http://androidxref.com/8.1.0_r33/xref/frameworks/base/services/core/">core</a>&#x2F;<a href="http://androidxref.com/8.1.0_r33/xref/frameworks/base/services/core/java/">java</a>&#x2F;<a href="http://androidxref.com/8.1.0_r33/xref/frameworks/base/services/core/java/com/">com</a>&#x2F;<a href="http://androidxref.com/8.1.0_r33/xref/frameworks/base/services/core/java/com/android/">android</a>&#x2F;<a href="http://androidxref.com/8.1.0_r33/xref/frameworks/base/services/core/java/com/android/server/">server</a>&#x2F;<a href="http://androidxref.com/8.1.0_r33/xref/frameworks/base/services/core/java/com/android/server/pm/">pm</a>&#x2F;<a href="http://androidxref.com/8.1.0_r33/xref/frameworks/base/services/core/java/com/android/server/pm/PackageManagerService.java">PackageManagerService.java</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">systemReady</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        ArrayList&lt;PreferredActivity&gt; removed = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;PreferredActivity&gt;();</span><br><span class="line">        ... ...</span><br><span class="line">        <span class="comment">// Begin ...</span></span><br><span class="line">        <span class="keyword">for</span> (PackageParser.Package pkg : mPackages.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;com.aptiv.helloworld&quot;</span>.equals(pkg.packageName)) &#123;</span><br><span class="line">                pkg.requestedPermissions.add(Manifest.permission.SEND_SMS); <span class="comment">// 未在 manifest 中声明</span></span><br><span class="line">                grantRuntimePermission(pkg.packageName, Manifest.permission.SEND_SMS, <span class="number">0</span>);</span><br><span class="line">                <span class="comment">// 如下已在 manifest 中声明</span></span><br><span class="line">                grantRuntimePermission(pkg.packageName, Manifest.permission.READ_CONTACTS, <span class="number">0</span>);</span><br><span class="line">                grantRuntimePermission(pkg.packageName, Manifest.permission.CAMERA, <span class="number">0</span>);</span><br><span class="line">                grantRuntimePermission(pkg.packageName, Manifest.permission.CALL_PHONE, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">                Log.i(TAG, <span class="string">&quot;NFC: &quot;</span> + checkPermission(Manifest.permission.NFC, <span class="string">&quot;com.aptiv.helloworld&quot;</span>, <span class="number">0</span>));</span><br><span class="line">                Log.i(TAG, <span class="string">&quot;INTERNET: &quot;</span> + checkPermission(Manifest.permission.INTERNET, <span class="string">&quot;com.aptiv.helloworld&quot;</span>, <span class="number">0</span>));</span><br><span class="line">                Log.i(TAG, <span class="string">&quot;CAMERA: &quot;</span> + checkPermission(Manifest.permission.CAMERA, <span class="string">&quot;com.aptiv.helloworld&quot;</span>, <span class="number">0</span>));</span><br><span class="line">                Log.i(TAG, <span class="string">&quot;READ_CONTACTS: &quot;</span> + checkPermission(Manifest.permission.READ_CONTACTS, <span class="string">&quot;com.aptiv.helloworld&quot;</span>, <span class="number">0</span>));</span><br><span class="line">                Log.i(TAG, <span class="string">&quot;SEND_SMS: &quot;</span> + checkPermission(Manifest.permission.SEND_SMS, <span class="string">&quot;com.aptiv.helloworld&quot;</span>, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// End ...</span></span><br><span class="line">        ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>并可通过 <strong>checkPermission</strong> 方法检查权限是否添加成功，也可通过 Settings - Apps - xxx - Permissions 检查对应权限开关是否打开: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">checkPermission</span><span class="params">(String permName, String pkgName, <span class="type">int</span> userId)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!sUserManager.exists(userId)) &#123;</span><br><span class="line">        <span class="keyword">return</span> PackageManager.PERMISSION_DENIED;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">callingUid</span> <span class="operator">=</span> getCallingUid();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="keyword">final</span> PackageParser.<span class="type">Package</span> <span class="variable">p</span> <span class="operator">=</span> mPackages.get(pkgName);</span><br><span class="line">        <span class="keyword">if</span> (p != <span class="literal">null</span> &amp;&amp; p.mExtras != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">PackageSetting</span> <span class="variable">ps</span> <span class="operator">=</span> (PackageSetting) p.mExtras;</span><br><span class="line">            <span class="keyword">if</span> (filterAppAccessLPr(ps, callingUid, userId)) &#123;</span><br><span class="line">                <span class="keyword">return</span> PackageManager.PERMISSION_DENIED;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">instantApp</span> <span class="operator">=</span> ps.getInstantApp(userId);</span><br><span class="line">            <span class="keyword">final</span> <span class="type">PermissionsState</span> <span class="variable">permissionsState</span> <span class="operator">=</span> ps.getPermissionsState();</span><br><span class="line">            <span class="keyword">if</span> (permissionsState.hasPermission(permName, userId)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instantApp) &#123;</span><br><span class="line">                    <span class="type">BasePermission</span> <span class="variable">bp</span> <span class="operator">=</span> mSettings.mPermissions.get(permName);</span><br><span class="line">                    <span class="keyword">if</span> (bp != <span class="literal">null</span> &amp;&amp; bp.isInstant()) &#123;</span><br><span class="line">                        <span class="keyword">return</span> PackageManager.PERMISSION_GRANTED;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> PackageManager.PERMISSION_GRANTED;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Special case: ACCESS_FINE_LOCATION permission includes ACCESS_COARSE_LOCATION</span></span><br><span class="line">            <span class="keyword">if</span> (Manifest.permission.ACCESS_COARSE_LOCATION.equals(permName) &amp;&amp; permissionsState</span><br><span class="line">                    .hasPermission(Manifest.permission.ACCESS_FINE_LOCATION, userId)) &#123;</span><br><span class="line">                <span class="keyword">return</span> PackageManager.PERMISSION_GRANTED;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> PackageManager.PERMISSION_DENIED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="4-2-添加安装时权限"><a href="#4-2-添加安装时权限" class="headerlink" title="4.2 添加安装时权限"></a>4.2 添加安装时权限</h4><p><a href="http://androidxref.com/8.1.0_r33/xref/frameworks/base/services/core/java/com/android/server/pm/PackageManagerService.java">PackageManagerService.java</a> 会在 APP 安装时解析其中的 Manifest 文件，并会把其中声明的 permission 添加到一个 requestedPermissions Arraylist中:</p>
<p><a href="http://androidxref.com/8.1.0_r33/xref/frameworks/">frameworks</a>&#x2F;<a href="http://androidxref.com/8.1.0_r33/xref/frameworks/base/">base</a>&#x2F;<a href="http://androidxref.com/8.1.0_r33/xref/frameworks/base/core/">core</a>&#x2F;<a href="http://androidxref.com/8.1.0_r33/xref/frameworks/base/core/java/">java</a>&#x2F;<a href="http://androidxref.com/8.1.0_r33/xref/frameworks/base/core/java/android/">android</a>&#x2F;<a href="http://androidxref.com/8.1.0_r33/xref/frameworks/base/core/java/android/content/">content</a>&#x2F;<a href="http://androidxref.com/8.1.0_r33/xref/frameworks/base/core/java/android/content/pm/">pm</a>&#x2F;<a href="http://androidxref.com/8.1.0_r33/xref/frameworks/base/core/java/android/content/pm/PackageParser.java">PackageParser.java</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Package <span class="title function_">parseBaseApk</span><span class="params">(File apkFile, AssetManager assets, <span class="type">int</span> flags)</span></span><br><span class="line">        <span class="keyword">throws</span> PackageParserException &#123;<span class="comment">//start...</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">apkPath</span> <span class="operator">=</span> apkFile.getAbsolutePath();</span><br><span class="line">    ... ...</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">cookie</span> <span class="operator">=</span> loadApkIntoAssetManager(assets, apkPath, flags);</span><br><span class="line"></span><br><span class="line">    <span class="type">Resources</span> <span class="variable">res</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">XmlResourceParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        res = <span class="keyword">new</span> <span class="title class_">Resources</span>(assets, mMetrics, <span class="literal">null</span>);</span><br><span class="line">        parser = assets.openXmlResourceParser(cookie, ANDROID_MANIFEST_FILENAME); <span class="comment">// 解析AndroidManifest.xml</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> String[] outError = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Package</span> <span class="variable">pkg</span> <span class="operator">=</span> parseBaseApk(apkPath, res, parser, flags, outError);</span><br><span class="line">        <span class="keyword">if</span> (pkg == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">PackageParserException</span>(mParseError,</span><br><span class="line">                    apkPath + <span class="string">&quot; (at &quot;</span> + parser.getPositionDescription() + <span class="string">&quot;): &quot;</span> + outError[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Package <span class="title function_">parseBaseApk</span><span class="params">(String apkPath, Resources res, XmlResourceParser parser, <span class="type">int</span> flags,</span></span><br><span class="line"><span class="params">        String[] outError)</span> <span class="keyword">throws</span> XmlPullParserException, IOException &#123;</span><br><span class="line">    <span class="keyword">final</span> String splitName;</span><br><span class="line">    <span class="keyword">final</span> String pkgName;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> parseBaseApkCommon(pkg, <span class="literal">null</span>, res, parser, flags, outError);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Package <span class="title function_">parseBaseApkCommon</span><span class="params">(Package pkg, Set&lt;String&gt; acceptedTags, Resources res,</span></span><br><span class="line"><span class="params">        XmlResourceParser parser, <span class="type">int</span> flags, String[] outError)</span> <span class="keyword">throws</span> XmlPullParserException,</span><br><span class="line">        IOException &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="type">String</span> <span class="variable">tagName</span> <span class="operator">=</span> parser.getName();</span><br><span class="line">        ...</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tagName.equals(TAG_USES_PERMISSION)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!parseUsesPermission(pkg, res, parser)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tagName.equals(TAG_USES_PERMISSION_SDK_M)</span><br><span class="line">                || tagName.equals(TAG_USES_PERMISSION_SDK_23)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!parseUsesPermission(pkg, res, parser)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">parseUsesPermission</span><span class="params">(Package pkg, Resources res, XmlResourceParser parser)</span></span><br><span class="line">        <span class="keyword">throws</span> XmlPullParserException, IOException &#123;</span><br><span class="line">    <span class="type">TypedArray</span> <span class="variable">sa</span> <span class="operator">=</span> res.obtainAttributes(parser,</span><br><span class="line">            com.android.internal.R.styleable.AndroidManifestUsesPermission);</span><br><span class="line"></span><br><span class="line">    ... ...</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> pkg.requestedPermissions.indexOf(name);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index == -<span class="number">1</span>) &#123;</span><br><span class="line">        pkg.requestedPermissions.add(name.intern()); <span class="comment">// </span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Slog.w(TAG, <span class="string">&quot;Ignoring duplicate uses-permissions/uses-permissions-sdk-m: &quot;</span></span><br><span class="line">                + name + <span class="string">&quot; in package: &quot;</span> + pkg.packageName + <span class="string">&quot; at: &quot;</span></span><br><span class="line">                + parser.getPositionDescription());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>若想添加 install 权限，只需在安装 APP 解析权限的时候把需要的权限添加上即可：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.Manifest;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">parseUsesPermission</span><span class="params">(Package pkg, Resources res, XmlResourceParser parser)</span></span><br><span class="line">            <span class="keyword">throws</span> XmlPullParserException, IOException &#123;</span><br><span class="line">        <span class="type">TypedArray</span> <span class="variable">sa</span> <span class="operator">=</span> res.obtainAttributes(parser,</span><br><span class="line">                com.android.internal.R.styleable.AndroidManifestUsesPermission);</span><br><span class="line"></span><br><span class="line">        ... ...</span><br><span class="line">        <span class="comment">// Begin ...</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;com.aptiv.helloworld&quot;</span>.equals(pkg.packageName)) &#123;</span><br><span class="line">            pkg.requestedPermissions.add(Manifest.permission.NFC);</span><br><span class="line">            pkg.requestedPermissions.add(Manifest.permission.INTERNET);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// End ...</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> pkg.requestedPermissions.indexOf(name);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (index == -<span class="number">1</span>) &#123;</span><br><span class="line">            pkg.requestedPermissions.add(name.intern()); <span class="comment">// 把AndroidManifest.xml 中的 &lt;uses-permission&gt; 添加到 requestedPermissions 中</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Slog.w(TAG, <span class="string">&quot;Ignoring duplicate uses-permissions/uses-permissions-sdk-m: &quot;</span></span><br><span class="line">                    + name + <span class="string">&quot; in package: &quot;</span> + pkg.packageName + <span class="string">&quot; at: &quot;</span></span><br><span class="line">                    + parser.getPositionDescription());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>同样可通过 <strong>checkPermission</strong> 方法检查权限是否添加成功。</p>
<h3 id="5-应用"><a href="#5-应用" class="headerlink" title="5. 应用"></a>5. 应用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">MY_PERMISSIONS_REQUEST_CODE</span> <span class="operator">=</span> <span class="number">0x1000</span>;</span><br><span class="line"><span class="comment">// 所需申请的权限，需在 Manifest 中声明</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> String[] PERMISSION_GROUP = &#123;</span><br><span class="line">           Manifest.permission.READ_CALENDAR,</span><br><span class="line">           Manifest.permission.READ_EXTERNAL_STORAGE</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 申请权限</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkPermissions</span><span class="params">()</span> &#123;</span><br><span class="line">       Log.i(TAG, <span class="string">&quot;checkPermissions&quot;</span>);</span><br><span class="line">       <span class="keyword">if</span> (checkSelfPermission(Manifest.permission.READ_CALENDAR) != PackageManager.PERMISSION_GRANTED</span><br><span class="line">               || checkSelfPermission(Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">           requestPermissions(PERMISSION_GROUP, MY_PERMISSIONS_REQUEST_CODE);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 申请后会回调此方法</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onRequestPermissionsResult</span><span class="params">(<span class="type">int</span> requestCode, <span class="meta">@NonNull</span> String[] permissions, <span class="meta">@NonNull</span> <span class="type">int</span>[] grantResults)</span> &#123;</span><br><span class="line">       <span class="comment">//super.onRequestPermissionsResult(requestCode, permissions, grantResults);</span></span><br><span class="line">       <span class="keyword">switch</span> (requestCode) &#123;</span><br><span class="line">           <span class="keyword">case</span> MY_PERMISSIONS_REQUEST_CODE:</span><br><span class="line">               Log.i(TAG, <span class="string">&quot;permissions.length: &quot;</span> + permissions.length + <span class="string">&quot;, results.length: &quot;</span> + grantResults.length);</span><br><span class="line">               <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; permissions.length || i &lt; grantResults.length; i++) &#123;</span><br><span class="line">                   Log.i(TAG, <span class="string">&quot;permissions[&quot;</span> + i + <span class="string">&quot;] : &quot;</span> + grantResults[i]);</span><br><span class="line">                   <span class="keyword">if</span> (shouldShowRequestPermissionRationale(permissions[i])) &#123;</span><br><span class="line">                       <span class="comment">// 申请过权限但是被拒绝了，没有勾选 &quot;不再提示&quot; 的 checkbox</span></span><br><span class="line">                       permissionStr.append(<span class="string">&quot;[&quot;</span>).append(permissions[i]).append(<span class="string">&quot;] &quot;</span>);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               showWaringDialog(permissionStr);</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">showWaringDialog</span><span class="params">(StringBuilder str)</span> &#123;</span><br><span class="line"></span><br><span class="line">       Log.i(TAG, <span class="string">&quot;str.length: &quot;</span> + str.length() + <span class="string">&quot;str: &quot;</span> + str);</span><br><span class="line">       <span class="keyword">if</span> (str.length() != <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="type">AlertDialog</span> <span class="variable">dialog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AlertDialog</span>.Builder(<span class="built_in">this</span>)</span><br><span class="line">                   .setTitle(<span class="string">&quot;警告！&quot;</span>)</span><br><span class="line">                   .setMessage(<span class="string">&quot;需要 &quot;</span> + str + <span class="string">&quot;权限，请前往设置-&gt;应用-&gt;CalendarDemo-&gt;权限中打开相关权限，否则功能无法正常运行！&quot;</span>)</span><br><span class="line">                   .setCancelable(<span class="literal">false</span>)</span><br><span class="line">                   .setPositiveButton(<span class="string">&quot;确定&quot;</span>, <span class="keyword">new</span> <span class="title class_">DialogInterface</span>.OnClickListener() &#123;</span><br><span class="line">                       <span class="meta">@Override</span></span><br><span class="line">                       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(DialogInterface dialog, <span class="type">int</span> which)</span> &#123;</span><br><span class="line">                           <span class="comment">// TODO sth. when click Ok</span></span><br><span class="line">                           <span class="comment">// 一般情况下如果用户不授权的话，功能是无法运行的，做退出处理</span></span><br><span class="line">                           <span class="comment">//finish();</span></span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;)</span><br><span class="line">                   .setNegativeButton(<span class="string">&quot;取消&quot;</span>, <span class="keyword">new</span> <span class="title class_">DialogInterface</span>.OnClickListener() &#123;</span><br><span class="line">                       <span class="meta">@Override</span></span><br><span class="line">                       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(DialogInterface dialog, <span class="type">int</span> which)</span> &#123;</span><br><span class="line">                           <span class="comment">// TODO sth. when click Cancel</span></span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;)</span><br><span class="line">                   .create();</span><br><span class="line">           dialog.show();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android, Permission</tag>
      </tags>
  </entry>
  <entry>
    <title>Curl</title>
    <url>/2018/06/13/Technical/Curl/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] msgDwnCmds = &#123;<span class="string">&quot;curl&quot;</span>, MSG_DOWNLOAD_JSON_URL + <span class="string">&quot;?secret=&quot;</span> + secret + <span class="string">&quot;&amp;device_id=&quot;</span> + device_id&#125;;</span><br><span class="line"><span class="type">String</span> <span class="variable">msgDwnJson</span> <span class="operator">=</span> getResult(msgDwnCmds);</span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getResult</span><span class="params">(String[] cmds)</span> &#123;</span><br><span class="line">        <span class="type">ProcessBuilder</span> <span class="variable">pb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProcessBuilder</span>(cmds);</span><br><span class="line">        pb.redirectErrorStream(<span class="literal">true</span>);</span><br><span class="line">        Process p;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            p = pb.start();</span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">            br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(p.getInputStream()));</span><br><span class="line">            <span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;\t&quot;</span> + line);</span><br><span class="line">                <span class="keyword">if</span> (line.startsWith(<span class="string">&quot;&#123;&quot;</span>)) &#123;</span><br><span class="line">                    sb.append(line + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            br.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Technical</category>
      </categories>
  </entry>
  <entry>
    <title>Android_O(8.1.0)_ANR_log信息收集过程</title>
    <url>/2018/03/28/Android/Android_8.1.0_Get_ANR_log/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h3><blockquote>
<p>如前文<a href="http://rangerzhou.top/2018/03/04/Android-ANR%E5%88%86%E6%9E%90/">Android_ANR分析</a>所述，ANR有4种分类：KeyDispatch Timeout、Broadcast Timeou、Service Timeout、ContentProvider Timeout，但是无论是哪一类，最后都会调用到AppErrors.appNotResponding()方法（Android N之前还是写在AMS中，从N开始定义在新添加的<a href="http://androidxref.com/8.0.0_r4/xref/frameworks/base/services/core/java/com/android/server/am/AppErrors.java">AppErrors.java</a>中，本文基于Android 8.1.0源码分析），该方法的调用如下图：</p>
</blockquote>
<span id="more"></span>

<p><img src="http://otqux1hnn.bkt.clouddn.com/rangerzhou/180329/appNotRespondingUsages.png" alt="appNotRespondingUsages"></p>
<p>从图中可以看到包含<strong>Service、ContentProvider，BroadcastQueue、inputDispatching</strong>四种类型对appNotResponding()方法的调用，下面从这个方法说起。</p>
<h3 id="2-appNotResponding"><a href="#2-appNotResponding" class="headerlink" title="2. appNotResponding"></a>2. appNotResponding</h3><h4 id="2-1-AppErrors-appNotResponding"><a href="#2-1-AppErrors-appNotResponding" class="headerlink" title="2.1 AppErrors.appNotResponding"></a>2.1 AppErrors.appNotResponding</h4><p>&#x2F;<a href="http://androidxref.com/8.0.0_r4/xref/frameworks/">frameworks</a>&#x2F;<a href="http://androidxref.com/8.0.0_r4/xref/frameworks/base/">base</a>&#x2F;<a href="http://androidxref.com/8.0.0_r4/xref/frameworks/base/services/">services</a>&#x2F;<a href="http://androidxref.com/8.0.0_r4/xref/frameworks/base/services/core/">core</a>&#x2F;<a href="http://androidxref.com/8.0.0_r4/xref/frameworks/base/services/core/java/">java</a>&#x2F;<a href="http://androidxref.com/8.0.0_r4/xref/frameworks/base/services/core/java/com/">com</a>&#x2F;<a href="http://androidxref.com/8.0.0_r4/xref/frameworks/base/services/core/java/com/android/">android</a>&#x2F;<a href="http://androidxref.com/8.0.0_r4/xref/frameworks/base/services/core/java/com/android/server/">server</a>&#x2F;<a href="http://androidxref.com/8.0.0_r4/xref/frameworks/base/services/core/java/com/android/server/am/">am</a>&#x2F;<a href="http://androidxref.com/8.0.0_r4/xref/frameworks/base/services/core/java/com/android/server/am/AppErrors.java">AppErrors.java</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">appNotResponding</span><span class="params">(ProcessRecord app, ActivityRecord activity,</span></span><br><span class="line"><span class="params">        ActivityRecord parent, <span class="type">boolean</span> aboveSystem, <span class="keyword">final</span> String annotation)</span> &#123;</span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * app: 当前发生ANR的进程</span></span><br><span class="line"><span class="comment">     * activity: 发生ANR的界面</span></span><br><span class="line"><span class="comment">     * parent: 发生ANR的界面的上一级界面</span></span><br><span class="line"><span class="comment">     * aboveSystem: </span></span><br><span class="line"><span class="comment">     * annotation: 发生ANR的原因</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 填充firstPids和lastPids数组，从最近运行进程中挑选</span></span><br><span class="line">    <span class="comment">// firstPids: 用于保存ANR进程及其父进程，system_server进程和persistent的进程</span></span><br><span class="line">    <span class="comment">// lastPids: 用于保存除firstPids外的其他进程</span></span><br><span class="line">    ArrayList&lt;Integer&gt; firstPids = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;(<span class="number">5</span>);</span><br><span class="line">    <span class="comment">// SparseArray比HashMap更省内存</span></span><br><span class="line">    SparseArray&lt;Boolean&gt; lastPids = <span class="keyword">new</span> <span class="title class_">SparseArray</span>&lt;Boolean&gt;(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mService.mController != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 0 == continue, -1 = kill process immediately</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> mService.mController.appEarlyNotResponding(</span><br><span class="line">                    app.processName, app.pid, annotation);</span><br><span class="line">            <span class="keyword">if</span> (res &lt; <span class="number">0</span> &amp;&amp; app.pid != MY_PID) &#123;</span><br><span class="line">                app.kill(<span class="string">&quot;anr&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            mService.mController = <span class="literal">null</span>;</span><br><span class="line">            Watchdog.getInstance().setActivityController(<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="variable">anrTime</span> <span class="operator">=</span> SystemClock.uptimeMillis();</span><br><span class="line">    <span class="keyword">if</span> (ActivityManagerService.MONITOR_CPU_USAGE) &#123;</span><br><span class="line">        <span class="comment">// 更新CPU使用信息</span></span><br><span class="line">        mService.updateCpuStatsNow();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Unless configured otherwise, swallow ANRs in background processes &amp; kill the process.</span></span><br><span class="line">    <span class="comment">// 如果ANR_SHOW_BACKGROUND(anr_show_background)值为非空，则会弹出一个对话框，否则静态kill</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">showBackground</span> <span class="operator">=</span> Settings.Secure.getInt(mContext.getContentResolver(),</span><br><span class="line">            Settings.Secure.ANR_SHOW_BACKGROUND, <span class="number">0</span>) != <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> isSilentANR;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (mService) &#123;</span><br><span class="line">        <span class="comment">// 跳过一些场景下的ANR</span></span><br><span class="line">        <span class="comment">// PowerManager.reboot() can block for a long time, so ignore ANRs while shutting down.</span></span><br><span class="line">        <span class="keyword">if</span> (mService.mShuttingDown) &#123;</span><br><span class="line">            <span class="comment">// 正在关机时跳过ANR</span></span><br><span class="line">            Slog.i(TAG, <span class="string">&quot;During shutdown skipping ANR: &quot;</span> + app + <span class="string">&quot; &quot;</span> + annotation);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (app.notResponding) &#123;</span><br><span class="line">            <span class="comment">// 已经有一个ANR弹出框时</span></span><br><span class="line">            Slog.i(TAG, <span class="string">&quot;Skipping duplicate ANR: &quot;</span> + app + <span class="string">&quot; &quot;</span> + annotation);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (app.crashing) &#123;</span><br><span class="line">            <span class="comment">// 处在一个正在crashing的进程</span></span><br><span class="line">            Slog.i(TAG, <span class="string">&quot;Crashing app skipping ANR: &quot;</span> + app + <span class="string">&quot; &quot;</span> + annotation);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (app.killedByAm) &#123;</span><br><span class="line">            <span class="comment">// 当进程被activity manager kill</span></span><br><span class="line">            Slog.i(TAG, <span class="string">&quot;App already killed by AM skipping ANR: &quot;</span> + app + <span class="string">&quot; &quot;</span> + annotation);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (app.killed) &#123;</span><br><span class="line">            <span class="comment">// 进程已经被kill</span></span><br><span class="line">            Slog.i(TAG, <span class="string">&quot;Skipping died app ANR: &quot;</span> + app + <span class="string">&quot; &quot;</span> + annotation);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// In case we come through here for the same app before completing</span></span><br><span class="line">        <span class="comment">// this one, mark as anring now so we will bail out.</span></span><br><span class="line">        <span class="comment">// 为了防止此次处理完成之前同个app又走到这里，把noteResponding设为true</span></span><br><span class="line">        app.notResponding = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Log the ANR to the event log..</span></span><br><span class="line">        <span class="comment">// 记录ANR到event log</span></span><br><span class="line">        EventLog.writeEvent(EventLogTags.AM_ANR, app.userId, app.pid,</span><br><span class="line">                app.processName, app.info.flags, annotation);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Dump thread traces as quickly as we can, starting with &quot;interesting&quot; processes.</span></span><br><span class="line">        <span class="comment">// 将当前进程添加到firstPids</span></span><br><span class="line">        firstPids.add(app.pid);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Don&#x27;t dump other PIDs if it&#x27;s a background ANR</span></span><br><span class="line">        <span class="comment">// showBackground为false（不显示后台ANR的dialog）</span></span><br><span class="line">        isSilentANR = !showBackground &amp;&amp; !isInterestingForBackgroundTraces(app);</span><br><span class="line">        <span class="keyword">if</span> (!isSilentANR) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">parentPid</span> <span class="operator">=</span> app.pid;</span><br><span class="line">            <span class="keyword">if</span> (parent != <span class="literal">null</span> &amp;&amp; parent.app != <span class="literal">null</span> &amp;&amp; parent.app.pid &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                parentPid = parent.app.pid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (parentPid != app.pid) firstPids.add(parentPid);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// MY_PID为system_server的PID,将system_server进程添加到firstPids</span></span><br><span class="line">            <span class="keyword">if</span> (MY_PID != app.pid &amp;&amp; MY_PID != parentPid) firstPids.add(MY_PID);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> mService.mLruProcesses.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                <span class="type">ProcessRecord</span> <span class="variable">r</span> <span class="operator">=</span> mService.mLruProcesses.get(i);</span><br><span class="line">                <span class="keyword">if</span> (r != <span class="literal">null</span> &amp;&amp; r.thread != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">pid</span> <span class="operator">=</span> r.pid;</span><br><span class="line">                    <span class="keyword">if</span> (pid &gt; <span class="number">0</span> &amp;&amp; pid != app.pid &amp;&amp; pid != parentPid &amp;&amp; pid != MY_PID) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (r.persistent) &#123;</span><br><span class="line">                            <span class="comment">// 将persistent进程添加到firstPids</span></span><br><span class="line">                            firstPids.add(pid);</span><br><span class="line">                            <span class="keyword">if</span> (DEBUG_ANR) Slog.i(TAG, <span class="string">&quot;Adding persistent proc: &quot;</span> + r);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (r.treatLikeActivity) &#123;</span><br><span class="line">                            firstPids.add(pid);</span><br><span class="line">                            <span class="keyword">if</span> (DEBUG_ANR) Slog.i(TAG, <span class="string">&quot;Adding likely IME: &quot;</span> + r);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="comment">// 其他进程添加到lastPids</span></span><br><span class="line">                            lastPids.put(pid, Boolean.TRUE);</span><br><span class="line">                            <span class="keyword">if</span> (DEBUG_ANR) Slog.i(TAG, <span class="string">&quot;Adding ANR proc: &quot;</span> + r);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Log the ANR to the main log.</span></span><br><span class="line">    <span class="comment">// 把ANR信息输出到main log</span></span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">info</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    info.setLength(<span class="number">0</span>);</span><br><span class="line">    info.append(<span class="string">&quot;ANR in &quot;</span>).append(app.processName);</span><br><span class="line">    <span class="keyword">if</span> (activity != <span class="literal">null</span> &amp;&amp; activity.shortComponentName != <span class="literal">null</span>) &#123;</span><br><span class="line">        info.append(<span class="string">&quot; (&quot;</span>).append(activity.shortComponentName).append(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    info.append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    info.append(<span class="string">&quot;PID: &quot;</span>).append(app.pid).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (annotation != <span class="literal">null</span>) &#123;</span><br><span class="line">        info.append(<span class="string">&quot;Reason: &quot;</span>).append(annotation).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (parent != <span class="literal">null</span> &amp;&amp; parent != activity) &#123;</span><br><span class="line">        info.append(<span class="string">&quot;Parent: &quot;</span>).append(parent.shortComponentName).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建CPU tracker对象</span></span><br><span class="line">    <span class="type">ProcessCpuTracker</span> <span class="variable">processCpuTracker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProcessCpuTracker</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// don&#x27;t dump native PIDs for background ANRs unless it is the process of interest</span></span><br><span class="line">    String[] nativeProcs = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (isSilentANR) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; NATIVE_STACKS_OF_INTEREST.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (NATIVE_STACKS_OF_INTEREST[i].equals(app.processName)) &#123;</span><br><span class="line">                nativeProcs = <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; app.processName &#125;;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        nativeProcs = NATIVE_STACKS_OF_INTEREST;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// pids为NATIVE_STACKS_OF_INTEREST中定义的几个进程</span></span><br><span class="line">    <span class="type">int</span>[] pids = nativeProcs == <span class="literal">null</span> ? <span class="literal">null</span> : Process.getPidsForCommands(nativeProcs);</span><br><span class="line">    ArrayList&lt;Integer&gt; nativePids = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pids != <span class="literal">null</span>) &#123;</span><br><span class="line">        nativePids = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;(pids.length);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : pids) &#123;</span><br><span class="line">            nativePids.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// For background ANRs, don&#x27;t pass the ProcessCpuTracker to</span></span><br><span class="line">    <span class="comment">// avoid spending 1/2 second collecting stats to rank lastPids.</span></span><br><span class="line">    <span class="comment">// 输出traces信息，详见2.2</span></span><br><span class="line">    <span class="type">File</span> <span class="variable">tracesFile</span> <span class="operator">=</span> ActivityManagerService.dumpStackTraces(</span><br><span class="line">            <span class="literal">true</span>, firstPids,</span><br><span class="line">            (isSilentANR) ? <span class="literal">null</span> : processCpuTracker,</span><br><span class="line">            (isSilentANR) ? <span class="literal">null</span> : lastPids,</span><br><span class="line">            nativePids);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">cpuInfo</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (ActivityManagerService.MONITOR_CPU_USAGE) &#123;</span><br><span class="line">        <span class="comment">// 第二次更新cpu统计信息</span></span><br><span class="line">        mService.updateCpuStatsNow();</span><br><span class="line">        <span class="comment">// 记录当前各个进程的cpu使用情况</span></span><br><span class="line">        <span class="keyword">synchronized</span> (mService.mProcessCpuTracker) &#123;</span><br><span class="line">            <span class="comment">// 记录ANR之前的cpu使用情况（CPU usage from 38980ms to 0ms ago）</span></span><br><span class="line">            cpuInfo = mService.mProcessCpuTracker.printCurrentState(anrTime);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 记录当前CPU负载情况</span></span><br><span class="line">        info.append(processCpuTracker.printCurrentLoad());</span><br><span class="line">        info.append(cpuInfo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 记录从anr时间开始的cpu使用情况(CPU usage from 72ms to 465ms later)</span></span><br><span class="line">    info.append(processCpuTracker.printCurrentState(anrTime));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出info信息，包含ANR的Reason、CPU负载信息以及使用率</span></span><br><span class="line">    Slog.e(TAG, info.toString());</span><br><span class="line">    <span class="keyword">if</span> (tracesFile == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// There is no trace file, so dump (only) the alleged culprit&#x27;s threads to the log</span></span><br><span class="line">        <span class="comment">// 如果trace为空，则发送singal 3到发送ANR的进程，相当于adb shell kill -3 pid</span></span><br><span class="line">        Process.sendSignal(app.pid, Process.SIGNAL_QUIT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将traces文件和CPU使用率信息保存到dropbox，即data/system/dropbox</span></span><br><span class="line">    mService.addErrorToDropBox(<span class="string">&quot;anr&quot;</span>, app, app.processName, activity, parent, annotation,</span><br><span class="line">            cpuInfo, tracesFile, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mService.mController != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 0 == show dialog, 1 = keep waiting, -1 = kill process immediately</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> mService.mController.appNotResponding(</span><br><span class="line">                    app.processName, app.pid, info.toString());</span><br><span class="line">            <span class="keyword">if</span> (res != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (res &lt; <span class="number">0</span> &amp;&amp; app.pid != MY_PID) &#123;</span><br><span class="line">                    app.kill(<span class="string">&quot;anr&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">synchronized</span> (mService) &#123;</span><br><span class="line">                        mService.mServices.scheduleServiceTimeoutLocked(app);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            mService.mController = <span class="literal">null</span>;</span><br><span class="line">            Watchdog.getInstance().setActivityController(<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (mService) &#123;</span><br><span class="line">        mService.mBatteryStatsService.noteProcessAnr(app.processName, app.uid);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 后台ANR的情况，则直接kill</span></span><br><span class="line">        <span class="keyword">if</span> (isSilentANR) &#123;</span><br><span class="line">            app.kill(<span class="string">&quot;bg anr&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Set the app&#x27;s notResponding state, and look up the errorReportReceiver</span></span><br><span class="line">        <span class="comment">// 设置app的ANR状态（app.notResponding=true），并查询错误报告receiver</span></span><br><span class="line">        makeAppNotRespondingLocked(app,</span><br><span class="line">                activity != <span class="literal">null</span> ? activity.shortComponentName : <span class="literal">null</span>,</span><br><span class="line">                annotation != <span class="literal">null</span> ? <span class="string">&quot;ANR &quot;</span> + annotation : <span class="string">&quot;ANR&quot;</span>,</span><br><span class="line">                info.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如&quot;persist.sys.enableTraceRename&quot;为true，则重命名trace文件</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">enableTraceRename</span> <span class="operator">=</span> SystemProperties.getBoolean(<span class="string">&quot;persist.sys.enableTraceRename&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">        <span class="comment">//Set the trace file name to app name + current date format to avoid overrinding trace file based on debug flag</span></span><br><span class="line">        <span class="keyword">if</span>(enableTraceRename) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">tracesPath</span> <span class="operator">=</span> SystemProperties.get(<span class="string">&quot;dalvik.vm.stack-trace-file&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">            <span class="keyword">if</span> (tracesPath != <span class="literal">null</span> &amp;&amp; tracesPath.length() != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 一般情况下如果&quot;dalvik.vm.stack-trace-file&quot;定义了，则为/data/anr/traces.txt</span></span><br><span class="line">                <span class="type">File</span> <span class="variable">traceRenameFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(tracesPath);</span><br><span class="line">                String newTracesPath;</span><br><span class="line">                <span class="type">int</span> <span class="variable">lpos</span> <span class="operator">=</span> tracesPath.lastIndexOf (<span class="string">&quot;.&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (-<span class="number">1</span> != lpos)</span><br><span class="line">                    <span class="comment">// 心的traces文件则为/data/anr/traces_进程名_日期_时间.txt</span></span><br><span class="line">                    newTracesPath = tracesPath.substring (<span class="number">0</span>, lpos) + <span class="string">&quot;_&quot;</span> + app.processName + <span class="string">&quot;_&quot;</span> + mTraceDateFormat.format(<span class="keyword">new</span> <span class="title class_">Date</span>()) + tracesPath.substring (lpos);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    newTracesPath = tracesPath + <span class="string">&quot;_&quot;</span> + app.processName;</span><br><span class="line"></span><br><span class="line">                traceRenameFile.renameTo(<span class="keyword">new</span> <span class="title class_">File</span>(newTracesPath));</span><br><span class="line">                SystemClock.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Bring up the infamous App Not Responding dialog</span></span><br><span class="line">        <span class="comment">// 弹出ANR对话框</span></span><br><span class="line">        <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> Message.obtain();</span><br><span class="line">        HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line">        msg.what = ActivityManagerService.SHOW_NOT_RESPONDING_UI_MSG;</span><br><span class="line">        msg.obj = map;</span><br><span class="line">        msg.arg1 = aboveSystem ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">        map.put(<span class="string">&quot;app&quot;</span>, app);</span><br><span class="line">        <span class="keyword">if</span> (activity != <span class="literal">null</span>) &#123;</span><br><span class="line">            map.put(<span class="string">&quot;activity&quot;</span>, activity);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向UI线程发送内容为SHOW_NOT_RESPONDING_MSG的消息</span></span><br><span class="line">        mService.mUiHandler.sendMessage(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>appNotResponding方法作用如下：</p>
<ul>
<li>输出ANR Reason信息到Events log，即am_anr信息，这条log的时间最接近ANR的触发时间。</li>
<li>使用<code>dumpStackTraces</code>收集并输出重要进程列表中的各个线程的traces信息，详见2.2。</li>
<li>输出ANR的Reason、CPU负载信息以及使用率到main log。</li>
<li>将traces信息和 CPU使用情况信息保存到dropbox，即<em>data&#x2F;system&#x2F;dropbox</em>目录。</li>
<li>根据进程类型，来决定直接后台杀掉（后台ANR），还是弹框告知用户。</li>
</ul>
<p><strong>firstPids</strong>：用于保存ANR进程及其父进程，system_server进程和persistent的进程；</p>
<p><strong>lastPids</strong>：用于保存除firstPids外的其他进程；</p>
<p><strong>nativePids</strong>：指的是&#x2F;system&#x2F;bin下的audioserver, cameraserver, mediaserver, sdcard, surfaceflinger等进程；</p>
<h4 id="2-2-AMS-dumpStackTraces-1-x2F-2"><a href="#2-2-AMS-dumpStackTraces-1-x2F-2" class="headerlink" title="2.2 AMS.dumpStackTraces(1&#x2F;2)"></a>2.2 AMS.dumpStackTraces(1&#x2F;2)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * If a stack trace dump file is configured, dump process stack traces.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> clearTraces causes the dump file to be erased prior to the new</span></span><br><span class="line"><span class="comment"> *    traces being written, if true; when false, the new traces will be</span></span><br><span class="line"><span class="comment"> *    appended to any existing file content.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> firstPids of dalvik VM processes to dump stack traces for first</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> lastPids of dalvik VM processes to dump stack traces for last</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> nativePids optional list of native pids to dump stack crawls</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> File <span class="title function_">dumpStackTraces</span><span class="params">(<span class="type">boolean</span> clearTraces, ArrayList&lt;Integer&gt; firstPids,</span></span><br><span class="line"><span class="params">        ProcessCpuTracker processCpuTracker, SparseArray&lt;Boolean&gt; lastPids,</span></span><br><span class="line"><span class="params">        ArrayList&lt;Integer&gt; nativePids)</span> &#123;</span><br><span class="line">    ArrayList&lt;Integer&gt; extraPids = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Measure CPU usage as soon as we&#x27;re called in order to get a realistic sampling</span></span><br><span class="line">    <span class="comment">// of the top users at the time of the request.</span></span><br><span class="line">    <span class="comment">// 一旦调用此方法就马上计算CPU使用率以在请求的时候获取top用户的实际采样</span></span><br><span class="line">    <span class="keyword">if</span> (processCpuTracker != <span class="literal">null</span>) &#123;</span><br><span class="line">        processCpuTracker.init();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">200</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException ignored) &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 测量CPU使用情况</span></span><br><span class="line">        processCpuTracker.update();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// We&#x27;ll take the stack crawls of just the top apps using CPU.</span></span><br><span class="line">        <span class="comment">// 从lastPids中选取CPU使用率top 5的进程，输出这些进程的stacks</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> processCpuTracker.countWorkingStats();</span><br><span class="line">        extraPids = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N &amp;&amp; extraPids.size() &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            ProcessCpuTracker.<span class="type">Stats</span> <span class="variable">stats</span> <span class="operator">=</span> processCpuTracker.getWorkingStats(i);</span><br><span class="line">            <span class="keyword">if</span> (lastPids.indexOfKey(stats.pid) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (DEBUG_ANR) Slog.d(TAG, <span class="string">&quot;Collecting stacks for extra pid &quot;</span> + stats.pid);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 把正在运行的top 5进程添加到extraPids中</span></span><br><span class="line">                extraPids.add(stats.pid);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (DEBUG_ANR) &#123;</span><br><span class="line">                Slog.d(TAG, <span class="string">&quot;Skipping next CPU consuming process, not a java proc: &quot;</span></span><br><span class="line">                        + stats.pid);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// javatraces写入到tombstone？</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">useTombstonedForJavaTraces</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    File tracesFile;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">tracesDirProp</span> <span class="operator">=</span> SystemProperties.get(<span class="string">&quot;dalvik.vm.stack-trace-dir&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (tracesDirProp.isEmpty()) &#123;</span><br><span class="line">        <span class="comment">// When dalvik.vm.stack-trace-dir is not set, we are using the &quot;old&quot; trace</span></span><br><span class="line">        <span class="comment">// dumping scheme. All traces are written to a global trace file (usually</span></span><br><span class="line">        <span class="comment">// &quot;/data/anr/traces.txt&quot;) so the code below must take care to unlink and recreate</span></span><br><span class="line">        <span class="comment">// the file if requested.</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// This mode of operation will be removed in the near future.</span></span><br><span class="line">        <span class="comment">// 如果dalvik.vm.stack-trace-dir没有配置，就使用旧的dump策略，</span></span><br><span class="line">        <span class="comment">// trace信息写入到全局trace文件中（/data/anr/traces.txt）</span></span><br><span class="line">        <span class="comment">// 这种方式在不久的将来会被移除</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">globalTracesPath</span> <span class="operator">=</span> SystemProperties.get(<span class="string">&quot;dalvik.vm.stack-trace-file&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (globalTracesPath.isEmpty()) &#123;</span><br><span class="line">            Slog.w(TAG, <span class="string">&quot;dumpStackTraces: no trace path configured&quot;</span>);</span><br><span class="line">            <span class="comment">// 没有配置dalvik.vm.stack-trace-file，则返回null</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        tracesFile = <span class="keyword">new</span> <span class="title class_">File</span>(globalTracesPath);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 如果clearTraces为true，则删除已存在的traces文件，并创建新的traces文件</span></span><br><span class="line">            <span class="keyword">if</span> (clearTraces &amp;&amp; tracesFile.exists()) &#123;</span><br><span class="line">                tracesFile.delete();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            tracesFile.createNewFile();</span><br><span class="line">            FileUtils.setPermissions(globalTracesPath, <span class="number">0666</span>, -<span class="number">1</span>, -<span class="number">1</span>); <span class="comment">// -rw-rw-rw-</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            Slog.w(TAG, <span class="string">&quot;Unable to prepare ANR traces file: &quot;</span> + tracesFile, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">tracesDir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(tracesDirProp);</span><br><span class="line">        <span class="comment">// When dalvik.vm.stack-trace-dir is set, we use the &quot;new&quot; trace dumping scheme.</span></span><br><span class="line">        <span class="comment">// Each set of ANR traces is written to a separate file and dumpstate will process</span></span><br><span class="line">        <span class="comment">// all such files and add them to a captured bug report if they&#x27;re recent enough.</span></span><br><span class="line">        maybePruneOldTraces(tracesDir);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// <span class="doctag">NOTE:</span> We should consider creating the file in native code atomically once we&#x27;ve</span></span><br><span class="line">        <span class="comment">// gotten rid of the old scheme of dumping and lot of the code that deals with paths</span></span><br><span class="line">        <span class="comment">// can be removed.</span></span><br><span class="line">        <span class="comment">// 创建trace文件，格式为anr_yyyy-MM-dd-HH-mm-ss-SSS</span></span><br><span class="line">        tracesFile = createAnrDumpFile(tracesDir);</span><br><span class="line">        <span class="keyword">if</span> (tracesFile == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        useTombstonedForJavaTraces = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dumpStackTraces(tracesFile.getAbsolutePath(), firstPids, nativePids, extraPids,</span><br><span class="line">            useTombstonedForJavaTraces);</span><br><span class="line">    <span class="keyword">return</span> tracesFile;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如上主要功能：</p>
<ul>
<li>更新CPU的使用率</li>
<li>把lastPids中的top 5进程添加到extraPids中</li>
<li>确定trace文件路径<ul>
<li>如果”dalvik.vm.stack-trace-dir”没有配置，就使用旧的dump策略，trace信息写入到全局trace文件中（*&#x2F;data&#x2F;anr&#x2F;traces.txt*），删除已存在的traces文件，并创建新的traces文件；</li>
<li>如果”dalvik.vm.stack-trace-dir”配置了，创建格式为anr_yyyy-MM-dd-HH-mm-ss-SSS的文件目录。</li>
</ul>
</li>
</ul>
<h4 id="2-3-AMS-dumpStackTraces-2-x2F-2"><a href="#2-3-AMS-dumpStackTraces-2-x2F-2" class="headerlink" title="2.3 AMS.dumpStackTraces(2&#x2F;2)"></a>2.3 AMS.dumpStackTraces(2&#x2F;2)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dumpStackTraces</span><span class="params">(String tracesFile, ArrayList&lt;Integer&gt; firstPids,</span></span><br><span class="line"><span class="params">        ArrayList&lt;Integer&gt; nativePids, ArrayList&lt;Integer&gt; extraPids,</span></span><br><span class="line"><span class="params">        <span class="type">boolean</span> useTombstonedForJavaTraces)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// We don&#x27;t need any sort of inotify based monitoring when we&#x27;re dumping traces via</span></span><br><span class="line">    <span class="comment">// tombstoned. Data is piped to an &quot;intercept&quot; FD installed in tombstoned so we&#x27;re in full</span></span><br><span class="line">    <span class="comment">// control of all writes to the file in question.</span></span><br><span class="line">    <span class="keyword">final</span> DumpStackFileObserver observer;</span><br><span class="line">    <span class="keyword">if</span> (useTombstonedForJavaTraces) &#123;</span><br><span class="line">        observer = <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Use a FileObserver to detect when traces finish writing.</span></span><br><span class="line">        <span class="comment">// The order of traces is considered important to maintain for legibility.</span></span><br><span class="line">        observer = <span class="keyword">new</span> <span class="title class_">DumpStackFileObserver</span>(tracesFile);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// We must complete all stack dumps within 20 seconds.</span></span><br><span class="line">    <span class="comment">// 需要在20s内dump所有的堆栈</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">remainingTime</span> <span class="operator">=</span> <span class="number">20</span> * <span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (observer != <span class="literal">null</span>) &#123;</span><br><span class="line">            observer.startWatching();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// First collect all of the stacks of the most important pids.</span></span><br><span class="line">        <span class="comment">// 首先获取最重要进程的stacks</span></span><br><span class="line">        <span class="keyword">if</span> (firstPids != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> firstPids.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (DEBUG_ANR) Slog.d(TAG, <span class="string">&quot;Collecting stacks for pid &quot;</span></span><br><span class="line">                        + firstPids.get(i));</span><br><span class="line">                <span class="keyword">final</span> <span class="type">long</span> timeTaken;</span><br><span class="line">                <span class="keyword">if</span> (useTombstonedForJavaTraces) &#123;</span><br><span class="line">                    <span class="comment">// useTombstonedForJavaTraces为true，O版本新加的，见2.3.1</span></span><br><span class="line">                    timeTaken = dumpJavaTracesTombstoned(firstPids.get(i), tracesFile, remainingTime);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 否则向目标进程发送singal来输出traces，O之前的版本处理逻辑，见2.3.2</span></span><br><span class="line">                    timeTaken = observer.dumpWithTimeout(firstPids.get(i), remainingTime);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                remainingTime -= timeTaken;</span><br><span class="line">                <span class="keyword">if</span> (remainingTime &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    Slog.e(TAG, <span class="string">&quot;Aborting stack trace dump (current firstPid=&quot;</span> + firstPids.get(i) +</span><br><span class="line">                        <span class="string">&quot;); deadline exceeded.&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (DEBUG_ANR) &#123;</span><br><span class="line">                    Slog.d(TAG, <span class="string">&quot;Done with pid &quot;</span> + firstPids.get(i) + <span class="string">&quot; in &quot;</span> + timeTaken + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Next collect the stacks of the native pids</span></span><br><span class="line">        <span class="comment">// 获取native进程的stacks</span></span><br><span class="line">        <span class="keyword">if</span> (nativePids != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> pid : nativePids) &#123;</span><br><span class="line">                <span class="keyword">if</span> (DEBUG_ANR) Slog.d(TAG, <span class="string">&quot;Collecting stacks for native pid &quot;</span> + pid);</span><br><span class="line">                <span class="keyword">final</span> <span class="type">long</span> <span class="variable">nativeDumpTimeoutMs</span> <span class="operator">=</span> Math.min(NATIVE_DUMP_TIMEOUT_MS, remainingTime);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">final</span> <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> SystemClock.elapsedRealtime();</span><br><span class="line">                <span class="comment">// 输出native进程的trace，详见2.3.3</span></span><br><span class="line">                Debug.dumpNativeBacktraceToFileTimeout(</span><br><span class="line">                        pid, tracesFile, (<span class="type">int</span>) (nativeDumpTimeoutMs / <span class="number">1000</span>));</span><br><span class="line">                <span class="keyword">final</span> <span class="type">long</span> <span class="variable">timeTaken</span> <span class="operator">=</span> SystemClock.elapsedRealtime() - start;</span><br><span class="line"></span><br><span class="line">                remainingTime -= timeTaken;</span><br><span class="line">                <span class="keyword">if</span> (remainingTime &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    Slog.e(TAG, <span class="string">&quot;Aborting stack trace dump (current native pid=&quot;</span> + pid +</span><br><span class="line">                        <span class="string">&quot;); deadline exceeded.&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (DEBUG_ANR) &#123;</span><br><span class="line">                    Slog.d(TAG, <span class="string">&quot;Done with native pid &quot;</span> + pid + <span class="string">&quot; in &quot;</span> + timeTaken + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Lastly, dump stacks for all extra PIDs from the CPU tracker.</span></span><br><span class="line">        <span class="comment">// dump extraPids中的进程stacks，即lastPids中CPU使用率top 5的进程</span></span><br><span class="line">        <span class="comment">// 此部分逻辑和firstPids基本一样，代码冗余了吧……</span></span><br><span class="line">        <span class="keyword">if</span> (extraPids != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> pid : extraPids) &#123;</span><br><span class="line">                <span class="keyword">if</span> (DEBUG_ANR) Slog.d(TAG, <span class="string">&quot;Collecting stacks for extra pid &quot;</span> + pid);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">final</span> <span class="type">long</span> timeTaken;</span><br><span class="line">                <span class="keyword">if</span> (useTombstonedForJavaTraces) &#123;</span><br><span class="line">                    <span class="comment">// 同firstPids</span></span><br><span class="line">                    timeTaken = dumpJavaTracesTombstoned(pid, tracesFile, remainingTime);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    timeTaken = observer.dumpWithTimeout(pid, remainingTime);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                remainingTime -= timeTaken;</span><br><span class="line">                <span class="keyword">if</span> (remainingTime &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    Slog.e(TAG, <span class="string">&quot;Aborting stack trace dump (current extra pid=&quot;</span> + pid +</span><br><span class="line">                            <span class="string">&quot;); deadline exceeded.&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (DEBUG_ANR) &#123;</span><br><span class="line">                    Slog.d(TAG, <span class="string">&quot;Done with extra pid &quot;</span> + pid + <span class="string">&quot; in &quot;</span> + timeTaken + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (observer != <span class="literal">null</span>) &#123;</span><br><span class="line">            observer.stopWatching();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如上方法主要功能为：</p>
<ul>
<li>收集<strong>firstPids</strong>进程的stacks<ul>
<li>firstPids中首先dump的是发生ANR的进程。</li>
<li>其次是system_server进程。</li>
<li>最后是mLruProcesses中的persistent进程。</li>
</ul>
</li>
<li>收集<strong>nativePids</strong>（Native）进程的stacks<ul>
<li>&#x2F;system&#x2F;bin下的audioserver, cameraserver, mediaserver, sdcard, surfaceflinger等进程。</li>
</ul>
</li>
<li>收集<strong>extraPids</strong>（lastPids中CPU使用率top 5）进程的stacks</li>
</ul>
<p><em>以上三部分需要在20s内dump完成。</em></p>
<h5 id="2-3-1-dumpJavaTracesTombstoned"><a href="#2-3-1-dumpJavaTracesTombstoned" class="headerlink" title="2.3.1 dumpJavaTracesTombstoned"></a>2.3.1 dumpJavaTracesTombstoned</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Dump java traces for process &#123;<span class="doctag">@code</span> pid&#125; to the specified file. If java trace dumping</span></span><br><span class="line"><span class="comment"> * fails, a native backtrace is attempted. Note that the timeout &#123;<span class="doctag">@code</span> timeoutMs&#125; only applies</span></span><br><span class="line"><span class="comment"> * to the java section of the trace, a further &#123;<span class="doctag">@code</span> NATIVE_DUMP_TIMEOUT_MS&#125; might be spent</span></span><br><span class="line"><span class="comment"> * attempting to obtain native traces in the case of a failure. Returns the total time spent</span></span><br><span class="line"><span class="comment"> * capturing traces.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">dumpJavaTracesTombstoned</span><span class="params">(<span class="type">int</span> pid, String fileName, <span class="type">long</span> timeoutMs)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">long</span> <span class="variable">timeStart</span> <span class="operator">=</span> SystemClock.elapsedRealtime();</span><br><span class="line">    <span class="keyword">if</span> (!Debug.dumpJavaBacktraceToFileTimeout(pid, fileName, (<span class="type">int</span>) (timeoutMs / <span class="number">1000</span>))) &#123;</span><br><span class="line">        <span class="comment">// 调用到dumpNativeBacktraceToFileTimeout，详见2.3.3</span></span><br><span class="line">        Debug.dumpNativeBacktraceToFileTimeout(pid, fileName,</span><br><span class="line">                (NATIVE_DUMP_TIMEOUT_MS / <span class="number">1000</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>此方法在Android 8.1.0上才加上的，8.0.0版本还没有，8.1.0之前对于firstPids和extraPids中进程堆栈信息的收集都是直接调用<code>dumpWithTimeout</code>方法，8.1.0以后将要废弃；</p>
<h5 id="2-3-2-dumpWithTimeout（将要废弃）"><a href="#2-3-2-dumpWithTimeout（将要废弃）" class="headerlink" title="2.3.2 dumpWithTimeout（将要废弃）"></a>2.3.2 dumpWithTimeout（将要废弃）</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Legacy code, do not use. Existing users will be deleted.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@deprecated</span> 将要废弃的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">DumpStackFileObserver</span> <span class="keyword">extends</span> <span class="title class_">FileObserver</span> &#123;</span><br><span class="line">    ... ...</span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">dumpWithTimeout</span><span class="params">(<span class="type">int</span> pid, <span class="type">long</span> timeout)</span> &#123;</span><br><span class="line">        <span class="comment">// 发送signal来输出traces</span></span><br><span class="line">        sendSignal(pid, SIGNAL_QUIT);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> SystemClock.elapsedRealtime();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// timeout为20s，TRACE_DUMP_TIMEOUT_MS为10s，取小则为10s</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">long</span> <span class="variable">waitTime</span> <span class="operator">=</span> Math.min(timeout, TRACE_DUMP_TIMEOUT_MS);</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 直到写关闭，或者超时</span></span><br><span class="line">                wait(waitTime); <span class="comment">// Wait for traces file to be closed.</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                Slog.wtf(TAG, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ... ...</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> SystemClock.elapsedRealtime();</span><br><span class="line">        mClosed = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (end - start);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-3-3-dumpNativeBacktraceToFileTimeout"><a href="#2-3-3-dumpNativeBacktraceToFileTimeout" class="headerlink" title="2.3.3 dumpNativeBacktraceToFileTimeout"></a>2.3.3 dumpNativeBacktraceToFileTimeout</h5><p><a href="https://android.googlesource.com/platform/frameworks/base/+/android-cts-8.1_r4/core/jni/android_os_Debug.cpp">platform&#x2F;frameworks&#x2F;base&#x2F;core&#x2F;jni&#x2F;android_os_Debug.cpp</a></p>
<p><strong>dumpNativeBacktraceToFileTimeout()</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> jboolean <span class="title">android_os_Debug_dumpJavaBacktraceToFileTimeout</span><span class="params">(JNIEnv* env, jobject clazz,</span></span></span><br><span class="line"><span class="params"><span class="function">        jint pid, jstring fileName, jint timeoutSecs)</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">bool</span> ret =  <span class="built_in">dumpTraces</span>(env, pid, fileName, timeoutSecs, kDebuggerdJavaBacktrace);</span><br><span class="line">    <span class="keyword">return</span> ret ? JNI_TRUE : JNI_FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> jboolean <span class="title">android_os_Debug_dumpNativeBacktraceToFileTimeout</span><span class="params">(JNIEnv* env, jobject clazz,</span></span></span><br><span class="line"><span class="params"><span class="function">        jint pid, jstring fileName, jint timeoutSecs)</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">bool</span> ret = <span class="built_in">dumpTraces</span>(env, pid, fileName, timeoutSecs, kDebuggerdNativeBacktrace);</span><br><span class="line">    <span class="keyword">return</span> ret ? JNI_TRUE : JNI_FALSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>dumpTraces()</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> bool <span class="title function_">dumpTraces</span><span class="params">(JNIEnv* env, jint pid, jstring fileName, jint timeoutSecs,</span></span><br><span class="line"><span class="params">                       DebuggerdDumpType dumpType)</span> &#123;</span><br><span class="line">    const ScopedUtfChars <span class="title function_">fileNameChars</span><span class="params">(env, fileName)</span>;</span><br><span class="line">    <span class="keyword">if</span> (fileNameChars.c_str() == nullptr) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 打开/data/anr/anr_yyyy-MM-dd-HH-mm-ss-SSS</span></span><br><span class="line">    android::base::unique_fd <span class="title function_">fd</span><span class="params">(open(fileNameChars.c_str()</span>,</span><br><span class="line">                                     O_CREAT | O_WRONLY | O_NOFOLLOW | O_CLOEXEC | O_APPEND,</span><br><span class="line">                                     <span class="number">0666</span>));</span><br><span class="line">    <span class="keyword">if</span> (fd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        fprintf(stderr, <span class="string">&quot;Can&#x27;t open %s: %s\n&quot;</span>, fileNameChars.c_str(), strerror(errno));</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 继续调用dump_backtrace_to_file_timeout</span></span><br><span class="line">    <span class="keyword">return</span> (dump_backtrace_to_file_timeout(pid, dumpType, timeoutSecs, fd) == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://android.googlesource.com/platform/system/core/+/android-cts-8.1_r4/debuggerd/client/debuggerd_client.cpp">platform&#x2F;system&#x2F;core&#x2F;debuggerd&#x2F;client&#x2F;debuggerd_client.cpp</a></p>
<p><strong>dump_backtrace_to_file_timeout()</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">dump_backtrace_to_file_timeout</span><span class="params">(pid_t tid, DebuggerdDumpType dump_type, <span class="type">int</span> timeout_secs,</span></span><br><span class="line"><span class="params">                                   <span class="type">int</span> fd)</span> &#123;</span><br><span class="line">  android::base::unique_fd <span class="title function_">copy</span><span class="params">(dup(fd)</span>);</span><br><span class="line">  <span class="keyword">if</span> (copy == -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> <span class="variable">timeout_ms</span> <span class="operator">=</span> timeout_secs &gt; <span class="number">0</span> ? timeout_secs * <span class="number">1000</span> : <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> debuggerd_trigger_dump(tid, dump_type, timeout_ms, std::move(copy)) ? <span class="number">0</span> : -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>debuggerd_trigger_dump</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">debuggerd_trigger_dump</span><span class="params">(<span class="type">pid_t</span> pid, DebuggerdDumpType dump_type, <span class="type">unsigned</span> <span class="type">int</span> timeout_ms,</span></span></span><br><span class="line"><span class="params"><span class="function">                            unique_fd output_fd)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">LOG</span>(INFO) &lt;&lt; <span class="string">&quot;libdebuggerd_client: started dumping process &quot;</span> &lt;&lt; pid;</span><br><span class="line">  unique_fd sockfd;</span><br><span class="line">  <span class="type">const</span> <span class="keyword">auto</span> end = std::chrono::steady_clock::<span class="built_in">now</span>() + std::chrono::<span class="built_in">milliseconds</span>(timeout_ms);</span><br><span class="line">  <span class="keyword">auto</span> time_left = [&amp;end]() &#123; <span class="keyword">return</span> end - std::chrono::steady_clock::<span class="built_in">now</span>(); &#125;;</span><br><span class="line">  <span class="keyword">auto</span> set_timeout = [timeout_ms, &amp;time_left](<span class="type">int</span> sockfd) &#123;</span><br><span class="line">    <span class="keyword">if</span> (timeout_ms &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> sockfd;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">auto</span> remaining = <span class="built_in">time_left</span>();</span><br><span class="line">    <span class="keyword">if</span> (remaining &lt; <span class="keyword">decltype</span>(remaining)::<span class="built_in">zero</span>()) &#123;</span><br><span class="line">      <span class="built_in">LOG</span>(ERROR) &lt;&lt; <span class="string">&quot;libdebuggerd_client: timeout expired&quot;</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">timeval</span> timeout;</span><br><span class="line">    <span class="built_in">populate_timeval</span>(&amp;timeout, remaining);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">setsockopt</span>(sockfd, SOL_SOCKET, SO_RCVTIMEO, &amp;timeout, <span class="built_in">sizeof</span>(timeout)) != <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">PLOG</span>(ERROR) &lt;&lt; <span class="string">&quot;libdebuggerd_client: failed to set receive timeout&quot;</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">setsockopt</span>(sockfd, SOL_SOCKET, SO_SNDTIMEO, &amp;timeout, <span class="built_in">sizeof</span>(timeout)) != <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">PLOG</span>(ERROR) &lt;&lt; <span class="string">&quot;libdebuggerd_client: failed to set send timeout&quot;</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sockfd;</span><br><span class="line">  &#125;;</span><br><span class="line">  sockfd.<span class="built_in">reset</span>(<span class="built_in">socket</span>(AF_LOCAL, SOCK_SEQPACKET, <span class="number">0</span>));</span><br><span class="line">  <span class="keyword">if</span> (sockfd == <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="built_in">PLOG</span>(ERROR) &lt;&lt; <span class="string">&quot;libdebugger_client: failed to create socket&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">socket_local_client_connect</span>(<span class="built_in">set_timeout</span>(sockfd.<span class="built_in">get</span>()), kTombstonedInterceptSocketName,</span><br><span class="line">                                  ANDROID_SOCKET_NAMESPACE_RESERVED, SOCK_SEQPACKET) == <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="built_in">PLOG</span>(ERROR) &lt;&lt; <span class="string">&quot;libdebuggerd_client: failed to connect to tombstoned&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  InterceptRequest req = &#123;.pid = pid, .dump_type = dump_type&#125;;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">set_timeout</span>(sockfd)) &#123;</span><br><span class="line">    <span class="built_in">PLOG</span>(ERROR) &lt;&lt; <span class="string">&quot;libdebugger_client: failed to set timeout&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Create an intermediate pipe to pass to the other end.</span></span><br><span class="line">  unique_fd pipe_read, pipe_write;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">Pipe</span>(&amp;pipe_read, &amp;pipe_write)) &#123;</span><br><span class="line">    <span class="built_in">PLOG</span>(ERROR) &lt;&lt; <span class="string">&quot;libdebuggerd_client: failed to create pipe&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  std::string pipe_size_str;</span><br><span class="line">  <span class="type">int</span> pipe_buffer_size = <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line">  <span class="keyword">if</span> (android::base::<span class="built_in">ReadFileToString</span>(<span class="string">&quot;/proc/sys/fs/pipe-max-size&quot;</span>, &amp;pipe_size_str)) &#123;</span><br><span class="line">    pipe_size_str = android::base::<span class="built_in">Trim</span>(pipe_size_str);</span><br><span class="line">    <span class="keyword">if</span> (!android::base::<span class="built_in">ParseInt</span>(pipe_size_str.<span class="built_in">c_str</span>(), &amp;pipe_buffer_size, <span class="number">0</span>)) &#123;</span><br><span class="line">      <span class="built_in">LOG</span>(FATAL) &lt;&lt; <span class="string">&quot;failed to parse pipe max size &#x27;&quot;</span> &lt;&lt; pipe_size_str &lt;&lt; <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">fcntl</span>(pipe_read.<span class="built_in">get</span>(), F_SETPIPE_SZ, pipe_buffer_size) != pipe_buffer_size) &#123;</span><br><span class="line">    <span class="built_in">PLOG</span>(ERROR) &lt;&lt; <span class="string">&quot;failed to set pipe buffer size&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">send_fd</span>(<span class="built_in">set_timeout</span>(sockfd), &amp;req, <span class="built_in">sizeof</span>(req), std::<span class="built_in">move</span>(pipe_write)) != <span class="built_in">sizeof</span>(req)) &#123;</span><br><span class="line">    <span class="built_in">PLOG</span>(ERROR) &lt;&lt; <span class="string">&quot;libdebuggerd_client: failed to send output fd to tombstoned&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Check to make sure we&#x27;ve successfully registered.</span></span><br><span class="line">  InterceptResponse response;</span><br><span class="line">  <span class="type">ssize_t</span> rc =</span><br><span class="line">      <span class="built_in">TEMP_FAILURE_RETRY</span>(<span class="built_in">recv</span>(<span class="built_in">set_timeout</span>(sockfd.<span class="built_in">get</span>()), &amp;response, <span class="built_in">sizeof</span>(response), MSG_TRUNC));</span><br><span class="line">  <span class="keyword">if</span> (rc == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">LOG</span>(ERROR) &lt;&lt; <span class="string">&quot;libdebuggerd_client: failed to read response from tombstoned: timeout reached?&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rc != <span class="built_in">sizeof</span>(response)) &#123;</span><br><span class="line">    <span class="built_in">LOG</span>(ERROR)</span><br><span class="line">        &lt;&lt; <span class="string">&quot;libdebuggerd_client: received packet of unexpected length from tombstoned: expected &quot;</span></span><br><span class="line">        &lt;&lt; <span class="built_in">sizeof</span>(response) &lt;&lt; <span class="string">&quot;, received &quot;</span> &lt;&lt; rc;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (response.status != InterceptStatus::kRegistered) &#123;</span><br><span class="line">    <span class="built_in">LOG</span>(ERROR) &lt;&lt; <span class="string">&quot;libdebuggerd_client: unexpected registration response: &quot;</span></span><br><span class="line">               &lt;&lt; <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(response.status);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="comment">// 根据dump_type类型发送信号（SIGQUIT : DEBUGGER_SIGNAL）</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">send_signal</span>(pid, dump_type)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  rc = <span class="built_in">TEMP_FAILURE_RETRY</span>(<span class="built_in">recv</span>(<span class="built_in">set_timeout</span>(sockfd.<span class="built_in">get</span>()), &amp;response, <span class="built_in">sizeof</span>(response), MSG_TRUNC));</span><br><span class="line">  <span class="keyword">if</span> (rc == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">LOG</span>(ERROR) &lt;&lt; <span class="string">&quot;libdebuggerd_client: failed to read response from tombstoned: timeout reached?&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rc != <span class="built_in">sizeof</span>(response)) &#123;</span><br><span class="line">    <span class="built_in">LOG</span>(ERROR)</span><br><span class="line">      &lt;&lt; <span class="string">&quot;libdebuggerd_client: received packet of unexpected length from tombstoned: expected &quot;</span></span><br><span class="line">      &lt;&lt; <span class="built_in">sizeof</span>(response) &lt;&lt; <span class="string">&quot;, received &quot;</span> &lt;&lt; rc;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (response.status != InterceptStatus::kStarted) &#123;</span><br><span class="line">    response.error_message[<span class="built_in">sizeof</span>(response.error_message) - <span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="built_in">LOG</span>(ERROR) &lt;&lt; <span class="string">&quot;libdebuggerd_client: tombstoned reported failure: &quot;</span> &lt;&lt; response.error_message;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Forward output from the pipe to the output fd.</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">auto</span> remaining_ms = std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::milliseconds&gt;(<span class="built_in">time_left</span>()).<span class="built_in">count</span>();</span><br><span class="line">    <span class="keyword">if</span> (timeout_ms &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">      remaining_ms = <span class="number">-1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (remaining_ms &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">LOG</span>(ERROR) &lt;&lt; <span class="string">&quot;libdebuggerd_client: timeout expired&quot;</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">pollfd</span> pfd = &#123;</span><br><span class="line">        .fd = pipe_read.<span class="built_in">get</span>(), .events = POLLIN, .revents = <span class="number">0</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    rc = <span class="built_in">poll</span>(&amp;pfd, <span class="number">1</span>, remaining_ms);</span><br><span class="line">    <span class="keyword">if</span> (rc == <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (errno == EINTR) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">PLOG</span>(ERROR) &lt;&lt; <span class="string">&quot;libdebuggerd_client: error while polling&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rc == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">LOG</span>(ERROR) &lt;&lt; <span class="string">&quot;libdebuggerd_client: timeout expired&quot;</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">1024</span>];</span><br><span class="line">    rc = <span class="built_in">TEMP_FAILURE_RETRY</span>(<span class="built_in">read</span>(pipe_read.<span class="built_in">get</span>(), buf, <span class="built_in">sizeof</span>(buf)));</span><br><span class="line">    <span class="keyword">if</span> (rc == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// Done.</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rc == <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="built_in">PLOG</span>(ERROR) &lt;&lt; <span class="string">&quot;libdebuggerd_client: error while reading&quot;</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!android::base::<span class="built_in">WriteFully</span>(output_fd.<span class="built_in">get</span>(), buf, rc)) &#123;</span><br><span class="line">      <span class="built_in">PLOG</span>(ERROR) &lt;&lt; <span class="string">&quot;libdebuggerd_client: error while writing&quot;</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">LOG</span>(INFO) &lt;&lt; <span class="string">&quot;libdebuggerd_client: done dumping process &quot;</span> &lt;&lt; pid;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>send_signal</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">bool</span> <span class="title">send_signal</span><span class="params">(<span class="type">pid_t</span> pid, <span class="type">const</span> DebuggerdDumpType dump_type)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 根据dump_type的类型选择发送SIGQUIT信号还是DEBUGGER_SIGNAL信号</span></span><br><span class="line">  <span class="type">const</span> <span class="type">int</span> signal = (dump_type == kDebuggerdJavaBacktrace) ? SIGQUIT : DEBUGGER_SIGNAL;</span><br><span class="line">  sigval val;</span><br><span class="line">  val.sival_int = (dump_type == kDebuggerdNativeBacktrace) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">sigqueue</span>(pid, signal, val) != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">PLOG</span>(ERROR) &lt;&lt; <span class="string">&quot;libdebuggerd_client: failed to send signal to pid &quot;</span> &lt;&lt; pid;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到最终是调用<code>debuggerd_trigger_dump</code>（在debuggerd_client.cpp中处理），随后会向debuggerd发送命令，debuggerd相关部分此文暂不分析。</p>
<h3 id="3-总结"><a href="#3-总结" class="headerlink" title="3 总结"></a>3 总结</h3><p>ANR发生时系统会输出一些关键信息：</p>
<ul>
<li>将am_anr信息,输出到EventLog.(ANR开始起点看EventLog)；</li>
<li>获取重要进程trace信息，保存到*&#x2F;data&#x2F;anr&#x2F;anr_yyyy-MM-dd-HH-mm-ss-SSS*<ul>
<li>Java进程的traces;</li>
<li>Native进程的traces;</li>
</ul>
</li>
<li>ANR reason以及CPU使用情况信息，输出到main log；</li>
<li>将traces信息和 CPU使用情况信息保存到dropbox，即<em>data&#x2F;system&#x2F;dropbox</em>目录；</li>
<li>根据进程类型，来决定直接后台杀掉（后台ANR），还是弹框告知用户；</li>
</ul>
<p>在输出trace的时候，Android 8.1.0新加了一个<code>useTombstonedForJavaTraces</code>属性，Java进程的traces通过<code>kill -3 [pid]</code>获取，Native进程的traces通过<code>debuggerd -b [pid]</code>获取，<code>kill -3</code>命令需要虚拟机的支持，所以无法输出Native进程traces.而<code>debuggerd -b [pid]</code>也可用于Java进程，但信息量远没有kill -3多。 ANR信息最为重要的是dropbox信息（比如<a href="mailto:&#100;&#97;&#116;&#97;&#x5f;&#x61;&#112;&#x70;&#95;&#x61;&#110;&#114;&#x40;&#x31;&#x35;&#50;&#51;&#x34;&#52;&#x37;&#x37;&#x31;&#54;&#55;&#x32;&#x38;&#46;&#116;&#120;&#x74;&#46;&#103;&#122;">&#100;&#97;&#116;&#97;&#x5f;&#x61;&#112;&#x70;&#95;&#x61;&#110;&#114;&#x40;&#x31;&#x35;&#50;&#51;&#x34;&#52;&#x37;&#x37;&#x31;&#54;&#55;&#x32;&#x38;&#46;&#116;&#120;&#x74;&#46;&#103;&#122;</a>）。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>ANR</tag>
      </tags>
  </entry>
  <entry>
    <title>Android开机启动时间优化及bootchart工具使用</title>
    <url>/2018/03/13/Android/Android_bootchart_tools/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>做性能优化绕不开开机启动时间的优化，用户往往都希望自己的机器能够快速的启动，这种强烈的需求覆盖各种电子设备，本篇主要简单的介绍Android设备启动时间的计时工具——bootchart以及简单的优化。</p>
</blockquote>
<span id="more"></span>

<h4 id="1-bootchart工具的使用"><a href="#1-bootchart工具的使用" class="headerlink" title="1. bootchart工具的使用"></a>1. bootchart工具的使用</h4><p>Bootchart是一个用于Linux启动过程性能分析的开源软件工具，以可视化的方式对GUN&#x2F;Linux的开机启动过程进行性能分析，包括资源的使用（如CPU，磁盘等），各进程的执行时间信息等。根据分析结果，确定系统启动的性能瓶颈，制定相应的优化策略。由于Android系统是基于Linux的，所以我们可以使用Bootchart来分析开机性能。实际上在Android中已经集成了Bootchart这一开源工具供我们使用，只是在Android5.1之前默认是没有编译进系统的，需要我们手动编译进去使用，这里不再赘述在Android5.1以下系统如何使用Bootchart，从Android6.0开始，Google已经在Android系统中默认集成了Bootchart，<code>adb shell</code>命令进入设备后，可以看到有一个<code>/data/bootchart</code>目录。因为bootchart本身会影响性能，所以默认没有打开Bootchart开关，<code>/data/bootchart</code>目录下什么东西都没有。下面介绍在Android O中的使用方法：</p>
<ul>
<li><p>adb shell touch &#x2F;data&#x2F;bootchart&#x2F;enabled</p>
</li>
<li><p>重新启动设备，启动后会发现在<code>/data/bootchart/</code>目录下生成了如下文件：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">adb shell <span class="built_in">ls</span> <span class="literal">-l</span> <span class="keyword">data</span>/bootchart/</span><br><span class="line">total <span class="number">4792</span></span><br><span class="line"><span class="literal">-rw-rw-rw-</span> <span class="number">1</span> root root       <span class="number">0</span> <span class="number">2018</span><span class="literal">-03-13</span> <span class="number">10</span>:<span class="number">58</span> enabled</span><br><span class="line"><span class="literal">-rw-rw-rw-</span> <span class="number">1</span> root root    <span class="number">1115</span> <span class="number">1970</span><span class="literal">-02-02</span> <span class="number">00</span>:<span class="number">32</span> header</span><br><span class="line"><span class="literal">-rw-rw-rw-</span> <span class="number">1</span> root root  <span class="number">180357</span> <span class="number">2018</span><span class="literal">-03-13</span> <span class="number">11</span>:<span class="number">18</span> proc_diskstats.log</span><br><span class="line"><span class="literal">-rw-rw-rw-</span> <span class="number">1</span> root root <span class="number">4635657</span> <span class="number">2018</span><span class="literal">-03-13</span> <span class="number">11</span>:<span class="number">18</span> proc_ps.log</span><br><span class="line"><span class="literal">-rw-rw-rw-</span> <span class="number">1</span> root root   <span class="number">80531</span> <span class="number">2018</span><span class="literal">-03-13</span> <span class="number">11</span>:<span class="number">18</span> proc_stat.log</span><br></pre></td></tr></table></figure>


</li>
<li><p>电脑连接手机，执行android源码中的脚本：<code>./system/core/init/grab-bootchart.sh</code>，随后就会在执行命令的目录下生成bootchart.png</p>
</li>
</ul>
<h5 id="1-1-grab-bootchart-sh"><a href="#1-1-grab-bootchart-sh" class="headerlink" title="1.1 grab-bootchart.sh"></a>1.1 grab-bootchart.sh</h5><p>先来看一下脚本内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># This script is used to retrieve a bootchart log generated by init.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">All options are passed to adb, <span class="keyword">for</span> better or <span class="keyword">for</span> worse.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">See the readme <span class="keyword">in</span> this directory <span class="keyword">for</span> more on bootcharting.</span></span><br><span class="line"></span><br><span class="line">TMPDIR=/tmp/android-bootchart</span><br><span class="line">rm -rf $TMPDIR</span><br><span class="line">mkdir -p $TMPDIR</span><br><span class="line"></span><br><span class="line">LOGROOT=/data/bootchart</span><br><span class="line">TARBALL=bootchart.tgz</span><br><span class="line"></span><br><span class="line">FILES=&quot;header proc_stat.log proc_ps.log proc_diskstats.log&quot;</span><br><span class="line"></span><br><span class="line">for f in $FILES; do</span><br><span class="line">    # 把手机中/data/bootchart生成的文件pull到电脑/tmp/android-bootchart目录</span><br><span class="line">    adb &quot;$&#123;@&#125;&quot; pull $LOGROOT/$f $TMPDIR/$f 2&gt;&amp;1 &gt; /dev/null </span><br><span class="line">done</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入/tmp/android-bootchart目录，并把pull到此目录的文件打包成bootchart.tgz</span></span><br><span class="line">(cd $TMPDIR &amp;&amp; tar -czf $TARBALL $FILES)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行命令使用bootchart工具生成bootchart.png</span></span><br><span class="line">bootchart $&#123;TMPDIR&#125;/$&#123;TARBALL&#125;</span><br><span class="line">gnome-open $&#123;TARBALL%.tgz&#125;.png</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">清空/tmp/android-bootchart目录</span></span><br><span class="line">echo &quot;Clean up $&#123;TMPDIR&#125;/ and ./$&#123;TARBALL%.tgz&#125;.png when done&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>由于现在使用的开发环境ubuntu为远程主机，无法连接手机，所以直接把<code>/data/bootchart/</code>目录下生成的文件打包成bootchart.tgz，然后copy到ubuntu机器，直接使用<code>bootchart /tmp/android-bootchart/bootchart.tgz</code>命令生成bootchart.png。</p>
<p>如果ubuntu机器中的bootchart无法执行，或者没有安装其他工具，可使用如下命令安装：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo apt<span class="literal">-get</span> install bootchart</span><br><span class="line">sudo apt<span class="literal">-get</span> install pybootchartgui</span><br><span class="line">sudo apt<span class="literal">-get</span> install gnome<span class="literal">-open</span></span><br></pre></td></tr></table></figure>

<h5 id="1-2-compare-bootcharts-py"><a href="#1-2-compare-bootcharts-py" class="headerlink" title="1.2 compare-bootcharts.py"></a>1.2 compare-bootcharts.py</h5><p>Google还给我们提供了一个比较脚本&#x2F;system&#x2F;core&#x2F;init&#x2F;compare-bootcharts.py用来比较两次开机的数据。需要将两次打包得到的两个压缩包bootchart.tgz分别保存在base_bootchart_dir和exp_bootchart_dir目录中，然后运行下面的命令来执行脚本：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@ubuntu:~/work/Ored <span class="variable">$</span> ./system/core/init/<span class="built_in">compare-bootcharts</span>.py base_bootchart_dir exp_bootchart_dir</span><br><span class="line"><span class="keyword">process</span>: baseline experiment (delta)</span><br><span class="line"> - Unit is ms (a jiffy is <span class="number">8</span> ms on the system)</span><br><span class="line"><span class="literal">------------------------------------</span></span><br><span class="line">/init: <span class="number">0</span> <span class="number">0</span> (+<span class="number">0</span>)</span><br><span class="line">/system/bin/surfaceflinger: <span class="number">3736</span> <span class="number">3736</span> (+<span class="number">0</span>)</span><br><span class="line">/system/bin/bootanimation: <span class="number">4304</span> <span class="number">4304</span> (+<span class="number">0</span>)</span><br><span class="line">zygote64: <span class="number">5960</span> <span class="number">5960</span> (+<span class="number">0</span>)</span><br><span class="line">zygote: <span class="number">5960</span> <span class="number">5960</span> (+<span class="number">0</span>)</span><br><span class="line">system_server: <span class="number">8008</span> <span class="number">8008</span> (+<span class="number">0</span>)</span><br><span class="line">bootanimation ends at: <span class="number">12888</span> <span class="number">12888</span> (+<span class="number">0</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这个脚本中只比较了几个重要的核心进程（init、surfacefliger、bootanimation、zygote64、zygote、system_server、bootanimation）的启动时间。</p>
<h5 id="1-3-bootchart-png"><a href="#1-3-bootchart-png" class="headerlink" title="1.3 bootchart.png"></a>1.3 bootchart.png</h5><p>生成的bootchart.png如下图所示：</p>
<p><a href="http://otqux1hnn.bkt.clouddn.com/rangerzhou/180313/bootchart.png">看不到图点这里bootchart</a></p>
<p><img src="http://otqux1hnn.bkt.clouddn.com/rangerzhou/180313/bootchart.png]" alt="bootchart"></p>
<p>通过图片中的时间线timeline上各个进程的启动、IO处理等，我们大致可以分析在开机过程中哪个部分比较耗时，我们能够大致清楚了从系统启动到Android启动完成后的主要时间，同时也能够简单的分析出kernel启动时间，zygote启动时间，sysetmserver启动时间，看出哪个部分比较耗时，待查找出后去重点优化，但是这个工具还是不能把Android 启动阶段毕竟清晰的展现出来，这个时候就需要使用到开机events log信息了。</p>
<h4 id="2-系统启动架构图"><a href="#2-系统启动架构图" class="headerlink" title="2 系统启动架构图"></a>2 系统启动架构图</h4><p><img src="http://otqux1hnn.bkt.clouddn.com/rangerzhou/180312/android-boot.png" alt="系统启动架构图"></p>
<p><a href="http://otqux1hnn.bkt.clouddn.com/rangerzhou/180312/android-boot.png">点击查看大图</a></p>
<h4 id="3-如何debug"><a href="#3-如何debug" class="headerlink" title="3. 如何debug"></a>3. 如何debug</h4><p>开机时间分为2部分，一个是内核空间，另一个是用户空间，需要关注的有如下几点：</p>
<ul>
<li><p>Kernel config：在<code>kernel/arch/arm64/configs/</code>目录下有2个配置文件，分别是xxx_defconfig和xx-perf_defconfig；</p>
<ul>
<li>xxx_defconfig：包含kernel的debug信息，性能差；</li>
<li>xxx-perf_defconfig：移除了kernel的debug信息，性能好；</li>
</ul>
</li>
<li><p>抓取log：包含kernel、events和adb log；</p>
<ul>
<li>&#96;&#96;&#96; shell<br>adb wait-for-device root<br>adb wait-for-device<br>adb shell dmesg &gt; dmesg.txt  &#x2F;&#x2F; kernel log<br>adb logcat -b events -d &gt; logcat_events.txt  &#x2F;&#x2F; events log<br>adb logcat -v time thread -d &gt; logcat.txt  &#x2F;&#x2F; adb log<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 如果以上log不能获取足够的信息，则抓取Ftrace log，抓取方法参考文档：[点我下载](https://pan.baidu.com/s/1TZa8S4ljTdAUdEIgMVYUKw) ，密码：iegy</span><br><span class="line"></span><br><span class="line">#### 4. log分析</span><br><span class="line"></span><br><span class="line">##### 4.1 kernel log</span><br><span class="line"></span><br><span class="line">**bootloader的时间**</span><br><span class="line"></span><br><span class="line">``` powershell</span><br><span class="line">[    0.350199] KPI: Bootloader start count = 70361</span><br><span class="line">[    0.350204] KPI: Bootloader end count = 100035</span><br><span class="line">[    0.350208] KPI: Bootloader display count = 3623140379</span><br><span class="line">[    0.350212] KPI: Bootloader load kernel count = 5008</span><br><span class="line">[    0.350217] KPI: Kernel MPM timestamp = 119237</span><br><span class="line">[    0.350221] KPI: Kernel MPM Clock frequency = 32768</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<p>NHLOS time： A&#x2F;D＝70361&#x2F;32768&#x3D;2.15s<br>LK time： (B-A)&#x2F;D＝(100035－70361)&#x2F;32768＝0.91s<br>Boot loader ：C&#x2F;D－kmsg(C)&#x3D;119237&#x2F;32768-0.35&#x3D;3.29s</p>
<p><strong>驱动初始化耗时</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">01</span><span class="literal">-29</span> <span class="number">20</span>:<span class="number">39</span>:<span class="number">54.040</span>     <span class="number">0</span>     <span class="number">0</span> I KPI     : Bootloader <span class="built_in">start</span> count = <span class="number">70361</span></span><br><span class="line"><span class="number">01</span><span class="literal">-29</span> <span class="number">20</span>:<span class="number">39</span>:<span class="number">54.040</span>     <span class="number">0</span>     <span class="number">0</span> I KPI     : Bootloader <span class="keyword">end</span> count = <span class="number">100035</span></span><br><span class="line"><span class="number">01</span><span class="literal">-29</span> <span class="number">20</span>:<span class="number">39</span>:<span class="number">54.040</span>     <span class="number">0</span>     <span class="number">0</span> I KPI     : Bootloader display count = <span class="number">3623140379</span></span><br><span class="line"><span class="number">01</span><span class="literal">-29</span> <span class="number">20</span>:<span class="number">39</span>:<span class="number">54.040</span>     <span class="number">0</span>     <span class="number">0</span> I KPI     : Bootloader load kernel count = <span class="number">5008</span></span><br><span class="line"><span class="number">01</span><span class="literal">-29</span> <span class="number">20</span>:<span class="number">39</span>:<span class="number">54.040</span>     <span class="number">0</span>     <span class="number">0</span> I KPI     : Kernel MPM timestamp = <span class="number">119237</span></span><br><span class="line"><span class="number">01</span><span class="literal">-29</span> <span class="number">20</span>:<span class="number">39</span>:<span class="number">54.040</span>     <span class="number">0</span>     <span class="number">0</span> I KPI     : Kernel MPM Clock frequency = <span class="number">32768</span> // subsystem初始化开始</span><br><span class="line">... ...</span><br><span class="line"><span class="number">01</span><span class="literal">-29</span> <span class="number">20</span>:<span class="number">39</span>:<span class="number">56.560</span>     <span class="number">0</span>     <span class="number">0</span> I init    : init first stage started! // init进程第一阶段初始化开始</span><br></pre></td></tr></table></figure>

<p>耗时大概为2.52s，使用如下修改打开调试开关，</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// kernel/init/main.c</span></span><br><span class="line">diff --git a/init/main.c b/init/main.c</span><br><span class="line">index <span class="number">7</span>af2174.<span class="number">.2</span>d11927 <span class="number">100644</span></span><br><span class="line">--- a/init/main.c</span><br><span class="line">+++ b/init/main.c</span><br><span class="line">@@ <span class="number">-785</span>,<span class="number">7</span> +<span class="number">785</span>,<span class="number">7</span> @@ <span class="function"><span class="type">int</span> __init_or_module <span class="title">do_one_initcall</span><span class="params">(<span class="type">initcall_t</span> fn)</span></span></span><br><span class="line"><span class="function"><span class="title">if</span> <span class="params">(initcall_blacklisted(fn))</span></span></span><br><span class="line"><span class="function"><span class="keyword">return</span> -EPERM</span>;</span><br><span class="line">- <span class="keyword">if</span> (initcall_debug)</span><br><span class="line">+ <span class="keyword">if</span> (<span class="number">1</span>)</span><br><span class="line">ret = <span class="built_in">do_one_initcall_debug</span>(fn);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">ret = <span class="built_in">fn</span>();</span><br></pre></td></tr></table></figure>

<p>打开后可以看到初始化前后的log，从而对比哪个驱动模块耗时长。</p>
<p><strong>Zygote启动前的command耗时</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">01</span><span class="literal">-29</span> <span class="number">20</span>:<span class="number">39</span>:<span class="number">57.799</span>     <span class="number">0</span>     <span class="number">0</span> I init    : init second stage started! // init第二阶段初始化开始</span><br><span class="line">... ...</span><br><span class="line"><span class="number">01</span><span class="literal">-29</span> <span class="number">20</span>:<span class="number">40</span>:<span class="number">03.619</span>     <span class="number">0</span>     <span class="number">0</span> I init    : starting service <span class="string">&#x27;zygote&#x27;</span>... // zygote进程启动</span><br></pre></td></tr></table></figure>

<p>耗时大概为5.82s，Init程序里默认对耗时超过50ms的command会打印log进行警告：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">01</span><span class="literal">-29</span> <span class="number">20</span>:<span class="number">39</span>:<span class="number">59.327</span>     <span class="number">0</span>     <span class="number">0</span> I init    : Command <span class="string">&#x27;wait_for_coldboot_done&#x27;</span> action=wait_for_coldboot_done (&lt;Builtin Action&gt;:<span class="number">0</span>) returned <span class="number">0</span> took <span class="number">1472</span>ms.</span><br><span class="line"><span class="number">01</span><span class="literal">-29</span> <span class="number">20</span>:<span class="number">39</span>:<span class="number">59.537</span>     <span class="number">0</span>     <span class="number">0</span> I init    : Command <span class="string">&#x27;mount_all /vendor/etc/fstab.qcom&#x27;</span> action=fs (/vendor/etc/init/hw/init.target.rc:<span class="number">47</span>) returned <span class="number">2</span> took <span class="number">190</span>ms.</span><br><span class="line"><span class="number">01</span><span class="literal">-29</span> <span class="number">20</span>:<span class="number">40</span>:<span class="number">00.749</span>     <span class="number">0</span>     <span class="number">0</span> I init    : Command <span class="string">&#x27;insmod /vendor/lib/modules/msm_11ad_proxy.ko&#x27;</span> action=boot (/vendor/etc/init/hw/init.qcom.rc:<span class="number">221</span>) returned <span class="literal">-1</span> took <span class="number">104</span>ms.</span><br><span class="line"><span class="number">01</span><span class="literal">-29</span> <span class="number">20</span>:<span class="number">40</span>:<span class="number">01.079</span>     <span class="number">0</span>     <span class="number">0</span> I init    : Command <span class="string">&#x27;insmod /vendor/lib/modules/qca_cld3/qca_cld3_wlan.ko&#x27;</span> action=boot (/vendor/etc/init/hw/init.target.rc:<span class="number">111</span>) returned <span class="number">0</span> took <span class="number">257</span>ms.</span><br><span class="line"><span class="number">01</span><span class="literal">-29</span> <span class="number">20</span>:<span class="number">40</span>:<span class="number">03.604</span>     <span class="number">0</span>     <span class="number">0</span> I init    : Command <span class="string">&#x27;load_persist_props&#x27;</span> action=vold.decrypt=trigger_load_persist_props (/init.rc:<span class="number">716</span>) returned <span class="number">0</span> took <span class="number">141</span>ms.</span><br><span class="line"><span class="number">01</span><span class="literal">-29</span> <span class="number">20</span>:<span class="number">40</span>:<span class="number">10.980</span>     <span class="number">0</span>     <span class="number">0</span> I init    : Command <span class="string">&#x27;mkdir /sys/kernel/debug/tracing/instances/wifi 711&#x27;</span> action=sys.boot_completed=<span class="number">1</span> &amp;&amp; sys.wifitracing.started=<span class="number">0</span> (/system/etc/init/wifi<span class="literal">-events</span>.rc:<span class="number">22</span>) returned <span class="number">0</span> took <span class="number">59</span>ms.</span><br></pre></td></tr></table></figure>

<p>Wait_for_coldboot_done由于是冷启动，需要等待sys必要节点创建完成，因此时间会比较长;</p>
<p>mount_all &#x2F;vendor&#x2F;etc&#x2F;fstab.qcom 为需要解析fatab.qcom表内容以及挂载分区;</p>
<p>另外此阶段还有解析rc文件和prop文件，给文件和节点打selinux标签耗时，这部分耗时一般和硬件性能有关（CPU和emmc）。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">01</span><span class="literal">-29</span> <span class="number">20</span>:<span class="number">39</span>:<span class="number">57.807</span>     <span class="number">0</span>     <span class="number">0</span> I init    : Running restorecon... // 开始给文件和节点打selinux标签</span><br><span class="line"><span class="number">01</span><span class="literal">-29</span> <span class="number">20</span>:<span class="number">39</span>:<span class="number">57.814</span>     <span class="number">0</span>     <span class="number">0</span> E init    : waitid failed: No child processes // 耗时结束：<span class="number">7</span>ms</span><br><span class="line">... ...</span><br><span class="line"><span class="number">01</span><span class="literal">-29</span> <span class="number">20</span>:<span class="number">39</span>:<span class="number">57.816</span>     <span class="number">0</span>     <span class="number">0</span> I init    : Parsing file /init.rc... // 开始解析rc文件</span><br><span class="line"><span class="number">01</span><span class="literal">-29</span> <span class="number">20</span>:<span class="number">39</span>:<span class="number">57.818</span>     <span class="number">0</span>     <span class="number">0</span> I init    : Parsing file /vendor/etc/init/hw/init.qcom.rc...</span><br><span class="line"><span class="number">01</span><span class="literal">-29</span> <span class="number">20</span>:<span class="number">39</span>:<span class="number">57.826</span>     <span class="number">0</span>     <span class="number">0</span> I init    : Parsing file /vendor/etc/init/hw/init.target.rc...</span><br><span class="line">... ...</span><br><span class="line"><span class="number">01</span><span class="literal">-29</span> <span class="number">20</span>:<span class="number">39</span>:<span class="number">57.851</span>     <span class="number">0</span>     <span class="number">0</span> I init    : processing action (early<span class="literal">-init</span>) from (/init.rc:<span class="number">14</span>)</span><br><span class="line">... ...</span><br><span class="line"><span class="number">01</span><span class="literal">-29</span> <span class="number">20</span>:<span class="number">39</span>:<span class="number">57.854</span>     <span class="number">0</span>     <span class="number">0</span> I init    : processing action (early<span class="literal">-init</span>) from (/vendor/etc/init/hw/init.qcom.rc:<span class="number">35</span>)</span><br><span class="line"><span class="number">01</span><span class="literal">-29</span> <span class="number">20</span>:<span class="number">39</span>:<span class="number">57.854</span>     <span class="number">0</span>     <span class="number">0</span> I init    : processing action (early<span class="literal">-init</span>) from (/vendor/etc/init/hw/init.target.rc:<span class="number">30</span>) // 解析结束 耗时：<span class="number">38</span>ms</span><br></pre></td></tr></table></figure>



<h5 id="4-2-events-log"><a href="#4-2-events-log" class="headerlink" title="4.2 events log"></a>4.2 events log</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">adb logcat <span class="literal">-b</span> events | grep boot_progress</span><br><span class="line"><span class="number">01</span><span class="literal">-29</span> <span class="number">20</span>:<span class="number">40</span>:<span class="number">03.450</span>  <span class="number">1103</span>  <span class="number">1103</span> I boot_progress_start: <span class="number">10453</span></span><br><span class="line"><span class="number">01</span><span class="literal">-29</span> <span class="number">20</span>:<span class="number">40</span>:<span class="number">04.682</span>  <span class="number">1103</span>  <span class="number">1103</span> I boot_progress_preload_start: <span class="number">11684</span></span><br><span class="line"><span class="number">01</span><span class="literal">-29</span> <span class="number">20</span>:<span class="number">40</span>:<span class="number">05.542</span>  <span class="number">1103</span>  <span class="number">1103</span> I boot_progress_preload_end: <span class="number">12545</span></span><br><span class="line"><span class="number">01</span><span class="literal">-29</span> <span class="number">20</span>:<span class="number">40</span>:<span class="number">05.794</span>  <span class="number">1934</span>  <span class="number">1934</span> I boot_progress_system_run: <span class="number">12796</span></span><br><span class="line"><span class="number">01</span><span class="literal">-29</span> <span class="number">20</span>:<span class="number">40</span>:<span class="number">06.099</span>  <span class="number">1934</span>  <span class="number">1934</span> I boot_progress_pms_start: <span class="number">13101</span></span><br><span class="line"><span class="number">01</span><span class="literal">-29</span> <span class="number">20</span>:<span class="number">40</span>:<span class="number">06.253</span>  <span class="number">1934</span>  <span class="number">1934</span> I boot_progress_pms_system_scan_start: <span class="number">13255</span></span><br><span class="line"><span class="number">01</span><span class="literal">-29</span> <span class="number">20</span>:<span class="number">40</span>:<span class="number">07.155</span>  <span class="number">1934</span>  <span class="number">1934</span> I boot_progress_pms_data_scan_start: <span class="number">14157</span></span><br><span class="line"><span class="number">01</span><span class="literal">-29</span> <span class="number">20</span>:<span class="number">40</span>:<span class="number">07.161</span>  <span class="number">1934</span>  <span class="number">1934</span> I boot_progress_pms_scan_end: <span class="number">14164</span></span><br><span class="line"><span class="number">01</span><span class="literal">-29</span> <span class="number">20</span>:<span class="number">40</span>:<span class="number">07.390</span>  <span class="number">1934</span>  <span class="number">1934</span> I boot_progress_pms_ready: <span class="number">14392</span></span><br><span class="line"><span class="number">01</span><span class="literal">-29</span> <span class="number">20</span>:<span class="number">40</span>:<span class="number">08.150</span>  <span class="number">1934</span>  <span class="number">1934</span> I boot_progress_ams_ready: <span class="number">15153</span></span><br><span class="line"><span class="number">01</span><span class="literal">-29</span> <span class="number">20</span>:<span class="number">40</span>:<span class="number">08.790</span>  <span class="number">1934</span>  <span class="number">1975</span> I boot_progress_enable_screen: <span class="number">15792</span></span><br><span class="line">...</span><br><span class="line"><span class="number">01</span><span class="literal">-29</span> <span class="number">20</span>:<span class="number">40</span>:<span class="number">10.151</span>   <span class="number">743</span>   <span class="number">818</span> I sf_stop_bootanim: <span class="number">17153</span></span><br><span class="line"><span class="number">01</span><span class="literal">-29</span> <span class="number">20</span>:<span class="number">40</span>:<span class="number">10.152</span>  <span class="number">1934</span>  <span class="number">1985</span> I wm_boot_animation_done: <span class="number">17155</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>启动阶段</th>
<th align="center">时间点(ms)</th>
<th align="center">花费时间(ms)</th>
<th align="center">备注</th>
</tr>
</thead>
<tbody><tr>
<td>boot_progress_start</td>
<td align="center">10453</td>
<td align="center">10453</td>
<td align="center">Linux kernel启动到Zygote进程启动的时间，包含从kernel启动到Init启动Zygote的时间</td>
</tr>
<tr>
<td>boot_progress_preload_start</td>
<td align="center">11684</td>
<td align="center">1231</td>
<td align="center">ART虚拟机启动耗时&#x2F;Zygote开始启动</td>
</tr>
<tr>
<td>boot_progress_preload_end</td>
<td align="center">12545</td>
<td align="center">770</td>
<td align="center">虚拟机资源装载耗时&#x2F;Zygote启动结束</td>
</tr>
<tr>
<td>boot_progress_system_run</td>
<td align="center">12796</td>
<td align="center">251</td>
<td align="center">System Server进程启动耗时</td>
</tr>
<tr>
<td>boot_progress_pms_start</td>
<td align="center">13101</td>
<td align="center">305</td>
<td align="center">Android一些在PMS前需要启动服务的启动耗时，package scan开始</td>
</tr>
<tr>
<td>boot_progress_pms_system_scan_start</td>
<td align="center">13255</td>
<td align="center">154</td>
<td align="center">system目录开始scan时间点</td>
</tr>
<tr>
<td>boot_progress_pms_data_scan_start</td>
<td align="center">14157</td>
<td align="center">902</td>
<td align="center">data目录开始scan时间点&#x2F;system目录扫描耗时</td>
</tr>
<tr>
<td>boot_progress_pms_scan_end</td>
<td align="center">14164</td>
<td align="center">7</td>
<td align="center">扫描结束时间点&#x2F;data目录扫描耗时</td>
</tr>
<tr>
<td>boot_progress_pms_ready</td>
<td align="center">14392</td>
<td align="center">1291</td>
<td align="center">PMS启动扫描包耗时（pms_ready~pms_start）</td>
</tr>
<tr>
<td>boot_progress_ams_ready</td>
<td align="center">15153</td>
<td align="center">761</td>
<td align="center">PMS后的系统服务启动时间</td>
</tr>
<tr>
<td>boot_progress_enable_screen</td>
<td align="center">15792</td>
<td align="center">639</td>
<td align="center">AMS启动完成后开始激活屏幕</td>
</tr>
<tr>
<td>sf_stop_bootanim</td>
<td align="center">17153</td>
<td align="center">1361</td>
<td align="center"></td>
</tr>
<tr>
<td>wm_boot_animation_done</td>
<td align="center">17155</td>
<td align="center">2</td>
<td align="center">从enable_screen到animation_done包含壁纸和keyguard的绘制时间</td>
</tr>
</tbody></table>
<p>以上数据为优化后的数据，主要涉及到配置源码中<code>/kernel/arch/arm64/config/xxx-perf_defconfig</code>，关闭不必要的配置，尤其是串口log，以及camera驱动优化，TP优化等待，更多优化后续持续更新。</p>
<p><strong>引用：</strong></p>
<p><a href="http://blog.csdn.net/ljp1205/article/details/78360701">http://blog.csdn.net/ljp1205/article/details/78360701</a></p>
<p><a href="http://blog.csdn.net/whurs/article/details/67062678">http://blog.csdn.net/whurs/article/details/67062678</a></p>
<p><a href="http://blog.csdn.net/fu_kevin0606/article/details/53928748">http://blog.csdn.net/fu_kevin0606/article/details/53928748</a></p>
<p><a href="https://www.jianshu.com/p/6dba42c022a9">https://www.jianshu.com/p/6dba42c022a9</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>bootchart</tag>
      </tags>
  </entry>
  <entry>
    <title>Android - ANR分析</title>
    <url>/2018/03/04/Android/AndroidDevelop_014_ANR/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><blockquote>
<p>ANR(Application Not Responding) 是一个很常见的问题，通俗的说，就是应用程序与外界的交互不灵敏了。Android 应用与外界的交互有多种，但其中一些特别重要的交互，需要在一定时间范围内完成，如果超过预定时间没有得到应用的及时处理，就会造成 ANR。</p>
</blockquote>
<span id="more"></span>

<p>从用户的角度来说，通常就会觉得在这段时间内，无论点击手机按键或滑动屏幕都没有反应。有的时候ANR会向用户显示一个对话框，用户可以选择继续等待或者关闭这个应用程序文件。</p>
<h2 id="2-ANR分类"><a href="#2-ANR分类" class="headerlink" title="2. ANR分类"></a>2. ANR分类</h2><h3 id="2-1-inputDispatching-Timeout（最常见的-ANR）"><a href="#2-1-inputDispatching-Timeout（最常见的-ANR）" class="headerlink" title="2.1 inputDispatching Timeout（最常见的 ANR）"></a>2.1 inputDispatching Timeout（最常见的 ANR）</h3><p>输入事件超时（包括屏幕点击、滑动或按键事件），在一定时间内没有得到应用的处理；</p>
<p>Timeout：5 秒，<strong>超过 5 秒并不是一定会报 ANR，对于 input 来说即便某次事件执行时间超过 timeout 时长，只要用户后续没有再生成事件，就不会触发 ANR</strong>；</p>
<h3 id="2-2-BroadcastQueue-Timeout（比较常见）"><a href="#2-2-BroadcastQueue-Timeout（比较常见）" class="headerlink" title="2.2 BroadcastQueue Timeout（比较常见）"></a>2.2 BroadcastQueue Timeout（比较常见）</h3><p>广播事件处理超时，指 BroadcastReceiver 在一定时间内（通常是10秒）没有处理完成；</p>
<p>Timeout：前台广播，超时为 <code>BROADCAST_FG_TIMEOUT = 10s</code>，后台广播，超时为 <code>BROADCAST_BG_TIMEOUT = 60s</code>；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ActivityManagerService.java</span></span><br><span class="line"><span class="comment">// How long we allow a receiver to run before giving up on it.</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BROADCAST_FG_TIMEOUT</span> <span class="operator">=</span> <span class="number">10</span> * <span class="number">1000</span> * Build.HW_TIMEOUT_MULTIPLIER;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BROADCAST_BG_TIMEOUT</span> <span class="operator">=</span> <span class="number">60</span> * <span class="number">1000</span> * Build.HW_TIMEOUT_MULTIPLIER;</span><br></pre></td></tr></table></figure>

<h3 id="2-3-Service-Timeout（很少见）"><a href="#2-3-Service-Timeout（很少见）" class="headerlink" title="2.3 Service Timeout（很少见）"></a>2.3 Service Timeout（很少见）</h3><p>服务超时，应用提供的服务，在一定的时间内（通常是20秒）没法处理完成。</p>
<p>Timeout：前台服务,超时为 <code>SERVICE_TIMEOUT = 20s</code>，后台服务,超时为 <code>SERVICE_BACKGROUND_TIMEOUT = 200s</code>；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ActiveServices.java</span></span><br><span class="line"><span class="comment">// How long we wait for a service to finish executing.</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SERVICE_TIMEOUT</span> <span class="operator">=</span> <span class="number">20</span> * <span class="number">1000</span> * Build.HW_TIMEOUT_MULTIPLIER;</span><br><span class="line"></span><br><span class="line"><span class="comment">// How long we wait for a service to finish executing.</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SERVICE_BACKGROUND_TIMEOUT</span> <span class="operator">=</span> SERVICE_TIMEOUT * <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<h3 id="2-4-ContentProvider-Timeout"><a href="#2-4-ContentProvider-Timeout" class="headerlink" title="2.4 ContentProvider Timeout"></a>2.4 ContentProvider Timeout</h3><p>内容提供者,在 publish 超时10s；</p>
<p>Timeout：超时为 <code>CONTENT_PROVIDER_PUBLISH_TIMEOUT_MILLIS = 10s</code>；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ContentResolver.java</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * How long we wait for an attached process to publish its content providers</span></span><br><span class="line"><span class="comment">     * before we decide it must be hung.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@hide</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CONTENT_PROVIDER_PUBLISH_TIMEOUT_MILLIS</span> <span class="operator">=</span></span><br><span class="line">            <span class="number">10</span> * <span class="number">1000</span> * Build.HW_TIMEOUT_MULTIPLIER;</span><br></pre></td></tr></table></figure>



<p><strong>注：以上超时的时间阈值，在一些特殊的情况下，也可以通过修改阈值来避免ANR。</strong></p>
<h2 id="3-ANR产生原因"><a href="#3-ANR产生原因" class="headerlink" title="3. ANR产生原因"></a>3. ANR产生原因</h2><p>ANR产生的原因，总的来说，通常有六种：</p>
<ul>
<li>主线程 IO</li>
<li>多线程等锁</li>
<li>System_server watchdog</li>
<li>等待 Binder 对端返回数据</li>
<li>Binder 无空闲线程</li>
<li>系统资源紧张</li>
</ul>
<h3 id="3-1-主线程中有耗时-x2F-等待操作"><a href="#3-1-主线程中有耗时-x2F-等待操作" class="headerlink" title="3.1 主线程中有耗时&#x2F;等待操作"></a>3.1 主线程中有耗时&#x2F;等待操作</h3><p>android 应用程序都有一个主线程，这个主线程主要负责控制 UI 界面的显示、更新和控件交互（因此主线程通常又叫做UI线程），在 android 应用程序中，对于输入事件、broadcast 以及 service 的处理都是在这个主线程中。任何一个线程，简单点来说，其实都是一个 while 循环，在这个循环中，依次去做各种事，因此线程的工作流程显然是串行的，而非并行的。从另一个角度来说，这就意味着，在线程中，如果有一件事情没有完成，其它事情是决不可能被执行的。主线程也不例外，主线程要处理的各项事务（包括输入事件，广播，服务等）也必须按序一样一样来完成的。因此，如果主线程一直在做某件耗时的事情，或者在等待某些条件，就必然导致其它事务得不到及时处理，这就为 ANR 产生创造了条件。</p>
<p>具体来说，在主线程中发生的耗时&#x2F;等待操作，可能有如下这些情况：</p>
<ul>
<li>主线程在做网络访问</li>
<li>主线程在做大量的数据库访问</li>
<li>主线程在做硬件操作</li>
<li>主线程中调用了新建线程的 thread.join 方法，或调用了 sleep 方法</li>
<li>Service 忙导致超时</li>
<li>其它线程占有 lock，导致主线程在等待 lock</li>
<li>主线程在等待其它线程的返回结果，而其它线程迟迟没有返回</li>
</ul>
<p>总而言之，在主线程的任何地方，任何代码，只要它消耗的时间超过前面所说的时间阀值，就有可能会造成ANR，那么应用中，哪些地方属于主线程呢？常见的有如下这些：</p>
<ul>
<li>Activity:onCreate(), onResume(), onDestroy(), onKeyDown(), onClick() 等</li>
<li>AsyncTask: onPreExecute(), onProgressUpdate(), onPostExecute(), onCancel,等</li>
<li>Mainthread handler: handleMessage(), post*(runnable r)等</li>
</ul>
<h3 id="3-2-系统性能问题"><a href="#3-2-系统性能问题" class="headerlink" title="3.2 系统性能问题"></a>3.2 系统性能问题</h3><p>在手机系统中，同一时间内有好多程序在运行，不可能只有当前的应用程序在跑，而系统 CPU 资源是有限的，因此，如果其它程序在进行繁忙的操作，占用了大量的 CPU 资源的话，就有可能导致当前应用无法及时运行（所谓的 CPU 饥饿），这也就意味着应用程序可能无法及时处理各种输入事件，从而导致 ANR。</p>
<h3 id="3-3-应用程序没有收到输入事件"><a href="#3-3-应用程序没有收到输入事件" class="headerlink" title="3.3 应用程序没有收到输入事件"></a>3.3 应用程序没有收到输入事件</h3><p>如果系统向当前应用分发了一个输入事件，但应用程序却由于某种原因（比如说因为事件分发的管道坏了），没有接到这个输入事件，当然也就无法处理这个事件，因此，过了一定时间后，仍然会出现 ANR，典型的 log 如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">03-01 17:34:02.641  5391  8174 W InputDispatcher: channel &#x27;fb9318f PopupWindow:53fe386 (server)&#x27; ~ Consumer closed input channel or an error occurred.  events=0x9</span><br><span class="line">03-01 17:34:02.641  5391  8174 E InputDispatcher: channel &#x27;fb9318f PopupWindow:53fe386 (server)&#x27; ~ Channel is unrecoverably broken and will be disposed!</span><br><span class="line">... ...</span><br><span class="line">03-01 17:34:10.387  5391  8174 I WindowManager: Input event dispatching timed out sending to PopupWindow:53fe386.  Reason: Waiting because the focused window&#x27;s input channel is not registered with the input dispatcher.  The window may be in the process of being removed.</span><br></pre></td></tr></table></figure>

<h2 id="4-如何分析ANR"><a href="#4-如何分析ANR" class="headerlink" title="4. 如何分析ANR"></a>4. 如何分析ANR</h2><p>  ANR 分为前台 ANR（用户能感知到的，对用户体验影响大，需要弹框让用户决定退出还是等待）和后台 ANR（只抓取发生 ANR 进程的 trace，不会收集 CPU 信息，并且会在后台直接杀掉该无响应的进程，不会弹框提示用户）；</p>
<p> 前台 ANR 发生后，系统会马上去抓取现场信息用于调试分析，主要信息有：</p>
<ul>
<li>am_anr 信息（Eventlog），这条 log 的时间最接近 ANR 发生的时间；</li>
<li>trace 信息，保存在 data&#x2F;anr&#x2F; 目录下；</li>
<li>main log 中发生 ANR 的原因和 CPU 使用情况信息；</li>
<li>将 trace 文件和 CPU 使用情况保存到 data&#x2F;system&#x2F;dropbox 目录；</li>
<li>对用户感知的进程弹出 ANR 对话框，对用户不感知的发生 ANR 的进程直接杀掉；</li>
</ul>
<p>分析步骤：</p>
<ul>
<li>定位 ANR 发生的时间点；</li>
<li>查看 trace 信息；</li>
<li>分析是否有耗时的 message, binder 调用，锁的竞争，CPU 资源的抢占；</li>
<li>结合具体的业务场景的上下文来分析；</li>
</ul>
<h3 id="4-1-在log中搜索”am-anr”"><a href="#4-1-在log中搜索”am-anr”" class="headerlink" title="4.1 在log中搜索”am_anr”"></a>4.1 在log中搜索”am_anr”</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">01-29 15:12:47.938  1720  1798 I am_anr  : [0,3108,com.miui.home,953794117,Input dispatching timed out (com.miui.home/com.miui.home.launcher.Launcher, Waiting to send non-key event because the touched window has not finished processing certain input events that were delivered to it over 500.0ms ago.  Wait queue length: 5.  Wait queue head age: 5799.1ms.)]</span><br></pre></td></tr></table></figure>

<ul>
<li>从 log 中可以看到发生 ANR 的进程 ID(3108)，进程名(com.miui.home)，ANR 的类型(Input dispatching timed out)等信息；</li>
<li>要注意这条 log 的时间(01-29 15:12:47.938)，即 ANR 发生的时间点，向前平移相应类型超时的时间，就可以找到输入事件&#x2F;广播&#x2F;服务 开始的时间点，比如这里是输入事件超时，发生在 15:12:47 ，则向前平移 5 秒，15:12:42 就是事件输入的时间；</li>
<li>知道这个时间很重要，因为应用程序就是在这个时间段内，无法对外界的交互作出响应的。因此，我们应当重点查看这个时间段内主线程的所有 log（就是那些 pid 与 tid 相同，且都等于应用程序的进程 ID 的 log），从这些 log 我们也许可以看到在 ANR 期间，主线程在做些什么，这对于我们判断 ANR 的成因有一定的帮助。比如说，如果我们看到在这个时间段内，主线程打印了大量的与数据库相关的操作，那么就不难推测，很可能就是这些数据库操作，导致了阻塞；</li>
</ul>
<h3 id="4-2-在log中搜索”ANR-in”"><a href="#4-2-在log中搜索”ANR-in”" class="headerlink" title="4.2 在log中搜索”ANR in”"></a>4.2 在log中搜索”ANR in”</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">01-29 15:12:47.953  3042  3164 I WtEventController: ANR com.miui.home 3108</span><br><span class="line">01-29 15:12:52.810  1720  1798 E ActivityManager: ANR in com.miui.home (com.miui.home/.launcher.Launcher)</span><br><span class="line">01-29 15:12:52.810  1720  1798 E ActivityManager: PID: 3108</span><br><span class="line">01-29 15:12:52.810  1720  1798 E ActivityManager: Reason: Input dispatching timed out (com.miui.home/com.miui.home.launcher.Launcher, Waiting to send non-key event because the touched window has not finished processing certain input events that were delivered to it over 500.0ms ago.  Wait queue length: 5.  Wait queue head age: 5799.1ms.)</span><br><span class="line">01-29 15:12:52.810  1720  1798 E ActivityManager: Load: 0.92 / 0.52 / 0.31</span><br><span class="line">01-29 15:12:52.810  1720  1798 E ActivityManager: CPU usage from 37298ms to 0ms ago (2018-01-29 15:12:10.574 to 2018-01-29 15:12:47.872):</span><br><span class="line">01-29 15:12:52.810  1720  1798 E ActivityManager:   13% 663/surfaceflinger: 6.3% user + 7.5% kernel / faults: 218 minor 2 major</span><br><span class="line">01-29 15:12:52.810  1720  1798 E ActivityManager:   10% 1720/system_server: 6.4% user + 3.6% kernel / faults: 3751 minor 3 major</span><br><span class="line">01-29 15:12:52.810  1720  1798 E ActivityManager:   8.9% 12029/com.tencent.mm: 7.2% user + 1.6% kernel / faults: 12889 minor 26 major</span><br><span class="line">01-29 15:12:52.810  1720  1798 E ActivityManager:   6.2% 20598/ctrip.android.view:pushsdk.v1: 2.3% user + 3.8% kernel / faults: 12738 minor 1 major</span><br><span class="line">01-29 15:12:52.810  1720  1798 E ActivityManager:   6.1% 29744/com.tencent.mm:tools: 4.3% user + 1.8% kernel / faults: 293 minor</span><br><span class="line">01-29 15:12:52.810  1720  1798 E ActivityManager:   5.2% 3970/com.hxwj.wjjf: 4% user + 1.1% kernel / faults: 194 minor</span><br><span class="line">01-29 15:12:52.810  1720  1798 E ActivityManager:   5.1% 7498/com.talk51.dasheng: 3.2% user + 1.8% kernel / faults: 568 minor</span><br><span class="line">01-29 15:12:52.810  1720  1798 E ActivityManager:   4.7% 29530/com.tencent.mm:appbrand0: 3.4% user + 1.3% kernel / faults: 270 minor</span><br><span class="line">01-29 15:12:52.810  1720  1798 E ActivityManager:   2.7% 22516/com.ss.android.ugc.live:push: 0% user + 2.7% kernel / faults: 9 minor</span><br></pre></td></tr></table></figure>

<p>从上面这些信息，同样可以看到 ANR 的类型，进程名，进程 ID 等信息，而最重要的是还可以看到 ANR 发生之前与之后，各进程占用 CPU 的情况，以及 io 访问的情况，通过这些信息，我们可以作出一些判断：</p>
<ul>
<li>如果 ANR 进程的 cpu 占用比别的进程都高得多，则显然应当关注该进程本身是否做了什么，是不是有大量耗时的操作；</li>
<li>如果是其它进程占用了很高的 CPU，比如说达到了百分之一百多，则有可能是 CPU 饥饿导致了 ANR；</li>
<li>如果 iowait 很高，则很可能是主线程在进行 io 操作导致的 ANR；</li>
</ul>
<h3 id="4-3-查看-trace-文件"><a href="#4-3-查看-trace-文件" class="headerlink" title="4.3 查看 trace 文件"></a>4.3 查看 trace 文件</h3><h4 id="4-3-1-trace-信息"><a href="#4-3-1-trace-信息" class="headerlink" title="4.3.1 trace 信息"></a>4.3.1 trace 信息</h4><p>人为收集 trace 命令：<code>adb shell kill -3 pid</code>，执行完该命令后 trace 信息会保存在 <em>&#x2F;data&#x2F;anr&#x2F;trace_xx</em> 中；</p>
<p>Trace 文件是 ANR 最重要的分析依据，它是在 ANR 发生时，系统自动生成的，放在手机目录 <em>&#x2F;data&#x2F;anr&#x2F;</em> 下面，发生 ANR 时，系统会将各主要进程的所有线程的当前堆栈，以及其它很多与进程、线程、内存相关的信息，都打印在 trace 文件中；</p>
<p>trace 文件中的信息种类很多，但我们在解决 ANR 时，主要关注的还是线程的堆栈。因为这些堆栈是在系统监测到 ANR 发生时打印的，所以其中很可能就包含了与 ANR 相关的函数调用的信息；</p>
<p>需要注意的一点是，trace 中的堆栈并不必然包含与 ANR 相关的函数堆栈信息，因此，<strong>不能看到主线程的堆栈顶是什么操作，就以为主线程一定是卡在这个操作里</strong>，这个必须综合考量；</p>
<p>trace 文件中一个典型的线程堆栈大致如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">----- pid <span class="number">3108</span> at <span class="number">2018</span>-<span class="number">01</span>-<span class="number">29</span> <span class="number">15</span>:<span class="number">12</span>:<span class="number">47</span> ----- <span class="comment">//进程ID</span></span><br><span class="line">Cmd line: com.miui.home <span class="comment">// 进程名</span></span><br><span class="line">Build fingerprint: <span class="string">&#x27;xiaomi/whyred/whyred:7.1.1/NGI77B/V9.2.2.0.NEIMIEK:user/release-keys&#x27;</span></span><br><span class="line">ABI: <span class="string">&#x27;arm64&#x27;</span></span><br><span class="line">Build type: optimized</span><br><span class="line">... ...</span><br><span class="line">DALVIK <span class="title function_">THREADS</span> <span class="params">(<span class="number">43</span>)</span>: <span class="comment">// 该进程中线程数目</span></span><br><span class="line">... ...</span><br><span class="line"><span class="string">&quot;main&quot;</span> prio=<span class="number">5</span> tid=<span class="number">1</span> Native <span class="comment">// &quot;main&quot;是本线程的名称，即主线程，tid 是该线程在本进程中所有线程中的序号</span></span><br><span class="line">  | group=<span class="string">&quot;main&quot;</span> sCount=<span class="number">1</span> dsCount=<span class="number">0</span> obj=<span class="number">0x76205000</span> self=<span class="number">0x7fb1496a00</span></span><br><span class="line">  | sysTid=<span class="number">3108</span> nice=-<span class="number">10</span> cgrp=<span class="keyword">default</span> sched=<span class="number">0</span>/<span class="number">0</span> handle=<span class="number">0x7fb5a1da98</span> <span class="comment">// &quot;sysTid&quot;即该线程在 linux 系统中的线程号</span></span><br><span class="line">  | state=S schedstat=( <span class="number">142450779402</span> <span class="number">106025895288</span> <span class="number">282748</span> ) utm=<span class="number">11713</span> stm=<span class="number">2532</span> core=<span class="number">1</span> HZ=<span class="number">100</span></span><br><span class="line">  | stack=<span class="number">0x7fe8140000</span>-<span class="number">0x7fe8142000</span> stackSize=8MB</span><br><span class="line">  | held mutexes=</span><br><span class="line">  kernel: __switch_to+<span class="number">0x88</span>/<span class="number">0x94</span>    <span class="comment">// 从这里开始以下是主线程堆栈</span></span><br><span class="line">  kernel: binder_thread_read+<span class="number">0x324</span>/<span class="number">0xea4</span></span><br><span class="line">  kernel: binder_ioctl_write_read+<span class="number">0x18c</span>/<span class="number">0x2d0</span></span><br><span class="line">  kernel: binder_ioctl+<span class="number">0x1c0</span>/<span class="number">0x5fc</span></span><br><span class="line">  kernel: do_vfs_ioctl+<span class="number">0x48c</span>/<span class="number">0x564</span></span><br><span class="line">  ... ...</span><br><span class="line">  at android.os.Looper.loop(Looper.java:<span class="number">163</span>)</span><br><span class="line">  at android.app.ActivityThread.main(ActivityThread.java:<span class="number">6210</span>)</span><br><span class="line">  at java.lang.reflect.Method.invoke!(Native method)</span><br><span class="line">  at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:<span class="number">901</span>)</span><br><span class="line">  at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:<span class="number">791</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>第 1 行：<ul>
<li>线程名：main，如果有 daemon 则是守护线程；</li>
<li>prio：线程优先级；</li>
<li>tid：该线程在本进程所有线程中的序号；</li>
<li>Native：线程状态；</li>
</ul>
</li>
<li>第 2 行：<ul>
<li>group：线程所属的线程组；</li>
<li>sCount：线程挂起次数；</li>
<li>dsCount：用于调试的线程挂起次数；</li>
<li>obj：当前线程关联的 java 线程对象；</li>
<li>self：当前线程地址；</li>
</ul>
</li>
<li>第 3 行：<ul>
<li>sysTid：线程真正意义上的 tid；</li>
<li>nice：调度有优先级，值越小优先级越高；</li>
<li>cgrp：进程所属的进程调度组；</li>
<li>sched：调度策略；</li>
<li>handle：函数处理地址；</li>
</ul>
</li>
<li>第 4 行：<ul>
<li>state：线程状态；</li>
<li>schedstat：CPU 调度时间统计，括号中的 3 数字依次是 Running（CPU 运行时间，单位 ns）、Runnable（RQ 队列的等待时间，单位 ns）、Switch（CPU 调度切换次数）；</li>
<li>utm&#x2F;stm：该线程在用户态 &#x2F; 内核态的所执行的时间，单位是 jiffies，jiffies 定义为 sysconf（_SC_CLK_TCK），默认等于 10ms，utm + stm &#x3D; schedstat 第一个参数值；</li>
<li>core：该线程的最后运行所在核；</li>
<li>HZ：时钟频率；</li>
</ul>
</li>
<li>第 5 行：<ul>
<li>stack：线程栈的地址区间；</li>
<li>stackSize：栈的大小；</li>
</ul>
</li>
<li>第 6 行：<ul>
<li>held mutexes：所持有mutex类型，有独占锁 exclusive 和共享锁 shared 两类；</li>
</ul>
</li>
</ul>
<p>拿到一份 trace 文件后，我们首先要看的是 ANR 进程主线程的堆栈，看主线程正在做什么，值得注意的情况大概有如下几点：</p>
<h4 id="4-3-1-主线程是否正在执行网络-x2F-IO-x2F-数据库等操作"><a href="#4-3-1-主线程是否正在执行网络-x2F-IO-x2F-数据库等操作" class="headerlink" title="4.3.1 主线程是否正在执行网络 &#x2F; IO &#x2F; 数据库等操作?"></a>4.3.1 主线程是否正在执行网络 &#x2F; IO &#x2F; 数据库等操作?</h4><p>这些情况都是发生 ANR 的高危操作，如果有的话，那么这些操作很可能就是导致 ANR 的原因了(当然一般还需要调试确认)，这种问题的解决方法一般就是把这些耗时操作放到其它线程中去完成，待完成后，再通过 handler 通知主线程就可以了;</p>
<p><strong>解决办法：</strong></p>
<ul>
<li>在建立网络连接时设置 timeout 超时时间；</li>
<li>可以把这任务放到独立的线程中去完成；</li>
</ul>
<h4 id="4-3-2-主线程的栈顶是否有-Thread-sleep-x2F-Thread-join-函数调用"><a href="#4-3-2-主线程的栈顶是否有-Thread-sleep-x2F-Thread-join-函数调用" class="headerlink" title="4.3.2 主线程的栈顶是否有 Thread.sleep&#x2F;Thread.join 函数调用"></a>4.3.2 主线程的栈顶是否有 Thread.sleep&#x2F;Thread.join 函数调用</h4><p><strong>解决办法：</strong></p>
<ul>
<li>对于 sleep，可以尝试去掉这个 sleep，如果不能去的话，那还是把这这个任务放到其它线程中去执行</li>
<li>对于 join（等待子线程执行完再继续执行），可以去掉 join，把 join 后面的工作放到 handler 的相关消息处理中，当新线程任务完成时，使用 handler 消息来通知主线程即可</li>
</ul>
<h4 id="4-3-3-主线程的函数栈中，特别是栈顶的那些函数中，是否存在大的-for-x2F-while-循环"><a href="#4-3-3-主线程的函数栈中，特别是栈顶的那些函数中，是否存在大的-for-x2F-while-循环" class="headerlink" title="4.3.3 主线程的函数栈中，特别是栈顶的那些函数中，是否存在大的 for&#x2F;while 循环"></a>4.3.3 主线程的函数栈中，特别是栈顶的那些函数中，是否存在大的 for&#x2F;while 循环</h4><p><strong>解决办法：</strong></p>
<ul>
<li>优化函数代码，使用其他方法代替；</li>
</ul>
<h4 id="4-3-4-主线程的栈顶是否有锁等待（waitting-on-a-lock）"><a href="#4-3-4-主线程的栈顶是否有锁等待（waitting-on-a-lock）" class="headerlink" title="4.3.4 主线程的栈顶是否有锁等待（waitting on a lock）"></a>4.3.4 主线程的栈顶是否有锁等待（waitting on a lock）</h4><p>栈顶有 waiting on &lt;0x********&gt;字样的话，说明主线程在等待锁，如下:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">at com.android.server.wm.WindowManagerService$H.handleMessage(WindowManagerService.java:8315)</span><br><span class="line">  - waiting to lock &lt;0x084ffe56&gt; (a java.util.HashMap) held by thread 76</span><br><span class="line">  at android.os.Handler.dispatchMessage(Handler.java:102)</span><br><span class="line">  at android.os.Looper.loop(Looper.java:148)</span><br><span class="line">... ...</span><br></pre></td></tr></table></figure>

<p>当然这并不能说明 ANR 就一定是因为卡在这个锁上，但如果多次抓取的 trace 文件中，都是卡在这个锁上，有可能一直在等待其它线程释放该锁，另外，还可以通过查找该锁是被哪个线程锁住的，然后去看那个线程中是否有什么可疑的阻塞操作？或者是否存在互相等待的死锁？如果那个线程中发现有可疑操作或死锁的话，这个锁应该就是 ANR 的原因了，如果没发现，那么该锁可能就是正常现象；</p>
<p>如何查找一个锁是被哪个线程锁住的？在 <code>waiting to lock</code> 的后面通常会有关键字 <code>held by thread 76</code>，根据这个线程序号，可以直接找到锁定的线程。也可以在 trace 文件中查找锁的数值关键字（如上面的&lt;0x084ffe56&gt; ），如果发现有 locked &lt;0x084ffe56&gt;，那么它就是在这个线程序中被锁定的，查找结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&quot;Binder_A&quot; prio=5 tid=76 Native</span><br><span class="line">  | group=&quot;main&quot; sCount=1 dsCount=0 obj=0x134490a0 self=0x55b18611f0</span><br><span class="line">  | sysTid=4276 nice=-3 cgrp=default sched=0/0 handle=0x7f7b6f6450</span><br><span class="line">  | state=S schedstat=( 155534146538 91307372331 509087 ) utm=8036 stm=7517 core=4 HZ=100</span><br><span class="line">  | stack=0x7f7b5fa000-0x7f7b5fc000 stackSize=1013KB</span><br><span class="line">  | held mutexes=</span><br><span class="line">... ...</span><br><span class="line">  native: #02 pc 000000000002d584  /system/lib64/libbinder.so (_ZN7android14IPCThreadState14talkWithDriverEb+164)</span><br><span class="line">  native: #03 pc 000000000002e050  /system/lib64/libbinder.so (_ZN7android14IPCThreadState15waitForResponseEPNS_6ParcelEPi+104)</span><br><span class="line">... ...</span><br><span class="line">  at com.android.server.wm.WindowStateAnimator.createSurfaceLocked(WindowStateAnimator.java:875)</span><br><span class="line">  at com.android.server.wm.WindowManagerService.relayoutWindow(WindowManagerService.java:3264)</span><br><span class="line">  - locked &lt;0x084ffe56&gt; (a java.util.HashMap)</span><br><span class="line">  at com.android.server.wm.Session.relayout(Session.java:198)</span><br><span class="line">  at android.view.IWindowSession$Stub.onTransact(IWindowSession.java:284)</span><br><span class="line">  at com.android.server.wm.Session.onTransact(Session.java:130)</span><br><span class="line">  at android.os.Binder.execTransact(Binder.java:453)</span><br></pre></td></tr></table></figure>

<p>从上面的堆栈可以看出， &lt;0x084ffe56&gt; 锁是在 Binder_A 线程中被锁定的，之所以一直没释放锁，是由于该线程卡在了 createSurface 这个 inder 调用中；另外，还需要说明的是，如果在同一个堆栈中出现这样的现象，一个锁先是被锁定，然后后面立刻又等待该锁，像下面这样：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&quot;main&quot; prio=5 tid=1 TimedWaiting</span><br><span class="line">| group=&quot;main&quot; sCount=1 dsCount=0 obj=0x752ccfb8 self=0x559e6b26a0</span><br><span class="line">| sysTid=3078 nice=0 cgrp=apps/bg_non_interactive sched=0/0 handle=0x7f81cd4150</span><br><span class="line">| state=S schedstat=( 521831915 7324195292 1199 ) utm=46 stm=6 core=3 HZ=100</span><br><span class="line">| stack=0x7fec70d000-0x7fec70f000 stackSize=8MB</span><br><span class="line">| held mutexes=</span><br><span class="line">at java.lang.Object.wait!(Native method)</span><br><span class="line">- waiting on &lt;0x2f38fd73&gt; (a java.lang.Object)</span><br><span class="line">at java.lang.Thread.parkFor(Thread.java:1220)</span><br><span class="line">- locked &lt;0x2f38fd73&gt;  (a java.lang.Object)</span><br><span class="line">at sun.misc.Unsafe.park(Unsafe.java:299)</span><br><span class="line">at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:197)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>有人可能会认为这是死锁，其实是不一定的。这种情况下，要看这个锁是不是 <strong>可重入锁</strong>，意思就是在同一个线程中，外层函数获得锁之后 ,内层函数仍然可以获取该锁，如果是可重入锁，上面的情况就不构成死锁，如果不是可重入锁，就会造成死锁。至于在堆栈出现的到底是哪种锁，这个需要具体看代码来分析，一般来说，java下使用 synchronized，ReentrantLock 来实现的锁都是<strong>可重入锁</strong>；</p>
<h4 id="4-3-5-主线程的栈顶是否正在执行-binder-请求"><a href="#4-3-5-主线程的栈顶是否正在执行-binder-请求" class="headerlink" title="4.3.5 主线程的栈顶是否正在执行 binder 请求"></a>4.3.5 主线程的栈顶是否正在执行 binder 请求</h4><p>Binder 通信默认是同步的，所以有可能在 Binder 请求时对端阻塞了，如果主线程的栈顶正在请求某个binder调用，它的形式通常如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&quot;main&quot; prio=5 tid=1 Native</span><br><span class="line">  | group=&quot;main&quot; sCount=1 dsCount=0 obj=0x74baafa0 self=0x55637f22b0</span><br><span class="line">  | sysTid=1347 nice=-2 cgrp=default sched=0/0 handle=0x7f8d762ff0</span><br><span class="line">  | state=S schedstat=( 19576409545 8006176352 39658 ) utm=1155 stm=802 core=5 HZ=100</span><br><span class="line">  | stack=0x7fcb8ef000-0x7fcb8f1000 stackSize=8MB</span><br><span class="line">  | held mutexes=</span><br><span class="line">... ...</span><br><span class="line">  native: #02 pc 000000000002d584  /system/lib64/libbinder.so (_ZN7android14IPCThreadState14talkWithDriverEb+164)</span><br><span class="line">  native: #03 pc 000000000002e050  /system/lib64/libbinder.so (_ZN7android14IPCThreadState15waitForResponse)</span><br><span class="line">... ...</span><br><span class="line">  at android.os.BinderProxy.transact(Binder.java:503)</span><br><span class="line">  at android.content.ContentProviderProxy.query(ContentProviderNative.java:419)</span><br><span class="line">... ...</span><br><span class="line">  at com.android.server.telecom.Call$3.run(Call.java:226)</span><br><span class="line">  - locked &lt;0x048a55bc&gt; (a com.android.server.telecom.TelecomSystem$1)</span><br><span class="line">  at android.os.Handler.handleCallback(Handler.java:739)</span><br><span class="line">  at android.os.Handler.dispatchMessage(Handler.java:95)</span><br><span class="line">  at android.os.Looper.loop(Looper.java:148)</span><br></pre></td></tr></table></figure>

<p>并非出现这种情况，就一定阻塞，但如果多次抓取的 trace 文件中，都可以发现主线程在进行同一个特殊的 binder 请求的话，那么基本就可以确定，主线程是卡在了这个请求中了。为什么 binder 请求也会阻塞呢？这个要先从 binder 本身说起；</p>
<p>Binder 是进程间的通信机制，是 C&#x2F;S 结构，客户端向服务端发起请求，服务端完成这个请求，并可将结果返给客户端，客户端与服务端分别属于不同的线程；而 binder 请求又分为<strong>同步与异步</strong>，同步意味着客户端的请求必须等服务端的工作完成并返回结果后才可以结束，异步则意味着客户端发出请求后就可以立即返回，不必等待服务端的完成；看到这儿，大家就会想到，如果是同步调用，而服务端又长时间没有返回的话，那么客户端线程不就是会一直卡在那儿，等待返回吗？而如果客户端恰好是主线程的话，不就是会因此造成ANR吗？因此，如果主线程的栈顶正在进行某个 binder 调用，我们有必要看一下该调用是同步的还是异步的，如果是同步调用，我们就有理由怀疑该请求的服务端是不是长时间没有返回；</p>
<p>那么如何知道服务端在做什么呢？由于服务端是在一个独立的线程中完成请求的，因此，如果此时这个请求还没有完成的话，这个线程的堆栈通常也会在trace 文件中打印出来，有一个简单的办法就是，先找到服务端中完成该请求的函数名及其所在文件名，然后在 trace 文件中搜索该函数名，并结合函数所在的文件名，一般就可以找到这个服务端的线程堆栈了，然后再去分析这个堆栈，看具体是什么原因导致它没有尽快返回的；</p>
<p>如何判断一个 binder 调用是同步还是异步，这个可以从代码来看，如下是一个 binder 请求语句：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">remote()-&gt;transact(NOTIFY, data, &amp;reply, IBinder::FLAG_ONEWAY);</span><br></pre></td></tr></table></figure>

<p>注意看最后一个参数，如果最后一个参数是 FLAG_ONEWAY，就说明它是异步 binder，如果为 0 或者缺省的话，就是同步 binder；</p>
<h2 id="5-如何避免-ANR"><a href="#5-如何避免-ANR" class="headerlink" title="5. 如何避免 ANR"></a>5. 如何避免 ANR</h2><p>主线程尽量只做 UI 相关的操作，避免耗时操作，比如过度复杂的 UI 绘制,网络操作，文件 IO 操作;</p>
<p>避免主线程跟工作线程发生锁的竞争，减少系统耗时 binder 的调用，谨慎使用 sharePreference，注意主线程执行 provider query 操作；</p>
<p>总之就是尽可能减少主线程的负载,让其空闲待命，以期可随时响应用户的操作；</p>
<h2 id="6-监控-ANR"><a href="#6-监控-ANR" class="headerlink" title="6. 监控 ANR"></a>6. 监控 ANR</h2><h3 id="6-1-FileObserver"><a href="#6-1-FileObserver" class="headerlink" title="6.1 FileObserver"></a>6.1 FileObserver</h3><p>FileObserver 可以监控目录或文件的状态，继承 FileObserver，重写 onEvent()，当被监控的文件或者目录发生变更事件时，将回调FileObserver的onEvent()函数来处理文件或目录的变更事件；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.os.FileObserver;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> androidx.annotation.Nullable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ANRFileObserver</span> <span class="keyword">extends</span> <span class="title class_">FileObserver</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ANRFileObserver</span><span class="params">(String path)</span> &#123;<span class="comment">//data/anr/</span></span><br><span class="line">        <span class="built_in">super</span>(path);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ANRFileObserver</span><span class="params">(String path, <span class="type">int</span> mask)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(path, mask);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onEvent</span><span class="params">(<span class="type">int</span> event, <span class="meta">@Nullable</span> String path)</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span> (event)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> FileObserver.ACCESS:<span class="comment">//文件被访问</span></span><br><span class="line">                Log.i(<span class="string">&quot;Test&quot;</span>, <span class="string">&quot;ACCESS: &quot;</span> + path);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> FileObserver.ATTRIB:<span class="comment">//文件属性被修改，如 chmod、chown、touch 等</span></span><br><span class="line">                Log.i(<span class="string">&quot;Test&quot;</span>, <span class="string">&quot;ATTRIB: &quot;</span> + path);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> FileObserver.CLOSE_NOWRITE:<span class="comment">//不可写文件被 close</span></span><br><span class="line">                Log.i(<span class="string">&quot;Test&quot;</span>, <span class="string">&quot;CLOSE_NOWRITE: &quot;</span> + path);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> FileObserver.CLOSE_WRITE:<span class="comment">//可写文件被 close</span></span><br><span class="line">                Log.i(<span class="string">&quot;Test&quot;</span>, <span class="string">&quot;CLOSE_WRITE: &quot;</span> + path);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> FileObserver.CREATE:<span class="comment">//创建新文件</span></span><br><span class="line">                Log.i(<span class="string">&quot;Test&quot;</span>, <span class="string">&quot;CREATE: &quot;</span> + path);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> FileObserver.DELETE:<span class="comment">// 文件被删除，如 rm</span></span><br><span class="line">                Log.i(<span class="string">&quot;Test&quot;</span>, <span class="string">&quot;DELETE: &quot;</span> + path);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> FileObserver.DELETE_SELF:<span class="comment">// 自删除，即一个可执行文件在执行时删除自己</span></span><br><span class="line">                Log.i(<span class="string">&quot;Test&quot;</span>, <span class="string">&quot;DELETE_SELF: &quot;</span> + path);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> FileObserver.MODIFY:<span class="comment">//文件被修改</span></span><br><span class="line">                Log.i(<span class="string">&quot;Test&quot;</span>, <span class="string">&quot;MODIFY: &quot;</span> + path);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> FileObserver.MOVE_SELF:<span class="comment">//自移动，即一个可执行文件在执行时移动自己</span></span><br><span class="line">                Log.i(<span class="string">&quot;Test&quot;</span>, <span class="string">&quot;MOVE_SELF: &quot;</span> + path);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> FileObserver.MOVED_FROM:<span class="comment">//文件被移走，如 mv</span></span><br><span class="line">                Log.i(<span class="string">&quot;Test&quot;</span>, <span class="string">&quot;MOVED_FROM: &quot;</span> + path);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> FileObserver.MOVED_TO:<span class="comment">//文件被移来，如 mv、cp</span></span><br><span class="line">                Log.i(<span class="string">&quot;Test&quot;</span>, <span class="string">&quot;MOVED_TO: &quot;</span> + path);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> FileObserver.OPEN:<span class="comment">//文件被 open</span></span><br><span class="line">                Log.i(<span class="string">&quot;Test&quot;</span>, <span class="string">&quot;OPEN: &quot;</span> + path);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="comment">//CLOSE ： 文件被关闭，等同于(IN_CLOSE_WRITE | IN_CLOSE_NOWRITE)</span></span><br><span class="line">                <span class="comment">//ALL_EVENTS ： 包括上面的所有事件</span></span><br><span class="line">                Log.i(<span class="string">&quot;Test&quot;</span>, <span class="string">&quot;DEFAULT(&quot;</span> + event + <span class="string">&quot;): &quot;</span> + path);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="6-2-WatchDog"><a href="#6-2-WatchDog" class="headerlink" title="6.2 WatchDog"></a>6.2 WatchDog</h3><p>post 一个 anr 检测任务到主线程的消息队列，在 post 之前先记录 mStartTime，mComplete &#x3D; false，Watchdog 线程等待，检测 anr 检测任务的执行情况（mComplete 是否等于 true），当异常发生时（mComplete 为 fasle）记录堆栈信息，上报数据；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.annotation.TargetApi;</span><br><span class="line"><span class="keyword">import</span> android.os.Build;</span><br><span class="line"><span class="keyword">import</span> android.os.Debug;</span><br><span class="line"><span class="keyword">import</span> android.os.Handler;</span><br><span class="line"><span class="keyword">import</span> android.os.Looper;</span><br><span class="line"><span class="keyword">import</span> android.os.Process;</span><br><span class="line"><span class="keyword">import</span> android.os.SystemClock;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ANRWatchDog</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TAG</span> <span class="operator">=</span> <span class="string">&quot;ANR&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">timeout</span> <span class="operator">=</span> <span class="number">5000</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">ignoreDebugger</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">static</span> ANRWatchDog sWatchdog;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Handler</span> <span class="variable">mainHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Handler</span>(Looper.getMainLooper());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">ANRChecker</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="type">boolean</span> mCompleted;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">long</span> mStartTime;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">long</span> <span class="variable">executeTime</span> <span class="operator">=</span> SystemClock.uptimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (ANRWatchDog.<span class="built_in">this</span>) &#123;</span><br><span class="line">                mCompleted = <span class="literal">true</span>;</span><br><span class="line">                executeTime = SystemClock.uptimeMillis();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">schedule</span><span class="params">()</span> &#123;</span><br><span class="line">            mCompleted = <span class="literal">false</span>;</span><br><span class="line">            mStartTime = SystemClock.uptimeMillis();</span><br><span class="line">            mainHandler.postAtFrontOfQueue(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="title function_">isBlocked</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> !mCompleted || executeTime - mStartTime &gt;= <span class="number">5000</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ANRListener</span> &#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">onAnrHappened</span><span class="params">(String stackTraceInfo)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">ANRChecker</span> <span class="variable">anrChecker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ANRChecker</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ANRListener anrListener;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addANRListener</span><span class="params">(ANRListener listener)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.anrListener = listener;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ANRWatchDog <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(sWatchdog == <span class="literal">null</span>)&#123;</span><br><span class="line">            sWatchdog = <span class="keyword">new</span> <span class="title class_">ANRWatchDog</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sWatchdog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">ANRWatchDog</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;ANR-WatchDog-Thread&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TargetApi(Build.VERSION_CODES.JELLY_BEAN)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND); <span class="comment">// 设置为后台线程</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span> (!isInterrupted()) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">                    anrChecker.schedule();</span><br><span class="line">                    <span class="type">long</span> <span class="variable">waitTime</span> <span class="operator">=</span> timeout;</span><br><span class="line">                    <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> SystemClock.uptimeMillis();</span><br><span class="line">                    <span class="keyword">while</span> (waitTime &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            wait(waitTime);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            Log.w(TAG, e.toString());</span><br><span class="line">                        &#125;</span><br><span class="line">                        waitTime = timeout - (SystemClock.uptimeMillis() - start);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (!anrChecker.isBlocked()) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!ignoreDebugger &amp;&amp; Debug.isDebuggerConnected()) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">String</span> <span class="variable">stackTraceInfo</span> <span class="operator">=</span> getStackTraceInfo();</span><br><span class="line">                <span class="keyword">if</span> (anrListener != <span class="literal">null</span>) &#123;</span><br><span class="line">                    anrListener.onAnrHappened(stackTraceInfo);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            anrListener = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getStackTraceInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (StackTraceElement stackTraceElement : Looper.getMainLooper().getThread().getStackTrace()) &#123;</span><br><span class="line">            stringBuilder</span><br><span class="line">                    .append(stackTraceElement.toString())</span><br><span class="line">                    .append(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Handler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">ANRTest</span><span class="params">()</span>&#123;</span><br><span class="line">    handler = <span class="keyword">new</span> <span class="title class_">Handler</span>();</span><br><span class="line">    ANRWatchDog.getInstance().addANRListener(<span class="keyword">new</span> <span class="title class_">ANRWatchDog</span>.ANRListener &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAnrHappened</span><span class="params">(String stackTraceInfo)</span>&#123;</span><br><span class="line">            Log.i(TAG, <span class="string">&quot;anr: &quot;</span> + stackTraceInfo);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    ANRWatchDog.getInstance.start();</span><br><span class="line">    handler.postDelayed(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                Thread.sleep(<span class="number">10</span> * <span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">3000</span>);</span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 找个地方把 ANRTest() 放进去</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(xxx)</span> &#123;</span><br><span class="line">    ANRTest();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>ANR</tag>
      </tags>
  </entry>
  <entry>
    <title>Android8.0-App安装时间优化</title>
    <url>/2018/02/12/Android/Android_8.0_App_install_time_Optimize/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>APP的安装有四种方式</p>
</blockquote>
<span id="more"></span>

<ul>
<li>系统应用安装——开机时完成，没有安装界面；</li>
<li>应用市场安装——通过应用市场完成，有安装界面，有些market开启无障碍开关和root后可静默安装；</li>
<li>adb安装：使用adb install安装，和pm install一样，没有安装界面；</li>
<li>第三方点击安装：点击存储在手机设备或者SD卡中的APK文件安装，通过PackageInstall处理，有安装界面；</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.util.BoostFramework;</span><br><span class="line">... ...</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">BoostFramework</span> <span class="variable">sPerfBoost</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">... ...</span><br><span class="line">            <span class="keyword">if</span> (sPerfBoost == <span class="literal">null</span>) &#123;</span><br><span class="line">                sPerfBoost = <span class="keyword">new</span> <span class="title class_">BoostFramework</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (sPerfBoost != <span class="literal">null</span>) &#123;</span><br><span class="line">                sPerfBoost.perfHint(BoostFramework.VENDOR_HINT_PACKAGE_INSTALL_BOOST, <span class="literal">null</span>, <span class="number">6000</span>, -<span class="number">1</span>);</span><br><span class="line">                Slog.d(TAG, <span class="string">&quot;perflock acquired for PackageInstallService&quot;</span>);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>appInstall</tag>
      </tags>
  </entry>
  <entry>
    <title>Performance_debug</title>
    <url>/2018/02/08/Android/Performance_debug/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>常见性能调试方法；</p>
</blockquote>
<span id="more"></span>

<h3 id="CPU-performance-mode"><a href="#CPU-performance-mode" class="headerlink" title="CPU performance mode"></a>CPU performance mode</h3><p>我们知道引起性能问题的因素很多，通常为了初步确认该问题是否是系统处理能力不足而导致的，我们可以让系统运行在 performance mode 下测试该问题是否可以重现，从而进行初步的诊断；</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4 CPUs</span></span><br><span class="line">adb shell root</span><br><span class="line">adb shell setenforce 0</span><br><span class="line">adb shell stop thermal-engine</span><br><span class="line">adb shell rmmod core_ctl</span><br><span class="line">adb shell &quot;echo 1 &gt; /sys/devices/system/cpu/cpu1/online&quot;</span><br><span class="line">adb shell &quot;echo 1 &gt; /sys/devices/system/cpu/cpu2/online&quot;</span><br><span class="line">adb shell &quot;echo 1 &gt; /sys/devices/system/cpu/cpu3/online&quot;</span><br><span class="line">adb shell &quot;echo performance &gt; /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor&quot;</span><br><span class="line">adb shell &quot;echo performance &gt; /sys/devices/system/cpu/cpu1/cpufreq/scaling_governor&quot;</span><br><span class="line">adb shell &quot;echo performance &gt; /sys/devices/system/cpu/cpu2/cpufreq/scaling_governor&quot;</span><br><span class="line">adb shell &quot;echo performance &gt; /sys/devices/system/cpu/cpu3/cpufreq/scaling_governor&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">8 CPUs</span></span><br><span class="line">adb shell root</span><br><span class="line">adb shell setenforce 0</span><br><span class="line">adb shell stop thermal-engine</span><br><span class="line">adb shell rmmod core_ctl</span><br><span class="line">adb shell &quot;echo 1 &gt; /sys/devices/system/cpu/cpu1/online&quot;</span><br><span class="line">adb shell &quot;echo 1 &gt; /sys/devices/system/cpu/cpu2/online&quot;</span><br><span class="line">adb shell &quot;echo 1 &gt; /sys/devices/system/cpu/cpu3/online&quot;</span><br><span class="line">adb shell &quot;echo 1 &gt; /sys/devices/system/cpu/cpu4/online&quot;</span><br><span class="line">adb shell &quot;echo 1 &gt; /sys/devices/system/cpu/cpu5/online&quot;</span><br><span class="line">adb shell &quot;echo 1 &gt; /sys/devices/system/cpu/cpu6/online&quot;</span><br><span class="line">adb shell &quot;echo 1 &gt; /sys/devices/system/cpu/cpu7/online&quot;</span><br><span class="line">adb shell &quot;echo performance &gt; /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor&quot;</span><br><span class="line">adb shell &quot;echo performance &gt; /sys/devices/system/cpu/cpu1/cpufreq/scaling_governor&quot;</span><br><span class="line">adb shell &quot;echo performance &gt; /sys/devices/system/cpu/cpu2/cpufreq/scaling_governor&quot;</span><br><span class="line">adb shell &quot;echo performance &gt; /sys/devices/system/cpu/cpu3/cpufreq/scaling_governor&quot;</span><br><span class="line">adb shell &quot;echo performance &gt; /sys/devices/system/cpu/cpu4/cpufreq/scaling_governor&quot;</span><br><span class="line">adb shell &quot;echo performance &gt; /sys/devices/system/cpu/cpu5/cpufreq/scaling_governor&quot;</span><br><span class="line">adb shell &quot;echo performance &gt; /sys/devices/system/cpu/cpu6/cpufreq/scaling_governor&quot;</span><br><span class="line">adb shell &quot;echo performance &gt; /sys/devices/system/cpu/cpu7/cpufreq/scaling_governor&quot;</span><br></pre></td></tr></table></figure>

<h3 id="GPU-performance-mode"><a href="#GPU-performance-mode" class="headerlink" title="GPU performance mode"></a>GPU performance mode</h3><p>如果我们发现 GPU draw 得太慢并且 GPU 的 clock 不是运行在比较高的频率的情况下，我们可以让 GPU 运行在 performance mode 下，测试该问题是否可以重现；</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell root</span><br><span class="line">adb shell setenforce 0</span><br><span class="line">adb shell stop thermal-engine</span><br><span class="line">adb shell echo 0 &gt; /sys/class/kgsl/kgsl-3d0/bus_split</span><br><span class="line">adb shell echo performance &gt; /sys/class/kgsl/kgsl-3d0/devfreq/governor</span><br><span class="line">adb shell echo 1 &gt; /sys/class/kgsl/kgsl-3d0/force_bus_on</span><br><span class="line">adb shell echo 1 &gt; /sys/class/kgsl/kgsl-3d0/force_rail_on</span><br><span class="line">adb shell echo 1 &gt; /sys/class/kgsl/kgsl-3d0/force_clk_on</span><br><span class="line">adb shell echo 1000000 &gt; /sys/class/kgsl/kgsl-3d0/idle_timer</span><br></pre></td></tr></table></figure>

<h3 id="DDR-at-max"><a href="#DDR-at-max" class="headerlink" title="DDR at max"></a>DDR at max</h3><p>有时 DDR 频率过低也会引起性能问题，所以我们可以让 DDR 工作在比较高的频率下测试是否还可以重现该问题；</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell &quot;echo 1 &gt; /sys/kernel/debug/msm-bus-dbg/shell-client/mas&quot;</span><br><span class="line">adb shell &quot;echo 512 &gt; /sys/kernel/debug/msm-bus-dbg/shell-client/slv&quot;</span><br><span class="line">adb shell &quot;echo 0 &gt; /sys/kernel/debug/msm-bus-dbg/shell-client/ab&quot;</span><br><span class="line">adb shell &quot;echo 16 * DDR max frequency &gt; /sys/kernel/debug/msm-bus-dbg/shell-client/ib&quot;</span><br><span class="line">adb shell &quot;echo 1 &gt; /sys/kernel/debug/msm-bus-dbg/shell-client/update_request&quot;</span><br></pre></td></tr></table></figure>

<h3 id="获取-thermal-engine-debug-log"><a href="#获取-thermal-engine-debug-log" class="headerlink" title="获取 thermal-engine debug log"></a>获取 thermal-engine debug log</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell stop thermal-engine</span><br><span class="line">adb shell thermal-engine --debug &amp;</span><br><span class="line">adb shell logcat -v time -s ThermalEngine &gt;your path</span><br></pre></td></tr></table></figure>

<h3 id="打开-perfd-debug-log"><a href="#打开-perfd-debug-log" class="headerlink" title="打开 perfd debug log"></a>打开 perfd debug log</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">adb root</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">adb disable-verity</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">adb reboot</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">adb root</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">adb remount</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">adb pull /system/build.prop</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在build.prop 中增加debug.trace.perf=1</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">adb shell <span class="string">&quot;echo ‘debug.trace.perf=1’ &gt;&gt; /system/build.prop&quot;</span></span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">adb push build.prop /system/</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">adb shell <span class="built_in">chmod</span> 0644 /system/build.prop</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">adb shell <span class="built_in">sync</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">adb shell reboot</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">adb shell root</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">adb shell setenforce 0</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">adb shell setprop debug.trace.perf 1</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">adb shell stop perfd</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">adb shell start perfd</span></span><br></pre></td></tr></table></figure>

<p>perfd 的 log 就会显示在 logcat 和 systrace 中；</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">adb logcat | grep PERF</span> </span><br><span class="line">02-07 20:15:46.055 726 726 E ANDR-PERF-MPCTL: perf_lock_acq: client_pid=1747, client_tid=1790, inupt handle=0, duration=2000 ms, num_args=10, list=0x40C00000 0x1 0x40804000 0xFFF 0x40804100 0xFFF 0x40800000 0xFFF 0x40800100 0xFFF </span><br><span class="line">02-07 20:15:46.056 726 756 E ANDR-PERF-MPCTL: Invalid profile no. 0, total profiles 0 only </span><br><span class="line">02-07 20:15:47.500 726 726 E ANDR-PERF-MPCTL: perf_lock_acq: client_pid=1747, client_tid=3031, inupt handle=0, duration=2147483647 ms, num_args=10, list=0x40C00000 0x1 0x40804000 0xFFF 0x40804100 0xFFF 0x40800000 0xFFF 0x40800100 0xFFF </span><br><span class="line">02-07 20:15:47.501 726 756 E ANDR-PERF-MPCTL: Invalid profile no. 0, total profiles 0 only </span><br><span class="line">02-07 20:15:47.977 726 726 E ANDR-PERF-MPCTL: perf_lock_acq: client_pid=1747, client_tid=2093, inupt handle=0, duration=2147483647 ms, num_args=10, list=0x40C00000 0x1 0x40804000 0xFFF 0x40804100 0xFFF 0x40800000 0xFFF 0x40800100 0xFFF </span><br><span class="line">02-07 20:15:47.977 726 756 E ANDR-PERF-MPCTL: Invalid profile no. 0, total profiles 0 only </span><br><span class="line">02-07 20:15:58.839 726 726 E ANDR-PERF-MPCTL: perf_lock_acq: client_pid=701, client_tid=2694, inupt handle=0, duration=0 ms, num_args=2, list=0x101 0x20E </span><br><span class="line">02-07 20:15:58.840 726 756 E ANDR-PERF-MPCTL: Invalid profile no. 0, total profiles 0 only </span><br></pre></td></tr></table></figure>



<h3 id="查看可用频率"><a href="#查看可用频率" class="headerlink" title="查看可用频率"></a>查看可用频率</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell cat sys/devices/system/cpu/cpufreq/policy0/scaling_available_frequencies</span><br><span class="line">633600 902400 1113600 1401600 1536000 1747200 1843200</span><br><span class="line">adb shell cat sys/devices/system/cpu/cpufreq/policy4/scaling_available_frequencies</span><br><span class="line">1113600 1401600 1747200 1958400 2150400 2208000</span><br></pre></td></tr></table></figure>

<h3 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a>开机启动</h3><h4 id="获得正确-log"><a href="#获得正确-log" class="headerlink" title="获得正确 log"></a>获得正确 log</h4><p>对于开机启动慢的问题的 debug，我们需要 kernel log，event log，logcat log，请用如下命令获取 log：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">adb wait-for-device root</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">adb wait-for-device</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">adb shell dmesg &gt; dmesg.txt</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">adb logcat -b events -d &gt; logcat_events.txt</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">adb logcat -v thread time -d *:V &gt; logcat.txt</span></span><br></pre></td></tr></table></figure>

<h4 id="log-分析"><a href="#log-分析" class="headerlink" title="log 分析"></a>log 分析</h4><ul>
<li><p>kernel log</p>
<p>我们知道 kernel 可以分为两部分，一是 boot loader 部分，一是加载 driver 部分；</p>
<ul>
<li><p>Boot loader 部分</p>
<p>我们可以用 Bootloader 的 KPI 来计算 bootloader 的所用的时间，Bootloader KPI 的时间会输出到 demsg 如:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[ 0.524325] KPI: Bootloader start count = 20820 //A 为LK 开始时</span><br><span class="line">[ 0.524334] KPI: Bootloader end count = 231148//B 为LK 结束时间</span><br><span class="line">[ 0.524341] KPI: Bootloader display count = 36470</span><br><span class="line">[ 0.524348] KPI: Bootloader load kernel count = 2232</span><br><span class="line">[ 0.524356] KPI: Kernel MPM timestamp = 254555 // C bootloader 完成时间</span><br><span class="line">[ 0.524363] KPI: Kernel MPM Clock frequency = 32768 //D clock.</span><br><span class="line">NHLOS 时间: A/D=20820/32768=0.63</span><br><span class="line">LK 时间: (B-A)/D=( 231148-20820)=6.41s</span><br><span class="line">Bootloader 时间:C/D-kmsg(C)=254555/32768-0.52=7.24s</span><br></pre></td></tr></table></figure>

<p>如果 boot loader 的时间太长,我们需要检查其是否正常；</p>
</li>
<li><p>Kernel driver 部分</p>
<p>如果从 kernel 初始化到 Zygote 启动时间太长，我们可以打开每个 module 的加载时间，然后找到其耗时比较多的module并优化，下面这个patch 可以打开module ini的时间：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">diff --git a/init/main.c b/init/main.c</span><br><span class="line">index <span class="number">7</span>af2174.<span class="number">.2</span>d11927 <span class="number">100644</span></span><br><span class="line">--- a/init/main.c</span><br><span class="line">+++ b/init/main.c</span><br><span class="line">@@ <span class="number">-785</span>,<span class="number">7</span> +<span class="number">785</span>,<span class="number">7</span> @@ <span class="function"><span class="type">int</span> __init_or_module <span class="title">do_one_initcall</span><span class="params">(<span class="type">initcall_t</span> fn)</span></span></span><br><span class="line"><span class="function"><span class="title">if</span> <span class="params">(initcall_blacklisted(fn))</span></span></span><br><span class="line"><span class="function"><span class="keyword">return</span> -EPERM</span>;</span><br><span class="line">- <span class="keyword">if</span> (initcall_debug)+ <span class="keyword">if</span> (<span class="number">1</span>)</span><br><span class="line">ret = <span class="built_in">do_one_initcall_debug</span>(fn);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">ret = <span class="built_in">fn</span>();</span><br><span class="line"><span class="comment">// 输出log 如:</span></span><br><span class="line">initcall msm_serial_hsl_init+<span class="number">0x0</span>/<span class="number">0xac</span> returned <span class="number">0</span> after <span class="number">262555</span> usecs</span><br><span class="line">initcall fts_driver_init+<span class="number">0x0</span>/<span class="number">0x20</span> returned <span class="number">0</span> after <span class="number">171317</span> usecs</span><br><span class="line">initcall ufs_qcom_phy_qmp_20nm_driver_init+<span class="number">0x0</span>/<span class="number">0x20</span> returned <span class="number">0</span> after <span class="number">2572</span> usecs</span><br><span class="line">initcall ufs_qcom_phy_qmp_14nm_driver_init+<span class="number">0x0</span>/<span class="number">0x24</span> returned <span class="number">0</span> after <span class="number">1727</span> usecs</span><br><span class="line">initcall ufs_qcom_phy_qmp_v3_driver_init+<span class="number">0x0</span>/<span class="number">0x24</span> returned <span class="number">0</span> after <span class="number">1010</span> usecs</span><br><span class="line">initcall ufs_qcom_phy_qrbtc_v2_driver_init+<span class="number">0x0</span>/<span class="number">0x24</span> returned <span class="number">0</span> after <span class="number">838</span> usecs</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>User space log</p>
<p>系统启动过程中，我们可以获取 event log 得到 boot event，其含义如下: </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">boot_progress_start // user space 开始时间</span><br><span class="line">boot_progress_preload_start // Zygote 进程 preload 开始时间</span><br><span class="line">boot_progress_preload_end // Zygote 进程 preload 结束时间</span><br><span class="line">boot_progress_system_run // System server 开始运行时间</span><br><span class="line">boot_progress_pms_start // Package Scan 开始</span><br><span class="line">boot_progress_pms_system_scan_start // System 目录开始 scan</span><br><span class="line">boot_progress_pms_data_scan_start //data 目录开始scan</span><br><span class="line">boot_progress_pms_scan_end // package scan 结束时</span><br><span class="line">boot_progress_pms_ready // package manager ready</span><br><span class="line">boot_progress_ams_ready // Activity manager ready,这个事件之后便会启动home Activity。</span><br><span class="line">boot_progress_enable_screen // HomeActivity 启动完毕</span><br></pre></td></tr></table></figure>

<p>当 HomeActivity 启动完毕后，系统将检查当前所有可见的 window 是否画完，如果所有的 window(包括wallpaper, Keyguard 等) 都已经画好，系统会设置属性 service.bootanim.exit 值为1，而 bootanimation 在检查到 service.bootanim.exit 属性值为 1 时，便会结束 bootanimation，从而显示 home 界面。所以我们需要辅助 logcat log 来检查 bootaimation 束是否正常,如下面的 log：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">07-21 14:21:36.716 1455 1607 I boot_progress_enable_screen: 21242</span><br><span class="line">07-21 14:21:43.230 1014 1772 D BootAnimation: media player is completed.</span><br></pre></td></tr></table></figure>

<p>这里从 Homeactivity 启动完毕到 bootanimation 退出用了大约 6.5s 的时间，我们需要检查这个时间是否正常是否还有优化的空间；</p>
</li>
</ul>
<h3 id="APP-冷启动"><a href="#APP-冷启动" class="headerlink" title="APP 冷启动"></a>APP 冷启动</h3><p>对于启动慢的问题，我们需要 logcat，kernel 和 systrace log，在获取 systrace 之前，需要打开 perfd log（Enable perfd log）；</p>
<p>对于冷启动，主要分析点如下:</p>
<ul>
<li><p>检查是否正确 enable 了 launch boost 功能</p>
<p>在 QCOM 所有平台中，对于冷启动都默认 enable 了 launch boost 功能。即在冷启动时，CPU 将运行在最大频率上，并且保持 2s；</p>
</li>
<li><p>启动时间分解</p>
<p>我们知道，APP 在冷启动时，一般的操作是：点击 launcher 上 APP 的图标 -〉APP 启动，这一过程在 systrace 中可以分解为：</p>
<p>Launcher 收到 touch event -&gt; Launcher pause -&gt; new process(APP 进程) -&gt; bindApplication -&gt; activityStart-&gt; Choreographer#doFrame()，在 systrace 中可以看到这些操作，我们可以看看每部分的时间是否合理，如果不合理则检查相关部分的代码，看看是否有可以优化的空间；</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>performance</tag>
      </tags>
  </entry>
  <entry>
    <title>selinux介绍</title>
    <url>/2018/01/20/Android/Selinux_introduction/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>通过本文介绍，希望能够了解selinux的概念，如何查看selinux相关权限，如何配置selinux，如何临时打开关闭selinux。</p>
</blockquote>
<span id="more"></span>

<h3 id="1-进程的概念"><a href="#1-进程的概念" class="headerlink" title="1. 进程的概念"></a>1. 进程的概念</h3><p>selinux是针对进程设置相应的权限，我们这里所要讲的进程通俗来讲就是一个在用户空间运行的一个程序。比如在windows中，一个记事本是一个进程，一个计算器也是一个进程。而在android中，每个app是一个进程，每个native app，如ping、top等都是进程。需要说明的是进程是一个动的概念，一个可执行行程序，没有运行，是静止存放在文件系统上的一个文件，并不能称之为进程。当运行起来后，系统分配进程号，才能称为进程，查看系统运行的进程可以通过ps（8.0之后版本需要ps -A）命令。</p>
<h3 id="2-什么是SELinux"><a href="#2-什么是SELinux" class="headerlink" title="2. 什么是SELinux"></a>2. 什么是SELinux</h3><p>SELinux 全称 Security Enhanced Linux (安全强化 Linux),是美国国家安全局2000年以 GNU GPL 发布，是 MAC (Mandatory Access Control，强制访问控制系统)的一个实现，目的在于明确的指明某个进程可以访问哪些资源(文件、网络端口等)。强制访问控制系统 的用途在于增强系统抵御 0-Day 攻击(利用尚未公开的漏洞实现的攻击行为)的能力。所以它不是网络防火墙或 ACL 的替代品，在用途上也 不重复。在目前的大多数发行版中，已经默认在内核集成了SELinux。相比其他强制性访问控制系统，SELinux 有如下优势：</p>
<ul>
<li>控制策略是可查询而非程序不可见的</li>
<li>可以热更改策略而无需重启或者停止服务</li>
<li>可以从进程初始化、继承和程序执行三个方面通过策略进行控制</li>
<li>控制范围覆盖文件系统、目录、文件、文件启动描述符、端口、消息接口和网络接口</li>
</ul>
<p>需要指出的是linux权限管理的两套机制。自主访问控制（DAC）和强制访问控制（MAC). DAC可以简单理解为我是root用户，有就有权限访问任何资源，打开任何文件。而user用户访问某些文件就会限制。这种控制方式有个很大的弊端就是一旦获得root权限，就可以为所欲为。MAC就是selinux搞的这一套，当你具有某些身份的时候，才能访问对应的资源。我们目前系统两套机制都起作用。相当于对资源管理有两道门，只有通过两道门才能访问到资源。</p>
<h3 id="3-查看SELinux权限"><a href="#3-查看SELinux权限" class="headerlink" title="3. 查看SELinux权限"></a>3. 查看SELinux权限</h3><h5 id="3-1-查看文件所具有的selinux相关标识：ls-lZ"><a href="#3-1-查看文件所具有的selinux相关标识：ls-lZ" class="headerlink" title="3.1 查看文件所具有的selinux相关标识：ls -lZ"></a>3.1 查看文件所具有的selinux相关标识：ls -lZ</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">adb shell <span class="built_in">ls</span> -lZ</span></span><br><span class="line">total 1720</span><br><span class="line">dr-xr-xr-x   3 root      root   u:object_r:cgroup:s0                 0 1970-06-12 16:06 acct</span><br><span class="line">drwxrwx---   6 system    cache  u:object_r:cache_file:s0          4096 1970-06-12 15:38 cache</span><br><span class="line">drwxr-xr-x   4 root      root   u:object_r:configfs:s0               0 1970-01-01 01:00 config</span><br><span class="line">drwxr-xr-x   6 root      root   u:object_r:system_file:s0         4096 1970-01-01 01:00 cust</span><br><span class="line">drwxrwx--x  50 system    system u:object_r:system_data_file:s0    4096 1970-06-12 15:38 data</span><br><span class="line">lrwxrwxrwx   1 root      root   u:object_r:rootfs:s0                23 1970-01-01 01:00 default.prop -&gt; system/etc/prop.default</span><br><span class="line">drwxr-xr-x  15 root      root   u:object_r:device:s0              3640 1970-06-12 16:06 dev</span><br><span class="line">drwxr-xr-x   4 root      root   u:object_r:adsprpcd_file:s0       4096 1970-01-01 08:00 dsp</span><br><span class="line">... ...</span><br><span class="line">drwxr-xr-x   4 root      root   u:object_r:storage_file:s0          80 1970-06-12 16:06 storage</span><br><span class="line">dr-xr-xr-x  19 root      root   u:object_r:sysfs:s0                  0 1970-06-12 16:06 sys</span><br><span class="line">drwxr-xr-x  18 root      root   u:object_r:system_file:s0         4096 1970-01-01 01:00 system</span><br><span class="line">-rw-r--r--   1 root      root   u:object_r:rootfs:s0              5222 1970-01-01 01:00 ueventd.rc</span><br><span class="line">drwxr-xr-x  16 root      root   u:object_r:vendor_file:s0         4096 1970-01-01 01:00 vendor</span><br><span class="line">-rw-r--r--   1 root      root   u:object_r:rootfs:s0               524 1970-01-01 01:00 verity_key</span><br></pre></td></tr></table></figure>

<p>以storage文件夹为例，各个部分的含义解析如下：</p>
<p>drwxr-xr-x   4 root      root   u:object_r:adsprpcd_file:s0       4096 1970-01-01 08:00 dsp</p>
<p><img src="http://otqux1hnn.bkt.clouddn.com/rangerzhou/180420/selinux_dsp.png" alt="selinux_dsp"></p>
<p>前面几个都是属于DAC的范畴，最后一个”Selinux label”是和selinux相关的;</p>
<p>d表明 dsp是一个文件夹(directory);</p>
<p>后面三个一组分别定义了当前用户权限，组用户权限和其他用户权限;</p>
<p>r-读 w-写 x-执行;</p>
<p>而dsp文件夹所属于的用户是root，组也是root;</p>
<p>linux label是 u:object_r:adsprpcd_file:s0 表明我是一个具有adsprpcd_file属性的文件夹。</p>
<h5 id="3-2-查看进程的相关标识ps-Z"><a href="#3-2-查看进程的相关标识ps-Z" class="headerlink" title="3.2 查看进程的相关标识ps -Z"></a>3.2 查看进程的相关标识ps -Z</h5><p>下面是ps -Z的一个例子：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">whyred:/ # ps -Z</span><br><span class="line">LABEL                     USER           PID  PPID     VSZ    RSS WCHAN            ADDR S NAME</span><br><span class="line">u:r:su:s0                 root          4962  5421    9204   1928 sigsuspend 763b9fe628 S sh</span><br><span class="line">u:r:su:s0                 root          4965  4962   10776   2020 0          7adcb4dfd0 R ps</span><br></pre></td></tr></table></figure>

<p>第一列即为进程对应的selinux的安全上下文。</p>
<h3 id="4-调试中打开和关闭selinux"><a href="#4-调试中打开和关闭selinux" class="headerlink" title="4. 调试中打开和关闭selinux"></a>4. 调试中打开和关闭selinux</h3><h5 id="4-1-获取当前SELinux运行状态"><a href="#4-1-获取当前SELinux运行状态" class="headerlink" title="4.1 获取当前SELinux运行状态"></a>4.1 获取当前SELinux运行状态</h5><p>adb root权限下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">getenforce</span><br></pre></td></tr></table></figure>

<p>可能返回结果有三种：Enforcing、Permissive 和 Disabled。Disabled 代表 SELinux 被禁用，Permissive 代表仅记录安全警告但不阻止 可疑行为，Enforcing 代表记录警告且阻止可疑行为。</p>
<h5 id="4-2-改变SELinux运行状态"><a href="#4-2-改变SELinux运行状态" class="headerlink" title="4.2 改变SELinux运行状态"></a>4.2 改变SELinux运行状态</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">setenforce [ Enforcing | Permissive | 1 | 0 ]</span><br></pre></td></tr></table></figure>

<p>关闭： setenforce [Permissive | 0]</p>
<p>打开： setenforce [Enforcing | 1]</p>
<p>该命令可以立刻改变 SELinux 运行状态，在 Enforcing 和 Permissive 之间切换，结果保持至关机。一个典型的用途是看看到底是不是 SELinux 导致某个服务或者程序无法运行。若是在 setenforce 0 之后服务或者程序依然无法运行，那么就可以肯定不是 SELinux 导致的。</p>
<h3 id="5-配置selinux"><a href="#5-配置selinux" class="headerlink" title="5. 配置selinux"></a>5. 配置selinux</h3><h5 id="5-1-selinux权限存放位置"><a href="#5-1-selinux权限存放位置" class="headerlink" title="5.1 selinux权限存放位置"></a>5.1 selinux权限存放位置</h5><p>高通加的selinux相关内容位置（通常我们在这里修改）：device&#x2F;qcom&#x2F;sepolicy&#x2F;common</p>
<p>linux selinux默认的位置：system&#x2F;sepolicy</p>
<p>selinux 生成的中间文件的位置：out&#x2F;target&#x2F;….&#x2F;obj&#x2F;ETC&#x2F;sepolicy_intermediate&#x2F;policy.conf</p>
<p>该文件是所有的.te文件最后综合到这个文件里面来的一个结果，如果有些规则不会写，可以到这里面来找例子。</p>
<h5 id="5-2-selinux权限配置方法"><a href="#5-2-selinux权限配置方法" class="headerlink" title="5.2 selinux权限配置方法"></a>5.2 selinux权限配置方法</h5><p><strong>a. 添加进程访问权限规则方法：</strong></p>
<ul>
<li><strong>step 1：查看kernel dmesg log，搜索avc: denied字样，如</strong></li>
</ul>
<p>[   19.972419] type&#x3D;1400 audit(9238.719:7): avc: denied { getattr } for pid&#x3D;1864 comm&#x3D;”chown” path&#x3D;”&#x2F;data&#x2F;usf&#x2F;proximity&#x2F;cmd” dev&#x3D;”dm-0” ino&#x3D;802883 <strong>scontext</strong>&#x3D;u:r:qti_init_shell:s0 <strong>tcontext</strong>&#x3D;u:object_r:usf_data_file:s0 <strong>tclass</strong>&#x3D;fifo_file permissive&#x3D;0</p>
<ul>
<li><strong>step 2：确认log是不是和本模块相关的</strong></li>
</ul>
<p>比如查看 comm，path，scontext等信息，确认是不是我们要用的进程被拒绝所打出的log</p>
<ul>
<li><strong>step 3：到文件夹下device&#x2F;qcom&#x2F;sepolicy&#x2F;common下查找scontext 对应的文件</strong></li>
</ul>
<p>比如step 1中的例子，则要找qti_init_shell.te 文件，打开该文件，根据log添加allow语句：</p>
<p>allow qti_init_shell usf_data_file**:**fifo_file {getattr } ;</p>
<p>qti_init_shell来自<strong>scontext</strong>；</p>
<p>usf_data_file来自<strong>tcontext</strong>，如果tcontex和scontext相同，则这部分写self 格式 allow xxx <strong>self</strong>:yyyyy {zzzzz};</p>
<p>fifo_file来自<strong>tclass</strong>；</p>
<p>{getattr }照抄log里面的，如果有多个可以在{}里面加空格，比如{getattr open write }；</p>
<p>语句结尾有“分号”。</p>
<p><strong>添加完allow语句后，需要重新编译烧录boot.img</strong>。</p>
<p><strong>b. 添加静态文件selinux权限方法</strong></p>
<p>文件的相关权限添加在和.te同文件夹下的file_contexts文件里，里面有设备文件，bin文件的各种配置，找一个类似的做修改即可。</p>
<p><strong>修改file_contexts后，需要重新编译烧录boot.img和system.img</strong></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Selinux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux “2 &gt; &amp;1”理解</title>
    <url>/2018/01/17/Technical/Linux2_and1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>Linux中会经常遇到<code>command&gt;/dev/null 2&gt;&amp;1 &amp;</code> 这样形式的命令，到底是什么意思呢？<code>command</code>就是要执行的命令，<code>command&gt;/dev/null</code>也比较好理解，<code>/dev/null</code>表示一个空设备，意思是把<code>command</code>的执行结果重定向到空设备中，也就是不显示任何信息。<code>2&gt;&amp;1</code>是什么意思呢？</p>
</blockquote>
<span id="more"></span>

<p>首先了解基本符号及其含义：</p>
<ul>
<li>&#x2F;dev&#x2F;null 表示空设备文件</li>
<li>0 表示stdin标准输入</li>
<li>1 表示stdout标准输出</li>
<li>2 表示stderr标准错误</li>
</ul>
<h3 id="command-gt-x2F-dev-x2F-null"><a href="#command-gt-x2F-dev-x2F-null" class="headerlink" title="command&gt;&#x2F;dev&#x2F;null"></a>command&gt;&#x2F;dev&#x2F;null</h3><p>其实<code>command&gt;/dev/null</code>命令是一个缩写版，对于一个重定向命令，肯定是<code>a &gt; b</code>这种形式，那么<code>command &gt; /dev/null</code>难道是command充当a的角色，&#x2F;dev&#x2F;null充当b的角色。这样看起来比较合理，其实一条命令肯定是充当不了a，肯定是command执行<strong>产生的输出</strong>来充当a，其实就是标准输出stdout。所以<code>command &gt; /dev/null</code>相当于执行了<code>command 1 &gt; /dev/null</code>。执行command产生了标准输出stdout(用1表示)，重定向到&#x2F;dev&#x2F;null的设备文件中。</p>
<h3 id="2-gt-amp-1"><a href="#2-gt-amp-1" class="headerlink" title="2&gt;&amp;1"></a>2&gt;&amp;1</h3><p>通过上面<code>command &gt; /dev/null</code>等价于<code>command 1 &gt; /dev/null</code>,那么对于<code>2&gt;&amp;1</code>也就好理解了，2就是标准错误，1是标准输出，那么这条命令不就是相当于把标准错误重定向到标准输出么。等等是&amp;1而不是1，这里&amp;是什么？这里<code>&amp;</code>相当于<strong>等效于标准输出</strong>。这里有点不好理解，先看下面。</p>
<h3 id="command-gt-a-2-gt-a-与-command-gt-a-2-gt-amp-1的区别"><a href="#command-gt-a-2-gt-a-与-command-gt-a-2-gt-amp-1的区别" class="headerlink" title="command&gt;a 2&gt;a 与 command&gt;a 2&gt;&amp;1的区别"></a>command&gt;a 2&gt;a 与 command&gt;a 2&gt;&amp;1的区别</h3><p>通过上面的分析，对于<code>command&gt;a 2&gt;&amp;1</code>这条命令，等价于<code>command 1&gt;a 2&gt;&amp;1</code>可以理解为执行command产生的标准输入重定向到文件a中，标准错误也重定向到文件a中。那么是否就说<code>command 1&gt;a 2&gt;&amp;1</code>等价于<code>command 1&gt;a 2&gt;a</code>呢。其实不是，<code>command 1&gt;a 2&gt;&amp;1</code>与<code>command 1&gt;a 2&gt;a</code>还是有区别的，<strong>区别就在于前者只打开一次文件a，后者会打开文件两次，并导致stdout被stderr覆盖</strong>。<code>&amp;1</code>的含义就可以理解为用标准输出的引用，引用的就是重定向标准输出产生打开的a。从IO效率上来讲，<code>command 1&gt;a 2&gt;&amp;1</code>比<code>command 1&gt;a 2&gt;a</code>的效率更高。</p>
]]></content>
      <categories>
        <category>Technical</category>
      </categories>
  </entry>
  <entry>
    <title>Watchdog机制及实例分析</title>
    <url>/2017/10/12/Android/Watchdog_Mechanism/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h3><blockquote>
<p>xxxxxx</p>
</blockquote>
<span id="more"></span>

<h3 id="2-Watchdog机制解析"><a href="#2-Watchdog机制解析" class="headerlink" title="2. Watchdog机制解析"></a>2. Watchdog机制解析</h3><h4 id="2-1-Watchdog的初始化"><a href="#2-1-Watchdog的初始化" class="headerlink" title="2.1 Watchdog的初始化"></a>2.1 Watchdog的初始化</h4><p>Watchdog是在System Server中初始化的：</p>
<p>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/">frameworks</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/">base</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/">services</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/java/">java</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/java/com/">com</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/java/com/android/">android</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/java/com/android/server/">server</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/java/com/android/server/SystemServer.java">SystemServer.java</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">SystemServer</span> &#123;</span><br><span class="line">  ... ...</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Starts a miscellaneous grab bag of stuff that has yet to be refactored</span></span><br><span class="line"><span class="comment">     * and organized.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">startOtherServices</span><span class="params">()</span> &#123;</span><br><span class="line">    ... ...</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          ... ...</span><br><span class="line">            traceBeginAndSlog(<span class="string">&quot;InitWatchdog&quot;</span>);</span><br><span class="line">            <span class="keyword">final</span> <span class="type">Watchdog</span> <span class="variable">watchdog</span> <span class="operator">=</span> Watchdog.getInstance(); <span class="comment">// 获取Watchdog对象初始化</span></span><br><span class="line">            watchdog.init(context, mActivityManagerService); <span class="comment">// 注册receiver以接收系统重启广播</span></span><br><span class="line">            Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);</span><br><span class="line">          ... ...</span><br><span class="line">        &#125;</span><br><span class="line">    ... ...</span><br><span class="line">        mActivityManagerService.systemReady(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">              ... ...</span><br><span class="line">                Watchdog.getInstance().start();</span><br><span class="line">              ... ...</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>Watchdog在初始化时构造了很多HandlerChecker，大致可以分为两类：</p>
<ul>
<li>Monitor Checker：用于检查是Monitor对象可能发生的死锁, AMS, PKMS, WMS等核心的系统服务都是Monitor对象。在log中会有<code>watchdog: Blocked in monitor xxx foreground thread(android.fg)</code>，所以其实就是android.fg线程。</li>
<li>Looper Checker：用于检查线程的消息队列是否长时间处于工作状态。Watchdog自身的消息队列，UI, IO, Display这些全局的消息队列都是被检查的对象。此外，一些重要的线程的消息队列，也会加入到<strong>Looper Checker</strong>中，譬如AMS, PKMS，这些是在对应的对象初始化时加入的。</li>
</ul>
<p>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/">frameworks</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/">base</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/">services</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/">core</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/">java</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/com/">com</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/com/android/">android</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/com/android/server/">server</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/com/android/server/Watchdog.java">Watchdog.java</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** This class calls its monitor every minute. Killing this process if they don&#x27;t return **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Watchdog</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">  ... ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* This handler will be used to post message back onto the main thread */</span></span><br><span class="line">    <span class="keyword">final</span> ArrayList&lt;HandlerChecker&gt; mHandlerCheckers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">final</span> HandlerChecker mMonitorChecker;</span><br><span class="line">  ... ...      </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Watchdog <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (sWatchdog == <span class="literal">null</span>) &#123;</span><br><span class="line">            sWatchdog = <span class="keyword">new</span> <span class="title class_">Watchdog</span>(); <span class="comment">// new一个Watchdog对象</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sWatchdog;</span><br><span class="line">    &#125;</span><br><span class="line">... ...</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Watchdog</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;watchdog&quot;</span>);</span><br><span class="line">        <span class="comment">// Initialize handler checkers for each common thread we want to check.  Note</span></span><br><span class="line">        <span class="comment">// that we are not currently checking the background thread, since it can</span></span><br><span class="line">        <span class="comment">// potentially hold longer running operations with no guarantees about the timeliness</span></span><br><span class="line">        <span class="comment">// of operations there.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// The shared foreground thread is the main checker.  It is where we</span></span><br><span class="line">        <span class="comment">// will also dispatch monitor checks and do other work.</span></span><br><span class="line">  		<span class="comment">// 可以看一下FgThread的构造函数，super(&quot;android.fg&quot;, xxx, true)，所以其实就是android.fg线程</span></span><br><span class="line">        mMonitorChecker = <span class="keyword">new</span> <span class="title class_">HandlerChecker</span>(FgThread.getHandler(),</span><br><span class="line">                <span class="string">&quot;foreground thread&quot;</span>, DEFAULT_TIMEOUT);</span><br><span class="line">        mHandlerCheckers.add(mMonitorChecker); <span class="comment">//添加MonitorChecker</span></span><br><span class="line">        <span class="comment">// Add checker for main thread.  We only do a quick check since there</span></span><br><span class="line">        <span class="comment">// can be UI running on the thread.</span></span><br><span class="line">  		<span class="comment">// 添加Looper Checker</span></span><br><span class="line">        mHandlerCheckers.add(<span class="keyword">new</span> <span class="title class_">HandlerChecker</span>(<span class="keyword">new</span> <span class="title class_">Handler</span>(Looper.getMainLooper()),</span><br><span class="line">                <span class="string">&quot;main thread&quot;</span>, DEFAULT_TIMEOUT));</span><br><span class="line">        <span class="comment">// Add checker for shared UI thread.</span></span><br><span class="line">        mHandlerCheckers.add(<span class="keyword">new</span> <span class="title class_">HandlerChecker</span>(UiThread.getHandler(),</span><br><span class="line">                <span class="string">&quot;ui thread&quot;</span>, DEFAULT_TIMEOUT));</span><br><span class="line">        <span class="comment">// And also check IO thread.</span></span><br><span class="line">        mHandlerCheckers.add(<span class="keyword">new</span> <span class="title class_">HandlerChecker</span>(IoThread.getHandler(),</span><br><span class="line">                <span class="string">&quot;i/o thread&quot;</span>, DEFAULT_TIMEOUT));</span><br><span class="line">        <span class="comment">// And the display thread.</span></span><br><span class="line">        mHandlerCheckers.add(<span class="keyword">new</span> <span class="title class_">HandlerChecker</span>(DisplayThread.getHandler(),</span><br><span class="line">                <span class="string">&quot;display thread&quot;</span>, DEFAULT_TIMEOUT));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Initialize monitor for Binder threads.</span></span><br><span class="line">        addMonitor(<span class="keyword">new</span> <span class="title class_">BinderThreadMonitor</span>());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>Monitor Checker和Looper Checker的侧重点不一样，前者预警我们不能长时间持有核心系统服务的对象锁，否则会阻塞很多函数的运行；后者预警我们不能长时间的霸占消息队列，否则其他消息将得不到处理。这两类都会导致系统卡住(System Not Responding)。</p>
<p>init注册了一个广播接收器用来接收重启系统的广播：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">RebootRequestReceiver</span> <span class="keyword">extends</span> <span class="title class_">BroadcastReceiver</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onReceive</span><span class="params">(Context c, Intent intent)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (intent.getIntExtra(<span class="string">&quot;nowait&quot;</span>, <span class="number">0</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">                rebootSystem(<span class="string">&quot;Received ACTION_REBOOT broadcast&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Slog.w(TAG, <span class="string">&quot;Unsupported ACTION_REBOOT broadcast: &quot;</span> + intent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">... ...</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(Context context, ActivityManagerService activity)</span> &#123;</span><br><span class="line">        mResolver = context.getContentResolver();</span><br><span class="line">        mActivity = activity;</span><br><span class="line"></span><br><span class="line">        context.registerReceiver(<span class="keyword">new</span> <span class="title class_">RebootRequestReceiver</span>(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">IntentFilter</span>(Intent.ACTION_REBOOT),</span><br><span class="line">                android.Manifest.permission.REBOOT, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-触发Watchdog"><a href="#2-2-触发Watchdog" class="headerlink" title="2.2 触发Watchdog"></a>2.2 触发Watchdog</h4><p>初始化Watchdog后，在SystemServer中start，作为SystemServer进程中的一个单独的线程运行，但是想要触发Watchdog的运行还需要AMS、PMS等系统服务加入到Watchdog的监测集，也就是需要Watchdog关注的对象，Watchdog只关注一些核心的系统服务。</p>
<p>需要Watchdog检测的对象，需要将自己添加到Watchdog的监测集中，以AMS为例：</p>
<p>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/">frameworks</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/">base</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/">services</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/">core</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/">java</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/com/">com</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/com/android/">android</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/com/android/server/">server</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/com/android/server/am/">am</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java">ActivityManagerService.java</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ActivityManagerService</span><span class="params">(Context systemContext)</span> &#123;</span><br><span class="line">  ... ...</span><br><span class="line">    Watchdog.getInstance().addMonitor(<span class="built_in">this</span>);</span><br><span class="line">    Watchdog.getInstance().addThread(mHandler);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** In this method we try to acquire our lock to make sure that we have not deadlocked */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">monitor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/">frameworks</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/">base</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/">services</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/">core</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/">java</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/com/">com</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/com/android/">android</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/com/android/server/">server</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/com/android/server/Watchdog.java">Watchdog.java</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Watchdog</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">  ... ...</span><br><span class="line">    <span class="comment">// 1 addMonitor</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addMonitor</span><span class="params">(Monitor monitor)</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isAlive()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Monitors can&#x27;t be added once the Watchdog is running&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 实际调用Watchdog内部类HandlerChecker的addMonitor</span></span><br><span class="line">            mMonitorChecker.addMonitor(monitor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2 addThread</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addThread</span><span class="params">(Handler thread)</span> &#123;</span><br><span class="line">        addThread(thread, DEFAULT_TIMEOUT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addThread</span><span class="params">(Handler thread, <span class="type">long</span> timeoutMillis)</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isAlive()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Threads can&#x27;t be added once the Watchdog is running&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> thread.getLooper().getThread().getName(); <span class="comment">// 线程名</span></span><br><span class="line">            mHandlerCheckers.add(<span class="keyword">new</span> <span class="title class_">HandlerChecker</span>(thread, name, timeoutMillis));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ... ...</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Watchdog</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">  ... ...</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">HandlerChecker</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">      ... ...</span><br><span class="line">        HandlerChecker(Handler handler, String name, <span class="type">long</span> waitMaxMillis) &#123;</span><br><span class="line">            mHandler = handler;</span><br><span class="line">            mName = name;</span><br><span class="line">            mWaitMax = waitMaxMillis;</span><br><span class="line">            mCompleted = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addMonitor</span><span class="params">(Monitor monitor)</span> &#123;</span><br><span class="line">        	<span class="comment">// mMonitors是一个ArrayList&lt;Monitor&gt; mMonitors = new ArrayList&lt;Monitor&gt;</span></span><br><span class="line">            <span class="comment">// 将monitor对象添加到MonitorChecker中，在AMS中则是把AMS对象添加到此list</span></span><br><span class="line">            mMonitors.add(monitor);</span><br><span class="line">        &#125;</span><br><span class="line">      ... ...</span><br></pre></td></tr></table></figure>

<p>AMS在构造函数中分别通过addMonitor和 addThread方法把自己添加到Monitor Checker对象中，把自己的Handler添加到Looper Checker对象中。</p>
<h4 id="2-3-Watchdog监测机制"><a href="#2-3-Watchdog监测机制" class="headerlink" title="2.3 Watchdog监测机制"></a>2.3 Watchdog监测机制</h4><p>Watchdog继承了Thread，也就是说本身就是一个线程，来看一下它的run()方法实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">waitedHalf</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> ArrayList&lt;HandlerChecker&gt; blockedCheckers;</span><br><span class="line">        <span class="keyword">final</span> String subject;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">boolean</span> allowRestart;</span><br><span class="line">        <span class="type">int</span> <span class="variable">debuggerWasConnected</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">timeout</span> <span class="operator">=</span> CHECK_INTERVAL; <span class="comment">// 值为30s</span></span><br><span class="line">            <span class="comment">// Make sure we (re)spin the checkers that have become idle within</span></span><br><span class="line">            <span class="comment">// this wait-and-check interval</span></span><br><span class="line">            <span class="comment">// 2.3.1 调度所有的HandlerChecker，给所有受监控的线程发送消息</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;mHandlerCheckers.size(); i++) &#123;</span><br><span class="line">                <span class="type">HandlerChecker</span> <span class="variable">hc</span> <span class="operator">=</span> mHandlerCheckers.get(i);</span><br><span class="line">                hc.scheduleCheckLocked();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (debuggerWasConnected &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                debuggerWasConnected--;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// <span class="doctag">NOTE:</span> We use uptimeMillis() here because we do not want to increment the time we</span></span><br><span class="line">            <span class="comment">// wait while asleep. If the device is asleep then the thing that we are waiting</span></span><br><span class="line">            <span class="comment">// to timeout on is asleep as well and won&#x27;t have a chance to run, causing a false</span></span><br><span class="line">            <span class="comment">// positive on when to kill things.</span></span><br><span class="line">            <span class="comment">// 2.3.2 睡眠一段时间</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> SystemClock.uptimeMillis();</span><br><span class="line">            <span class="keyword">while</span> (timeout &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (Debug.isDebuggerConnected()) &#123;</span><br><span class="line">                    debuggerWasConnected = <span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    wait(timeout); <span class="comment">// 线程休眠且释放锁</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    Log.wtf(TAG, e);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (Debug.isDebuggerConnected()) &#123;</span><br><span class="line">                    debuggerWasConnected = <span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                timeout = CHECK_INTERVAL - (SystemClock.uptimeMillis() - start);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2.3.3 检查是否有线程或者服务出了问题</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">waitState</span> <span class="operator">=</span> evaluateCheckerCompletionLocked();</span><br><span class="line">            <span class="keyword">if</span> (waitState == COMPLETED) &#123;</span><br><span class="line">                <span class="comment">// The monitors have returned; reset</span></span><br><span class="line">                waitedHalf = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (waitState == WAITING) &#123;</span><br><span class="line">                <span class="comment">// still waiting but within their configured intervals; back off and recheck</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (waitState == WAITED_HALF) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!waitedHalf) &#123;</span><br><span class="line">                    <span class="comment">// We&#x27;ve waited half the deadlock-detection interval.  Pull a stack</span></span><br><span class="line">                    <span class="comment">// trace and wait another half.</span></span><br><span class="line">                    ArrayList&lt;Integer&gt; pids = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">                    pids.add(Process.myPid());</span><br><span class="line">                    ActivityManagerService.dumpStackTraces(<span class="literal">true</span>, pids, <span class="literal">null</span>, <span class="literal">null</span>,</span><br><span class="line">                            NATIVE_STACKS_OF_INTEREST);</span><br><span class="line">                    waitedHalf = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// something is overdue!</span></span><br><span class="line">            <span class="comment">// 2.3.4 存在超时的HandlerChecker</span></span><br><span class="line">            blockedCheckers = getBlockedCheckersLocked();</span><br><span class="line">            subject = describeCheckersLocked(blockedCheckers);</span><br><span class="line">            allowRestart = mAllowRestart;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If we got here, that means that the system is most likely hung.</span></span><br><span class="line">        <span class="comment">// First collect stack traces from all threads of the system process.</span></span><br><span class="line">        <span class="comment">// Then kill this process so that the system will restart.</span></span><br><span class="line">        <span class="comment">// 走到这里意味着系统hung了，首先收集系统进程所有线程的stack trace，然后kill进程以重启。</span></span><br><span class="line">        EventLog.writeEvent(EventLogTags.WATCHDOG, subject);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Integer&gt; pids = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">        pids.add(Process.myPid());</span><br><span class="line">        <span class="keyword">if</span> (mPhonePid &gt; <span class="number">0</span>) pids.add(mPhonePid);</span><br><span class="line">        <span class="comment">// Pass !waitedHalf so that just in case we somehow wind up here without having</span></span><br><span class="line">        <span class="comment">// dumped the halfway stacks, we properly re-initialize the trace file.</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">File</span> <span class="variable">stack</span> <span class="operator">=</span> ActivityManagerService.dumpStackTraces(</span><br><span class="line">                !waitedHalf, pids, <span class="literal">null</span>, <span class="literal">null</span>, NATIVE_STACKS_OF_INTEREST);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Give some extra time to make sure the stack traces get written.</span></span><br><span class="line">        <span class="comment">// The system&#x27;s been hanging for a minute, another second or two won&#x27;t hurt much.</span></span><br><span class="line">        <span class="comment">// 线程休眠2秒钟以确保trace输出完毕</span></span><br><span class="line">        SystemClock.sleep(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出kernel log（dump和backtrace），尝试把error添加到dropbox</span></span><br><span class="line">        ... ...</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Only kill the process if the debugger is not attached.</span></span><br><span class="line">        <span class="keyword">if</span> (Debug.isDebuggerConnected()) &#123;</span><br><span class="line">            debuggerWasConnected = <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (debuggerWasConnected &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">            Slog.w(TAG, <span class="string">&quot;Debugger connected: Watchdog is *not* killing the system process&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (debuggerWasConnected &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            Slog.w(TAG, <span class="string">&quot;Debugger was connected: Watchdog is *not* killing the system process&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!allowRestart) &#123;</span><br><span class="line">            Slog.w(TAG, <span class="string">&quot;Restart not allowed: Watchdog is *not* killing the system process&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Slog.w(TAG, <span class="string">&quot;*** WATCHDOG KILLING SYSTEM PROCESS: &quot;</span> + subject);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;blockedCheckers.size(); i++) &#123;</span><br><span class="line">                Slog.w(TAG, blockedCheckers.get(i).getName() + <span class="string">&quot; stack trace:&quot;</span>);</span><br><span class="line">                StackTraceElement[] stackTrace</span><br><span class="line">                        = blockedCheckers.get(i).getThread().getStackTrace();</span><br><span class="line">                <span class="keyword">for</span> (StackTraceElement element: stackTrace) &#123;</span><br><span class="line">                    Slog.w(TAG, <span class="string">&quot;    at &quot;</span> + element);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 2.3.5 保存日志，判断是否需要杀掉系统进程</span></span><br><span class="line">            Slog.w(TAG, <span class="string">&quot;*** GOODBYE!&quot;</span>);</span><br><span class="line">            <span class="comment">// 杀死SystemServer</span></span><br><span class="line">            Process.killProcess(Process.myPid());</span><br><span class="line">            System.exit(<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        waitedHalf = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-3-1-scheduleCheckLocked-方法"><a href="#2-3-1-scheduleCheckLocked-方法" class="headerlink" title="2.3.1 scheduleCheckLocked()方法"></a>2.3.1 scheduleCheckLocked()方法</h5><p>Watchdog运行后开始循环，调用每一个HandlerChecker的scheduleCheckLocked()方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">HandlerChecker</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">  ... ...</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">scheduleCheckLocked</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mMonitors.size() == <span class="number">0</span> &amp;&amp; mHandler.getLooper().getQueue().isPolling()) &#123;</span><br><span class="line">            <span class="comment">// ... ...</span></span><br><span class="line">            mCompleted = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!mCompleted) &#123;</span><br><span class="line">            <span class="comment">// we already have a check in flight, so no need</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mCompleted = <span class="literal">false</span>;</span><br><span class="line">        mCurrentMonitor = <span class="literal">null</span>;</span><br><span class="line">        mStartTime = SystemClock.uptimeMillis();</span><br><span class="line">        mHandler.postAtFrontOfQueue(<span class="built_in">this</span>); <span class="comment">// 给监控的线程发送消息</span></span><br><span class="line">    &#125;</span><br><span class="line">  ... ...</span><br></pre></td></tr></table></figure>

<p>HandlerChecker对象既要监控服务，也要监控某个线程，所以代码中要先判断mMonitors.size是否为0，如果为0则说明这个HandlerChecker没有监控服务，这时如果被监控线程的消息队列处于空闲状态（调用isIdling()检查），则说明线程运行良好，把mCompleted设为true后就可以返回了。否则先把mCompleted设为false，然后记录消息开始发送的时间到变量mStartTime中，最后调用postAtFrontOfQueue()方法给被监控的线程发送一个消息。</p>
<h5 id="2-3-2-定期检查"><a href="#2-3-2-定期检查" class="headerlink" title="2.3.2 定期检查"></a>2.3.2 定期检查</h5><p>调度完HandlerChecker给受监控的线程发送完消息后，开始定期检查是否超时，每一次的检查的间隔由常量CHECK_INTERVAL设定，为30s，调用wait()方法（线程休眠且释放锁）让WatchDog线程睡眠一段时间。</p>
<h5 id="2-3-3-检查线程或服务是否有问题"><a href="#2-3-3-检查线程或服务是否有问题" class="headerlink" title="2.3.3 检查线程或服务是否有问题"></a>2.3.3 检查线程或服务是否有问题</h5><p>调用evaluateCheckerCompletionLocked()方法来检查是否有问题：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">evaluateCheckerCompletionLocked</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">state</span> <span class="operator">=</span> COMPLETED;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;mHandlerCheckers.size(); i++) &#123;</span><br><span class="line">        <span class="type">HandlerChecker</span> <span class="variable">hc</span> <span class="operator">=</span> mHandlerCheckers.get(i);</span><br><span class="line">        state = Math.max(state, hc.getCompletionStateLocked());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCompletionStateLocked</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (mCompleted) &#123;</span><br><span class="line">        <span class="keyword">return</span> COMPLETED;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">latency</span> <span class="operator">=</span> SystemClock.uptimeMillis() - mStartTime;</span><br><span class="line">        <span class="keyword">if</span> (latency &lt; mWaitMax/<span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> WAITING;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (latency &lt; mWaitMax) &#123;</span><br><span class="line">            <span class="keyword">return</span> WAITED_HALF;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> OVERDUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据等待时间来确认返回HandlerChecker对象的状态，</p>
<ul>
<li><p>COMPLETED表示已经完成</p>
</li>
<li><p>WAITING和WAITED_HALF表示还在等待，但未超时</p>
</li>
<li><p>OVERDUE表示已经超时，默认情况下timeout是1分钟，但监测对象可以通过传参自行设定，譬如PKMS的<strong>Handler Checker</strong>的超时是10分钟:</p>
</li>
<li><p>&#96;&#96;&#96; java<br>private static final long WATCHDOG_TIMEOUT &#x3D; 1000<em>60</em>10;     &#x2F;&#x2F; ten minutes<br>        Watchdog.getInstance().addThread(mHandler, WATCHDOG_TIMEOUT);</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">##### 2.3.4 getBlockedCheckersLocked</span><br><span class="line"></span><br><span class="line">``` java</span><br><span class="line">    private ArrayList&lt;HandlerChecker&gt; getBlockedCheckersLocked() &#123;</span><br><span class="line">        ArrayList&lt;HandlerChecker&gt; checkers = new ArrayList&lt;HandlerChecker&gt;();</span><br><span class="line">        for (int i=0; i&lt;mHandlerCheckers.size(); i++) &#123;</span><br><span class="line">            HandlerChecker hc = mHandlerCheckers.get(i);</span><br><span class="line">            if (hc.isOverdueLocked()) &#123;</span><br><span class="line">                checkers.add(hc);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return checkers;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>如果超时时间到了，还有HandlerChecker处于未完成的状态(OVERDUE)，则通过getBlockedCheckersLocked()方法，获取阻塞的HandlerChecker，生成一些描述信息</p>
<h5 id="2-3-5-保存日志"><a href="#2-3-5-保存日志" class="headerlink" title="2.3.5 保存日志"></a>2.3.5 保存日志</h5><p>保存日志，包括一些运行时的堆栈信息，这些日志是我们解决Watchdog问题的重要依据。如果判断需要杀掉system_server进程，则给当前进程(system_server)发送signal。</p>
<h3 id="3-实例分析"><a href="#3-实例分析" class="headerlink" title="3. 实例分析"></a>3. 实例分析</h3><h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h3>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Watchdog</tag>
      </tags>
  </entry>
  <entry>
    <title>AboutHexo</title>
    <url>/2017/10/11/Hexo/AboutHexo/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>卸载安装 hexo</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">安装</span><br><span class="line">sudo npm install hexo-cli -g</span><br><span class="line">sudo npm install hexo-deployer-git --save</span><br><span class="line">sudo npm install hexo --save</span><br><span class="line">npm install hexo-server</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如出现 cannot get / ，查看 public 中是否有 index.html，如果没有</span></span><br><span class="line">sudo npm audit fix</span><br><span class="line">sudo npm install</span><br><span class="line"></span><br><span class="line">卸载</span><br><span class="line">sudo npm uninstall hexo-cli -g // 3.0.0 及之后版本</span><br><span class="line">sudo npm uninstall hexo -g // 之前版本</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>升级npm</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo npm -g install npm@next</span><br></pre></td></tr></table></figure>



<p>升级 node</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo npm install -g n // n模块是专门用来管理node.js版本的</span><br><span class="line">sudo n latest // 最新版本</span><br><span class="line">sudo n stable // 最新稳定版</span><br></pre></td></tr></table></figure>



<p>一键脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br><span class="line">npm install hexo-cli -g</span><br><span class="line">git clone https://git.oschina.net/neoFelhz/hexokit.git</span><br><span class="line">rm install.sh</span><br><span class="line">cd HexoKit</span><br><span class="line">npm install</span><br><span class="line">npm config set registry https://registry.npmjs.org/</span><br><span class="line">hexo version</span><br></pre></td></tr></table></figure>



<p><strong>hexo s 命令直接打印帮助文档</strong></p>
<p>hexo3中 server 模块已经独立出来需要单独安装。 <code>npm install hexo-server</code> 安装后再运行 <code>hexo server</code>，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo npm install hexo-server</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure>



<p><strong>Cannot GET &#x2F;</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-server --save</span><br><span class="line">sudo npm install hexo-server --save</span><br><span class="line">sudo npm install hexo-deployer-git --save</span><br><span class="line">sudo npm audit fix</span><br><span class="line">sudo npm install</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>公司屏蔽外部 ssh 时如何部署</p>
<p>因为公司把外部 <strong>ssh</strong> 给屏蔽掉了，所以使用 <code>git clone xxx</code> 从 github 上下载 project 时需要使用 <strong>HTTPS</strong> 的链接，同理在使用 <code>hexo d</code> 的时候同样要把 <em>_config.yml</em> 中的 repo 地址改成 <strong>HTTPS</strong> ，在 <code>git clone https://xxx.com/xxx</code> 和 <code>hexo d</code> 的时候会弹出信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Username for &#x27;https://github.com&#x27;: </span><br><span class="line">Password for &#x27;https://rangerzhou@github.com&#x27;:</span><br></pre></td></tr></table></figure>

<p>输入 github 账号和密码后即可成功下载和部署博客。</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title>Notes</title>
    <url>/2017/10/10/Others/Notes/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>Ubuntu 常见问题解决</p>
</blockquote>
<span id="more"></span>

<h4 id="1-Ubuntu添加代理"><a href="#1-Ubuntu添加代理" class="headerlink" title="1. Ubuntu添加代理"></a>1. Ubuntu添加代理</h4><ol>
<li><p>安装squid；</p>
</li>
<li><p>在&#x2F;etc&#x2F;squid&#x2F;squid.conf末尾添加</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">acl all src 0.0.0.0/0.0.0.0</span><br><span class="line">http_access allow all</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">cache_peer 10.201.220.168 parent 8081 0 login=wjl0n2:zr123456 default</span></span><br><span class="line">cache_peer 10.201.249.71 parent 8081 0 login=asia/xxxxxx:zr123456 default</span><br><span class="line">never_direct allow all</span><br></pre></td></tr></table></figure>
</li>
<li><p>在&#x2F;etc&#x2F;apt&#x2F;apt.conf末尾添加（一般会自动生成）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Acquire::http::Proxy &quot;http://localhost:3128&quot;;</span><br><span class="line">Acquire::ftp::proxy &quot;ftp://localhost:3128&quot;;</span><br><span class="line">Acquire::https::proxy &quot;https://localhost:3128&quot;;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>sudo service squid restart</code></p>
</li>
<li><p>配置Network</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">HTTP Proxy | localhost | 3128</span><br><span class="line">HTTPS Proxy | localhost | 3128</span><br><span class="line">FTP Proxy | localhost | 3128</span><br><span class="line">Socks Host | localhost | 3128</span><br><span class="line">Ignore Hosts | localhost, 127.0.0.0/8, ::1</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="2-Google服务器配置SS"><a href="#2-Google服务器配置SS" class="headerlink" title="2. Google服务器配置SS"></a>2. Google服务器配置SS</h4><ol>
<li><p>升级vps内核开启BBR</p>
<p>sudo apt update<br>sudo apt upgrade<br>查看内核版本:uname –a,如果版本过低就升级：apt install linux-image-4.xx<br>卸载旧版本:sudo apt autoremove<br>启用新内核:update-grub<br>重启:reboot<br>验证内核版本:uname -r<br>写入配置:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo -i</span><br><span class="line">echo &quot;net.core.default_qdisc=fq&quot; &gt;&gt; /etc/sysctl.conf</span><br><span class="line">echo &quot;net.ipv4.tcp_congestion_control=bbr&quot; &gt;&gt; /etc/sysctl.conf</span><br></pre></td></tr></table></figure>

<p>配置生效:sysctl -p<br>检验: lsmod | grep bbr<br>看到回显tcp_bbr 20480 0说明已经成功开启 BBR</p>
</li>
<li><p>配置Shadowsocks</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install python-pip</span><br><span class="line">sudo pip install --upgrade pip</span><br><span class="line">sudo pip install shadowsocks</span><br><span class="line">sudo vim /etc/shadowsocks.json</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如下为添加单用户</span></span><br><span class="line">&#123;</span><br><span class="line">&quot;server&quot;:&quot;0.0.0.0&quot;,</span><br><span class="line">&quot;server_port&quot;:12018,</span><br><span class="line">&quot;local_address&quot;:&quot;127.0.0.1&quot;,</span><br><span class="line">&quot;local_port&quot;:1080,</span><br><span class="line">&quot;password&quot;:&quot;123456&quot;,</span><br><span class="line">&quot;timeout&quot;:600,</span><br><span class="line">&quot;method&quot;:&quot;aes-256-cfb&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如下为添加多用户</span></span><br><span class="line">&#123;</span><br><span class="line">    &quot;server&quot;:&quot;0.0.0.0&quot;,</span><br><span class="line">    &quot;local_address&quot;:&quot;127.0.0.1&quot;,</span><br><span class="line">    &quot;local_port&quot;:1080,</span><br><span class="line">    &quot;port_password&quot;:&#123;</span><br><span class="line">         &quot;12xxx&quot;:&quot;123456&quot;,</span><br><span class="line">         &quot;12xxx&quot;:&quot;123456&quot;,</span><br><span class="line">         &quot;12xxx&quot;:&quot;123456&quot;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;timeout&quot;:300,</span><br><span class="line">    &quot;method&quot;:&quot;aes-256-cfb&quot;,</span><br><span class="line">    &quot;fast_open&quot;: false</span><br><span class="line">&#125;</span><br><span class="line">sudo /usr/local/bin/ssserver -c /etc/shadowsocks.json -d start</span><br><span class="line">sudo vim /etc/rc.local</span><br><span class="line">在exit 0前添加:/usr/local/bin/ssserver -c /etc/shadowsocks.json -d start</span><br></pre></td></tr></table></figure>
</li>
<li><p>控制台配置</p>
<p>VPC网络-防火墙规则-创建防火墙规则(来源IP地址范围：0.0.0.0&#x2F;0，协议端口：tcp:12018)<br>VPC网络-外部IP地址-设置静态IP</p>
</li>
<li><p>Python版一键安装脚本</p>
<p><a href="https://teddysun.com/342.htmlShadowsocks">https://teddysun.com/342.htmlShadowsocks</a> </p>
</li>
<li><p>SSH 连接服务器</p>
<p><strong>通过 SSH 密码验证登录</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加密码</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo passwd <span class="variable">$&#123;whoami&#125;</span> // 下面以 user 代替 <span class="variable">$&#123;whoami&#125;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到 root</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo -i</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑 ssh 配置文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vi /etc/ssh/sshd_config</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改以下内容</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">PermitRootLogin <span class="built_in">yes</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">PasswordAuthentication <span class="built_in">yes</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启 ssh</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">service sshd restart</span></span><br></pre></td></tr></table></figure>

<p><strong>通过本地私钥登录</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成 ssh key</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ssh-keygen</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> c:\Users\RangerZhou\.ssh\id_rsa.pub</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入谷歌云平台页面 -&gt; 计算引擎 -&gt; 元数据 -&gt; SSH 密钥，粘贴保存</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">谷歌就会把上面这段 public key 写入到 ~/.ssh/authorized_keys</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">本地通过私钥登录</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ssh -i id_rsa.pub user@35.189.175.199</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="3-JDK"><a href="#3-JDK" class="headerlink" title="3. JDK"></a>3. JDK</h4><h5 id="3-1-安装JDK"><a href="#3-1-安装JDK" class="headerlink" title="3.1 安装JDK"></a>3.1 安装JDK</h5><ol>
<li><p>ubuntu使用的是openjdk，所以我们需要先找到合适的jdk版本。在命令行中输入命令：$apt-cache search openjdk</p>
</li>
<li><p>从搜索的列表里找到我们需要安装的jdk版本</p>
<p>openjdk-11-jdk - OpenJDK Development Kit (JDK)</p>
</li>
<li><p>输入安装命令，进行安装：$sudo apt-get install openjdk-11-jdk</p>
<p>等待命令行显示“done”，即安装成功过。</p>
</li>
<li><p>查看安装结果。输入命令：$java -version</p>
</li>
<li><p>安装成功后，还需要配置java_home变量：</p>
<p>1)输入命令：echo $java_home </p>
<p>返回空行；</p>
<p>2）which javac </p>
<p>返回：&#x2F;usr&#x2F;bin&#x2F;javac</p>
<p>3）file &#x2F;usr&#x2F;bin&#x2F;javac </p>
<p>返回：&#x2F;usr&#x2F;bin&#x2F;javac: symbolic link to &#x2F;etc&#x2F;alternatives&#x2F;javac</p>
<p>4）file &#x2F;etc&#x2F;alternatives&#x2F;javac </p>
<p>返回：&#x2F;etc&#x2F;alternatives&#x2F;javac: symbolic link to &#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java-11-openjdk-amd64&#x2F;bin&#x2F;javac</p>
<p>5）file &#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java-11-openjdk&#x2F;bin&#x2F;javac </p>
<p>返回：&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java-11-openjdk&#x2F;bin&#x2F;javac: cannot open &#96;&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java-11-openjdk-amd64&#x2F;bin&#x2F;javac’ (No such file or directory)</p>
<p>6）sudo echo export JAVA_HOME&#x3D;”&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java-11-openjdk-amd64”&gt;&gt;~&#x2F;.bashrc   （只添加到bin目录之前，不然编译代码可能会有问题）</p>
<p>输入密码；</p>
<p>7）source ~&#x2F;.bashrc</p>
<p>8）测试命令：gedit ~&#x2F;.bashrc </p>
<p>查看打开的文件末尾是否成功加入java_home</p>
<p><strong>Ubuntu18.04 安装 jdk7</strong></p>
<p>据说Ubuntu18.04已经去除了openJdk-7的源，所以本次进行了下载后手动安装：</p>
<p><a href="https://packages.debian.org/experimental/openjdk-7-jdk">openjdk-7-jdk</a></p>
<p><a href="https://packages.debian.org/experimental/openjdk-7-jre">openjdk-7-jre</a></p>
<p><a href="https://packages.debian.org/experimental/openjdk-7-jre-headless">openjdk-7-jre-headless</a></p>
<p><a href="https://packages.debian.org/sid/libjpeg62-turbo">libjpeg62-turbo</a></p>
<p><a href="https://packages.debian.org/sid/libfontconfig1">libfontconfig1</a></p>
<p><a href="https://packages.debian.org/sid/fontconfig-config">fontconfig-config</a></p>
<p>下载以上安装包，然后执行命令：</p>
</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo dpkg -i openjdk-7-* libjpeg62-turbo* libfontconfig1* fontconfig-config*</span><br></pre></td></tr></table></figure>

<p>​      如果在安装过程中报错，则执行以下命令：</p>
<p>   sudo apt –fix-broken install</p>
<p>   下面看一下openJDK-7的安装路径，执行一下命令：</p>
<p>   dpkg -L openjdk-7-jdk</p>
<h5 id="3-2-切换JDK"><a href="#3-2-切换JDK" class="headerlink" title="3.2 切换JDK"></a>3.2 切换JDK</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install openjdk-7-jdk</span><br><span class="line">sudo update-alternatives --list java</span><br><span class="line">sudo update-alternatives --config java #选择默认JDK</span><br><span class="line">java -version</span><br></pre></td></tr></table></figure>



<h4 id="4-完整卸载JDK"><a href="#4-完整卸载JDK" class="headerlink" title="4. 完整卸载JDK"></a>4. 完整卸载JDK</h4><ol>
<li><p>移除所有 Java相关包 (Sun, Oracle, OpenJDK, IcedTea plugins, GIJ):</p>
<p>(1) apt-get update</p>
<p>(2) apt-cache search java | awk ‘{print($1)}’ | grep -E -e ‘^(ia32-)?(sun|oracle)-java’ -e ‘^openjdk-‘ -e ‘^icedtea’ -e ‘^(default|gcj)-j(re|dk)’ -e ‘^gcj-(.*)-j(re|dk)’ -e ‘java-common’ | xargs sudo apt-get -y remove</p>
<p>(3) apt-get -y autoremove</p>
</li>
<li><p>清除配置信息:  dpkg -l | grep ^rc | awk ‘{print($2)}’ | xargs sudo apt-get -y purge</p>
</li>
<li><p>清除java配置及缓存:  bash -c ‘ls -d &#x2F;home&#x2F;*&#x2F;.java’ | xargs sudo rm -rf</p>
</li>
<li><p>手动清除JVMs:  rm -rf &#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;*</p>
</li>
</ol>
<h4 id="5-切换Python版本"><a href="#5-切换Python版本" class="headerlink" title="5. 切换Python版本"></a>5. 切换Python版本</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rangerzhou@zr:~ $ update-alternatives --list python</span><br><span class="line">update-alternatives: error: no alternatives for python</span><br><span class="line"></span><br><span class="line">rangerzhou@zr:~ $ sudo update-alternatives --install /usr/bin/python python /usr/bin/python2.7 1</span><br><span class="line">rangerzhou@zr:~ $ sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.6 2</span><br><span class="line">rangerzhou@zr:~ $ update-alternatives --list python</span><br><span class="line">/usr/bin/python2.7</span><br><span class="line">/usr/bin/python3.6</span><br><span class="line">rangerzhou@zr:~ $ sudo update-alternatives --config python </span><br><span class="line">There are 2 choices for the alternative python (providing /usr/bin/python).</span><br><span class="line"></span><br><span class="line">  Selection    Path                Priority   Status</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">  0            /usr/bin/python3.6   2         auto mode</span><br><span class="line">  1            /usr/bin/python2.7   1         manual mode</span><br><span class="line">* 2            /usr/bin/python3.6   2         manual mode</span><br><span class="line"></span><br><span class="line">Press &lt;enter&gt; to keep the current choice[*], or type selection number: 2</span><br></pre></td></tr></table></figure>

<p><strong>Python 升级</strong></p>
<p><a href="https://www.python.org/">https://www.python.org/</a></p>
<p>下载最新版本 Python ，或者 <code>wget https://www.python.org/ftp/python/3.8.0/Python-3.8.0.tgz</code> </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置配置文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./configure --with-ssl</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装依赖</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo apt update</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo apt upgrade</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo apt dist-upgrade</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo apt-get install build-essential python-dev python-setuptools python-pip python-smbus libncursesw5-dev libgdbm-dev libc6-dev zlib1g-dev libsqlite3-dev tk-dev libssl-dev openssl libffi-dev</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo make install</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除软链接</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo <span class="built_in">rm</span> -rf /usr/bin/python3</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo <span class="built_in">rm</span> -rf /usr/bin/pip3</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加python3的符号链接</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo <span class="built_in">ln</span> -s /usr/local/bin/python3.8 /usr/bin/python3</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加pip3的符号链接</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo <span class="built_in">ln</span> -s /usr/local/bin/pip3.8 /usr/bin/pip3</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看版本</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">python3</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pip3 -V</span></span><br><span class="line">pip 19.1.1 from /usr/local/python3/lib/python3.7/site-packages/pip (python 3.7)</span><br></pre></td></tr></table></figure>

<p><strong>卸载 python</strong> </p>
<p><a href="https://www.howtoinstall.co/en/ubuntu/xenial/python3.5?action=remove">https://www.howtoinstall.co/en/ubuntu/xenial/python3.5?action=remove</a></p>
<h4 id="6-JACK介绍"><a href="#6-JACK介绍" class="headerlink" title="6. JACK介绍"></a>6. JACK介绍</h4><p><a href="http://taobaofed.org/blog/2016/05/05/new-compiler-for-android/">http://taobaofed.org/blog/2016/05/05/new-compiler-for-android/</a></p>
<h4 id="7-Ubuntu登录远程服务器"><a href="#7-Ubuntu登录远程服务器" class="headerlink" title="7. Ubuntu登录远程服务器"></a>7. Ubuntu登录远程服务器</h4><p>a. 通过ssh连接</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install openssh-server</span><br><span class="line">/etc/init.d/ssh restart</span><br><span class="line">ssh -l user 10.241.9.102</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">接下来会提示输入密码，输入按回车即可</span></span><br></pre></td></tr></table></figure>

<p>b. 通过sshpass，可在命令行中直接输入密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install sshpass</span><br><span class="line">sshpass -p user000 ssh user@10.241.9.102</span><br></pre></td></tr></table></figure>



<h4 id="8-samba配置共享目录-MintOS-20-04"><a href="#8-samba配置共享目录-MintOS-20-04" class="headerlink" title="8. samba配置共享目录(MintOS 20.04)"></a>8. samba配置共享目录(MintOS 20.04)</h4><p>Mintos 20.04 共享，Windows 10 访问</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1. 安装</span></span><br><span class="line">sudo apt install samba</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2. 配置</span></span><br><span class="line">sudo vim /etc/samba/smb.conf</span><br><span class="line">末尾添加如下：</span><br><span class="line">[share]</span><br><span class="line">    comment = MyShare</span><br><span class="line">    path = /home/range/MyShare/</span><br><span class="line">    browseable = yes</span><br><span class="line">    writable = yes</span><br><span class="line">    create mask = 0644</span><br><span class="line">    directory mask = 0755</span><br><span class="line">    valid users = ranger # 第 4 步创建访问密码</span><br><span class="line">    #available = yes</span><br><span class="line">    #public = yes</span><br><span class="line">    #force user = nobody</span><br><span class="line">    #force group = nogroup</span><br><span class="line">在 global 块中添加如下</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Enable ntlm auth to fix the login issue from Windows 10</span></span><br><span class="line">   ntlm auth = true</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">3. 创建共享目录</span></span><br><span class="line">mkdir ~/share</span><br><span class="line">chmod 777 ~/share</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">4. 创建Samba用户</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">sudo <span class="built_in">touch</span> /etc/samba/smbpasswd</span></span><br><span class="line">sudo smbpasswd -a ranger # 设置 Windows 访问时需要的密码，ranger 为访问时的用户名，最好是当前电脑已存在的用户</span><br><span class="line">sudo /etc/init.d/smbd restart</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">sudo samba restart</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https://www.cnblogs.com/phinecos/archive/2009/06/06/1497717.html</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">https://blog.csdn.net/qiqzhang/article/details/78148682</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">5. windows 配置</span></span><br><span class="line">Control Panel - Credential Manager - Windows Credentials - Add a Window credential</span><br><span class="line">输入上面配置的用户名和密码，至此 windows10 已可访问</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">6. samba 重新安装</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载</span></span><br><span class="line">sudo apt remove samba</span><br><span class="line">sudo apt purge samba</span><br><span class="line">sudo apt purge samba-common</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载后 /etc/samba 目录也不存在了</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重装</span></span><br><span class="line">sudo apt install samba</span><br></pre></td></tr></table></figure>

<h4 id="9-apk签名"><a href="#9-apk签名" class="headerlink" title="9. apk签名"></a>9. apk签名</h4><p><a href="https://developer.android.com/studio/publish/app-signing?hl=zh-cn">https://developer.android.com/studio/publish/app-signing?hl=zh-cn</a></p>
<p>Key store path: &#x2F;home&#x2F;rangerzhou&#x2F;Android&#x2F;keystores&#x2F;android.jks<br>Key store password: 123456<br>Key alias: ZrAndroidKey<br>Key password: 654321</p>
<h4 id="10-AndroidStudio-导入调整-jar-包优先级"><a href="#10-AndroidStudio-导入调整-jar-包优先级" class="headerlink" title="10 AndroidStudio 导入调整 jar 包优先级"></a>10 AndroidStudio 导入调整 jar 包优先级</h4><ol>
<li><p>把 jar 包放到 <code>app/libs/</code> 目录下，点击 jar 包右键 add as library ，在 <code>Project Structure-app-Dependencies</code> 修改导入 jar包的 Scope 为 <strong>Compile only</strong> </p>
</li>
<li><p>在 Project 下的 <code>build.gradle</code> 文件中添加</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">gradle.projectsEvaluated &#123;</span><br><span class="line">    tasks.withType(JavaCompile) &#123;</span><br><span class="line">        options.compilerArgs.add(<span class="string">&#x27;-Xbootclasspath/p:app/libs/framework_APEV_DEMO_v20181009.jar&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>注意：<code>gradle.projectsEvaluated</code> 是放在 <code>allprojects</code> 标签内</em></p>
</li>
<li><p>在 <code>app.iml</code> 中把导入的 jar 包放在 sdk 之前，这样Androidstudio 编译时优先使用导入的 jar 包</p>
</li>
<li><p>每次重新打开Android stuio或者sync gradle，都会使得jdk的顺序发生变动，type&#x3D;”jdk”所在的行会跑到前面去，为了方便起见，可使用下面的代码自动将type&#x3D;’jdk’的行移动到最后，把这段代码加到 app 下的 build.gradle 中即可：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">preBuild &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        <span class="type">def</span> <span class="variable">imlFile</span> <span class="operator">=</span> file(<span class="string">&quot;app.iml&quot;</span>)</span><br><span class="line">        println <span class="string">&#x27;Change app.iml order&#x27;</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">def</span> <span class="variable">parsedXml</span> <span class="operator">=</span> (<span class="keyword">new</span> <span class="title class_">XmlParser</span>()).parse(imlFile)</span><br><span class="line">            <span class="type">def</span> <span class="variable">jdkNode</span> <span class="operator">=</span> parsedXml.component[<span class="number">1</span>].orderEntry.find &#123; it.<span class="string">&#x27;@type&#x27;</span> == <span class="string">&#x27;jdk&#x27;</span> &#125;</span><br><span class="line">            parsedXml.component[<span class="number">1</span>].remove(jdkNode)</span><br><span class="line">            <span class="type">def</span> <span class="variable">sdkString</span> <span class="operator">=</span> <span class="string">&quot;Android API &quot;</span> + android.compileSdkVersion.substring(<span class="string">&quot;android-&quot;</span>.length()) + <span class="string">&quot; Platform&quot;</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Node</span>(parsedXml.component[<span class="number">1</span>], <span class="string">&#x27;orderEntry&#x27;</span>, [<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;jdk&#x27;</span>, <span class="string">&#x27;jdkName&#x27;</span>: sdkString, <span class="string">&#x27;jdkType&#x27;</span>: <span class="string">&#x27;Android SDK&#x27;</span>])</span><br><span class="line">            <span class="type">def</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringWriter</span>()</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">XmlNodePrinter</span>(<span class="keyword">new</span> <span class="title class_">PrintWriter</span>(writer)).print(parsedXml)</span><br><span class="line">            imlFile.text = writer.toString()</span><br><span class="line">            groovy.xml.XmlUtil.serialize(parsedXml, <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(imlFile))</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            <span class="comment">// nop, iml not found</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>参考：</p>
<p><a href="https://www.jianshu.com/p/82cce7f91d5e">https://www.jianshu.com/p/82cce7f91d5e</a></p>
<p><a href="https://blog.csdn.net/li_huai_dong/article/details/81137355">https://blog.csdn.net/li_huai_dong/article/details/81137355</a></p>
<h4 id="11-Ubuntu-18-04美化"><a href="#11-Ubuntu-18-04美化" class="headerlink" title="11 . Ubuntu 18.04美化"></a>11 . Ubuntu 18.04美化</h4><p><a href="https://zhuanlan.zhihu.com/p/36200924">https://zhuanlan.zhihu.com/p/36200924</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/36265103">https://zhuanlan.zhihu.com/p/36265103</a></p>
<h4 id="12-Ubuntu-18-04-过滤CSDN广告"><a href="#12-Ubuntu-18-04-过滤CSDN广告" class="headerlink" title="12. Ubuntu 18.04 过滤CSDN广告"></a>12. Ubuntu 18.04 过滤CSDN广告</h4><p>1.安装Adblock Plus，进入“选项”设置 </p>
<p>2.在过滤规则选择: Adblock Warning Removal List 模式 </p>
<p>3.”在自定义过滤（My filter list）“添加一行：blog.csdn.net###layerd </p>
<p>4.刷新网页，Enjoy it….</p>
<h4 id="13-Repo-切换所有分支"><a href="#13-Repo-切换所有分支" class="headerlink" title="13. Repo 切换所有分支"></a>13. Repo 切换所有分支</h4><p><strong>创建分支</strong></p>
<p><strong>方式一</strong></p>
<p>repo init -b branch-name</p>
<p>repo sync</p>
<p>repo start branch-name –all</p>
<p><strong>方式二</strong></p>
<p>repo forall -c git checkout -b branch-name</p>
<p>区别及原理后面补充。</p>
<p><strong>删除分支</strong></p>
<p>repo abandon branch-name</p>
<p>repo abandon branch-name</p>
<h4 id="14-访问删除-x2F-root-目录"><a href="#14-访问删除-x2F-root-目录" class="headerlink" title="14. 访问删除 &#x2F;root 目录"></a>14. 访问删除 &#x2F;root 目录</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /</span><br><span class="line">sudo passwd root</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">按照提示输入密码</span></span><br><span class="line">su root</span><br><span class="line">cd root</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">即可操作 /root 目录</span></span><br></pre></td></tr></table></figure>



<h4 id="15-crontab-定时任务"><a href="#15-crontab-定时任务" class="headerlink" title="15. crontab 定时任务"></a>15. crontab 定时任务</h4><p><strong>方法一</strong></p>
<p>执行 <code>crontab -e</code> 后，任务会被写入到 <em>&#x2F;var&#x2F;spool&#x2F;cron&#x2F;crontabs&#x2F;</em> 目录下，生成一个和用户名一致的文件，文件内容就是我们编辑的定时脚本。</p>
<p>直接用 crontab 命令编辑</p>
<p>cron服务提供 crontab 命令来设定 cron 服务的，以下是这个命令的一些参数与说明：</p>
<ul>
<li>crontab -u &#x2F;&#x2F;设定某个用户的cron服务，一般 root 用户在执行这个命令的时候需要此参数</li>
<li>crontab -l &#x2F;&#x2F;列出某个用户cron服务的详细内容</li>
<li>crontab -r &#x2F;&#x2F;删除某个用户的cron服务</li>
<li>crontab -e &#x2F;&#x2F;编辑某个用户的cron服务</li>
</ul>
<p>比如说 root 查看自己的 cron 设置：crontab -u root -l</p>
<p>再例如，root 想删除 fred 的 cron 设置：crontab -u fred -r </p>
<p>基本格式 :<br>分　 时　 日　 月　 周　 命令<br>第1列表示分钟1～59，<font color=red>*<em>每 1 分钟用 * 或者 <em>&#x2F;1 表示</em></em></font><br>第2列表示小时1～23（0表示0点）<br>第3列表示日期1～31<br>第4列表示月份1～12<br>第5列标识号星期0～6（0表示星期天）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">末尾添加， 分，时，天，月，周</span></span><br><span class="line">59 23 * * * /home/xxx/xxx.sh</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启 service</span></span><br><span class="line">sudo service cron restart</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">也可以用 sudo /etc/init.d/cron restart</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">其他命令</span></span><br><span class="line">sudo service cron status // 查看 crontab 服务状态</span><br><span class="line">sudo service cron start // 启动服务</span><br><span class="line">sudo service cron stop // 关闭服务</span><br><span class="line">sudo service cron restart // 重启服务</span><br><span class="line">sudo service cron reload // 重新载入配置</span><br><span class="line">vim /var/mail/xxx // 失败会发送邮件？</span><br><span class="line"></span><br><span class="line">sudo vim /var/spool/cron/crontabs/root // </span><br></pre></td></tr></table></figure>

<p><strong>方法2</strong></p>
<p>使用命令 vi &#x2F;etc&#x2F;crontab 编辑定时脚本。</p>
<p>它包括下面几行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">SHELL=/bin/bash</span><br><span class="line">PATH=/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class="line">MAILTO=root</span><br><span class="line">HOME=/</span><br><span class="line"></span><br><span class="line">\# run-parts</span><br><span class="line">01 * * * * root run-parts /etc/cron.hourly</span><br><span class="line">02 4 * * * root run-parts /etc/cron.daily</span><br><span class="line">22 4 * * 0 root run-parts /etc/cron.weekly</span><br><span class="line">42 4 1 * * root run-parts /etc/cron.monthly</span><br></pre></td></tr></table></figure>

<p>前四行是用来配置 cron 任务运行环境的变量。<br>SHELL 变量的值告诉系统要使用哪个 shell 环境（在这个例子里是 bash shell）；<br>PATH 变量定义用来执行命令的路径。<br>cron 任务的输出被邮寄给 MAILTO 变量定义的用户名。<br>如果 MAILTO 变量被定义为空白字符串（MAILTO&#x3D;””），电子邮件就不会被寄出。<br>HOME 变量可以用来设置在执行命令或脚本时使用的主目录。<br>如果不加run-parts参数，可是直接写任务文件，而不是文件夹。</p>
<p>（系统级的）做系统级配置我们会直接配置 &#x2F;etc&#x2F;crontab<br>（用户级的）一般还是建议大家使用 crontab -e ，这样系统也会帮着检查我们配置的脚本语法。</p>
<h4 id="16-systemd-配置-service-开机启动"><a href="#16-systemd-配置-service-开机启动" class="headerlink" title="16. systemd 配置 service 开机启动"></a>16. systemd 配置 service 开机启动</h4><p>以启动 HomeAssistant 为例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置启动脚本</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo vim /etc/systemd/system/home-assistant.service</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Home Assistant</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">User=ranger   # hass 所属user</span><br><span class="line">Group=ranger  # hass 所属group</span><br><span class="line">ExecStart=/usr/bin/python3 /usr/local/bin/hass</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">其他配置</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo systemctl <span class="built_in">enable</span> home-assistant.service</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo systemctl is-enabled home-assistant.service</span></span><br><span class="line">enabled</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo systemctl daemon-reload</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo systemctl start home-assistant.service</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo systemctl status home-assistant.service</span></span><br><span class="line">* home-assistant.service - Home Assistant</span><br><span class="line">   Loaded: loaded (/etc/systemd/system/home-assistant.service; enabled; vendor preset: enabled)</span><br><span class="line">   Active: active (running) since Wed 2019-07-03 13:04:45 CST; 22min ago</span><br><span class="line"> Main PID: 17003 (python3)</span><br><span class="line">    Tasks: 34 (limit: 4915)</span><br><span class="line">   CGroup: /system.slice/home-assistant.service</span><br><span class="line">           |-17003 /usr/bin/python3 /usr/local/bin/hass</span><br><span class="line">           `-17048 /usr/bin/pulseaudio --start --log-target=syslog</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ll /etc/systemd/system/home-assistant.service</span></span><br><span class="line">-rw-r--r-- 1 root root 188 Jul  3 13:04 /etc/systemd/system/home-assistant.service</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ll /usr/local/bin/hass</span></span><br><span class="line">-rwxr-xr-x 1 ranger ranger 224 Jul  1 13:05 /usr/local/bin/hass*</span><br></pre></td></tr></table></figure>

<p>其他命令（参考：<a href="https://linux.cn/article-5926-1.html%EF%BC%89">https://linux.cn/article-5926-1.html）</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo systemctl start apache.service						<span class="comment"># 立即启动一个服务</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo systemctl stop apache.service						<span class="comment"># 立即停止一个服务</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo systemctl restart apache.service						<span class="comment"># 重启一个服务</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo systemctl <span class="built_in">kill</span> apache.service						<span class="comment"># 杀死一个服务的所有子进程</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo systemctl reload apache.service						<span class="comment"># 重新加载一个服务的配置文件</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo systemctl daemon-reload								<span class="comment"># 重载所有修改过的配置文件</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">systemctl show httpd.service								<span class="comment"># 显示某个 Unit 的所有底层参数</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">systemctl show -p CPUShares httpd.service					<span class="comment"># 显示某个 Unit 的指定属性的值</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo systemctl set-property httpd.service CPUShares=500	<span class="comment"># 设置某个 Unit 的指定属性</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo systemctl reboot 		<span class="comment"># 重启系统</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo systemctl poweroff 		<span class="comment"># 关闭系统，切断电源</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo systemctl halt 			<span class="comment"># CPU停止工作</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo systemctl <span class="built_in">suspend</span> 		<span class="comment"># 暂停系统</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo systemctl hibernate 		<span class="comment"># 让系统进入冬眠状态</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo systemctl hybrid-sleep	<span class="comment"># 让系统进入交互式休眠状态</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo systemctl rescue 		<span class="comment"># 启动进入救援状态（单用户状态）</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">systemctl list-units			<span class="comment"># 列出正在运行的 Unit</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">systemctl list-units --all	<span class="comment"># 列出所有Unit，包括没有找到配置文件的或者启动失败的</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">systemctl list-units --all --state=inactive	<span class="comment"># 列出所有没有运行的 Unit</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">systemctl list-units --failed					<span class="comment"># 列出所有加载失败的 Unit</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">systemctl list-units --<span class="built_in">type</span>=service			<span class="comment"># 列出所有正在运行的、类型为 service 的 Unit</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Unit 的状态</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">systemctl status 								<span class="comment"># 显示系统状态</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysystemctl status bluetooth.service			<span class="comment"># 显示单个 Unit 的状态</span></span></span><br></pre></td></tr></table></figure>

<h4 id="17-使用-AndroidStudio-调试源码"><a href="#17-使用-AndroidStudio-调试源码" class="headerlink" title="17. 使用 AndroidStudio 调试源码"></a>17. 使用 AndroidStudio 调试源码</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成 idegen.jar</span></span><br><span class="line">source build/envsetup.sh</span><br><span class="line">lunch xxx</span><br><span class="line">make idegen -j8 # 或者 ./development/tools/idegen/idegen.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行脚本</span></span><br><span class="line">./development/tools/idegen/idegen.sh</span><br></pre></td></tr></table></figure>

<p>执行脚本后在源码根目录生成 android.iml 和 android.ipr ，编辑 android.iml，添加 <excludeFolder> 过滤不需要调试的目录，随后用 AndroidStudio <code>Open an existing Android Studio project</code> 打开 android.ipr 文件，第一次打开，AndroidStudio下方的状态栏会提示Scanning files to index… ，耐心等待即可。</p>
<p><strong>配置 Project SDK</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">主要是配置一个空的JDK，使代码在AOSP源码目录中跳转，不会跳到JDK中去</span><br><span class="line"></span><br><span class="line">打开AndroidStudio菜单 File ---&gt; Project Structure，</span><br><span class="line"></span><br><span class="line">选择Platform Settings选项下的SDKs，紧接着点右侧上方的＋号，选择＋JDK，这里让选择JDK路径时直接默认的即可，点击OK；</span><br><span class="line">然后将Name改为AOSP_nojar,然后将Classpath下的所有.jar文件全部选中删除，</span><br><span class="line">再将Sourcepath,Annotations,Documentation Paths 下的文件全部删除，（当前AOSP源码是 android-9.0.0_r52, Project SDK 应为 Android API 28 Platform），</span><br><span class="line">紧接着点击Android API 28 Platform,右侧选择 Java SDK 为刚创建的 AOSP_nojar，</span><br><span class="line">然后选择Project Settings选项下的Project，将右侧的Project SDK 设置为与当前AOSP源码版本一致，如Android API 28 Platform</span><br><span class="line"></span><br><span class="line">然后选择Project Settings选项下的Modules,点击右侧的Dependencies,保留最下面的 Module source 和Android API 27 Platform，其他的.jar文件全部删除</span><br><span class="line"></span><br><span class="line">现在代码可以正确的跳转了</span><br></pre></td></tr></table></figure>



<p><a href="https://yourzeromax.top/2018/08/13/Android-%E5%90%8C%E4%B8%80%E4%B8%AATextView%E4%B8%AD%E5%A4%9A%E5%BD%A9%E6%98%BE%E7%A4%BA%E6%96%87%E5%AD%97/">Android 同一个TextView中多彩显示文字</a> </p>
<h4 id="18-批量查找并替换字符串"><a href="#18-批量查找并替换字符串" class="headerlink" title="18. 批量查找并替换字符串"></a>18. 批量查找并替换字符串</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep oldStr -rl ./source | xargs sed -i &#x27;s/oldStr/newStr/g&#x27;</span><br></pre></td></tr></table></figure>



<h4 id="19-项目迁移（包含提交记录）"><a href="#19-项目迁移（包含提交记录）" class="headerlink" title="19. 项目迁移（包含提交记录）"></a>19. 项目迁移（包含提交记录）</h4><p><strong>方法一：</strong></p>
<p>从原地址克隆一份裸版本库，比如原本托管于 GitHub，或者是本地的私有仓库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --bare git://192.168.10.XX/git_repo/project_name.git</span><br></pre></td></tr></table></figure>

<p>以镜像推送的方式上传代码到 新服务器上：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> project_name.git</span><br><span class="line">git push --mirror git@192.168.20.XX/path/to/path/new_project_name.git</span><br></pre></td></tr></table></figure>

<p><strong>方法二：</strong></p>
<p>假设你的remote是origin，用git remote set_url 更换地址：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote set-url origin remote_git_address</span><br></pre></td></tr></table></figure>

<p>然后用 git push 进行提交：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure>

<p>不过这种只会迁移当前分支到新的git上。</p>
<h4 id="20-VirtualBox-共享文件夹"><a href="#20-VirtualBox-共享文件夹" class="headerlink" title="20. VirtualBox 共享文件夹"></a>20. VirtualBox 共享文件夹</h4><ol>
<li><p>设置 - 共享文件夹 - + - 选择 PC 上的一个目录 Share - 点击 OK</p>
</li>
<li><p>虚拟机中输入：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mkdir pcshare</span><br><span class="line">sudo chmod 777 pcshare</span><br><span class="line">sudo mount -t vboxsf Share pcshare/</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="21-Linux-jar-包运行常用命令"><a href="#21-Linux-jar-包运行常用命令" class="headerlink" title="21. Linux jar 包运行常用命令"></a>21. Linux jar 包运行常用命令</h4><h5 id="1-运行方式1"><a href="#1-运行方式1" class="headerlink" title="1. 运行方式1"></a>1. 运行方式1</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar test.jar</span><br></pre></td></tr></table></figure>

<p>当前 ssh 窗口被锁定，可按 CTRL+C 打断程序运行，或直接关闭窗口，程序退出。</p>
<p>如何让窗口不锁定呢？</p>
<h5 id="2-运行方式2"><a href="#2-运行方式2" class="headerlink" title="2. 运行方式2"></a>2. 运行方式2</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar test.jar &amp;</span><br></pre></td></tr></table></figure>

<p>&amp; 代表在后台运行。</p>
<p>当前 ssh 窗口不被锁定，但是当窗口关闭时，程序终止运行。</p>
<p>如何让窗口关闭时，程序仍然运行？</p>
<h5 id="3-运行方式3"><a href="#3-运行方式3" class="headerlink" title="3. 运行方式3"></a>3. 运行方式3</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nohup java -jar test.jar &amp;</span><br></pre></td></tr></table></figure>

<p>nohup 的意思是不挂断运行命令，当账户退出或终端关闭时，程序仍然运行。</p>
<p>当用 nohup 命令执行作业时，缺省情况下该作业的所有输出被重定向到 nohup.out 的文件中，除非另外指定输出文件。</p>
<h5 id="4-运行方式4"><a href="#4-运行方式4" class="headerlink" title="4. 运行方式4"></a>4. 运行方式4</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nohup jar -jar test.jar &gt; temp.txt &amp;</span><br></pre></td></tr></table></figure>

<p>command &gt; out.file: 将 command 的输出重定向到 out.file 文件，即输出内容不打印到屏幕上，而是输出到 out.file 文件中。</p>
<h5 id="5-查看后台运行任务"><a href="#5-查看后台运行任务" class="headerlink" title="5. 查看后台运行任务"></a>5. 查看后台运行任务</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jobs</span><br></pre></td></tr></table></figure>

<p>jobs 命令会列出所有后台执行的作业，并且每个作业前面会有个编号。</p>
<p>如果想将某个作业调到前台控制，使用 fg 命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">fg 23</span><br></pre></td></tr></table></figure>

<h5 id="6-查看某端口占用的线程的-pid"><a href="#6-查看某端口占用的线程的-pid" class="headerlink" title="6. 查看某端口占用的线程的 pid"></a>6. 查看某端口占用的线程的 pid</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -nlp | grep :1234</span><br></pre></td></tr></table></figure>

<p>如果忘记进程号，通过如下命令查看当前运行 jar 包程序进程号：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -ef | grep test.jar</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者</span></span><br><span class="line">ps -aux | grep java</span><br></pre></td></tr></table></figure>

<h5 id="7-关闭进程"><a href="#7-关闭进程" class="headerlink" title="7. 关闭进程"></a>7. 关闭进程</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kill -s 9 12345</span><br></pre></td></tr></table></figure>



<h4 id="22-Ubuntu-18-04-修改-mysql-数据库存放位置"><a href="#22-Ubuntu-18-04-修改-mysql-数据库存放位置" class="headerlink" title="22. Ubuntu 18.04 修改 mysql 数据库存放位置"></a>22. Ubuntu 18.04 修改 mysql 数据库存放位置</h4><p>停止 mysql</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo /etc/init.d/mysql stop</span><br></pre></td></tr></table></figure>

<p>确认mysql 数据存放位置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">mysql -u root -p</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输入密码后进入命令操作</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">show variables like <span class="string">&#x27;%dir%&#x27;</span>;</span></span><br><span class="line">+-----------------------------------------+------------------------------+</span><br><span class="line">| Variable_name                           | Value                        |</span><br><span class="line">+-----------------------------------------+------------------------------+</span><br><span class="line">| basedir                                 | /usr/                        |</span><br><span class="line">| binlog_direct_non_transactional_updates | OFF                          |</span><br><span class="line">| character_sets_dir                      | /usr/share/mysql/charsets/   |</span><br><span class="line">| datadir                                 | /var/lib/mysql/              | # datadir 即为数据存储位置</span><br><span class="line">| ignore_db_dirs                          |                              |</span><br><span class="line">| innodb_data_home_dir                    |                              |</span><br><span class="line">| innodb_log_group_home_dir               | ./                           |</span><br><span class="line">| innodb_max_dirty_pages_pct              | 75.000000                    |</span><br><span class="line">| innodb_max_dirty_pages_pct_lwm          | 0.000000                     |</span><br><span class="line">| innodb_tmpdir                           |                              |</span><br><span class="line">| innodb_undo_directory                   | ./                           |</span><br><span class="line">| lc_messages_dir                         | /usr/share/mysql/            |</span><br><span class="line">| plugin_dir                              | /usr/lib/mysql/plugin/       |</span><br><span class="line">| slave_load_tmpdir                       | /tmp                         |</span><br><span class="line">| tmpdir                                  | /tmp                         |</span><br><span class="line">+-----------------------------------------+------------------------------+</span><br><span class="line">15 rows in set (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>关闭 mysql 服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service mysql stop</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者</span></span><br><span class="line">sudo /etc/init.d/mysql stop</span><br></pre></td></tr></table></figure>

<p>创建新的数据库路径</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /home/ranger/database/mysql</span><br></pre></td></tr></table></figure>

<p>复制 mysql 原有的数据</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv /var/lib/mysql /home/ranger/database/mysql</span><br></pre></td></tr></table></figure>

<p>修改配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改mysqld.cnf 中的 datadir</span></span><br><span class="line">sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class="line">datadir = /home/ranger/database/mysql</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改启动文件</span></span><br><span class="line">vim /etc/apparmor.d/usr.sbin.mysqld</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Allow data <span class="built_in">dir</span> access</span></span><br><span class="line">  /var/lib/mysql/ r,</span><br><span class="line">  /var/lib/mysql/** rwk,</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">添加如下两行</span></span><br><span class="line">  /home/ranger/database/mysql/ r,</span><br><span class="line">  /home/ranger/database/mysql/** rwk,</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置 AppArmor 访问控制规则</span></span><br><span class="line">sudo vim /etc/apparmor.d/tunables/alias</span><br><span class="line">alias /var/lib/mysql/ -&gt; /home/ranger/database/mysql/,</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改 socket 地址</span></span><br><span class="line">sudo vim /etc/apparmor.d/abstractions/mysql</span><br><span class="line">/home/ranger/database/mysql&#123;,d&#125;/mysql&#123;,d&#125;.sock rw,</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改文件权限</span></span><br><span class="line">sudo chown -R ranger:ranger /home/ranger/database/mysql</span><br><span class="line">sudo chmod 755 /home/ranger/database/mysql</span><br></pre></td></tr></table></figure>

<p>reload apparmor 配置并重启</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo service apparmor reload</span><br><span class="line">sudo service apparmor restart</span><br></pre></td></tr></table></figure>

<p>重启 mysql</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo service mysql restart</span><br></pre></td></tr></table></figure>

<p>如果启动异常，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo /etc/init.d/mysql restart</span></span><br><span class="line">[....] Restarting mysql (via systemctl): mysql.serviceJob for mysql.service failed because the control process exited with error code.</span><br><span class="line">See &quot;systemctl status mysql.service&quot; and &quot;journalctl -xe&quot; for details.</span><br><span class="line"> failed!</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>输入 <code>journalctl -xe</code> 查看详细信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">journalctl -xe</span></span><br><span class="line">-- Unit mysql.service has finished shutting down.</span><br><span class="line">Sep 17 14:01:08 Tricia systemd[1]: Starting MySQL Community Server...</span><br><span class="line">-- Subject: Unit mysql.service has begun start-up</span><br><span class="line">-- Defined-By: systemd</span><br><span class="line">-- Support: http://www.ubuntu.com/support</span><br><span class="line">--</span><br><span class="line">-- Unit mysql.service has begun starting up.</span><br><span class="line">Sep 17 14:01:08 Tricia mysql-systemd-start[32692]: my_print_defaults: [ERROR] Found option without preceding group in config file /etc/mysql/my.cnf at line 22!</span><br><span class="line">Sep 17 14:01:08 Tricia mysql-systemd-start[32692]: my_print_defaults: [ERROR] Fatal error in defaults handling. Program aborted!</span><br><span class="line">Sep 17 14:01:08 Tricia mysql-systemd-start[32692]: MySQL data dir not found at /var/lib/mysql. Please create one.</span><br><span class="line">... ...</span><br></pre></td></tr></table></figure>

<p>找到问题修改。</p>
<h4 id="23-Ubuntu-系统时间同步"><a href="#23-Ubuntu-系统时间同步" class="headerlink" title="23. Ubuntu 系统时间同步"></a>23. Ubuntu 系统时间同步</h4><p>直接输入如下命令即可同步最新时间</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo date -s &quot;$(wget -qSO- --max-redirect=0 google.com 2&gt;&amp;1 | grep Date: | cut -d&#x27; &#x27; -f5-8)Z&quot;</span><br></pre></td></tr></table></figure>

<p>定时执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/crontab</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">m h dom mon dow user <span class="built_in">command</span></span></span><br><span class="line">30 8  * * * /home/ranger/bin/SyncTime.sh</span><br></pre></td></tr></table></figure>



<h4 id="24-Ubuntu-安装-微信-x2F-QQ"><a href="#24-Ubuntu-安装-微信-x2F-QQ" class="headerlink" title="24. Ubuntu 安装 微信&#x2F;QQ"></a>24. Ubuntu 安装 微信&#x2F;QQ</h4><h5 id="24-1-LinuxMint19-3（Ubuntu-18-04）版本安装"><a href="#24-1-LinuxMint19-3（Ubuntu-18-04）版本安装" class="headerlink" title="24.1 LinuxMint19.3（Ubuntu 18.04）版本安装"></a>24.1 LinuxMint19.3（Ubuntu 18.04）版本安装</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget -O- https://deepin-wine.i-m.dev/setup.sh | sh</span><br><span class="line">sudo apt install deepin.com.wechat</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>安装后可能会出现界面中文字体显示方块的问题，解决方案如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo apt-cache search wqy</span></span><br><span class="line">fonts-wqy-microhei - Sans-serif style CJK font derived from Droid</span><br><span class="line">fonts-wqy-zenhei - &quot;WenQuanYi Zen Hei&quot; A Hei-Ti Style (sans-serif) Chinese font</span><br><span class="line">xfonts-wqy - WenQuanYi Bitmap Song CJK font for X</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装上面三个字体</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo apt install fonts-wqy-microhei fonts-wqy-zenhei xfonts-wqy</span></span><br></pre></td></tr></table></figure>

<p>其他异常：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">The following packages have unmet dependencies:</span><br><span class="line"> com.qq.weixin.deepin:i386 : Depends: libc6:i386 (&gt;= 2.28) but 2.27-3ubuntu1.4 is to be installed</span><br><span class="line">E: Unable to correct problems, you have held broken packages.</span><br></pre></td></tr></table></figure>



<p>同样可以替换安装包（deepin.com.wechat）为其他需要的软件，输入 sudo apt install install deepin. 按 tab 就显示了：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo apt install deepin.com.qq.im</span></span><br><span class="line">deepin.cn.360.yasuo                  deepin.com.baidu.pan                 deepin.com.qq.b.crm                  deepin.com.qq.office                 deepin.com.thunderspeed              deepin.org.7-zip                   </span><br><span class="line">deepin.cn.com.winrar                 deepin.com.cmbchina                  deepin.com.qq.b.eim                  deepin.com.qq.rtx2015                deepin.com.wechat                    deepin.org.foobar2000              </span><br><span class="line">deepin.com.95579.cjsc                deepin.com.foxmail                   deepin.com.qq.im                     deepin.com.taobao.aliclient.qianniu  deepin.com.weixin.work                                                  </span><br><span class="line">deepin.com.aaa-logo                  deepin.com.gtja.fuyi                 deepin.com.qq.im.light               deepin.com.taobao.wangwang           deepin.net.263.em</span><br></pre></td></tr></table></figure>

<h5 id="24-2-LinuxMint20（Ubuntu-20-04）-版本安装"><a href="#24-2-LinuxMint20（Ubuntu-20-04）-版本安装" class="headerlink" title="24.2 LinuxMint20（Ubuntu 20.04） 版本安装"></a>24.2 LinuxMint20（Ubuntu 20.04） 版本安装</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">wget -O- https://deepin-wine.i-m.dev/setup.sh | sh</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo apt install com.qq.weixin.deepin com.qq.im.deepin</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## 如无法发送照片</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo apt install libjpeg62:i386</span></span><br></pre></td></tr></table></figure>

<p>官网最新版本依赖高版本 libc6 库，而 Ubuntu 18.04 最高只支持 libc6-2.27 版本，所以 Ubuntu 18.04 无法安装 deepin-wine github 中的新版本，<strong>千万不要尝试升级 libc6</strong>，不要问我是怎么知道的，除非你想重装系统……</p>
<h4 id="25-git-status-中文显示为-ascii-码"><a href="#25-git-status-中文显示为-ascii-码" class="headerlink" title="25. git status 中文显示为 ascii 码"></a>25. git status 中文显示为 ascii 码</h4><ul>
<li>原因<br>在默认设置下，中文文件名在工作区状态输出，中文名不能正确显示，而是显示为八进制的字符编码。</li>
<li>解决办法<br>将git 配置文件 <code>core.quotepath</code>项设置为false。<br>quotepath表示引用路径<br>加上<code>--global</code>表示全局配置</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global core.quotepath false</span><br></pre></td></tr></table></figure>

<h4 id="26-更新-fork-而来的仓库代码"><a href="#26-更新-fork-而来的仓库代码" class="headerlink" title="26. 更新 fork 而来的仓库代码"></a>26. 更新 fork 而来的仓库代码</h4><p>有两种方法</p>
<h5 id="26-1-git-命令操作"><a href="#26-1-git-命令操作" class="headerlink" title="26.1 git 命令操作"></a>26.1 git 命令操作</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看远程分支列表</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote -v</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">增加源分支地址到你项目远程分支列表中(此处是关键)，先得将原来的仓库指定为 upstream，命令为</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote add upstream git@github.com:xxx/xxx.git</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">fetch 源分支的新版本到本地</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git fetch upstream</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">合并两个版本的代码</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git merge upstream/master</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将合并后的代码 push 到 github 上去</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push origin master</span></span><br></pre></td></tr></table></figure>

<h5 id="26-2-github-方式"><a href="#26-2-github-方式" class="headerlink" title="26.2 github 方式"></a>26.2 github 方式</h5><p><a href="https://blog.csdn.net/qq1332479771/article/details/56087333">https://blog.csdn.net/qq1332479771/article/details/56087333</a></p>
<h4 id="27-Linux-Mint20-添加打印机"><a href="#27-Linux-Mint20-添加打印机" class="headerlink" title="27. Linux Mint20 添加打印机"></a>27. Linux Mint20 添加打印机</h4><p>Settings - Printers - Add - Find Network Print - 右侧输入打印机 IP - Find - 左侧 JetDirect(xxx.xxx.xxx.xxx) - 右侧 Forward</p>
<h4 id="28-AndroidStudio-虚拟机无法启动-x2F-dev-x2F-kvm-is-not-found"><a href="#28-AndroidStudio-虚拟机无法启动-x2F-dev-x2F-kvm-is-not-found" class="headerlink" title="28. AndroidStudio 虚拟机无法启动 &#x2F;dev&#x2F;kvm is not found"></a>28. AndroidStudio 虚拟机无法启动 &#x2F;dev&#x2F;kvm is not found</h4><p>提示 <code>/dev/kvm is not found</code></p>
<p>解决方法</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install qemu-kvm</span><br><span class="line">sudo kvm-ok</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启电脑，F10(惠普) 进入 BIOS - Security(或者Advanced) - SystemSecurity - Virtualization Thchnology, 启动即可</span></span><br></pre></td></tr></table></figure>

<h4 id="29-Ubuntu-中-AndroidStudio-只识别文件传输模式"><a href="#29-Ubuntu-中-AndroidStudio-只识别文件传输模式" class="headerlink" title="29. Ubuntu 中 AndroidStudio 只识别文件传输模式"></a>29. Ubuntu 中 AndroidStudio 只识别文件传输模式</h4><p>智能识别文件传输模式，仅充电模式无法识别调试，根据如下链接配置 51-android</p>
<p><a href="https://github.com/snowdream/51-android">https://github.com/snowdream/51-android</a></p>
<h4 id="30-Github-不再支持密码验证"><a href="#30-Github-不再支持密码验证" class="headerlink" title="30. Github 不再支持密码验证"></a>30. Github 不再支持密码验证</h4><p>从 2021 年 8 月13 日开始，github 不再支持密码验证</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">remote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead</span><br></pre></td></tr></table></figure>

<p><strong>解决办法</strong></p>
<p>进入 github，右上角 Settings - Developer settings - Personal access tokens - Generate new token, 设置 token 有效期，访问权限等，</p>
<ul>
<li>使用 token 从命令行访问仓库，勾选 repo</li>
<li>使用 token 从命令行删除仓库，勾选 delete_repo</li>
<li>其他按需勾选</li>
</ul>
<p>点击 Generate token 生成令牌，保存好生成的 token，因为只会出现一次。</p>
<p>随后 push 代码的时候把 token 粘贴到 密码的位置，也可以把 token 直接添加到远程仓库链接中，这样就不会每次提交代码都需要输入 token 了：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote set-url origin https://&lt;your_token&gt;@github.com/&lt;USERNAME&gt;/&lt;REPO&gt;.git</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例</span></span><br><span class="line">git remote set-url origin https://ghp_0kMUaJGbjAQ49KGpBNeOy2iCUvafabcdefgh@github.com/username/helloworld.git/</span><br></pre></td></tr></table></figure>

<h4 id="31-adb-无线连接手机"><a href="#31-adb-无线连接手机" class="headerlink" title="31. adb 无线连接手机"></a>31. adb 无线连接手机</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">adb connect 192.168.53.8</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果出现错误 failed to connect to <span class="string">&#x27;192.168.53.8:5555&#x27;</span>: Connection refused</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入开发者选项 - 无线调试 - 使用配对码配对设备，会显示配对码和 IP 地址和端口</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">adb pair 192.168.53.8:AAAA</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">adb connect 192.168.53.8:BBBB <span class="comment"># BBBB 有可能和 AAAA 不同，因为无线调试中的 IP 地址和端口和使用配对码配对设备弹框中的 IP 地址和端口有可能不一样</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">adb tcpip 5555 <span class="comment"># 连上后配置 tcpip，以后连接的时候就不用加上端口号了</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">adb connect 192.168.53.8</span></span><br></pre></td></tr></table></figure>

<h4 id="32-更新-Hexo-后执行-hexo-s-出现异常"><a href="#32-更新-Hexo-后执行-hexo-s-出现异常" class="headerlink" title="32. 更新 Hexo 后执行 hexo s 出现异常"></a>32. 更新 Hexo 后执行 hexo s 出现异常</h4><ul>
<li><p>无法执行 hexo s</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo npm install hexo-server --save</span></span><br></pre></td></tr></table></figure>

<p>安装 hexo-server 即可；</p>
</li>
<li><p>hexo s 后打开 <a href="http://localhost:4000/">http://localhost:4000/</a> 出现 Cannot GET &#x2F;</p>
<p>因为 public 目录没有生成 index.html，使用 <code>sudo npm audit fix</code> 检查需要升级的插件，执行 <code>sudo npm install</code> 即可；</p>
</li>
</ul>
<h4 id="33-Git-换行符问题"><a href="#33-Git-换行符问题" class="headerlink" title="33. Git 换行符问题"></a>33. Git 换行符问题</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提交时转换为 LF，检出时转换为 CRLF（Windows 默认为 <span class="literal">true</span>）</span></span><br><span class="line">git config --global core.autocrlf true</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提交时转换为 LF，检出时不转换</span></span><br><span class="line">git config --global core.autocrlf input</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提交检出均不转换</span></span><br><span class="line">git config --global core.autocrlf false</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拒绝提交包含混合换行符的文件</span></span><br><span class="line">git config --global core.safecrlf true</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">允许提交包含混合换行符的文件</span></span><br><span class="line">git config --global core.safecrlf false</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提交包含混合换行符的文件时给出警告</span></span><br><span class="line">git config --global core.safecrlf warn</span><br></pre></td></tr></table></figure>

<p>如果不想 git 干涉我们的文件换行符格式，则配置 core.autocrlf 为 false；</p>
<h4 id="34-上下文切换"><a href="#34-上下文切换" class="headerlink" title="34. 上下文切换"></a>34. 上下文切换</h4><p><a href="https://shuyi.tech/archives/os-context-switch">https://shuyi.tech/archives/os-context-switch</a></p>
]]></content>
      <categories>
        <category>Others</category>
      </categories>
  </entry>
  <entry>
    <title>淘宝进入后台后网络策略分析(Android进程调度ADJ算法部分内容分析)</title>
    <url>/2017/09/06/Android/TaoBao_HOMEKey_to_Background_Policy/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1 问题描述"></a>1 问题描述</h3><blockquote>
<p>小米项目有一项手机8小时待机功耗测试，同基线的两个项目A和B同条件测试最终待机结果差异过大，A手机8小时耗电为5%，B手机8小时耗电为12%，进一步调查发现B手机主要是淘宝在耗电，而A手机却没有，但是在测试前是都打开了淘宝的。</p>
</blockquote>
<span id="more"></span>

<h3 id="2-初步分析"><a href="#2-初步分析" class="headerlink" title="2 初步分析"></a>2 初步分析</h3><p>首先需要知道为什么同基线同测试环境只有B手机的淘宝耗电，而A手机淘宝却没有耗电，在log中看到A手机的dumpsys netpolicy信息中淘宝的状态为：<code>  UID=10139 state=16 (bg) rules=64 (REJECT_ALL)</code>，B手机netpolicy信息为：<code>  UID=10141 state=3 (fg svc) rules=32 (ALLOW_ALL)</code>，其中REGECT_ALL和ALLOW_ALL指的是访问网络权限，A手机淘宝由于限制了网络访问，所以耗电比B手机要少，继续看log发现，A手机的淘宝进程被Kill，而B手机却没有，也测试了小米5和小米6，同样发现淘宝被Kill，切被Kill的方式各有不同，三部手机淘宝被Kill的方式有3中：</p>
<ul>
<li>lowmemorykiller：android内存管理机制，低内存时会把优先级低的进程kill掉。</li>
<li>PowerKeeper kill：小米功耗优化的功能。</li>
<li>com.miui.whetstone：小米的内存管理机制。</li>
</ul>
<p>正常情况下淘宝在后台会被PowerKeeper限制联网和同步，而处于foreground service优先级不会被限制，所以B手机在淘宝没有被Kill的情况下不会被限制网络，所以耗电的源头已经找到。</p>
<p>那么为什么淘宝的状态会是fg svc呢，这种状态到底是淘宝自身导致还是android代码缺陷还存在疑问，对小米5，小米6，华为平板M3以及一加5均做了同样的测试，测试条件为：安装淘宝-打开-我的淘宝-登陆-HOME键-查看dumpsys netpolicy信息，发现淘宝的状态均为<code>state=3 (fg svc)</code>，初步结论为淘宝自身策略导致，接下来通过代码来进一步跟踪。</p>
<h3 id="3-源码分析"><a href="#3-源码分析" class="headerlink" title="3 源码分析"></a>3 源码分析</h3><p>首先来看这个fg svc是什么东西，</p>
<p>&#x2F;<a href="http://androidxref.com/6.0.1_r10/xref/frameworks/">frameworks</a>&#x2F;<a href="http://androidxref.com/6.0.1_r10/xref/frameworks/base/">base</a>&#x2F;<a href="http://androidxref.com/6.0.1_r10/xref/frameworks/base/services/">services</a>&#x2F;<a href="http://androidxref.com/6.0.1_r10/xref/frameworks/base/services/core/">core</a>&#x2F;<a href="http://androidxref.com/6.0.1_r10/xref/frameworks/base/services/core/java/">java</a>&#x2F;<a href="http://androidxref.com/6.0.1_r10/xref/frameworks/base/services/core/java/com/">com</a>&#x2F;<a href="http://androidxref.com/6.0.1_r10/xref/frameworks/base/services/core/java/com/android/">android</a>&#x2F;<a href="http://androidxref.com/6.0.1_r10/xref/frameworks/base/services/core/java/com/android/server/">server</a>&#x2F;<a href="http://androidxref.com/6.0.1_r10/xref/frameworks/base/services/core/java/com/android/server/net/">net</a>&#x2F;<a href="http://androidxref.com/6.0.1_r10/xref/frameworks/base/services/core/java/com/android/server/net/NetworkPolicyManagerService.java">NetworkPolicyManagerService.java</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">dump</span><span class="params">(FileDescriptor fd, PrintWriter writer, String[] args)</span> &#123;</span><br><span class="line">    mContext.enforceCallingOrSelfPermission(DUMP, TAG);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">IndentingPrintWriter</span> <span class="variable">fout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IndentingPrintWriter</span>(writer, <span class="string">&quot;  &quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> ArraySet&lt;String&gt; argSet = <span class="keyword">new</span> <span class="title class_">ArraySet</span>&lt;String&gt;(args.length);</span><br><span class="line">    <span class="keyword">for</span> (String arg : args) &#123;</span><br><span class="line">        argSet.add(arg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (mUidRulesFirstLock) &#123;</span><br><span class="line">      ... ...</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="type">int</span> <span class="variable">uid</span> <span class="operator">=</span> knownUids.keyAt(i);</span><br><span class="line">                fout.print(<span class="string">&quot;UID=&quot;</span>);</span><br><span class="line">                fout.print(uid);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">final</span> <span class="type">int</span> <span class="variable">state</span> <span class="operator">=</span> mUidState.get(uid, ActivityManager.PROCESS_STATE_CACHED_EMPTY);</span><br><span class="line">                fout.print(<span class="string">&quot; state=&quot;</span>);</span><br><span class="line">                fout.print(state);</span><br><span class="line">                <span class="keyword">if</span> (state &lt;= ActivityManager.PROCESS_STATE_TOP) &#123;</span><br><span class="line">                    fout.print(<span class="string">&quot; (fg)&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    fout.print(state &lt;= ActivityManager.PROCESS_STATE_FOREGROUND_SERVICE</span><br><span class="line">                            ? <span class="string">&quot; (fg svc)&quot;</span> : <span class="string">&quot; (bg)&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">final</span> <span class="type">int</span> <span class="variable">uidRules</span> <span class="operator">=</span> mUidRules.get(uid, RULE_NONE);</span><br><span class="line">                fout.print(<span class="string">&quot; rules=&quot;</span>);</span><br><span class="line">                fout.print(uidRulesToString(uidRules));</span><br><span class="line">                fout.println();</span><br><span class="line">            &#125;</span><br><span class="line">      ... ...</span><br></pre></td></tr></table></figure>

<p>可以看出如果state &lt;&#x3D; ActivityManager.PROCESS_STATE_FOREGROUND_SERVICE，则dumpsys信息输出fg svc，看来重点就是进程的状态了，state是从mUidState中取出来的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Process state of UID changed; if needed, will trigger</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #updateRulesForDataUsageRestrictionsUL(int)&#125; and</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #updateRulesForPowerRestrictionsUL(int)&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">updateUidStateUL</span><span class="params">(<span class="type">int</span> uid, <span class="type">int</span> uidState)</span> &#123;</span><br><span class="line">    Trace.traceBegin(Trace.TRACE_TAG_NETWORK, <span class="string">&quot;updateUidStateUL&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">oldUidState</span> <span class="operator">=</span> mUidState.get(uid, ActivityManager.PROCESS_STATE_CACHED_EMPTY);</span><br><span class="line">        <span class="keyword">if</span> (oldUidState != uidState) &#123;</span><br><span class="line">            <span class="comment">// state changed, push updated rules</span></span><br><span class="line">            mUidState.put(uid, uidState); <span class="comment">// mUidState的put</span></span><br><span class="line">            updateRestrictBackgroundRulesOnUidStatusChangedUL(uid, oldUidState, uidState);</span><br><span class="line">            <span class="keyword">if</span> (isProcStateAllowedWhileIdleOrPowerSaveMode(oldUidState)</span><br><span class="line">                    != isProcStateAllowedWhileIdleOrPowerSaveMode(uidState) ) &#123;</span><br><span class="line">                <span class="keyword">if</span> (isUidIdle(uid)) &#123;</span><br><span class="line">                    updateRuleForAppIdleUL(uid);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (mDeviceIdleMode) &#123;</span><br><span class="line">                    updateRuleForDeviceIdleUL(uid);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (mRestrictPower) &#123;</span><br><span class="line">                    updateRuleForRestrictPowerUL(uid);</span><br><span class="line">                &#125;</span><br><span class="line">                updateRulesForPowerRestrictionsUL(uid);</span><br><span class="line">            &#125;</span><br><span class="line">            updateNetworkStats(uid, isUidStateForegroundUL(uidState));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        Trace.traceEnd(Trace.TRACE_TAG_NETWORK);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查看updateUidStateUL的调用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">private</span> <span class="type">IUidObserver</span> <span class="variable">mUidObserver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IUidObserver</span>.Stub() &#123;</span><br><span class="line">    <span class="meta">@Override</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onUidStateChanged</span><span class="params">(<span class="type">int</span> uid, <span class="type">int</span> procState)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        Trace.traceBegin(Trace.TRACE_TAG_NETWORK, <span class="string">&quot;onUidStateChanged&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (mUidRulesFirstLock) &#123;</span><br><span class="line">                updateUidStateUL(uid, procState);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            Trace.traceEnd(Trace.TRACE_TAG_NETWORK);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">systemReady</span><span class="params">()</span> &#123;</span><br><span class="line">    Trace.traceBegin(Trace.TRACE_TAG_NETWORK, <span class="string">&quot;systemReady&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isBandwidthControlEnabled()) &#123;</span><br><span class="line">            Slog.w(TAG, <span class="string">&quot;bandwidth controls disabled, unable to enforce policy&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mUsageStats = LocalServices.getService(UsageStatsManagerInternal.class);</span><br><span class="line">      ... ...</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mActivityManager.registerUidObserver(mUidObserver,</span><br><span class="line">                    ActivityManager.UID_OBSERVER_PROCSTATE|ActivityManager.UID_OBSERVER_GONE); <span class="comment">// 注册</span></span><br><span class="line">            mNetworkManager.registerObserver(mAlertObserver);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            <span class="comment">// ignored; both services live in system_server</span></span><br><span class="line">        &#125;</span><br><span class="line">      ... ...</span><br></pre></td></tr></table></figure>

<p>在上述代码中会监听UidState的改变，如果有变化则更新mUidState。</p>
<p>&#x2F;<a href="http://androidxref.com/6.0.1_r10/xref/frameworks/">frameworks</a>&#x2F;<a href="http://androidxref.com/6.0.1_r10/xref/frameworks/base/">base</a>&#x2F;<a href="http://androidxref.com/6.0.1_r10/xref/frameworks/base/services/">services</a>&#x2F;<a href="http://androidxref.com/6.0.1_r10/xref/frameworks/base/services/core/">core</a>&#x2F;<a href="http://androidxref.com/6.0.1_r10/xref/frameworks/base/services/core/java/">java</a>&#x2F;<a href="http://androidxref.com/6.0.1_r10/xref/frameworks/base/services/core/java/com/">com</a>&#x2F;<a href="http://androidxref.com/6.0.1_r10/xref/frameworks/base/services/core/java/com/android/">android</a>&#x2F;<a href="http://androidxref.com/6.0.1_r10/xref/frameworks/base/services/core/java/com/android/server/">server</a>&#x2F;<a href="http://androidxref.com/6.0.1_r10/xref/frameworks/base/services/core/java/com/android/server/am/">am</a>&#x2F;<a href="http://androidxref.com/6.0.1_r10/xref/frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java">ActivityManagerService.java</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerUidObserver</span><span class="params">(IUidObserver observer, <span class="type">int</span> which)</span> &#123;</span><br><span class="line">    enforceCallingPermission(android.Manifest.permission.SET_ACTIVITY_WATCHER,</span><br><span class="line">            <span class="string">&quot;registerUidObserver()&quot;</span>);</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">        mUidObservers.register(observer, which); <span class="comment">// 把observer添加到mUidObservers</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&#x2F;<a href="http://androidxref.com/6.0.1_r10/xref/frameworks/">frameworks</a>&#x2F;<a href="http://androidxref.com/6.0.1_r10/xref/frameworks/base/">base</a>&#x2F;<a href="http://androidxref.com/6.0.1_r10/xref/frameworks/base/core/">core</a>&#x2F;<a href="http://androidxref.com/6.0.1_r10/xref/frameworks/base/core/java/">java</a>&#x2F;<a href="http://androidxref.com/6.0.1_r10/xref/frameworks/base/core/java/android/">android</a>&#x2F;<a href="http://androidxref.com/6.0.1_r10/xref/frameworks/base/core/java/android/os/">os</a>&#x2F;<a href="http://androidxref.com/6.0.1_r10/xref/frameworks/base/core/java/android/os/RemoteCallbackList.java">RemoteCallbackList.java</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">register</span><span class="params">(E callback, Object cookie)</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mCallbacks) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mKilled) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">IBinder</span> <span class="variable">binder</span> <span class="operator">=</span> callback.asBinder();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Callback</span> <span class="variable">cb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Callback</span>(callback, cookie);</span><br><span class="line">            binder.linkToDeath(cb, <span class="number">0</span>);</span><br><span class="line">            mCallbacks.put(binder, cb); <span class="comment">// put操作</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来看procState的传入：</p>
<p>&#x2F;<a href="http://androidxref.com/6.0.1_r10/xref/frameworks/">frameworks</a>&#x2F;<a href="http://androidxref.com/6.0.1_r10/xref/frameworks/base/">base</a>&#x2F;<a href="http://androidxref.com/6.0.1_r10/xref/frameworks/base/services/">services</a>&#x2F;<a href="http://androidxref.com/6.0.1_r10/xref/frameworks/base/services/core/">core</a>&#x2F;<a href="http://androidxref.com/6.0.1_r10/xref/frameworks/base/services/core/java/">java</a>&#x2F;<a href="http://androidxref.com/6.0.1_r10/xref/frameworks/base/services/core/java/com/">com</a>&#x2F;<a href="http://androidxref.com/6.0.1_r10/xref/frameworks/base/services/core/java/com/android/">android</a>&#x2F;<a href="http://androidxref.com/6.0.1_r10/xref/frameworks/base/services/core/java/com/android/server/">server</a>&#x2F;<a href="http://androidxref.com/6.0.1_r10/xref/frameworks/base/services/core/java/com/android/server/am/">am</a>&#x2F;<a href="http://androidxref.com/6.0.1_r10/xref/frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java">ActivityManagerService.java</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dispatchUidsChanged</span><span class="params">()</span> &#123;</span><br><span class="line">  ... ...</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> mUidObservers.beginBroadcast();</span><br><span class="line">    <span class="keyword">while</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      ... ...</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> ((which &amp; ActivityManager.UID_OBSERVER_PROCSTATE) != <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (DEBUG_UID_OBSERVERS) Slog.i(TAG_UID_OBSERVERS,</span><br><span class="line">                                    <span class="string">&quot;UID CHANGED uid=&quot;</span> + item.uid</span><br><span class="line">                                            + <span class="string">&quot;: &quot;</span> + item.processState);</span><br><span class="line">                            <span class="comment">// 终于找到了procState的传入源</span></span><br><span class="line">                            observer.onUidStateChanged(item.uid, item.processState);</span><br><span class="line">                        &#125;</span><br><span class="line">      ... ...</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">enqueueUidChangeLocked</span><span class="params">(UidRecord uidRec, <span class="type">int</span> uid, <span class="type">int</span> change)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> UidRecord.ChangeItem pendingChange;</span><br><span class="line">    <span class="keyword">if</span> (uidRec == <span class="literal">null</span> || uidRec.pendingChange == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mPendingUidChanges.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_UID_OBSERVERS) Slog.i(TAG_UID_OBSERVERS,</span><br><span class="line">                    <span class="string">&quot;*** Enqueueing dispatch uid changed!&quot;</span>);</span><br><span class="line">            mUiHandler.obtainMessage(DISPATCH_UIDS_CHANGED_UI_MSG).sendToTarget();</span><br><span class="line">        &#125;</span><br><span class="line">      ... ...</span><br><span class="line">        </span><br><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">UiHandler</span> <span class="keyword">extends</span> <span class="title class_">Handler</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UiHandler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(com.android.server.UiThread.get().getLooper(), <span class="literal">null</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleMessage</span><span class="params">(Message msg)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">            ... ...</span><br><span class="line">        <span class="keyword">case</span> DISPATCH_UIDS_CHANGED_UI_MSG: &#123;</span><br><span class="line">            dispatchUidsChanged(); <span class="comment">// 消息处理，在dispatchUidsChanged中传入了ProcState</span></span><br><span class="line">        &#125; <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而procState实际上也是在ActivityManagerService.java中设置的，接下来看procState的set：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 计算adj，返回计算后RawAdj值，和applyOomAdjLocked一起在updateOomAdjLocked中调用</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">computeOomAdjLocked</span><span class="params">(ProcessRecord app, <span class="type">int</span> cachedAdj, ProcessRecord TOP_APP, <span class="type">boolean</span> doingAll, <span class="type">long</span> now)</span> &#123;</span><br><span class="line">  ... ...</span><br><span class="line">    <span class="comment">// service情况</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">mayBeTop</span> <span class="operator">=</span> <span class="literal">false</span>; <span class="comment">// 是否显示在最顶部</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当adj &gt; 0或schedGroup为后台进程组或procState &gt; 2时执行</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">is</span> <span class="operator">=</span> app.services.size()-<span class="number">1</span>;</span><br><span class="line">            is &gt;= <span class="number">0</span> &amp;&amp; (adj &gt; ProcessList.FOREGROUND_APP_ADJ</span><br><span class="line">                    || schedGroup == ProcessList.SCHED_GROUP_BACKGROUND</span><br><span class="line">                    || procState &gt; ActivityManager.PROCESS_STATE_TOP);</span><br><span class="line">            is--) &#123;</span><br><span class="line">        <span class="type">ServiceRecord</span> <span class="variable">s</span> <span class="operator">=</span> app.services.valueAt(is);</span><br><span class="line">        ... ...</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">conni</span> <span class="operator">=</span> s.connections.size()-<span class="number">1</span>;</span><br><span class="line">                conni &gt;= <span class="number">0</span> &amp;&amp; (adj &gt; ProcessList.FOREGROUND_APP_ADJ</span><br><span class="line">                        || schedGroup == ProcessList.SCHED_GROUP_BACKGROUND</span><br><span class="line">                        || procState &gt; ActivityManager.PROCESS_STATE_TOP);</span><br><span class="line">                conni--) &#123;</span><br><span class="line">            <span class="comment">// 获取service所绑定的connections</span></span><br><span class="line">            ArrayList&lt;ConnectionRecord&gt; clist = s.connections.valueAt(conni);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                    i &lt; clist.size() &amp;&amp; (adj &gt; ProcessList.FOREGROUND_APP_ADJ</span><br><span class="line">                            || schedGroup == ProcessList.SCHED_GROUP_BACKGROUND</span><br><span class="line">                            || procState &gt; ActivityManager.PROCESS_STATE_TOP);</span><br><span class="line">                    i++) &#123;</span><br><span class="line">                <span class="comment">// XXX should compute this based on the max of</span></span><br><span class="line">                <span class="comment">// all connected clients.</span></span><br><span class="line">                <span class="type">ConnectionRecord</span> <span class="variable">cr</span> <span class="operator">=</span> clist.get(i);</span><br><span class="line">                <span class="keyword">if</span> (cr.binding.client == app) &#123;</span><br><span class="line">                    <span class="comment">// Binding to ourself is not interesting.</span></span><br><span class="line">                    <span class="comment">// 当client与当前app同一进程，则continue</span></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> ((cr.flags&amp;Context.BIND_WAIVE_PRIORITY) == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="type">ProcessRecord</span> <span class="variable">client</span> <span class="operator">=</span> cr.binding.client;</span><br><span class="line">                    <span class="comment">// 计算connections所对应的client进程的adj</span></span><br><span class="line">                    <span class="type">int</span> <span class="variable">clientAdj</span> <span class="operator">=</span> computeOomAdjLocked(client, cachedAdj,</span><br><span class="line">                            TOP_APP, doingAll, now);</span><br><span class="line">                    <span class="type">int</span> <span class="variable">clientProcState</span> <span class="operator">=</span> client.curProcState; <span class="comment">// client进程的状态</span></span><br><span class="line">                    ... ...</span><br><span class="line">                    <span class="comment">// 当绑定的是前台进程的情况</span></span><br><span class="line">                    <span class="keyword">if</span> ((cr.flags&amp;Context.BIND_NOT_FOREGROUND) == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="comment">// This will treat important bound services identically to</span></span><br><span class="line">                        <span class="comment">// the top app, which may behave differently than generic</span></span><br><span class="line">                        <span class="comment">// foreground work.</span></span><br><span class="line">                        <span class="keyword">if</span> (client.curSchedGroup &gt; schedGroup) &#123;</span><br><span class="line">                            <span class="keyword">if</span> ((cr.flags&amp;Context.BIND_IMPORTANT) != <span class="number">0</span>) &#123;</span><br><span class="line">                                schedGroup = client.curSchedGroup;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                schedGroup = ProcessList.SCHED_GROUP_DEFAULT;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (clientProcState &lt;= ActivityManager.PROCESS_STATE_TOP) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (clientProcState == ActivityManager.PROCESS_STATE_TOP) &#123;</span><br><span class="line">                                <span class="comment">// Special handling of clients who are in the top state.</span></span><br><span class="line">                                <span class="comment">// We *may* want to consider this process to be in the</span></span><br><span class="line">                                <span class="comment">// top state as well, but only if there is not another</span></span><br><span class="line">                                <span class="comment">// reason for it to be running.  Being on the top is a</span></span><br><span class="line">                                <span class="comment">// special state, meaning you are specifically running</span></span><br><span class="line">                                <span class="comment">// for the current top app.  If the process is already</span></span><br><span class="line">                                <span class="comment">// running in the background for some other reason, it</span></span><br><span class="line">                                <span class="comment">// is more important to continue considering it to be</span></span><br><span class="line">                                <span class="comment">// in the background state.</span></span><br><span class="line">                                <span class="comment">// 当client进程状态为前台时，则设置mayBeTop=true，并设置client进程procState=16</span></span><br><span class="line">                                mayBeTop = <span class="literal">true</span>;</span><br><span class="line">                                clientProcState = ActivityManager.PROCESS_STATE_CACHED_EMPTY;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="comment">// 当client进程状态 &lt; 2的前提下：若绑定前台service，则clientProcState=3；否则clientProcState=6</span></span><br><span class="line">                            ... ...</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    ... ...</span><br></pre></td></tr></table></figure>

<p><code>computeOomAdjLocked</code>是调整进程adj的三大护法之一，也是ADJ算法的核心方法：</p>
<ul>
<li><code>updateOomAdjLocked</code>：更新adj，当目标进程为空，或者被杀则返回false；否则返回true;<ul>
<li><code>computeOomAdjLocked</code>：计算adj，设置adj和procState(进程状态)，返回计算后RawAdj值;</li>
</ul>
</li>
<li><code>applyOomAdjLocked</code>：应用adj，当需要杀掉目标进程则返回false；否则返回true。</li>
</ul>
<p><code>updateOomAdjLocked</code>实现过程中依次会<code>computeOomAdjLocked</code>和<code>applyOomAdjLocked</code>，上面代码中主要是<code>computeOomAdjLocked</code>中的Service处理部分，如果service所绑定的connections所对应的client进程为前台进程，且client进程状态clientProcState &#x3D;&#x3D; ActivityManager.PROCESS_STATE_TOP(值为2)，则设置mayBeTop&#x3D;true。</p>
<p>随后还有对adj的调整：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当mayBeTop为true，且procState &gt; 2时</span></span><br><span class="line"><span class="keyword">if</span> (mayBeTop &amp;&amp; procState &gt; ActivityManager.PROCESS_STATE_TOP) &#123;</span><br><span class="line">    <span class="comment">// A client of one of our services or providers is in the top state.  We</span></span><br><span class="line">    <span class="comment">// *may* want to be in the top state, but not if we are already running in</span></span><br><span class="line">    <span class="comment">// the background for some other reason.  For the decision here, we are going</span></span><br><span class="line">    <span class="comment">// to pick out a few specific states that we want to remain in when a client</span></span><br><span class="line">    <span class="comment">// is top (states that tend to be longer-term) and otherwise allow it to go</span></span><br><span class="line">    <span class="comment">// to the top state.</span></span><br><span class="line">    <span class="keyword">switch</span> (procState) &#123;</span><br><span class="line">        <span class="keyword">case</span> ActivityManager.PROCESS_STATE_IMPORTANT_FOREGROUND:</span><br><span class="line">        <span class="keyword">case</span> ActivityManager.PROCESS_STATE_IMPORTANT_BACKGROUND:</span><br><span class="line">        <span class="keyword">case</span> ActivityManager.PROCESS_STATE_SERVICE:</span><br><span class="line">            <span class="comment">// 对于procState = 6, 7, 10时，将procState设置为3</span></span><br><span class="line">            <span class="comment">// These all are longer-term states, so pull them up to the top</span></span><br><span class="line">            <span class="comment">// of the background states, but not all the way to the top state.</span></span><br><span class="line">            procState = ActivityManager.PROCESS_STATE_BOUND_FOREGROUND_SERVICE;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="comment">// Otherwise, top is a better choice, so take it.</span></span><br><span class="line">            procState = ActivityManager.PROCESS_STATE_TOP;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分析到这里就找到了为什么淘宝进程最后的状态为3了，在调试的过程中发现打开淘宝后会启动一个service：<code>09-05 17:41:27.474  1486 21013 I ActivityManager: Start proc 5692:com.taobao.taobao:channel/u0a198 for service com.taobao.taobao/com.alibaba.analytics.AnalyticsService caller=com.taobao.taobao</code> ，就是这个service在<code>computeOomAdjLocked</code>所绑定的connections所对应的client进程为前台进程，通过在<code>if (cr.binding.client == app)</code>中添加log发现client为ProcessRecord{ffadbcb 21266:com.taobao.taobao&#x2F;u0a88}，app为ProcessRecord{7a416b8 21766:com.taobao.taobao:channel&#x2F;u0a88}，所以出现问题时client为<code>com.taobao.taobao</code>，app为<code>com.taobao.taobao:channel</code>，最终系统把mayBeTop设置为了true，当procState &gt; 2时，就会调整adj，最终把procState为3，而在<code>computeOomAdjLocked</code>的最后，把proState的值赋给了app.curProcState，最终淘宝的state就为3了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">computeOomAdjLocked</span><span class="params">(ProcessRecord app, <span class="type">int</span> cachedAdj, ProcessRecord TOP_APP, <span class="type">boolean</span> doingAll, <span class="type">long</span> now)</span> &#123;</span><br><span class="line">      ... ...</span><br><span class="line">app.curAdj = app.modifyRawOomAdj(adj);</span><br><span class="line">      app.curSchedGroup = schedGroup;</span><br><span class="line">      app.curProcState = procState; <span class="comment">// 此处会把procState赋给app.curProcState</span></span><br><span class="line">      app.foregroundActivities = foregroundActivities;</span><br><span class="line">      <span class="keyword">return</span> app.curRawAdj;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>如果按HOME键的时候这个service还没有启动起来，则不会触发<code>computeOomAdjLocked</code>中把mayBeTop设为true的那段代码，也就不会调整procState了。</p>
<h3 id="4-解决方案"><a href="#4-解决方案" class="headerlink" title="4 解决方案"></a>4 解决方案</h3><p>文中问题应该是淘宝利用Android漏洞故意为之，</p>
<ul>
<li>淘宝启动后，会启动两个进程<code>com.taobao.taobao</code>（UI进程）和<code>com.taobao.taobao:channel</code>（守护进程，也就是service进程）,守护进程是被绑定在淘宝进程，而在这个时候由于淘宝进程是前台进程，所以procState为PROCESS_STATE_TOP，值为2，而这个时候守护进程是后台运行的service，所以procState为PROCESS_STATE_SERVICE，值为10，当这两个条件同时满足的时候会将守护进程的procState设置为PROCESS_STATE_BOUND_FOREGROUND_SERVICE，值为3。</li>
<li>按HOME键退出UI进程，也就是淘宝进程，退出后台后淘宝被cache起来，procState变成了PROCESS_STATE_CACHED_ACTIVITY，值为14，变成了低优先级，正常app都是这个逻辑，但是守护进程的procState并没有因为绑定进程的优先级降低而降低自己的优先级，依然是PROCESS_STATE_BOUND_FOREGROUND_SERVICE，值为3，相反为了保证守护进程能一直在后台运行，在computeOomAdjLocked方法最后将守护进程的procState赋值给UI进程淘宝，这时候淘宝的procState也变为了3，这就是我们看到的因为网络访问策略中淘宝因为procState为3而不限制网络访问。</li>
</ul>
<p>此处对淘宝做了特殊处理：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">... ...</span><br><span class="line"><span class="keyword">if</span> (cr.binding.client == app ||(cr.binding.client.processName.equals(<span class="string">&quot;com.taobao.taobao&quot;</span>) &amp;&amp; app.processName.equals(<span class="string">&quot;com.taobao.taobao:channel&quot;</span>))) &#123;</span><br><span class="line">                        <span class="comment">// Binding to ourself is not interesting.</span></span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">... ...</span><br></pre></td></tr></table></figure>

<p>如此一来淘宝按HOME键之后的状态就变为<code>state=10 (bg)</code>了，后台时会禁止访问网络权限。</p>
<h3 id="5-总结"><a href="#5-总结" class="headerlink" title="5 总结"></a>5 总结</h3><p>单是针对文中问题的分析已经到此结束，终其原因是Android framework层中承载activity&#x2F;service&#x2F;contentprovider&#x2F;broadcastreceiver的进程根据组件运行状态而动态调节进程自身的状态，进程有两个比较重要的状态值adj(ProcessList.java中定义)和procState(ActivityManager.java中定义)，调整进程ADJ算法的核心方法<code>computeOomAdjLocked</code>除了对service的处理外还有对Activity和ContentProvider情况的处理，整个adj算法的分析还没有完全弄懂，此部分内容未完待续。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>netpolicy</tag>
      </tags>
  </entry>
  <entry>
    <title>Android7.0获取通话状态</title>
    <url>/2017/08/31/Android/Get_call_status_On_Android7.0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>有时候有监听童话状态的需求，Android7.0 获取通话状态的方式有如下几种：</p>
</blockquote>
<span id="more"></span>

<h4 id="1-通过phoneStateListener监听电话状态"><a href="#1-通过phoneStateListener监听电话状态" class="headerlink" title="1 通过phoneStateListener监听电话状态"></a>1 通过phoneStateListener监听电话状态</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">TelephonyManager</span> <span class="variable">tm</span> <span class="operator">=</span> (TelephonyManager) mContext.getSystemService(Context.TELEPHONY_SERVICE);</span><br><span class="line"><span class="type">PhoneStateListener</span> <span class="variable">listener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PhoneStateListener</span>()&#123;</span><br><span class="line">    <span class="meta">@java</span>.lang.Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCallStateChanged</span><span class="params">(<span class="type">int</span> state, String incomingNumber)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCallStateChanged(state, incomingNumber);</span><br><span class="line">        <span class="keyword">switch</span> (state) &#123;</span><br><span class="line">            <span class="keyword">case</span> TelephonyManager.CALL_STATE_RINGING:</span><br><span class="line">            <span class="keyword">case</span> TelephonyManager.CALL_STATE_OFFHOOK:</span><br><span class="line">                SystemProperties.set(<span class="string">&quot;sys.thermal.isincall&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">                Slog.d(<span class="string">&quot;zrlog&quot;</span>, <span class="string">&quot;LS-84-sys.thermal.isincall = &quot;</span> + SystemProperties.get(<span class="string">&quot;sys.thermal.isincall&quot;</span>));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> TelephonyManager.CALL_STATE_IDLE:</span><br><span class="line">                SystemProperties.set(<span class="string">&quot;sys.thermal.isincall&quot;</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">                Slog.d(<span class="string">&quot;zrlog&quot;</span>, <span class="string">&quot;LS-89-sys.thermal.isincall = &quot;</span> + SystemProperties.get(<span class="string">&quot;sys.thermal.isincall&quot;</span>));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">tm.listen(listener, PhoneStateListener.LISTEN_CALL_STATE);</span><br></pre></td></tr></table></figure>

<h4 id="2-通过TelecomManager中的接口监听"><a href="#2-通过TelecomManager中的接口监听" class="headerlink" title="2 通过TelecomManager中的接口监听"></a>2 通过TelecomManager中的接口监听</h4><h5 id="2-1-isInCall-函数"><a href="#2-1-isInCall-函数" class="headerlink" title="2.1 isInCall()函数"></a>2.1 isInCall()函数</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns whether there is an ongoing phone call (can be in dialing, ringing, active or holding</span></span><br><span class="line"><span class="comment"> * states).</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Requires permission: &#123;<span class="doctag">@link</span> android.Manifest.permission#READ_PHONE_STATE&#125;</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequiresPermission(android.Manifest.permission.READ_PHONE_STATE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isInCall</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isServiceConnected()) &#123;</span><br><span class="line">            <span class="keyword">return</span> getTelecomService().isInCall(mContext.getOpPackageName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;RemoteException calling isInCall().&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-2-getCallState-函数"><a href="#2-2-getCallState-函数" class="headerlink" title="2.2 getCallState()函数"></a>2.2 getCallState()函数</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns one of the following constants that represents the current state of Telecom:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> TelephonyManager#CALL_STATE_RINGING&#125;</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> TelephonyManager#CALL_STATE_OFFHOOK&#125;</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> TelephonyManager#CALL_STATE_IDLE&#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Note that this API does not require the</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> android.Manifest.permission#READ_PHONE_STATE&#125; permission. This is intentional, to</span></span><br><span class="line"><span class="comment"> * preserve the behavior of &#123;<span class="doctag">@link</span> TelephonyManager#getCallState()&#125;, which also did not require</span></span><br><span class="line"><span class="comment"> * the permission.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@hide</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SystemApi</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCallState</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isServiceConnected()) &#123;</span><br><span class="line">            <span class="keyword">return</span> getTelecomService().getCallState();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">&quot;RemoteException calling getCallState().&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TelephonyManager.CALL_STATE_IDLE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3-通过NotificationManagerServices监听广播"><a href="#3-通过NotificationManagerServices监听广播" class="headerlink" title="3  通过NotificationManagerServices监听广播"></a>3  通过NotificationManagerServices监听广播</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">BroadcastReceiver</span> <span class="variable">mIntentReceiver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BroadcastReceiver</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onReceive</span><span class="params">(Context context, Intent intent)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">action</span> <span class="operator">=</span> intent.getAction();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (action.equals(Intent.ACTION_SCREEN_ON)) &#123; <span class="comment">// 亮屏广播</span></span><br><span class="line">            <span class="comment">// Keep track of screen on/off state, but do not turn off the notification light</span></span><br><span class="line">            <span class="comment">// until user passes through the lock screen or views the notification.</span></span><br><span class="line">            mScreenOn = <span class="literal">true</span>;</span><br><span class="line">            updateNotificationPulse();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (action.equals(Intent.ACTION_SCREEN_OFF)) &#123; <span class="comment">// 灭屏广播</span></span><br><span class="line">            mScreenOn = <span class="literal">false</span>;</span><br><span class="line">            updateNotificationPulse();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (action.equals(TelephonyManager.ACTION_PHONE_STATE_CHANGED)) &#123;</span><br><span class="line">            <span class="comment">// 电话状态变化广播</span></span><br><span class="line">            mInCall = TelephonyManager.EXTRA_STATE_OFFHOOK.equals(intent.getStringExtra(TelephonyManager.EXTRA_STATE));</span><br><span class="line">            updateNotificationPulse();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (action.equals(Intent.ACTION_USER_STOPPED)) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">userHandle</span> <span class="operator">=</span> intent.getIntExtra(Intent.EXTRA_USER_HANDLE, -<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (userHandle &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                cancelAllNotificationsInt(MY_UID, MY_PID, <span class="literal">null</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="literal">true</span>, userHandle,</span><br><span class="line">                        REASON_USER_STOPPED, <span class="literal">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (action.equals(Intent.ACTION_MANAGED_PROFILE_UNAVAILABLE)) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">userHandle</span> <span class="operator">=</span> intent.getIntExtra(Intent.EXTRA_USER_HANDLE, -<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (userHandle &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                cancelAllNotificationsInt(MY_UID, MY_PID, <span class="literal">null</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="literal">true</span>, userHandle,</span><br><span class="line">                        REASON_PROFILE_TURNED_OFF, <span class="literal">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (action.equals(Intent.ACTION_USER_PRESENT)) &#123;</span><br><span class="line">            <span class="comment">// turn off LED when user passes through lock screen</span></span><br><span class="line">            mNotificationLight.turnOff();</span><br><span class="line">            <span class="keyword">if</span> (mStatusBar != <span class="literal">null</span>) &#123;</span><br><span class="line">                mStatusBar.notificationLightOff();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (action.equals(Intent.ACTION_USER_SWITCHED)) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">user</span> <span class="operator">=</span> intent.getIntExtra(Intent.EXTRA_USER_HANDLE, UserHandle.USER_NULL);</span><br><span class="line">            <span class="comment">// reload per-user settings</span></span><br><span class="line">            mSettingsObserver.update(<span class="literal">null</span>);</span><br><span class="line">            mUserProfiles.updateCache(context);</span><br><span class="line">            <span class="comment">// Refresh managed services</span></span><br><span class="line">            mConditionProviders.onUserSwitched(user);</span><br><span class="line">            mListeners.onUserSwitched(user);</span><br><span class="line">            mRankerServices.onUserSwitched(user);</span><br><span class="line">            mZenModeHelper.onUserSwitched(user);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (action.equals(Intent.ACTION_USER_ADDED)) &#123;</span><br><span class="line">            mUserProfiles.updateCache(context);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (action.equals(Intent.ACTION_USER_REMOVED)) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">user</span> <span class="operator">=</span> intent.getIntExtra(Intent.EXTRA_USER_HANDLE, UserHandle.USER_NULL);</span><br><span class="line">            mZenModeHelper.onUserRemoved(user);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (action.equals(Intent.ACTION_USER_UNLOCKED)) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">user</span> <span class="operator">=</span> intent.getIntExtra(Intent.EXTRA_USER_HANDLE, UserHandle.USER_NULL);</span><br><span class="line">            mConditionProviders.onUserUnlocked(user);</span><br><span class="line">            mListeners.onUserUnlocked(user);</span><br><span class="line">            mRankerServices.onUserUnlocked(user);</span><br><span class="line">            mZenModeHelper.onUserUnlocked(user);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (action.equals(CarrierConfigManager.ACTION_CARRIER_CONFIG_CHANGED)) &#123;</span><br><span class="line">            mCarrierConfig = mConfigManager.getConfig();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>电话状态有3种，分别为RINGING、OFFHOOK、IDLE，来电时状态为RINGING，接通时状态为OFFHOOK，挂断后状态为IDLE，去电和去电接通时状态为OFFHOOK，挂断时状态为IDLE。</p>
<p>亮灭屏也可以在此处监听。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>SIM卡信息获取</title>
    <url>/2017/08/15/Android/Get_SIMcard_info/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>这几天帮同事看一个在小米手机电信送测时的需求，要求插卡时上报手机卡的信息，包括CDMAIMSI,LTEIMSI,MANUFACTURE,IMEI, NID, SID, ICCID, BASEID, MACID等等，由于现在大都是双卡双待，所以要获取每一个卡的信息。</p>
</blockquote>
<span id="more"></span>

<p>首先上传源码文件：<a href="http://download.csdn.net/download/guai8023/9934947">CSDN下载</a> （<a href="http://pan.baidu.com/s/1mify6LU">百度网盘</a> 密码: hfvz）</p>
<p>此文记录在获取这些信息时踩过的坑。</p>
<h4 id="1-移动卡获取ICCID不全"><a href="#1-移动卡获取ICCID不全" class="headerlink" title="1. 移动卡获取ICCID不全"></a>1. 移动卡获取ICCID不全</h4><p>移动卡的ICCID获取的信息不全，有的像898600只有6位，有的则是像898600760917有12位，而测试的联通卡和电信卡则获取正常，网上搜索发现有人也遇到这种情况，但是并没有卵用，没有一个人贴出原因和解决方案，只好自力更生跟进源码了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getSimIccid</span><span class="params">(<span class="type">int</span> phoneId)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">iccid</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">Phone</span> <span class="variable">phone</span> <span class="operator">=</span> getPhoneInstance(phoneId);</span><br><span class="line">    <span class="type">int</span>[] subid = SubscriptionManager.getSubId(phoneId);</span><br><span class="line">    Log.d(<span class="string">&quot;RegistrationPairs&quot;</span>, <span class="string">&quot;subid.length = &quot;</span> + subid.length + <span class="string">&quot;, subid[0] = &quot;</span> + subid[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">if</span> (mTelephonyMgr.isMultiSimEnabled()) &#123;</span><br><span class="line">        <span class="comment">//iccid = mTelephonyMgr.getSimSerialNumber(subid[0]); // 这里是源代码获取的方式</span></span><br><span class="line">        <span class="keyword">if</span> (phone != <span class="literal">null</span>) &#123;</span><br><span class="line">            iccid = phone.getFullIccSerialNumber();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        iccid = mTelephonyMgr.getSimSerialNumber();</span><br><span class="line">    &#125;</span><br><span class="line">    Log.d(<span class="string">&quot;RegistrationPairs&quot;</span>, <span class="string">&quot;getSimIccid-phoneId = &quot;</span> + phoneId + <span class="string">&quot;, iccid = &quot;</span> + iccid);</span><br><span class="line">    <span class="keyword">return</span> TextUtils.isEmpty(iccid) ? <span class="string">&quot;&quot;</span> : iccid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是我修复后的代码，原代码是通过<code>iccid = mTelephonyMgr.getSimSerialNumber(subid[0])</code> 获取的，继续看代码：</p>
<p>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/">frameworks</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/">base</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/telephony/">telephony</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/telephony/java/">java</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/telephony/java/android/">android</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/telephony/java/android/telephony/">telephony</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/telephony/java/android/telephony/TelephonyManager.java">TelephonyManager.java</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getSimSerialNumber</span><span class="params">(<span class="type">int</span> subId)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">IPhoneSubInfo</span> <span class="variable">info</span> <span class="operator">=</span> getSubscriberInfo();</span><br><span class="line">        <span class="keyword">if</span> (info == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> info.getIccSerialNumberForSubscriber(subId, mContext.getOpPackageName());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException ex) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NullPointerException ex) &#123;</span><br><span class="line">        <span class="comment">// This could happen before phone restarts due to crashing</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用到PhoneSubInfoController.java中的<code>getIccSerialNumberForSubscriber</code> ，</p>
<p> &#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/">frameworks</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/opt/">opt</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/opt/telephony/">telephony</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/opt/telephony/src/">src</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/opt/telephony/src/java/">java</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/opt/telephony/src/java/com/">com</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/opt/telephony/src/java/com/android/">android</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/opt/telephony/src/java/com/android/internal/">internal</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/opt/telephony/src/java/com/android/internal/telephony/">telephony</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/opt/telephony/src/java/com/android/internal/telephony/PhoneSubInfoController.java">PhoneSubInfoController.java</a> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getIccSerialNumberForSubscriber</span><span class="params">(<span class="type">int</span> subId, String callingPackage)</span> &#123;</span><br><span class="line">    <span class="type">Phone</span> <span class="variable">phone</span> <span class="operator">=</span> getPhone(subId);</span><br><span class="line">    <span class="keyword">if</span> (phone != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!checkReadPhoneState(callingPackage, <span class="string">&quot;getIccSerialNumber&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> phone.getIccSerialNumber();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        loge(<span class="string">&quot;getIccSerialNumber phone is null for Subscription:&quot;</span> + subId);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/">frameworks</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/opt/">opt</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/opt/telephony/">telephony</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/opt/telephony/src/">src</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/opt/telephony/src/java/">java</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/opt/telephony/src/java/com/">com</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/opt/telephony/src/java/com/android/">android</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/opt/telephony/src/java/com/android/internal/">internal</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/opt/telephony/src/java/com/android/internal/telephony/">telephony</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/opt/telephony/src/java/com/android/internal/telephony/Phone.java">Phone.java</a> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Retrieves the serial number of the ICC, if applicable. Returns only the decimal digits before</span></span><br><span class="line"><span class="comment"> * the first hex digit in the ICC ID.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getIccSerialNumber</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">IccRecords</span> <span class="variable">r</span> <span class="operator">=</span> mIccRecords.get();</span><br><span class="line">    <span class="keyword">return</span> (r != <span class="literal">null</span>) ? r.getIccId() : <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同时在Phone.java中发现了另一个方法<code>getFullIccSerialNumber</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Retrieves the full serial number of the ICC (including hex digits), if applicable.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getFullIccSerialNumber</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">IccRecords</span> <span class="variable">r</span> <span class="operator">=</span> mIccRecords.get();</span><br><span class="line">    <span class="keyword">return</span> (r != <span class="literal">null</span>) ? r.getFullIccId() : <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看到这里就惊喜了，注意看注释，<code>getIccSerialNumber</code> 方法<em>Returns only the decimal digits before the first hex digit in the ICC ID</em> ，而<code>getFullIccSerialNumber</code> 是<em>including hex digits</em> ，所以移动卡获取的ICCID不完整是不是因为这个原因呢，经验证确实是这样，测试的移动卡iccid是898600f00917f9000784，只获取到了字母之前的十进制数，获取到12位的也是同理，最终修复方案为通过<code>PhoneFactory.getPhone(phoneId)</code> 获取Phone对象，然后调用Phone对象的<code>getFullIccSerialNumber()</code> 方法获取完整的iccid。</p>
<h4 id="2-有一张卡状态还是无服务时就开始了自注册，导致信息错误"><a href="#2-有一张卡状态还是无服务时就开始了自注册，导致信息错误" class="headerlink" title="2. 有一张卡状态还是无服务时就开始了自注册，导致信息错误"></a>2. 有一张卡状态还是无服务时就开始了自注册，导致信息错误</h4><p>当插入双卡，有一张卡还是无服务的状态时就进行了自注册，导致插卡信息识别错误，后面部分信息就获取错误了，解决方案是在自注册之前判断是否有服务。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isAllSimCardReady</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">numPhones</span> <span class="operator">=</span> mTelephonyManager.getPhoneCount();</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">hasIccCard1</span> <span class="operator">=</span> mTelephonyManager.hasIccCard(SLOT1); <span class="comment">// 判断卡槽1是否有卡</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">hasIccCard2</span> <span class="operator">=</span> mTelephonyManager.hasIccCard(SLOT2); <span class="comment">// 判断卡槽2是否有卡</span></span><br><span class="line">    Log.d(TAG, <span class="string">&quot;RegistrationPairs-numPhones = &quot;</span> + numPhones + <span class="string">&quot;, hasIccCard1 = &quot;</span> + hasIccCard1 + <span class="string">&quot;, hasIccCard2 = &quot;</span> + hasIccCard2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (hasIccCard1 &amp;&amp; hasIccCard2 &amp;&amp; numPhones &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">int</span>[] subId0 = SubscriptionManager.getSubId(<span class="number">0</span>);</span><br><span class="line">        <span class="type">int</span>[] subId1 = SubscriptionManager.getSubId(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">      	<span class="comment">// 判断2个卡槽中的卡是否有服务</span></span><br><span class="line">        <span class="type">ServiceState</span> <span class="variable">ss0</span> <span class="operator">=</span> mTelephonyManager.getServiceStateForSubscriber(subId0[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">ServiceState</span> <span class="variable">ss1</span> <span class="operator">=</span> mTelephonyManager.getServiceStateForSubscriber(subId1[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">simState0</span> <span class="operator">=</span> mTelephonyManager.getSimState(<span class="number">0</span>);<span class="comment">//Ready = 5</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">simState1</span> <span class="operator">=</span> mTelephonyManager.getSimState(<span class="number">1</span>);<span class="comment">//Ready = 5</span></span><br><span class="line"></span><br><span class="line">        Log.d(TAG, <span class="string">&quot;RegistrationPairs-simState0 = &quot;</span> + simState0 + <span class="string">&quot;, simState1 = &quot;</span> + simState1</span><br><span class="line">                + <span class="string">&quot;, ss0.state = &quot;</span> + ss0.getState() + <span class="string">&quot;, ss1.state = &quot;</span> + ss1.getState());</span><br><span class="line">        <span class="keyword">if</span> (simState0 == TelephonyManager.SIM_STATE_READY &amp;&amp; simState1 == TelephonyManager.SIM_STATE_READY</span><br><span class="line">                &amp;&amp; ss0.getState() == ServiceState.STATE_IN_SERVICE &amp;&amp; ss1.getState() == ServiceState.STATE_IN_SERVICE) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>; index &lt; numPhones; index++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">simState</span> <span class="operator">=</span> mTelephonyManager.getSimState(index);<span class="comment">//Ready = 5</span></span><br><span class="line">            <span class="keyword">if</span> (simState == TelephonyManager.SIM_STATE_READY) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>这里要注意的是subId的获取，因为<code>getServiceStateForSubscriber</code> 的参数并不是固定的0和1，而是通过<code>getSubId</code> 获取的，之前坑在这里获取的状态老不对，包括getNetworkType、getDataNetworkType、getVoiceNetworkType这几个方法的参数也是一样。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>Qualcomm Technologies</title>
    <url>/2017/08/07/Android/QualcommTechnologies/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="75d6e5731cb81f933fa5d7bb95787d51d44c9742c03a30c087d137101c70b1d9">8a594f550020b2c4c53139d4c120877c670d47411eb78fc0c4abbfbe587bcfe2cb113c41bfd328c5065f6f2b39026d346a12ba8473dca30b30f240c25870a030489e615608fa9f6e76f98000ee177152e76d6a95c217e988b4d906c34b48bd06c561fecb61502376067f4deb2da17be1dcbae3e86c8e69f0e1e448dfd4040abf79f321fb32109ecc1343fcac9e185e6d4544677b561fc43351e23ea5518574b2139e272c97b707a613cb5296f5b3e348b5c8d88480ff605033b6598baa43b3225d7173fa010cb6f3d7f9524f0af91f4443071921465f954317130cef99ab094885d44414fa40e44effe17f7a3c69c8dbd50e8a7985ceed135d184c0f061dd66cdd5ce7c1470033e87b22bc8db3dfd0e4c4c5869bd579acfdfdad9db03e4d4fb5a835bdd8136c6d9044da70436e717515f7fc8d3e429fa93d79d3fe25f5fb299d2b359962f73c867425b88a4462abcfa03f8d23f59a803ce6c3702241c5d367e25281eacb161c23ae0cda3ac5672f7486520fe793eed28a851e120f3f4ec57aef1b28e11b41741914358d166bccde764eefa2fbabf4d3e860b575837a82e2d23fb230eb3b7acf09712813c63eb6187cfde98952b5c13a8f2b6ae17803ac85d3d9756428d8e1b62505c97b88427a694f2d3b09b9239ae0f96f529c954490f7be8d98934d52cdcab452c863c86f9a2ec96fb9df7a68e7c89313ffc0d8d203f9ca0d7628bd205276669839cd8c5986952e6f1dce8a00117a2f6f2186df13fdd75bd230971528309c6b9402ddbd3f9c75914dfd80cac95371c6f1571841ad42d5e15544ac0c05f9e0d0d05daee14aa3e8f7c9536ed5f41cf590613cd5397e8d10bddc14aea2dae87f2be0818ea195bc87e18de477a8e034736adaaa7cb5649917d54519ffaeebc4ed8a963b58ba664c4a9b8c039a9100807f02f245aceace42aa3b23f397bba5ecfd8f7a240b7ff34f95f97c60af9de02d832d9537d4655968df1365531d3a3f78f5455fd5d039e128e6f734fd8d88e590fbf120f24c15284f46bfa1361cfe4bc1d82cdbba2fecb9efe28b1574269f2b5f5b3b2add52bd952467adf770388f5e6edd7ad6caccba3b9ab4150706da9c17b034e5bc972bc430bf72e3a068e024fcb1abe5a57ad6aab3e51935dcc9792129f178baa949750145dd345f38ac7e635f570db64ad4dbf951d0d207cb83eac00c4e3c404ea99fa9a5535c9a581e97b89d6b008aa6ca8e94ce75fbb7cc80f2b366a592345778306b6117ce11bab22eb1ff6903bb58fbb97d2cd8a3c64a433817000852efae5e44c68ec240870cd8f8f4df8bc1e07c36753138b4d88b4273a60475f9e18fa28c02d67368f5302f97b98b2257dfe2b968291e06f21cdeba90fc30bd536579e385f9cb2d07681fa972f2470f4645a41e341db3f0cd872a547f63e6fb8fe681658feaef56758f8d3e9638cb977d542e7885fb81198b36b18d61ac20907b8aaf144e32c84f98b558dacf7df6a8a535c7052a79cd63b448e4be54f7cc620c1da2bef0dfef6622d8687b59491693ff19db93ba338a4cbe4524bdc09d6a768cc6d627b4eda6bc5f0b314b698e063e47f4b2d423d0afaa1bf3d21db026b6dd433c509f2b09f462ea1072d1347ab8b4813183b87afcd94d668f683058066c6328a7d75a1df89ddf7bf39c35fcde458842bf5ae1aff47d86e9ed86873deac206cb25ff8232221c877c1ba6facdefcb2961ad106481b679ead93575d6907bceeedb0b4f5e49d73b83044a82607bbf9f8d8168cada2a356e69cff57e2f3efbf7e15412f25da708165e14cd754cec135935235bb3a743a41cfd809b032098cbe5b5547eb36d96bc12b34c94a26cff5b98daeede7473590b65d4115e8d63160f9d5617b778ef2785426cf378fe239dbe7b0d4ec5ce100a187c6bd86f67a446b1dd5c4f04f9f3eac0b54326abd8f594d5acd700d8d9a78895803d5c1e8d174610be480222d3a41750dd37163e99ef3400b5fc46451d3d38abbacfbdc065a8a0b7bef3e85a12163f398d0f88f2a8dbab67ff40291b90d0d61582f4e72ae5a07fe917dd0d7c97908e1105e6d795493b793748928131a58b8526f8c1250690736605c5d6220e80001c1e66844bc1411bc143ac79cf90674c0280920d5425d55e75f21594e58e580886e1015efb6fdace8830d97700eb1b0d318e0acfce1c770483a88f65b5b1b85124c78baff61cdc9cfa83f647ab0a2ea95ed8a698a01e7872ff371de8f708a705675c638bc70018257f269e9a88213bb8caa5a801f6068e3847d8b43d70372cf6484694e4de64bb1c97f0ac65256fcc1661e300c67146c76fe64f347ac373280fa4900def6436a9471c8334a793be4c9a45119ab14873d7ae6e309592ce0953f44dd7883bc2c0b2f71eca654230dbafa1587a366ac294d8112dbcaf68141e67b1487b0b291db2e22139f4b3e1883d3434038616778e96a47f9e9bf84daa5bb09eea8fc6714c3d8b45c3af28986ee273d3607b9c870d2a25e06cfdda04895f58afeb92dfe71e2980821135a78847af970517342d9c8c58f1a1f14a03c4e1ddf273ff40ce691e2d5e5ba8327938c1b10b008f1250e6b5800e5632d55b5d5bec475f47859dcc3d8b9c6eb8ed4804c6640d80e4f6acfa5bc5b1fb2bf1c1a58abf99007c12e8986e5e3f3e5ac70297d4724a61f5fecf1bb2d0ae6083bef8051ffa83ba4a3e4b65844fed0575f1ccbd1d919de35966888b1a6716e6e1edc9d16f70f9c8664c0d2e0c4988736c27e91a3d3e3632b368beee7282097a8828be583e5f88d174d9f8df97112d1bcd5b16b0e47028993c57dfe8d8b3f1e17f8837f1c6b4c37d53f3584fa9802da5d7c5525aeacdb1b6021463f5b16b17ad</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>获取目录及子目录中指定信息到excel</title>
    <url>/2017/08/05/Python/CatchSpecificedInfoToExcel/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>随手帮同学写了个脚本实现个简单的功能，在指定目录已经子目录中所有文件中获取指定信息输出到Excel，代码如下：</p>
</blockquote>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*- coding: UTF-8 -*- </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> fnmatch</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fnmatch_filter_demo</span>(<span class="params">path,pattern</span>):</span><br><span class="line">        writefile = <span class="string">r&#x27;D:\\debug\\test\\test.xls&#x27;</span></span><br><span class="line">        wb = xlwt.Workbook()</span><br><span class="line">        ws = wb.add_sheet(<span class="string">&#x27;Sheet Test&#x27;</span>)</span><br><span class="line">        wb.save(writefile)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取目录及子目录文件</span></span><br><span class="line">        <span class="keyword">for</span> path,<span class="built_in">dir</span>,filelist <span class="keyword">in</span> os.walk(path):</span><br><span class="line">            <span class="keyword">for</span> name <span class="keyword">in</span> fnmatch.<span class="built_in">filter</span>(filelist,pattern):</span><br><span class="line">                child = os.path.join(path,name)</span><br><span class="line">                fread=<span class="built_in">open</span>(child, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 获取当前Excel行数</span></span><br><span class="line">                data = xlrd.open_workbook(writefile)</span><br><span class="line">                sh = data.sheet_by_name(<span class="string">u&quot;Sheet Test&quot;</span>)</span><br><span class="line">                nrows = sh.nrows</span><br><span class="line">                <span class="comment"># print(nrows) # 打印当前Excel行数</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 把关键字所在行写入到Excel</span></span><br><span class="line">                <span class="keyword">for</span> eachLine <span class="keyword">in</span> fread:</span><br><span class="line">                    <span class="keyword">if</span> <span class="string">&#x27;开始&#x27;</span> <span class="keyword">in</span> eachLine:</span><br><span class="line">                        ws.write(nrows, <span class="number">0</span>, child)</span><br><span class="line">                        ws.write(nrows, <span class="number">1</span>, eachLine)</span><br><span class="line">                        wb.save(writefile)</span><br><span class="line">                    <span class="keyword">if</span> <span class="string">&#x27;结束&#x27;</span> <span class="keyword">in</span> eachLine:</span><br><span class="line">                        ws.write(nrows, <span class="number">2</span>, eachLine)</span><br><span class="line">                        wb.save(writefile)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    fnmatch_filter_demo(<span class="string">&quot;D:\\debug\\test\\&quot;</span>,<span class="string">&quot;*txt*&quot;</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">#其他截取操作</span></span><br><span class="line"><span class="comment">#str = ’0123456789′</span></span><br><span class="line"><span class="comment">#print str[0:3] #截取第一位到第三位的字符</span></span><br><span class="line"><span class="comment">#print str[:] #截取字符串的全部字符</span></span><br><span class="line"><span class="comment">#print str[6:] #截取第七个字符到结尾</span></span><br><span class="line"><span class="comment">#print str[:-3] #截取从头开始到倒数第三个字符之前</span></span><br><span class="line"><span class="comment">#print str[2] #截取第三个字符</span></span><br><span class="line"><span class="comment">#print str[-1] #截取倒数第一个字符</span></span><br><span class="line"><span class="comment">#print str[::-1] #创造一个与原字符串顺序相反的字符串</span></span><br><span class="line"><span class="comment">#print str[-3:-1] #截取倒数第三位与倒数第一位之前的字符</span></span><br><span class="line"><span class="comment">#print str[-3:] #截取倒数第三位到结尾</span></span><br><span class="line"><span class="comment">#print str[:-5:-3] #逆序截取，具体啥意思没搞明白？</span></span><br><span class="line"><span class="comment">#pip install xlutils</span></span><br><span class="line"><span class="comment">#pip install xlrd</span></span><br><span class="line"><span class="comment">#pip install xlwt</span></span><br><span class="line"><span class="comment">#pip install </span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>Android内存分析常用命令</title>
    <url>/2017/08/04/Android/Android_commands_for_mem_analysis/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><h3 id="1-1-内存指标"><a href="#1-1-内存指标" class="headerlink" title="1.1 内存指标"></a>1.1 内存指标</h3><span id="more"></span>

<table>
<thead>
<tr>
<th>简称</th>
<th>全称</th>
<th>含义</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>USS</td>
<td>Unique Set Size</td>
<td>进程独自占用的物理内存</td>
<td>不包含共享库占用的内存</td>
</tr>
<tr>
<td>PSS</td>
<td>Proportional Set Size</td>
<td>实际使用物理内存</td>
<td>PSS &#x3D; USS + 按比例包含共享库</td>
</tr>
<tr>
<td>RSS</td>
<td>Resident Set Size</td>
<td>实际使用物理内存</td>
<td>RSS &#x3D; USS + 包含共享库</td>
</tr>
<tr>
<td>VSS</td>
<td>Virtual Set Size</td>
<td>虚拟耗用内存</td>
<td>VSS &#x3D; RSS + 未分配实际物理内存</td>
</tr>
</tbody></table>
<p>内存的大小关系：VSS &gt;&#x3D; RSS &gt;&#x3D; PSS &gt;&#x3D; USS</p>
<h3 id="1-2-常用内存分析命令"><a href="#1-2-常用内存分析命令" class="headerlink" title="1.2 常用内存分析命令"></a>1.2 常用内存分析命令</h3><ul>
<li>dumpsys meminfo</li>
<li>procrank</li>
<li>cat &#x2F;proc&#x2F;meminfo</li>
<li>free</li>
<li>vmstat</li>
</ul>
<h2 id="2-命令介绍"><a href="#2-命令介绍" class="headerlink" title="2. 命令介绍"></a>2. 命令介绍</h2><h3 id="2-1-dumpsys-meminfo"><a href="#2-1-dumpsys-meminfo" class="headerlink" title="2.1 dumpsys meminfo"></a>2.1 dumpsys meminfo</h3><p>示例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root:/ $ dumpsys meminfo</span><br><span class="line">Applications Memory Usage (in Kilobytes):</span><br><span class="line">Uptime: 180509595 Realtime: 360504278</span><br><span class="line"></span><br><span class="line">Total PSS by process:// 以process划分</span><br><span class="line">    275,490K: com.tencent.mm (pid 22794 / activities)</span><br><span class="line">    232,706K: com.ss.android.article.news (pid 31871 / activities)</span><br><span class="line">    193,179K: system (pid 1490)</span><br><span class="line">    127,019K: com.android.systemui (pid 2244)</span><br><span class="line">     ... ...</span><br><span class="line">        235K: debuggerd:signaller (pid 421)</span><br><span class="line"></span><br><span class="line">Total PSS by OOM adjustment:// 以oom划分，详细列举所有类别的进程</span><br><span class="line">    235,668K: Native</span><br><span class="line">         33,549K: surfaceflinger (pid 510)</span><br><span class="line">         30,780K: mm-qcamera-daemon (pid 721)</span><br><span class="line">         26,520K: logd (pid 407)</span><br><span class="line">         24,593K: cameraserver (pid 691)</span><br><span class="line">         16,488K: audioserver (pid 690)</span><br><span class="line">          6,543K: rild (pid 700)</span><br><span class="line">          ... ...</span><br><span class="line">            302K: debuggerd64:signaller (pid 420)</span><br><span class="line">            242K: debuggerd (pid 416)</span><br><span class="line">            235K: debuggerd:signaller (pid 421)</span><br><span class="line">    451,182K: Persistent</span><br><span class="line">        193,179K: system (pid 1490)</span><br><span class="line">        127,019K: com.android.systemui (pid 2244)</span><br><span class="line">         39,451K: com.android.phone (pid 2433)</span><br><span class="line">         ... ...</span><br><span class="line">          3,835K: com.goodix.fingerprint (pid 2949)</span><br><span class="line">    280,636K: Foreground</span><br><span class="line">        232,706K: com.ss.android.article.news (pid 31871 / activities)</span><br><span class="line">         28,921K: com.miui.securitycenter.remote (pid 2866)</span><br><span class="line">         19,009K: android.process.media (pid 5923)</span><br><span class="line">    152,230K: Visible</span><br><span class="line">         28,030K: com.miui.powerkeeper:service (pid 3127)</span><br><span class="line">         25,210K: com.miui.analytics (pid 17193)</span><br><span class="line">         ... ...</span><br><span class="line">          3,868K: com.android.smspush (pid 18933)</span><br><span class="line">    158,454K: Perceptible</span><br><span class="line">         78,495K: com.miui.home (pid 14217 / activities)</span><br><span class="line">         52,592K: com.iflytek.inputmethod (pid 3767)</span><br><span class="line">         15,101K: com.lbe.security.miui (pid 29341)</span><br><span class="line">         12,266K: com.iflytek.inputmethod.assist (pid 3826)</span><br><span class="line">    352,286K: Backup</span><br><span class="line">        275,490K: com.tencent.mm (pid 22794 / activities)</span><br><span class="line">         76,796K: com.tencent.mm (pid 17995 / activities)</span><br><span class="line">    151,358K: A Services</span><br><span class="line">        105,572K: com.tencent.mobileqq (pid 4675)</span><br><span class="line">         24,515K: com.tencent.mobileqq:MSF (pid 17397)</span><br><span class="line">         21,271K: com.tencent.mm:push (pid 31932)</span><br><span class="line">     24,835K: Previous</span><br><span class="line">         24,835K: com.tencent.mm:support (pid 16594)</span><br><span class="line">    168,128K: B Services</span><br><span class="line">         54,639K: com.netease.cloudmusic (pid 6644 / activities)</span><br><span class="line">         23,475K: com.tencent.mm:push (pid 8805)</span><br><span class="line">         ... ...</span><br><span class="line">         23,439K: com.android.email (pid 23126)</span><br><span class="line">    236,648K: Cached</span><br><span class="line">         47,188K: com.android.incallui (pid 4259)</span><br><span class="line">         28,853K: com.tencent.mm:support (pid 16231)</span><br><span class="line">         ... ...</span><br><span class="line">          4,288K: com.miui.systemAdSolution:remote (pid 27446)</span><br><span class="line"></span><br><span class="line">Total PSS by category:// 以category划分</span><br><span class="line">    501,434K: Dalvik</span><br><span class="line">    394,423K: Native</span><br><span class="line">    ... ...</span><br><span class="line">         68K: .jar mmap</span><br><span class="line">          0K: Cursor</span><br><span class="line">          0K: Other mtrack</span><br><span class="line">// 整体情况</span><br><span class="line">Total RAM: 2,912,956K (status normal)</span><br><span class="line"> Free RAM:   696,100K (  236,648K cached pss +   438,916K cached kernel +    20,536K free)</span><br><span class="line"> Used RAM: 2,320,061K (1,974,777K used pss +   345,284K kernel)</span><br><span class="line"> Lost RAM:    40,646K</span><br><span class="line">     ZRAM:   155,624K physical used for   458,356K in swap (1,048,572K total swap)</span><br><span class="line">   Tuning: 192 (large 512), oom   322,560K, restore limit   107,520K (high-end-gfx)</span><br></pre></td></tr></table></figure>

<p><code>dumpsys meminfo</code>输出结果分为4部分：</p>
<ul>
<li>PSS by process: 以进程的PSS从大到小一次排序显示，每行显示一个进程</li>
<li>PSS by OOM adjustment: 分别显示每类的进程情况</li>
<li>PSS by category: 各类进程的总PSS请客</li>
<li>Total: 总内存、剩余内存、已用内存、其他</li>
</ul>
<p>也可输出单个pid或者package的进程信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dumpsys meminfo 17995 // 输出进程17995的信息</span><br><span class="line">dumpsys memifno --package com.tencent.mm // 输出微信的进程，可能包含多个进程</span><br></pre></td></tr></table></figure>

<h3 id="2-2-procrank"><a href="#2-2-procrank" class="headerlink" title="2.2 procrank"></a>2.2 procrank</h3><p><code>procrank</code>命令可以获取所有进程的内存使用的排行榜，排行是按照Pss的大小排序，相比<code>dumpsys meminfo</code>命令，能输出更详细的VSS&#x2F;RSS&#x2F;PSS&#x2F;USS内存指标。由于所用手机被精简，不再上例子。</p>
<h3 id="2-3-cat-x2F-proc-x2F-meminfo"><a href="#2-3-cat-x2F-proc-x2F-meminfo" class="headerlink" title="2.3 cat &#x2F;proc&#x2F;meminfo"></a>2.3 cat &#x2F;proc&#x2F;meminfo</h3><p>示例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root:/ # cat proc/meminfo</span><br><span class="line">MemTotal:        2912956 kB	// RAM可用总大小（物理总内存减去系统须留和内核二进制代码大小）</span><br><span class="line">MemFree:           37836 kB	// RAM未使用的大小</span><br><span class="line">MemAvailable:    1306036 kB	// 可用RAM（这个和MemFree什么区别？已在下方解答）</span><br><span class="line">Buffers:           90524 kB	// 用于文件缓存</span><br><span class="line">Cached:          1299636 kB	// 用于高速缓存</span><br><span class="line">SwapCached:            4 kB	// 用于swap缓存</span><br><span class="line">Active:          1170284 kB	// 活跃使用状态，记录最近使用过的内存，通常不回收用于其他目的</span><br><span class="line">Inactive:        1118896 kB	// 非活跃使用状态，记录最近并没有使用过的内存，能够被回收用于其他目的</span><br><span class="line">Active(anon):     539472 kB	// Active = Active(anon) + Active(file)</span><br><span class="line">Inactive(anon):   509116 kB	// Inactive = Inactive(anon) + Inactive(file)</span><br><span class="line">Active(file):     630812 kB</span><br><span class="line">Inactive(file):   609780 kB</span><br><span class="line">Unevictable:      145712 kB</span><br><span class="line">Mlocked:          145756 kB</span><br><span class="line">SwapTotal:       1048572 kB	// swap总大小</span><br><span class="line">SwapFree:        1042296 kB	// swap可用大小</span><br><span class="line">Dirty:                76 kB	// 等待往磁盘回写的大小</span><br><span class="line">Writeback:             0 kB	// 正在往磁盘回写的大小</span><br><span class="line">AnonPages:       1044784 kB	// 匿名页，用户控件的页表，没有对应的文件</span><br><span class="line">Mapped:           636296 kB	// 文件通过mmap分配的内存，用于map设备、文件或者库</span><br><span class="line">Shmem:              4136 kB</span><br><span class="line">Slab:             190232 kB	// kernel数据结构的缓存大小，Slab=SReclaimable+SUnreclaim</span><br><span class="line">SReclaimable:      84044 kB	// 可回收的slab的大小</span><br><span class="line">SUnreclaim:       106188 kB	// 不可回收slab的大小</span><br><span class="line">KernelStack:       39904 kB</span><br><span class="line">PageTables:        45688 kB	// 以最低的页表级</span><br><span class="line">NFS_Unstable:          0 kB	// 不稳定页表的大小</span><br><span class="line">Bounce:                0 kB</span><br><span class="line">WritebackTmp:          0 kB</span><br><span class="line">CommitLimit:     2505048 kB</span><br><span class="line">Committed_AS:   81745600 kB	// 评估完成的工作量，代表最糟糕case下的值，该值也包含swap内存</span><br><span class="line">VmallocTotal:   258998208 kB // 总分配的虚拟地址空间</span><br><span class="line">VmallocUsed:      183136 kB	// 已使用的虚拟地址空间</span><br><span class="line">VmallocChunk:   258733028 kB // 虚拟地址空间可用的最大连续内存块</span><br></pre></td></tr></table></figure>

<p>之前没弄明白 MemFree 和 MemAvailable 的区别，今天有空顺手查了查，总结如下：</p>
<ul>
<li>MemTotal: 内存总数，除去内核等使用的，剩下的可供系统支配的内存。</li>
<li>MemFree: 空闲内存数，表示系统尚未使用的内存。MemUsed&#x3D;MemTotal-MemFree就是已被用掉的内存</li>
<li>MemAvailable: 应用程序可用内存数，系统中有些内存虽然已被使用但是可以回收的，比如cache&#x2F;buffer、slab都有一部分可以回收，所以MemFree不能代表全部可用的内存，这部分可回收的内存加上MemFree才是系统可用的内存，即：<strong>MemAvailable≈MemFree+Buffers+Cached</strong>，它是内核使用特定的算法计算出来的，是一个估计值。<strong>与MemFree的关键区别点在于，MemFree是说的系统层面，MemAvailable是说的应用程序层面</strong>。</li>
<li>Buffers: 缓冲区内存数。</li>
<li>Cache: 缓存区内存数。</li>
</ul>
<h3 id="2-4-free"><a href="#2-4-free" class="headerlink" title="2.4 free"></a>2.4 free</h3><p>示例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root:/ # free</span><br><span class="line">                total        used        free      shared     buffers</span><br><span class="line">Mem:       2982866944  2928361472    54505472     4001792    96804864</span><br><span class="line">-/+ buffers/cache:     2831556608   151310336</span><br><span class="line">Swap:      1073737728     8151040  1065586688</span><br></pre></td></tr></table></figure>

<p><code>free</code> 比较简单轻量，用于查看可用内存，缺省单位KB，专注于查看剩余内存情况，数据来源于&#x2F;proc&#x2F;meminfo。</p>
<ul>
<li><strong>OS Mem</strong>：total &#x3D; used + free;</li>
<li><strong>buffers&#x2F;cache</strong>：used &#x3D; used(Mem) - buffers(Mem);</li>
<li><strong>buffers&#x2F;cache</strong>：free &#x3D; free(Mem) + buffers(Mem);</li>
<li><strong>buffers&#x2F;cache</strong>：total &#x3D; buffers&#x2F;cache used + buffers&#x2F;cache free &#x3D; <strong>OS Mem total</strong></li>
</ul>
<h3 id="2-5-vmstat"><a href="#2-5-vmstat" class="headerlink" title="2.5 vmstat"></a>2.5 vmstat</h3><p><code>vmstat</code>命令不仅可以查看内存情况，还可以查看进程运行队列、系统切换、CPU时间占比等情况，而且是周期性的动态输出。</p>
<p>示例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root:/ # vmstat</span><br><span class="line">procs -----------memory---------- ---swap-- -----io---- -system-- ----cpu----</span><br><span class="line"> r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa</span><br><span class="line"> 5  0   7960 166124  96660 1286732   1    1   331    46    0  269  3  2 94  0</span><br></pre></td></tr></table></figure>

<p>参数列总共15个参数，分为4大类：</p>
<ul>
<li>procs(进程)<ul>
<li>r: Running队列中进程数量</li>
<li>b: IO wait的进程数量</li>
</ul>
</li>
<li>memory(内存)<ul>
<li>free: 可用内存大小</li>
<li>mapped：mmap映射的内存大小</li>
<li>anon: 匿名内存大小</li>
<li>slab: slab的内存大小</li>
</ul>
</li>
<li>system(系统)<ul>
<li>in: 每秒的中断次数(包括时钟中断)</li>
<li>cs: 每秒上下文切换的次数</li>
</ul>
</li>
<li>cpu(处理器)<ul>
<li>us: user time</li>
<li>ni: nice time</li>
<li>sy: system time</li>
<li>id: idle time</li>
<li>wa: iowait time</li>
<li>ir: interrupt time</li>
</ul>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li><code>dumpsys meminfo</code>适用场景： 查看进程的oom adj，或者dalvik&#x2F;native等区域内存情况，或者某个进程或apk的内存情况，功能非常强大；</li>
<li><code>procrank</code>适用场景： 查看进程的VSS&#x2F;RSS&#x2F;PSS&#x2F;USS各个内存指标；</li>
<li><code>cat /proc/meminfo</code>适用场景： 查看系统的详尽内存信息，包含内核情况；</li>
<li><code>free</code>适用场景： 只查看系统的可用内存；</li>
<li><code>vmstat</code>适用场景： 周期性地打印出进程运行队列、系统切换、CPU时间占比等情况；</li>
</ol>
<blockquote>
<p>本文参考了<a href="http://gityuan.com/">Gityuan</a>博客，在此表示感谢。</p>
</blockquote>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>Hexo博客注意事项</title>
    <url>/2017/07/27/Hexo/Hexo_blog_notes/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="1-解决fs-SyncWriteStream报错问题"><a href="#1-解决fs-SyncWriteStream报错问题" class="headerlink" title="1. 解决fs.SyncWriteStream报错问题"></a>1. 解决fs.SyncWriteStream报错问题</h4><blockquote>
<p>在执行hexo命令的时候，总会显示如下报错：</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">(node:<span class="number">7048</span>) [<span class="type">DEP0061</span>] DeprecationWarning: fs.SyncWriteStream is deprecated.</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>从报错信息来看是因为fs.SyncWriteStream is deprecated，node.js从8.0开始已经弃用了fs.SyncWriteStream方法，所以是因为我们node_modules中某个插件调用了这个方法，通过查看Hexo作者GitHub对应的项目，在issue中看到有人提到<a href="https://github.com/hexojs/hexo/issues/2598">这个问题</a>，在hexo项目中其中有一个hexo-fs的插件调用了这个方法，所以需要更新hexo-fs插件，更新方法如下：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install hexo<span class="literal">-fs</span> <span class="literal">--save</span></span><br></pre></td></tr></table></figure>

<p>更新插件后问题解决。</p>
<p>但是不知道怎么回事，后面又出现了这个报错，而且更新插件也不管用了，强迫症忍不了啊，网上查了很久都找不到解决方法，终于自食其力，hexo命令有个–debug参数，我们在运行hexo命令的时候添加上这个参数，就能知道在哪里报的错误，如此就能定位问题所在，例如：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> hexo clean <span class="literal">--debug</span>                                                                    </span><br><span class="line"><span class="number">02</span>:<span class="number">35</span>:<span class="number">27.359</span> DEBUG Hexo version: <span class="number">3.3</span>.<span class="number">8</span>                                                  </span><br><span class="line"><span class="number">02</span>:<span class="number">35</span>:<span class="number">27.362</span> DEBUG Working directory: E:\github\blog\                                   </span><br><span class="line"><span class="number">02</span>:<span class="number">35</span>:<span class="number">27.502</span> DEBUG Config loaded: E:\github\blog\_config.yml                            </span><br><span class="line"><span class="number">02</span>:<span class="number">35</span>:<span class="number">27.531</span> DEBUG Plugin loaded: hexo<span class="literal">-generator-archive</span>                                </span><br><span class="line"><span class="number">02</span>:<span class="number">35</span>:<span class="number">27.534</span> DEBUG Plugin loaded: hexo<span class="literal">-generator-category</span>                               </span><br><span class="line"><span class="number">02</span>:<span class="number">35</span>:<span class="number">27.542</span> DEBUG Plugin loaded: hexo<span class="literal">-generator-feed</span>                                   </span><br><span class="line"><span class="number">02</span>:<span class="number">35</span>:<span class="number">27.550</span> DEBUG Plugin loaded: hexo<span class="literal">-generator-baidu-sitemap</span>                          </span><br><span class="line"><span class="number">02</span>:<span class="number">35</span>:<span class="number">27.554</span> DEBUG Plugin loaded: hexo<span class="literal">-generator-index</span>                                  </span><br><span class="line"><span class="number">02</span>:<span class="number">35</span>:<span class="number">27.582</span> DEBUG Plugin loaded: hexo<span class="literal">-deployer-git</span>                                     </span><br><span class="line">(node:<span class="number">5760</span>) [<span class="type">DEP0061</span>] DeprecationWarning: fs.SyncWriteStream is deprecated.             </span><br><span class="line"><span class="number">02</span>:<span class="number">35</span>:<span class="number">27.593</span> DEBUG Plugin loaded: hexo<span class="literal">-generator-searchdb</span>                               </span><br><span class="line"><span class="number">02</span>:<span class="number">35</span>:<span class="number">27.597</span> DEBUG Plugin loaded: hexo<span class="literal">-generator-sitemap</span>                                </span><br><span class="line"><span class="number">02</span>:<span class="number">35</span>:<span class="number">27.603</span> DEBUG Plugin loaded: hexo<span class="literal">-fs</span>                                               </span><br><span class="line"><span class="number">02</span>:<span class="number">35</span>:<span class="number">27.608</span> DEBUG Plugin loaded: hexo<span class="literal">-renderer-ejs</span>                                     </span><br><span class="line"><span class="number">02</span>:<span class="number">35</span>:<span class="number">27.616</span> DEBUG Plugin loaded: hexo<span class="literal">-renderer-marked</span>                                  </span><br><span class="line"><span class="number">02</span>:<span class="number">35</span>:<span class="number">27.697</span> DEBUG Plugin loaded: hexo<span class="literal">-renderer-less</span>                                    </span><br><span class="line"><span class="number">02</span>:<span class="number">35</span>:<span class="number">27.700</span> DEBUG Plugin loaded: hexo<span class="literal">-renderer-stylus</span>                                  </span><br><span class="line"><span class="number">02</span>:<span class="number">35</span>:<span class="number">27.775</span> DEBUG Plugin loaded: hexo<span class="literal">-wordcount</span>                                        </span><br><span class="line"><span class="number">02</span>:<span class="number">35</span>:<span class="number">27.878</span> DEBUG Plugin loaded: hexo<span class="literal">-server</span>                                           </span><br><span class="line"><span class="number">02</span>:<span class="number">35</span>:<span class="number">27.883</span> DEBUG Script loaded: themes\next\scripts\<span class="built_in">merge-configs</span>.js                  </span><br><span class="line"><span class="number">02</span>:<span class="number">35</span>:<span class="number">27.887</span> DEBUG Script loaded: themes\next\scripts\merge.js                          </span><br><span class="line"><span class="number">02</span>:<span class="number">35</span>:<span class="number">27.890</span> DEBUG Plugin loaded: hexo<span class="literal">-generator-tag</span>                                    </span><br><span class="line"><span class="number">02</span>:<span class="number">35</span>:<span class="number">27.891</span> DEBUG Script loaded: themes\next\scripts\tags\c<span class="built_in">enter-quote</span>.js              </span><br><span class="line"><span class="number">02</span>:<span class="number">35</span>:<span class="number">27.892</span> DEBUG Script loaded: themes\next\scripts\tags\button.js                    </span><br><span class="line"><span class="number">02</span>:<span class="number">35</span>:<span class="number">27.893</span> DEBUG Script loaded: themes\next\scripts\tags\full<span class="literal">-image</span>.js                </span><br><span class="line"><span class="number">02</span>:<span class="number">35</span>:<span class="number">27.895</span> DEBUG Script loaded: themes\next\scripts\tags\<span class="built_in">group-pictures</span>.js            </span><br><span class="line"><span class="number">02</span>:<span class="number">35</span>:<span class="number">28.260</span> DEBUG Plugin loaded: hexo<span class="literal">-renderer-jade</span>                                    </span><br><span class="line"><span class="number">02</span>:<span class="number">35</span>:<span class="number">28.264</span> DEBUG Script loaded: themes\next\scripts\tags\exturl.js                    </span><br><span class="line"><span class="number">02</span>:<span class="number">35</span>:<span class="number">28.265</span> DEBUG Script loaded: themes\next\scripts\tags\lazy<span class="literal">-image</span>.js                </span><br><span class="line"><span class="number">02</span>:<span class="number">35</span>:<span class="number">28.266</span> DEBUG Script loaded: themes\next\scripts\tags\note.js                      </span><br><span class="line"><span class="number">02</span>:<span class="number">35</span>:<span class="number">28.268</span> INFO  Deleted database.                                                    </span><br><span class="line"><span class="number">02</span>:<span class="number">35</span>:<span class="number">28.271</span> DEBUG Database saved                                                       </span><br></pre></td></tr></table></figure>

<p>可以看到我所在报错的位置是hexo-deployer-git，于是在hexo-deployer-git中搜索：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> grep <span class="literal">-irn</span> <span class="string">&quot;SyncWriteStream&quot;</span> .\node_modules\hexo<span class="literal">-deployer-git</span>\</span><br><span class="line">.\hexo<span class="literal">-deployer-git</span>\/node_modules/hexo<span class="literal">-fs</span>/lib/fs.js:<span class="number">718</span>:exports.SyncWriteStream = fs.SyncWriteStream;</span><br></pre></td></tr></table></figure>

<p>可以看到是在.\hexo-deployer-git/node_modules&#x2F;hexo-fs&#x2F;lib&#x2F;fs.js的第718行用到的，进去后把这一行注释掉问题就解决了，但是为什么会在hexo-deployer-git中有个node_modules，而且在其中还有个hexo-fs呢，因为在根目录node_modules中也有个hexo-fs目录，进去<a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git官方Github网址</a>查看是没有node_modules目录的，但是通过npm命令npm install hexo-deployer-git –save安装的hexo-deployer-git是有的，所以应该是npm源没有更新？</p>
<p>总之是解决了这个强迫症难以忍受的问题，通过–debug参数定位问题。</p>
<p><strong>7月28日更新：</strong></p>
<p>在<a href="https://github.com/hexojs/hexo/issues/2598">hexo Github issue</a>中反馈后，已经可以通过npm更新最新版本的hexo-deployer-git以及其他包含旧版本Hexo-fs的插件了，通过npm install –save xxx就可以解决了。</p>
<blockquote>
<p>FYI, the following packages may contain the old version of Hexo-fs have been updated.</p>
<p>hexo-deployer-git 0.3.1<br>hexo-math 3.0.3<br>hexo-renderer-ejs 0.3.1<br>hexo-deployer-openshift 0.1.2<br>hexo-server 0.2.2<br>hexo-deployer-heroku 0.1.2</p>
</blockquote>
<p>当然还有hexo-fs，更新如上几个插件即可解决。</p>
<h4 id="2-Fastly-error-unknown-domain-xxx-Please-check-that-this-domain-has-been-added-to-a-service"><a href="#2-Fastly-error-unknown-domain-xxx-Please-check-that-this-domain-has-been-added-to-a-service" class="headerlink" title="2. Fastly error: unknown domain: xxx. Please check that this domain has been added to a service."></a>2. Fastly error: unknown domain: xxx. Please check that this domain has been added to a service.</h4><p>博客突然无法访问，显示如下错误：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Fastly error: unknown domain: rangerzhou.top. Please check that this domain has been added to a service.</span><br><span class="line"></span><br><span class="line">Details: cache-fty21337-FTY</span><br></pre></td></tr></table></figure>

<p>参考问题：<a href="https://github.com/qiubaiying/qiubaiying.github.io/issues/289">https://github.com/qiubaiying/qiubaiying.github.io/issues/289</a></p>
<p><img src="https://raw.githubusercontent.com/rangerzhou/ImageHosting/master/blog_resource/2020/aliyun.png" alt="阿里云域名解析"></p>
<p>参照上图，阿里云控制台 - 域名 - 解析，值改为 185.199.111.153（ <a href="https://help.github.com/en/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site">Github Page</a> 公布的 IP ，开始改为 185.199.110.153 过了一会儿还是显示错误，就通过电脑 <code>ping xxx.github.io</code> 得到的了这个 IP），修改解析 IP 即可。</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title>Systrace 基本知识</title>
    <url>/2017/07/18/Android/HowToCatchSystrace/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="如何抓取-Systrace"><a href="#如何抓取-Systrace" class="headerlink" title="如何抓取 Systrace"></a>如何抓取 Systrace</h2><h3 id="1-Windows平台"><a href="#1-Windows平台" class="headerlink" title="1. Windows平台"></a>1. Windows平台</h3><blockquote>
<p>Windows平台有三种方法可以抓取systrace，分别是通过Eclipse，AndriodStudio和cmd命令，这里我们只介绍通过命令抓取。</p>
</blockquote>
<span id="more"></span>

<ul>
<li><p>因为命令都是运行systrace.py脚本，所以首先电脑要安装Python，<a href="https://www.python.org/downloads/">Python官网</a> 下载进行安装，安装完后在系统环境变量Path中添加<code>D:\Program Files\Python27\Scripts\;D:\Program Files\Python27\;</code> ，之后在cmd命令行窗口中运行python命令可查询python是否安装成功以及python版本，这里要注意的是<strong>安装的版本要是2开头的版本，systrace不支持3开头的python</strong>。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> python</span><br><span class="line">Python <span class="number">2.7</span>.<span class="number">13</span> (v2.<span class="number">7.13</span>:a06454b1afa1, Dec <span class="number">17</span> <span class="number">2016</span>, <span class="number">20</span>:<span class="number">53</span>:<span class="number">40</span>) [<span class="type">MSC</span> <span class="type">v.1500</span> <span class="number">64</span> <span class="type">bit</span> (<span class="type">AMD64</span>)] on win32</span><br><span class="line"><span class="built_in">Type</span> <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> or <span class="string">&quot;license&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>

<p>安装后就可以运行systrace.py脚本进行抓取systrace了：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">python D:\Android\sdk\platform<span class="literal">-tools-linux</span>\systrace\systrace.py <span class="literal">-t</span> <span class="number">10</span> <span class="literal">-o</span> D:\debug\systrace\systrace.html gfx input webview view wm am sm audio video camera hal app res dalvik rs power sched freq idle load workq sync irq disk mmc</span><br><span class="line"><span class="comment"># workq sync irq disk mmc 这几个 tag 只有设备 root 的时候可以使用</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-Linux平台"><a href="#2-Linux平台" class="headerlink" title="2. Linux平台"></a>2. Linux平台</h3><p>Linux平台和上述方法一致，一般默认都装好了python环境，直接执行命令即可，命令同上，替换命令中的文件路径。</p>
<h3 id="3-离线systrace"><a href="#3-离线systrace" class="headerlink" title="3. 离线systrace"></a>3. 离线systrace</h3><ul>
<li><p>执行adb root和adb remount</p>
</li>
<li><p>adb shell进入手机，执行</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">atrace <span class="literal">-z</span> <span class="literal">-b</span> <span class="number">40000</span> gfx input view wm am hal res dalvik rs sched freq idle load disk mmc <span class="literal">-t</span> <span class="number">15</span> &gt; /<span class="keyword">data</span>/local/tmp/trace_output &amp;</span><br></pre></td></tr></table></figure>

<p>-a appname enable app-level tracing for a comma separated list of cmdlines</p>
<p>-b N use a trace buffer size of N KB</p>
<p>-t N trace for N seconds [defualt 5]</p>
<p>-z compress the trace dump</p>
<p>–list_categories list the available tracing categories</p>
<p>The time and buffer size should be long enough to finished the systrace collecting.</p>
</li>
<li><p>断开USB连接</p>
</li>
<li><p>重现问题</p>
</li>
<li><p>重新连接USB</p>
</li>
<li><p>pull出生成的trace_output：<code>adb pull /data/local/tmp/trace_output</code> </p>
</li>
<li><p>转化为systrace：<code>systrace.py --from-file trace_output -o output.html</code></p>
</li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.androidperformance.com/2019/05/28/Android-Systrace-About/">https://www.androidperformance.com/2019/05/28/Android-Systrace-About/</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>关于 Dalvik、ART、DEX、ODEX、JIT、AOT、OAT</title>
    <url>/2017/06/30/Android/Something_about_Dalvik_ART_DEX_ODEX_JIT_AOT_OAT/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>关于 Dalvik、ART、DEX、ODEX、JIT、AOT、OAT，说真的，我看着都头大，每次看完过不了多久就会忘记一些内容，然后再去搜资料，好记性不如烂笔头，写在这里随时温故。</p>
</blockquote>
<span id="more"></span>

<h1 id="1-Dalvik＆ART"><a href="#1-Dalvik＆ART" class="headerlink" title="1. Dalvik＆ART"></a>1. Dalvik＆ART</h1><h2 id="1-1-Dalvik"><a href="#1-1-Dalvik" class="headerlink" title="1.1 Dalvik"></a>1.1 Dalvik</h2><p>Dalvik 是 Google 公司自己设计用于 Android 平台的虚拟机。DVM 即 Dalvik Virtual Machine 的缩写，那么 DVM 和 JVM 有什么区别呢？</p>
<ol>
<li><p>DVM 基于寄存器，JVM 基于栈</p>
<p>寄存器是 CPU 上面的一块存储空间，栈是内存上面的一段连续的存储空间，所以 CPU 直接访问自己上面的一块空间的数据的效率肯定要大于访问内存上面的数据。基于栈架构的程序在运行时虚拟机需要频繁的从栈上读取或写入数据，这个过程需要更多的指令分派与内存访问次数，会耗费不少 CPU 时间，对于像手机设备资源有限的设备来说，这是相当大的一笔开销。DVM 基于寄存器架构。数据的访问通过寄存器间直接传递，这样的访问方式比基于栈方式要快很多。</p>
</li>
<li><p>执行的字节码文件不一样</p>
<p>DVM 执行的是 .dex 文件，JVM 执行的是 .class 文件。</p>
<p>DVM 解释执行的是 dex 字节码 .dex ：.java –&gt; .class –&gt; .dex –&gt; .apk</p>
<p>JVM 运行的是 java 字节码 .class ：.java –&gt; .class –&gt; .jar</p>
</li>
<li><p>运行环境的区别</p>
<p>DVM：允许运行多个虚拟机实例，每一个应用启动都运行一个单独的虚拟机，并且运行在一个独立的进程中</p>
<p>JVM：只能运行一个实例，也就是所有应用都运行在同一个 JVM 中</p>
</li>
</ol>
<h2 id="1-2-ART"><a href="#1-2-ART" class="headerlink" title="1.2 ART"></a>1.2 ART</h2><p>ART 即 Android Runtime，是在 Dalvik 的基础上做了一些优化。在 Dalvik 下，应用每次运行的时候，字节码都需要通过即时编译器（ JIT, just in time ）转换为机器码，这会拖慢应用的运行效率，而在 ART  环境中，应用在第一次安装的时候，字节码就会预先编译成机器码，使其成为真正的本地应用。这个过程叫做预编译（ AOT, Ahead-Of-Time ）。这样的话，应用的启动(首次)和执行都会变得更加快速。</p>
<p>ART 虚拟机执行的本地机器码：</p>
<p>.java –&gt; java bytecode(.class) –&gt; dalvik bytecode(.dex) –&gt; optimized android runtime machine code(.oat)</p>
<h2 id="1-3-Dalvik和ART区别"><a href="#1-3-Dalvik和ART区别" class="headerlink" title="1.3 Dalvik和ART区别"></a>1.3 Dalvik和ART区别</h2><p>Dalvik 是运行时解释 dex 文件，安装比较快，开启应用比较慢，应用占用空间小；ART 是安装的时候字节码预编译成机器码存储在本地，执行的时候直接就可以运行的，安装慢，开启应用快，占用空间大；</p>
<p>比较喜欢一个骑自行车的例子，Dalvik 好比一个已经折叠起来的自行车，每次骑之前都要先组装才能骑，ART 相当于一个已经组装好的自行车，每次直接骑着就走了。</p>
<p><a href="https://source.android.com/devices/tech/dalvik?hl=zh-cn">https://source.android.com/devices/tech/dalvik?hl=zh-cn</a></p>
<h1 id="2-dex＆odex＆oat"><a href="#2-dex＆odex＆oat" class="headerlink" title="2. dex＆odex＆oat"></a>2. dex＆odex＆oat</h1><h2 id="2-1-dex"><a href="#2-1-dex" class="headerlink" title="2.1 dex"></a>2.1 dex</h2><p>dex ( Dalvik Executable )，本质上 java 文件编译后都是字节码，只不过 JVM 运行的是 .class 字节码，而 DVM 运行的是 .dex 字节码， <code>sdk\build-tools\25.0.2\dx</code> 工具负责将 Java 字节码 .class 文件转换为 Dalvik 字节码 .dex ，dx 工具对 Java 类文件重新排列，消除在类文件中出现的所有冗余信息，避免虚拟机在初始化时出现反复的文件加载与解析过程。一般情况下，Java 类文件中包含多个不同的方法签名，如果其他的类文件引用该类文件中的方法，方法签名也会被复制到其类文件中，也就是说，多个不同的类会同时包含相同的方法签名，同样地，大量的字符串常量在多个类文件中也被重复使用。这些冗余信息会直接增加文件的体积，同时也会严重影响虚拟机解析文件的效率。消除其中的冗余信息，重新组合形成一个常量池，所有的类文件共享同一个常量池，由于 dx 工具对常量池的压缩，使得相同的字符串，常量在 DEX 文件中只出现一次，从而减小了文件的体积，同时也提高了类的查找速度，此外，dex 格式文件增加了新的操作码支持，文件结构也相对简洁，使用等长的指令来提高解析速度。</p>
<h2 id="2-2-odex"><a href="#2-2-odex" class="headerlink" title="2.2 odex"></a>2.2 odex</h2><p> odex( Optimized dex )，即优化的 dex，主要是为了提高 DVM 的运行速度，在编译打包 APK 时，Java 类会被编译成一个或者多个字节码文件（ .class ），通过 dx 工具 CLASS 文件转换成一个 DEX（ Dalvik Executable ）文件。 通常情况下，我们看到的 Android 应用程序实际上是一个以 .apk 为后缀名的压缩文件。我们可以通过压缩工具对 apk 进行解压，解压出来的内容中有一个名为 classes.dex 的文件。那么我们首次开机的时候系统需要将其从 apk 中解压出来保存在 <code>data/app</code> 目录中。 </p>
<p><strong>如果当前运行在 Dalvik 虚拟机下</strong>，Dalvik 会对 classes.dex 进行一次验证和优化，验证优化的过程也就是守护进程 installd 的函数 dexopt 来对 dex 字节码进行优化，实际上也就是由 dex 文件生成 odex 文件，最终 odex 文件被保存在手机的 VM 缓存目录 <code>data/dalvik-cache</code> 下（**注意！这里所生成的 odex 文件依旧是以 dex 为后缀名，格式如：<code>system@priv-app@Settings@Settings.apk@classes.dex</code>**）。</p>
<p><strong>Dalvik: .dex -&gt; .odex(字节码)</strong></p>
<p><strong>如果当前运行于 ART 模式下</strong>，  ART 同样会在首次进入系统的时候调用 <code>/system/bin/dexopt</code> （此处应该是 dex2oat 工具吧）工具来将 dex 字节码翻译成本地机器码，保存在 <code>data/dalvik-cache</code> 下。 那么这里需要注意的是，无论是对 dex 字节码进行优化，还是将 dex 字节码翻译成本地机器码，最终得到的结果都是保存在相同名称的一个 odex 文件里面的，但是前者对应的是一个 .dex 文件（表示这是一个优化过的 dex），后者对应的是一个 **.oat ** 文件(有点混乱，API 29 以后Android 运行时 (ART) 不再从应用进程调用 <code>dex2oat</code>。这项变更意味着 ART 将仅接受系统生成的 OAT 文件)。通过这种方式，原来任何通过绝对路径引用了该 odex 文件的代码就都不需要修改了。 由于在系统首次启动时会对应用进行安装，那么在预置 APK 比较多的情况下，将会大大增加系统首次启动的时间。</p>
<p><strong>ART: .dex -&gt; .odex(机器码)</strong></p>
<p>从前面的描述可知，既然无论是 DVM 还是 ART，对 DEX 的优化结果都是保存在一个相同名称的 odex 文件，那么如果我们把这两个过程在 ROM 编译的时候预处理提取 Odex 文件将会大大优化系统首次启动的时间。具体做法则是在 device 目录下的 <strong>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/device/">device</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/device/huawei/">huawei</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/device/huawei/angler/">angler</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/device/huawei/angler/BoardConfig.mk">BoardConfig.mk</a></strong> 中定义 <code>WITH_DEXPREOPT := true</code>，打开这个宏之后，无论是有源码还是无源码的预置 apk 预编译时都会提取 odex 文件，不过这里需要注意的是打开WITH_DEXPREOPT 宏之后，预编译时提取 Odex 会增加一定的空间，预置太多 apk，会导致 system.img 过大，而编译不过。遇到这种情况可以通过删除 apk 中的 dex 文件、调大 system.img 的大小限制，或在预编译时跳过一些 apk 的 odex 提取。</p>
<h2 id="2-3-oat"><a href="#2-3-oat" class="headerlink" title="2.3 oat"></a>2.3 oat</h2><p>oat 文件是 ART 的核心，是通过 <code>/system/bin/dex2oat</code> 工具生成的，实际上是一个自定义的 elf 文件，里面包含的都是本地机器指令，通过 AOT 生成的文件，在系统中的表现形式有 OAT、ART、ODEX，其中大部分 apk 在执行 AOT 后生成的都是 odex 文件。但是由 dex2oat 工具生成的 oat 文件包含有两个特殊的段 oatdata 和 oatexec，前者包含有用来生成本地机器指令的 dex 文件内容，后者包含有生成的本地机器指令，进而就可以直接运行。其是通过 PMS –&gt; installd –&gt; dex2oat 的流程生成的，可以在预编译的时候，也可以在开机 apk 扫描的过程中或者 apk 安装过程中生成。</p>
<h2 id="2-4-dexopt和dex2oat区别"><a href="#2-4-dexopt和dex2oat区别" class="headerlink" title="2.4 dexopt和dex2oat区别"></a>2.4 dexopt和dex2oat区别</h2><blockquote>
<p>dexopt does some optimizations on the dex file. It does things like replacing a virtual invoke instruction with an optimized version that includes the vtable index of the method being called, so that it doesn’t have to perform a method lookup during execution.</p>
<p>The result of dexopt is an odex (optimized dex) file. This is very similar to the original dex file, except that it uses some optimized opcodes, like the optimized invoke virtual instruction.</p>
<p>dex2oat takes a dex file and compiles it. The result is essentially an elf file that is then executed natively. So instead of having bytecode that is interpreted by a virtual machine, it now has native code that can be executed natively by the processor. This is called AOT (ahead-of-time) compilation.</p>
<p>Another factor to take into account is that dalvik used a JIT (just-in-time) compiler - meaning that it was also able to compile bytecode to native code. The main difference however, is that ART compiles everything ahead of time, whereas dalvik only compiled a subset of the bytecode using heuristics to detect the code that was executed most frequently, and it compiled during execution.</p>
</blockquote>
<h1 id="3-JIT＆AOT"><a href="#3-JIT＆AOT" class="headerlink" title="3. JIT＆AOT"></a>3. JIT＆AOT</h1><h2 id="3-1-JIT"><a href="#3-1-JIT" class="headerlink" title="3.1 JIT"></a>3.1 JIT</h2><p>JIT(Just In Time Compiler， 即时编译)，与 Dalvik 虚拟机相关。</p>
<p>JIT 在 2.2 版本提出的，目的是为了提高 android 的运行速度，一直存活到 4.4 版本，因为在 4.4 之后的 ROM 中，就不存在 Dalvik 虚拟机了。我们使用 Java 开发 android，在编译打包 APK 文件时，会经过以下流程：</p>
<ol>
<li>Java 编译器将应用中所有 Java 文件编译为 class 文件</li>
<li>dx 工具将应用编译输出的类文件转换为 Dalvik 字节码，即 dex 文件</li>
</ol>
<p>DVM 负责解释 dex 文件为机器码，如果我们不做处理的话，每次执行代码，都需要 Dalvik 将 java 代码由解释器(Interpreter)将每个 java 指令转译为微处理器指令，并根据转译后的指令先后次序依序执行，一条 java 指令可能对应多条微处理器指令，这样效率不高。为了解决这个问题，Google 在 2.2 版本添加了JIT编译器，当 App 运行时，每当遇到一个新类，JIT 编译器就会对这个类进行编译，经过编译后的代码，会被优化成相当精简的原生型指令码（即 native code），这样在下次执行到相同逻辑的时候，速度就会更快。但是使用 JIT 也不一定加快执行速度，如果大部分代码的执行次数很少，那么编译花费的时间不一定少于执行 dex 的时间。Google 当然也知道这一点，所以 JIT 不对所有 dex 代码进行编译，而是只编译执行次数较多的 dex 为本地机器码。</p>
<p><a href="https://source.android.com/devices/tech/dalvik/jit-compiler?hl=zh-cn">https://source.android.com/devices/tech/dalvik/jit-compiler?hl=zh-cn</a></p>
<h2 id="3-2-AOT"><a href="#3-2-AOT" class="headerlink" title="3.2 AOT"></a>3.2 AOT</h2><p>AOT(Ahead Of Time)，和 ART 虚拟机相关。</p>
<p>JIT 是运行时编译，这样可以对执行次数频繁的 dex 代码进行编译和优化，减少以后使用时的翻译时间，虽然可以加快 Dalvik 运行速度，但是还是有弊病，那就是将 dex 翻译为本地机器码也要占用时间，所以 Google 在 4.4 之后推出了 ART，用来替换 Dalvik。</p>
<p>在 4.4 版本上，两种运行时环境共存，可以相互切换，但是在 5.0+，Dalvik 虚拟机则被彻底的丢弃，全部采用ART。ART 的策略与 Dalvik 不同，在 ART 环境中，应用在第一次安装的时候，字节码就会预先编译成机器码，使其成为真正的本地应用。之后打开 App 的时候，不需要额外的翻译工作，直接使用本地机器码运行，因此运行速度提高。</p>
<p>总的来说：</p>
<ul>
<li>JIT 代表运行时编译策略，也可以理解成一种运行时编译器，是为了加快 Dalvik 虚拟机解释 dex 速度提出的一种技术方案，来缓存频繁使用的本地机器码；</li>
<li>AOT 可以理解运行前编译策略，ART 虚拟机的主要特征就是 AOT；</li>
</ul>
<h1 id="4-Android-N上的改变"><a href="#4-Android-N上的改变" class="headerlink" title="4. Android N上的改变"></a>4. Android N上的改变</h1><h2 id="4-1-ART缺点"><a href="#4-1-ART缺点" class="headerlink" title="4.1 ART缺点"></a>4.1 ART缺点</h2><ul>
<li>dex -&gt; oat 生成时间太久，进而 apk 安装时间很久；</li>
<li>dex2oat 耗用系统资源太多，特别 dex2oat 占用 cpu 和 memory；</li>
<li>oat 文件过大，rom 小的设备 data 空间会吃紧；</li>
<li>Powerconsumption 增加；</li>
<li>ART 不太稳定，在 M 上 crash 问题太多，debug 不太容易；</li>
<li>oat 文件是 elf 格式，所以加载 oat 文件时候相关依赖库也很多，间接导致 app 进程占用 Memory 的增加；</li>
</ul>
<h2 id="4-2-Android-N的改变"><a href="#4-2-Android-N的改变" class="headerlink" title="4.2 Android N的改变"></a>4.2 Android N的改变</h2><p>先来看 <strong><a href="https://developer.android.google.cn/about/versions/nougat/android-7.0.html#jit_aot">官方文档</a></strong> 描述：</p>
<blockquote>
<p>In Android N, we’ve added a Just inTime (JIT) compiler with code profiling to ART, which lets it constantlyimprove the performance of Android apps as they run. <strong>The JIT compiler complements ART’scurrent Ahead of Time (AOT) compiler and helps improve runtime performance,save storage space, and speed up app updates and system updates</strong>.</p>
<p>在 Android 7.0 中，我们添加了即时 ( JIT ) 编译器，对 ART 进行代码分析，让它可以在应用运行时持续提升 Android 应用的性能。JIT 编译器对 Android 运行组件当前的 Ahead of Time ( AOT ) 编译器进行了补充，有助于提升运行时性能，节省存储空间，加快应用更新和系统更新速度。</p>
<p>Profile-guided compilation lets ART <strong>manage the AOT&#x2F;JIT compilation</strong> for each app according to its actualusage, as well as conditions on the device. For example, <strong>ART maintains a profile of each app’s hot methods andcan precompile and cache those methods for best performance.</strong> It leaves other parts of the appuncompiled until they are actually used.</p>
<p>配置文件指导的编译让 Android 运行组件能够根据应用的实际使用以及设备上的情况管理每个应用的 AOT&#x2F;JIT 编译。例如，Android 运行组件维护每个应用热方法的配置文件，并且可以预编译和缓存这些方法以实现最佳性能。对于应用的其他部分，在实际使用之前不会进行编译。</p>
<p>Besides improving performance for keyparts of the app, profile-guided compilation helps reduce an app’s overall RAM footprint, including associated binaries. Thisfeature is especially important on low-memory devices.</p>
<p>除提升应用的关键部分的性能外，配置文件指导的编译还有助于减少整个 RAM 占用，包括关联的二进制文件。此功能对于低内存设备非常尤其重要。</p>
<p>ART manages profile-guided compilation in a way that minimizes impact on the device battery. It does precompilation only when then the device is idle and charging, saving time and battery by doing that work in advance.</p>
<p>Android 运行组件在管理配置文件指导的编译时，可最大程度降低对设备电池的影响。仅当设备处于空闲状态和充电时才进行编译，从而可以通过提前执行该工作节约时间和省电。</p>
</blockquote>
<p>在 AOT 的编译方式基础上引入 JIT，对于经常用的 method 用 AOT 方式，对于不经常用的 method 等用 JIT，并且对于这些常用或者不常用维护一个 profile。它可以以某一种方式最小影响 battery 的消耗，以及在设备空闲或者充电的情况做预编译，由此就可以解决上面提到的部分缺点。</p>
<p>启动 JIT 以及相关的 profile 功能打开如下开关：</p>
<p>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/build/">build</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/build/target/">target</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/build/target/product/">product</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/build/target/product/runtime_libart.mk">runtime_libart.mk</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PRODUCT_DEFAULT_PROPERTY_OVERRIDES += \</span><br><span class="line">    dalvik.vm.image-dex2oat-Xms=64m \</span><br><span class="line">    dalvik.vm.image-dex2oat-Xmx=64m \</span><br><span class="line">    dalvik.vm.dex2oat-Xms=64m \</span><br><span class="line">    dalvik.vm.dex2oat-Xmx=512m \</span><br><span class="line">    ro.dalvik.vm.native.bridge=0 \</span><br><span class="line">    dalvik.vm.usejit=true \</span><br><span class="line">    dalvik.vm.usejitprofiles=true \</span><br><span class="line">    dalvik.vm.appimageformat=lz4</span><br></pre></td></tr></table></figure>

<p>dalvik.vm.usejit&#x3D;true 和 dalvik.vm.usejitprofiles&#x3D;true 属性。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>Android 7.0 PackageManagerService源码分析</title>
    <url>/2017/06/26/Android/Android_7.0_PackageManagerService_sourceCode_study/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>PKMS模块分三个部分学习：</p>
</blockquote>
<ul>
<li><a href="">PKMS的启动、main函数解析</a></li>
<li><a href="">PKMS构造函数解析</a></li>
<li><a href="http://rangerzhou.top/2017/06/26/Android%207.0%20PackageManagerService%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/">APK安装</a></li>
</ul>
<blockquote>
<p>本文开始分析APK的安装及PKMS在这个流程中所做工作，APK有多种安装方式，我们从adb install开始分析。</p>
</blockquote>
<span id="more"></span>

<h3 id="1-adb-install-分析"><a href="#1-adb-install-分析" class="headerlink" title="1. adb install 分析#"></a>1. adb install 分析#</h3><p>​	adb install 有多个参数，在此仅考虑最简单的<code>adb install ***.apk</code>，adb是命令，install是参数，处理install参数的代码：</p>
<p>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/system/">system</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/system/core/">core</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/system/core/adb/">adb</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/system/core/adb/commandline.cpp">commandline.cpp</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">... ...</span><br><span class="line"><span class="type">static</span> <span class="type">bool</span> _use_legacy_install() &#123;</span><br><span class="line">    <span class="comment">// 判断Feature是否可用</span></span><br><span class="line">    FeatureSet features;</span><br><span class="line">    std::string error;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">adb_get_feature_set</span>(&amp;features, &amp;error)) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;error: %s\n&quot;</span>, error.<span class="built_in">c_str</span>());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> !<span class="built_in">CanUseFeature</span>(features, kFeatureCmd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">adb_commandline</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv)</span> </span>&#123;</span><br><span class="line">  ... ...</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>], <span class="string">&quot;install&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (argc &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="built_in">usage</span>();</span><br><span class="line">        <span class="keyword">if</span> (_use_legacy_install()) &#123;</span><br><span class="line">            <span class="comment">// 如果不能使用Feature，则使用传统方式安装</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">install_app_legacy</span>(transport_type, serial, argc, argv);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 可以使用Feature时，使用如下方式安装</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">install_app</span>(transport_type, serial, argc, argv);</span><br><span class="line">    &#125;</span><br><span class="line">  ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-1-install-app"><a href="#1-1-install-app" class="headerlink" title="1.1 install_app"></a>1.1 install_app</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">install_app</span><span class="params">(TransportType transport, <span class="type">const</span> <span class="type">char</span>* serial, <span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// The last argument must be the APK file</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* file = argv[argc - <span class="number">1</span>];<span class="comment">// 利用参数创建出本地文件的名称</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断adb命令中是否存在有效的apk文件名</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* dot = <span class="built_in">strrchr</span>(file, <span class="string">&#x27;.&#x27;</span>);<span class="comment">// 查找&#x27;.&#x27;在file中末次出现的位置，返回从&#x27;.&#x27;开始到结束的字符</span></span><br><span class="line">    <span class="type">bool</span> found_apk = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">stat</span> sb;</span><br><span class="line">    <span class="keyword">if</span> (dot &amp;&amp; !<span class="built_in">strcasecmp</span>(dot, <span class="string">&quot;.apk&quot;</span>)) &#123;<span class="comment">// 如果dot不等于null并且等于&quot;.apk&quot;</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">stat</span>(file, &amp;sb) == <span class="number">-1</span> || !<span class="built_in">S_ISREG</span>(sb.st_mode)) &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Invalid APK file: %s\n&quot;</span>, file);</span><br><span class="line">            <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">        &#125;</span><br><span class="line">        found_apk = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!found_apk) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Missing APK file\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// adb_open将根据file创建出对应的文件</span></span><br><span class="line">    <span class="type">int</span> localFd = <span class="built_in">adb_open</span>(file, O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span> (localFd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Failed to open %s: %s\n&quot;</span>, file, <span class="built_in">strerror</span>(errno));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    std::string error;</span><br><span class="line">    std::string cmd = <span class="string">&quot;exec:cmd package&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加cmd参数</span></span><br><span class="line">    <span class="comment">// don&#x27;t copy the APK name, but, copy the rest of the arguments as-is</span></span><br><span class="line">    <span class="keyword">while</span> (argc-- &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        cmd += <span class="string">&quot; &quot;</span> + <span class="built_in">escape_arg</span>(std::<span class="built_in">string</span>(*argv++));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// add size parameter [required for streaming installs]</span></span><br><span class="line">    <span class="comment">// do last to override any user specified value</span></span><br><span class="line">    cmd += <span class="string">&quot; &quot;</span> + android::base::<span class="built_in">StringPrintf</span>(<span class="string">&quot;-S %&quot;</span> PRIu64, <span class="built_in">static_cast</span>&lt;<span class="type">uint64_t</span>&gt;(sb.st_size));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连接源端，获取APK文件的描述符</span></span><br><span class="line">    <span class="type">int</span> remoteFd = <span class="built_in">adb_connect</span>(cmd, &amp;error);</span><br><span class="line">    <span class="keyword">if</span> (remoteFd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Connect error for write: %s\n&quot;</span>, error.<span class="built_in">c_str</span>());</span><br><span class="line">        <span class="built_in">adb_close</span>(localFd);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> buf[BUFSIZ];</span><br><span class="line">    <span class="built_in">copy_to_file</span>(localFd, remoteFd);<span class="comment">// 将remoteFd中的数据写入到上面创建的localFd中</span></span><br><span class="line">    <span class="built_in">read_status_line</span>(remoteFd, buf, <span class="built_in">sizeof</span>(buf));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">adb_close</span>(localFd);</span><br><span class="line">    <span class="built_in">adb_close</span>(remoteFd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strncmp</span>(<span class="string">&quot;Success&quot;</span>, buf, <span class="number">7</span>)) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Failed to install %s: %s&quot;</span>, file, buf);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">fputs</span>(buf, stderr);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从代码中了解<code>install_app</code>就是将源机器中的文件copy到了目的机器（手机）中，可能是因为这个支持Feature的流程PKMS能够监听到这个copy，接下来继续看传统的安装方式<code>install_app_legacy</code>。</p>
<h4 id="1-2-install-app-legacy"><a href="#1-2-install-app-legacy" class="headerlink" title="1.2 install_app_legacy"></a>1.2 install_app_legacy</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">install_app_legacy</span><span class="params">(TransportType transport, <span class="type">const</span> <span class="type">char</span>* serial, <span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 要安装的APK还在源机器上，要先把APK复制到手机</span></span><br><span class="line">    <span class="comment">// 设置复制目标的目录，如果安装在手机内部存储，则目标目录为/data/local/tmp</span></span><br><span class="line">    <span class="comment">// 如果安装在SD卡上，则目标目录为/sdcard/tmp</span></span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">char</span> *<span class="type">const</span> DATA_DEST = <span class="string">&quot;/data/local/tmp/%s&quot;</span>;</span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">char</span> *<span class="type">const</span> SD_DEST = <span class="string">&quot;/sdcard/tmp/%s&quot;</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* where = DATA_DEST;<span class="comment">// 默认安装到手机内部</span></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">stat</span> sb;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; argc; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(argv[i], <span class="string">&quot;-s&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">// 如果参数中带&#x27;-s&#x27;，则安装到SD卡</span></span><br><span class="line">            where = SD_DEST;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Find last APK argument.</span></span><br><span class="line">    <span class="comment">// All other arguments passed through verbatim.</span></span><br><span class="line">    <span class="comment">//解析最后一个参数，判断adb命令中是否携带有效的apk文件名</span></span><br><span class="line">    <span class="type">int</span> last_apk = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = argc - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">char</span>* file = argv[i];</span><br><span class="line">        <span class="type">const</span> <span class="type">char</span>* dot = <span class="built_in">strrchr</span>(file, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (dot &amp;&amp; !<span class="built_in">strcasecmp</span>(dot, <span class="string">&quot;.apk&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">stat</span>(file, &amp;sb) == <span class="number">-1</span> || !<span class="built_in">S_ISREG</span>(sb.st_mode)) &#123;</span><br><span class="line">                <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Invalid APK file: %s\n&quot;</span>, file);</span><br><span class="line">                <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            last_apk = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (last_apk == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Missing APK file\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> result = <span class="number">-1</span>;</span><br><span class="line">    std::vector&lt;<span class="type">const</span> <span class="type">char</span>*&gt; apk_file = &#123;argv[last_apk]&#125;;<span class="comment">// 取出apk名</span></span><br><span class="line">    std::string apk_dest = android::base::<span class="built_in">StringPrintf</span>(</span><br><span class="line">        where, <span class="built_in">adb_basename</span>(argv[last_apk]).<span class="built_in">c_str</span>());<span class="comment">// 构造apk目的地址</span></span><br><span class="line">    <span class="comment">// do_sync_push将APK文件传输到手机目标路基，失败的话跳转到cleanup_apk</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">do_sync_push</span>(apk_file, apk_dest.<span class="built_in">c_str</span>())) <span class="keyword">goto</span> cleanup_apk;</span><br><span class="line">    argv[last_apk] = apk_dest.<span class="built_in">c_str</span>(); <span class="comment">/* destination name, not source location */</span></span><br><span class="line">    result = <span class="built_in">pm_command</span>(transport, serial, argc, argv);<span class="comment">// </span></span><br><span class="line"></span><br><span class="line">cleanup_apk:</span><br><span class="line">    <span class="comment">// 删除传输失败的文件</span></span><br><span class="line">    <span class="comment">// PKMS在安装过程中会将APK复制一份到/data/app目录下，所以/data/local/tmp目录下的对应文件可以删除</span></span><br><span class="line">    <span class="built_in">delete_file</span>(transport, serial, apk_dest);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从代码中看出<code>install_app_legacy</code>就是将源机器中的APK文件传输到目的手机的tmp目录下，然后调用pm_command进行处理。</p>
<h3 id="2-pm-command"><a href="#2-pm-command" class="headerlink" title="2. pm_command"></a>2. pm_command</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">pm_command</span><span class="params">(TransportType transport, <span class="type">const</span> <span class="type">char</span>* serial, <span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">    std::string cmd = <span class="string">&quot;pm&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (argc-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 根据参数argv构造pm命令</span></span><br><span class="line">        cmd += <span class="string">&quot; &quot;</span> + <span class="built_in">escape_arg</span>(*argv++);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向adbd发送shell命令</span></span><br><span class="line">    <span class="comment">// 手机端的adbd在收到客户端发来的shell pm命令时会启动一个shell，然后在其中执行pm</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">send_shell_command</span>(transport, serial, cmd, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">... ...</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">send_shell_command</span><span class="params">(TransportType transport_type, <span class="type">const</span> <span class="type">char</span>* serial, <span class="type">const</span> std::string&amp; command, <span class="type">bool</span> disable_shell_protocol, StandardStreamsCallbackInterface* callback)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> fd;</span><br><span class="line">    <span class="type">bool</span> use_shell_protocol = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="type">bool</span> attempt_connection = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Use shell protocol if it&#x27;s supported and the caller doesn&#x27;t explicitly</span></span><br><span class="line">        <span class="comment">// disable it.</span></span><br><span class="line">        <span class="comment">// 如果支持shell协议，并且调用者没有明确禁用它，则使用shell协议</span></span><br><span class="line">        <span class="keyword">if</span> (!disable_shell_protocol) &#123;</span><br><span class="line">            FeatureSet features;</span><br><span class="line">            std::string error;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">adb_get_feature_set</span>(&amp;features, &amp;error)) &#123;</span><br><span class="line">                <span class="comment">// 如果定义了Feature，则使用shell协议</span></span><br><span class="line">                use_shell_protocol = <span class="built_in">CanUseFeature</span>(features, kFeatureShell2);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// Device was unreachable.</span></span><br><span class="line">                attempt_connection = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (attempt_connection) &#123;</span><br><span class="line">            std::string error;</span><br><span class="line">            <span class="comment">// command已是pm开头的命令</span></span><br><span class="line">            std::string service_string = <span class="built_in">ShellServiceString</span>(use_shell_protocol, <span class="string">&quot;&quot;</span>, command);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 向shell服务发送命令</span></span><br><span class="line">            fd = <span class="built_in">adb_connect</span>(service_string, &amp;error);</span><br><span class="line">            <span class="keyword">if</span> (fd &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;- waiting for device -\n&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">wait_for_device</span>(<span class="string">&quot;wait-for-device&quot;</span>, transport_type, serial)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> exit_code = <span class="built_in">read_and_dump</span>(fd, use_shell_protocol, callback);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">adb_close</span>(fd) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">PLOG</span>(ERROR) &lt;&lt; <span class="string">&quot;failure closing FD &quot;</span> &lt;&lt; fd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> exit_code;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从代码可知，pm_command就是向shell服务发送pm命令。</p>
<p>pm实际上是一个脚本，定义在<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/cmds/pm/">&#x2F;frameworks&#x2F;base&#x2F;cmds&#x2F;pm&#x2F;</a> 中：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Script to start <span class="string">&quot;pm&quot;</span> on the device, <span class="built_in">which</span> has a very rudimentary</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">shell.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">base=/system</span></span><br><span class="line">export CLASSPATH=$base/framework/pm.jar</span><br><span class="line">exec app_process $base/bin com.android.commands.pm.Pm &quot;$@&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$@</span> 表示传给脚本的所有参数的列表</span></span><br></pre></td></tr></table></figure>

<p>在编译system.img时，<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/">frameworks</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/">base</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/cmds/">cmds</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/cmds/pm/">pm</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/cmds/pm/Android.mk">Android.mk</a> 中会将该脚本复制到<code>system/bin</code>目录下。从脚本内容来看，首先export pm.jar到环境变量，然后通过app_process去执行pm.jar包中的main函数并将参数传给main函数，即&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/">frameworks</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/">base</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/cmds/">cmds</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/cmds/pm/">pm</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/cmds/pm/src/">src</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/cmds/pm/src/com/">com</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/cmds/pm/src/com/android/">android</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/cmds/pm/src/com/android/commands/">commands</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/cmds/pm/src/com/android/commands/pm/">pm</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/cmds/pm/src/com/android/commands/pm/Pm.java">Pm.java</a> 中的main函数，根据不同参数处理不同事件。app_process是一个native进程，它通过创建虚拟机启动了Zygote，从而转变为一个Java进程，接下来我们看如何从执行pm脚本到启动Java进程。</p>
<p>app_process参数格式如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">app_process [vm-options] cmd-dir [options] start-class-name [main-options]</span><br></pre></td></tr></table></figure>

<ul>
<li>vm-options：虚拟机选项参数</li>
<li>cmd-dir：当前未使用的父目录（如上述&#x2F;system&#x2F;bin），文件操作的父路径将为此路径</li>
<li>options：<ul>
<li>–zygote：以zygote模式开始</li>
<li>–start-system-server：启动System Server</li>
<li>–application：以应用模式（独立，非zygote）开始</li>
<li>–nice-name：这个进程的名字（应该是启动后的正式名字吧？）</li>
</ul>
</li>
<li>start-class-name：包含main方法的主类</li>
<li>main-options：对于非zygote开始的，options参数后面跟着主类名称，所有剩余的参数传递给这个类的main方法，对于zygote开始的，所有剩余参数都将传递给zygote</li>
</ul>
<p>首先看&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/">frameworks</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/">base</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/cmds/">cmds</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/cmds/app_process/">app_process</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/cmds/app_process/app_main.cpp">app_main.cpp</a> 的main函数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* const argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (prctl(PR_SET_NO_NEW_PRIVS, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// Older kernels don&#x27;t understand PR_SET_NO_NEW_PRIVS and return</span></span><br><span class="line">        <span class="comment">// EINVAL. Don&#x27;t die on such kernels.</span></span><br><span class="line">        <span class="keyword">if</span> (errno != EINVAL) &#123;</span><br><span class="line">            LOG_ALWAYS_FATAL(<span class="string">&quot;PR_SET_NO_NEW_PRIVS failed: %s&quot;</span>, strerror(errno));</span><br><span class="line">            <span class="keyword">return</span> <span class="number">12</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    AppRuntime <span class="title function_">runtime</span><span class="params">(argv[<span class="number">0</span>], computeArgBlockSize(argc, argv)</span>);</span><br><span class="line">    <span class="comment">// Process command line arguments</span></span><br><span class="line">    <span class="comment">// ignore argv[0]（argv[0]应该就是指app_process吧）</span></span><br><span class="line">    argc--;</span><br><span class="line">    argv++;</span><br><span class="line">    <span class="comment">// Everything up to &#x27;--&#x27; or first non &#x27;-&#x27; arg goes to the vm.</span></span><br><span class="line">    <span class="comment">// 把&#x27;--&#x27;开头之前的参数，或者第一个非&#x27;-&#x27;开头的参数传递给虚拟机</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// The first argument after the VM args is the &quot;parent dir&quot;, which</span></span><br><span class="line">    <span class="comment">// is currently unused.</span></span><br><span class="line">    <span class="comment">// 虚拟机参数之后的第一个参数是当前未使用的“父目录”</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// After the parent dir, we expect one or more the following internal</span></span><br><span class="line">    <span class="comment">// arguments :</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// --zygote : Start in zygote mode</span></span><br><span class="line">    <span class="comment">// --start-system-server : Start the system server.</span></span><br><span class="line">    <span class="comment">// --application : Start in application (stand alone, non zygote) mode.</span></span><br><span class="line">    <span class="comment">// --nice-name : The nice name for this process.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// For non zygote starts, these arguments will be followed by</span></span><br><span class="line">    <span class="comment">// the main class name. All remaining arguments are passed to</span></span><br><span class="line">    <span class="comment">// the main method of this class.</span></span><br><span class="line">    <span class="comment">// 对于非zygote开始的，这些参数后面跟着主类名称，所有剩余的参数传递给这个类的main方法</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// For zygote starts, all remaining arguments are passed to the zygote.</span></span><br><span class="line">    <span class="comment">// main function.</span></span><br><span class="line">    <span class="comment">// 对于zygote开始的，所有剩余参数都将传递给zygote</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// Note that we must copy argument string values since we will rewrite the</span></span><br><span class="line">    <span class="comment">// entire argument block when we apply the nice name to argv0.</span></span><br><span class="line">    <span class="comment">// 请注意，我们必须复制参数字符串值，因为当我们将nice名称应用于argv0（app_process？）时，我们将重写</span></span><br><span class="line">    <span class="comment">// 整个参数块。</span></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; argc; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (argv[i][<span class="number">0</span>] != <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;<span class="comment">// 不是以&#x27;-&#x27;开头，跳出循环</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (argv[i][<span class="number">1</span>] == <span class="string">&#x27;-&#x27;</span> &amp;&amp; argv[i][<span class="number">2</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">            ++i; <span class="comment">// Skip --.</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        runtime.addOption(strdup(argv[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Parse runtime arguments.  Stop at first unrecognized option.</span></span><br><span class="line">    <span class="type">bool</span> <span class="variable">zygote</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">bool</span> <span class="variable">startSystemServer</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">bool</span> <span class="variable">application</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    String8 niceName;</span><br><span class="line">    String8 className;</span><br><span class="line">    ++i;  <span class="comment">// Skip unused &quot;parent dir&quot; argument.</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; argc) &#123;</span><br><span class="line">        const <span class="type">char</span>* arg = argv[i++];</span><br><span class="line">        <span class="keyword">if</span> (strcmp(arg, <span class="string">&quot;--zygote&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            zygote = <span class="literal">true</span>;</span><br><span class="line">            niceName = ZYGOTE_NICE_NAME;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (strcmp(arg, <span class="string">&quot;--start-system-server&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            startSystemServer = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (strcmp(arg, <span class="string">&quot;--application&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            application = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (strncmp(arg, <span class="string">&quot;--nice-name=&quot;</span>, <span class="number">12</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            niceName.setTo(arg + <span class="number">12</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (strncmp(arg, <span class="string">&quot;--&quot;</span>, <span class="number">2</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果arg的前2个字符不为&quot;--&quot;，进入该条件分支设置className</span></span><br><span class="line">            className.setTo(arg);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            --i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ... ...</span><br><span class="line">    &#125;</span><br><span class="line">    ... ...</span><br><span class="line">    <span class="keyword">if</span> (zygote) &#123;</span><br><span class="line">        runtime.start(<span class="string">&quot;com.android.internal.os.ZygoteInit&quot;</span>, args, zygote);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (className) &#123;</span><br><span class="line">        <span class="comment">// 不是启动zygote，而是启动className对应的类RuntimeInit</span></span><br><span class="line">        runtime.start(<span class="string">&quot;com.android.internal.os.RuntimeInit&quot;</span>, args, zygote);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fprintf(stderr, <span class="string">&quot;Error: no class name or --zygote supplied.\n&quot;</span>);</span><br><span class="line">        app_usage();</span><br><span class="line">        LOG_ALWAYS_FATAL(<span class="string">&quot;app_process: no class name or --zygote supplied.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/">frameworks</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/">base</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/core/">core</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/core/jni/">jni</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/core/jni/AndroidRuntime.cpp">AndroidRuntime.cpp</a> </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">AndroidRuntime::start</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* className, <span class="type">const</span> Vector&lt;String8&gt;&amp; options, <span class="type">bool</span> zygote)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ... ...</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Start VM.  This thread becomes the main thread of the VM, and will</span></span><br><span class="line"><span class="comment">     * not return until the VM exits.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">char</span>* slashClassName = <span class="built_in">toSlashClassName</span>(className);</span><br><span class="line">    jclass startClass = env-&gt;<span class="built_in">FindClass</span>(slashClassName);</span><br><span class="line">    <span class="keyword">if</span> (startClass == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">ALOGE</span>(<span class="string">&quot;JavaVM unable to locate class &#x27;%s&#x27;\n&quot;</span>, slashClassName);</span><br><span class="line">        <span class="comment">/* keep going */</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        jmethodID startMeth = env-&gt;<span class="built_in">GetStaticMethodID</span>(startClass, <span class="string">&quot;main&quot;</span>,</span><br><span class="line">            <span class="string">&quot;([Ljava/lang/String;)V&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (startMeth == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">ALOGE</span>(<span class="string">&quot;JavaVM unable to find main() in &#x27;%s&#x27;\n&quot;</span>, className);</span><br><span class="line">            <span class="comment">/* keep going */</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 反射调用main函数，从native层进入java世界</span></span><br><span class="line">            env-&gt;<span class="built_in">CallStaticVoidMethod</span>(startClass, startMeth, strArray);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">            <span class="keyword">if</span> (env-&gt;<span class="built_in">ExceptionCheck</span>())</span><br><span class="line">                <span class="built_in">threadExitUncaughtException</span>(env);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(slashClassName);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">ALOGD</span>(<span class="string">&quot;Shutting down VM\n&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (mJavaVM-&gt;<span class="built_in">DetachCurrentThread</span>() != JNI_OK)</span><br><span class="line">        <span class="built_in">ALOGW</span>(<span class="string">&quot;Warning: unable to detach main thread\n&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (mJavaVM-&gt;<span class="built_in">DestroyJavaVM</span>() != <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">ALOGW</span>(<span class="string">&quot;Warning: VM did not shut down cleanly\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>start方法通过反射启动RuntimeInit类，进入到RuntimeInit的main函数：</p>
<p>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/">frameworks</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/">base</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/core/">core</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/core/java/">java</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/core/java/com/">com</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/core/java/com/android/">android</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/core/java/com/android/internal/">internal</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/core/java/com/android/internal/os/">os</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/core/java/com/android/internal/os/RuntimeInit.java">RuntimeInit.java</a> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> &#123;</span><br><span class="line">    enableDdms();</span><br><span class="line">    <span class="keyword">if</span> (argv.length == <span class="number">2</span> &amp;&amp; argv[<span class="number">1</span>].equals(<span class="string">&quot;application&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG) Slog.d(TAG, <span class="string">&quot;RuntimeInit: Starting application&quot;</span>);</span><br><span class="line">        redirectLogStreams();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG) Slog.d(TAG, <span class="string">&quot;RuntimeInit: Starting tool&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    commonInit();<span class="comment">// 进行一些常规的初始化工作</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Now that we&#x27;re running in interpreted code, call back into native code</span></span><br><span class="line"><span class="comment">     * to run the system.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    nativeFinishInit();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (DEBUG) Slog.d(TAG, <span class="string">&quot;Leaving RuntimeInit!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>nativeFinishInit函数如下：</p>
<p>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/">frameworks</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/">base</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/core/">core</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/core/jni/">jni</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/core/jni/AndroidRuntime.cpp">AndroidRuntime.cpp</a> </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> AndroidRuntime* gCurRuntime = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Code written in the Java Programming Language calls here from main().</span></span><br><span class="line"><span class="comment"> * 从用java写的RuntimeInit的main函数调用此处</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">com_android_internal_os_RuntimeInit_nativeFinishInit</span><span class="params">(JNIEnv* env, jobject clazz)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    gCurRuntime-&gt;<span class="built_in">onStarted</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>app_main.cpp中定义的AppRuntime继承AndroidRuntime，实现onStarted函数：</p>
<p>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/">frameworks</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/">base</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/cmds/">cmds</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/cmds/app_process/">app_process</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/cmds/app_process/app_main.cpp">app_main.cpp</a> </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AppRuntime</span> : <span class="keyword">public</span> AndroidRuntime</span><br><span class="line">&#123;</span><br><span class="line">  ... ...</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">onStarted</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        sp&lt;ProcessState&gt; proc = ProcessState::<span class="built_in">self</span>();</span><br><span class="line">        <span class="built_in">ALOGV</span>(<span class="string">&quot;App process: starting thread pool.\n&quot;</span>);</span><br><span class="line">        proc-&gt;<span class="built_in">startThreadPool</span>();</span><br><span class="line"></span><br><span class="line">        AndroidRuntime* ar = AndroidRuntime::<span class="built_in">getRuntime</span>();</span><br><span class="line">        <span class="comment">// 调用AndroidRuntime.callMain函数</span></span><br><span class="line">        ar-&gt;<span class="built_in">callMain</span>(mClassName, mClass, mArgs);</span><br><span class="line"></span><br><span class="line">        IPCThreadState::<span class="built_in">self</span>()-&gt;<span class="built_in">stopProcess</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/">frameworks</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/">base</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/core/">core</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/core/jni/">jni</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/core/jni/AndroidRuntime.cpp">AndroidRuntime.cpp</a> </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">status_t</span> <span class="title">AndroidRuntime::callMain</span><span class="params">(<span class="type">const</span> String8&amp; className, jclass clazz,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">const</span> Vector&lt;String8&gt;&amp; args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    JNIEnv* env;</span><br><span class="line">    jmethodID methodId;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">ALOGD</span>(<span class="string">&quot;Calling main entry %s&quot;</span>, className.<span class="built_in">string</span>());</span><br><span class="line"></span><br><span class="line">    env = <span class="built_in">getJNIEnv</span>();</span><br><span class="line">    <span class="keyword">if</span> (clazz == <span class="literal">NULL</span> || env == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> UNKNOWN_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    methodId = env-&gt;<span class="built_in">GetStaticMethodID</span>(clazz, <span class="string">&quot;main&quot;</span>, <span class="string">&quot;([Ljava/lang/String;)V&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (methodId == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">ALOGE</span>(<span class="string">&quot;ERROR: could not find method %s.main(String[])\n&quot;</span>, className.<span class="built_in">string</span>());</span><br><span class="line">        <span class="keyword">return</span> UNKNOWN_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * We want to call main() with a String array with our arguments in it.</span></span><br><span class="line"><span class="comment">     * Create an array and populate it.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    jclass stringClass;</span><br><span class="line">    jobjectArray strArray;</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">size_t</span> numArgs = args.<span class="built_in">size</span>();</span><br><span class="line">    stringClass = env-&gt;<span class="built_in">FindClass</span>(<span class="string">&quot;java/lang/String&quot;</span>);</span><br><span class="line">    strArray = env-&gt;<span class="built_in">NewObjectArray</span>(numArgs, stringClass, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; numArgs; i++) &#123;</span><br><span class="line">        jstring argStr = env-&gt;<span class="built_in">NewStringUTF</span>(args[i].<span class="built_in">string</span>());</span><br><span class="line">        env-&gt;<span class="built_in">SetObjectArrayElement</span>(strArray, i, argStr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最后在此处调用Pm.java的main函数</span></span><br><span class="line">    env-&gt;<span class="built_in">CallStaticVoidMethod</span>(clazz, methodId, strArray);</span><br><span class="line">    <span class="keyword">return</span> NO_ERROR;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-Pm-java流程"><a href="#3-Pm-java流程" class="headerlink" title="3. Pm.java流程"></a>3. Pm.java流程</h3><p>进入Pm.java的main函数：</p>
<p>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/">frameworks</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/">base</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/cmds/">cmds</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/cmds/pm/">pm</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/cmds/pm/src/">src</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/cmds/pm/src/com/">com</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/cmds/pm/src/com/android/">android</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/cmds/pm/src/com/android/commands/">commands</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/cmds/pm/src/com/android/commands/pm/">pm</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/cmds/pm/src/com/android/commands/pm/Pm.java">Pm.java</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> String[] mArgs;</span><br><span class="line">IPackageInstaller mInstaller;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">exitCode</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        exitCode = <span class="keyword">new</span> <span class="title class_">Pm</span>().run(args); <span class="comment">// 调用run方法</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;Error&quot;</span>, e);</span><br><span class="line">        System.err.println(<span class="string">&quot;Error: &quot;</span> + e);</span><br><span class="line">        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> RemoteException) &#123;</span><br><span class="line">            System.err.println(PM_NOT_RUNNING_ERR);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.exit(exitCode);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">run</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">validCommand</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (args.length &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果没有参数，则显示命令用法</span></span><br><span class="line">        <span class="keyword">return</span> showUsage();</span><br><span class="line">    &#125;</span><br><span class="line">    mAm = IAccountManager.Stub.asInterface(ServiceManager.getService(Context.ACCOUNT_SERVICE));</span><br><span class="line">    mUm = IUserManager.Stub.asInterface(ServiceManager.getService(Context.USER_SERVICE));</span><br><span class="line">    <span class="comment">// 利用Binder通信，得到PKMS服务端代理</span></span><br><span class="line">    mPm = IPackageManager.Stub.asInterface(ServiceManager.getService(<span class="string">&quot;package&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mPm == <span class="literal">null</span>) &#123;</span><br><span class="line">        System.err.println(PM_NOT_RUNNING_ERR);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// getPackageInstaller()在PKMS中实现，返回的是final PackageInstallerService mInstallerService;</span></span><br><span class="line">    mInstaller = mPm.getPackageInstaller();</span><br><span class="line"></span><br><span class="line">    mArgs = args;</span><br><span class="line">    <span class="type">String</span> <span class="variable">op</span> <span class="operator">=</span> args[<span class="number">0</span>];</span><br><span class="line">    mNextArg = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;list&quot;</span>.equals(op)) &#123;</span><br><span class="line">        <span class="keyword">return</span> runList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;path&quot;</span>.equals(op)) &#123;</span><br><span class="line">        <span class="keyword">return</span> runPath();</span><br><span class="line">    &#125;</span><br><span class="line">  ... ...</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;install&quot;</span>.equals(op)) &#123;</span><br><span class="line">        <span class="comment">// 这里我们是安装，则调用runInstall</span></span><br><span class="line">        <span class="keyword">return</span> runInstall();</span><br><span class="line">    &#125;</span><br><span class="line">  ... ...</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;uninstall&quot;</span>.equals(op)) &#123;</span><br><span class="line">        <span class="comment">// 如果是卸载则调用runUnistall</span></span><br><span class="line">        <span class="keyword">return</span> runUninstall();</span><br><span class="line">    &#125;</span><br><span class="line">  ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来看runInstall函数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Keep this around to support existing users of the &quot;pm install&quot; command that may not be</span></span><br><span class="line"><span class="comment"> * able to be updated [or, at least informed the API has changed] such as ddmlib.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Moving the implementation of &quot;pm install&quot; to &quot;cmd package install&quot; changes the executing</span></span><br><span class="line"><span class="comment"> * context. Instead of being a stand alone process, &quot;cmd package install&quot; runs in the</span></span><br><span class="line"><span class="comment"> * system_server process. Due to SELinux rules, system_server cannot access many directories;</span></span><br><span class="line"><span class="comment"> * one of which being the package install staging directory [/data/local/tmp].</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The use of &quot;adb install&quot; or &quot;cmd package install&quot; over &quot;pm install&quot; is highly encouraged.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">runInstall</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">    <span class="comment">// 根据install后面的参数创建InstallParams，也包含了SessionParams，标志为MODE_FULL_INSTALL</span></span><br><span class="line">    <span class="comment">// Mode for an install session whose staged APKs should fully replace any existing APKs for the target app.</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">InstallParams</span> <span class="variable">params</span> <span class="operator">=</span> makeInstallParams();</span><br><span class="line">    <span class="comment">// InstallParams之后的参数，就是所要安装的APK文件，即inPath</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">inPath</span> <span class="operator">=</span> nextArg();</span><br><span class="line">    <span class="comment">// 是否安装到外置存储</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">installExternal</span> <span class="operator">=</span></span><br><span class="line">            (params.sessionParams.installFlags &amp; PackageManager.INSTALL_EXTERNAL) != <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (params.sessionParams.sizeBytes &lt; <span class="number">0</span> &amp;&amp; inPath != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(inPath);</span><br><span class="line">        <span class="keyword">if</span> (file.isFile()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (installExternal) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">ApkLite</span> <span class="variable">baseApk</span> <span class="operator">=</span> PackageParser.parseApkLite(file, <span class="number">0</span>);</span><br><span class="line">                    <span class="type">PackageLite</span> <span class="variable">pkgLite</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PackageLite</span>(<span class="literal">null</span>, baseApk, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">                    params.sessionParams.setSize(</span><br><span class="line">                            PackageHelper.calculateInstalledSize(pkgLite, <span class="literal">false</span>,</span><br><span class="line">                                    params.sessionParams.abiOverride));</span><br><span class="line">                &#125; <span class="keyword">catch</span> (PackageParserException | IOException e) &#123;</span><br><span class="line">                    System.err.println(<span class="string">&quot;Error: Failed to parse APK file : &quot;</span> + e);</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                params.sessionParams.setSize(file.length());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1 Create Session</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">sessionId</span> <span class="operator">=</span> doCreateSession(params.sessionParams,</span><br><span class="line">            params.installerPackageName, params.userId);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (inPath == <span class="literal">null</span> &amp;&amp; params.sessionParams.sizeBytes == <span class="number">0</span>) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;Error: must either specify a package size or an APK file&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2 Write Session</span></span><br><span class="line">        <span class="keyword">if</span> (doWriteSession(sessionId, inPath, params.sessionParams.sizeBytes, <span class="string">&quot;base.apk&quot;</span>,</span><br><span class="line">                <span class="literal">false</span> <span class="comment">/*logSuccess*/</span>) != PackageInstaller.STATUS_SUCCESS) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3 Commit Session</span></span><br><span class="line">        <span class="keyword">if</span> (doCommitSession(sessionId, <span class="literal">false</span> <span class="comment">/*logSuccess*/</span>)</span><br><span class="line">                != PackageInstaller.STATUS_SUCCESS) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 安装成功打印&quot;Success&quot;</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Success&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mInstaller.abandonSession(sessionId);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ignore) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从代码中看，runInstall方法主要做了三件事：创建Session、对Session进行写操作以及提交Session，接下来看每一步的详细工作。</p>
<h4 id="3-1-Create-Session"><a href="#3-1-Create-Session" class="headerlink" title="3.1 Create Session"></a>3.1 Create Session</h4><p>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/">frameworks</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/">base</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/cmds/">cmds</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/cmds/pm/">pm</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/cmds/pm/src/">src</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/cmds/pm/src/com/">com</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/cmds/pm/src/com/android/">android</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/cmds/pm/src/com/android/commands/">commands</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/cmds/pm/src/com/android/commands/pm/">pm</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/cmds/pm/src/com/android/commands/pm/Pm.java">Pm.java</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">doCreateSession</span><span class="params">(SessionParams params, String installerPackageName, <span class="type">int</span> userId)</span></span><br><span class="line">        <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">    <span class="comment">// 通过AMS得到&quot;runInstallCreate&quot;(作为Context对应的字符串)对应的uid</span></span><br><span class="line">    userId = translateUserId(userId, <span class="string">&quot;runInstallCreate&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (userId == UserHandle.USER_ALL) &#123;</span><br><span class="line">        userId = UserHandle.USER_SYSTEM;</span><br><span class="line">        params.installFlags |= PackageManager.INSTALL_ALL_USERS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过mInstaller(IPackageInstaller)，即通过PakcageInstallerService创建Session</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">sessionId</span> <span class="operator">=</span> mInstaller.createSession(params, installerPackageName, userId);</span><br><span class="line">    <span class="keyword">return</span> sessionId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查看PackageInstallerService中的createSession函数：</p>
<p>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/">frameworks</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/">base</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/">services</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/">core</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/">java</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/com/">com</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/com/android/">android</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/com/android/server/">server</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/com/android/server/pm/">pm</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/com/android/server/pm/PackageInstallerService.java">PackageInstallerService.java</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">createSession</span><span class="params">(SessionParams params, String installerPackageName, <span class="type">int</span> userId)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> createSessionInternal(params, installerPackageName, userId);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> ExceptionUtils.wrap(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">createSessionInternal</span><span class="params">(SessionParams params, String installerPackageName, <span class="type">int</span> userId)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">callingUid</span> <span class="operator">=</span> Binder.getCallingUid();</span><br><span class="line">    mPm.enforceCrossUserPermission(callingUid, userId, <span class="literal">true</span>, <span class="literal">true</span>, <span class="string">&quot;createSession&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mPm.isUserRestricted(userId, UserManager.DISALLOW_INSTALL_APPS)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SecurityException</span>(<span class="string">&quot;User restriction prevents installing&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改SessionParams的installFlags</span></span><br><span class="line">    <span class="keyword">if</span> ((callingUid == Process.SHELL_UID) || (callingUid == Process.ROOT_UID)) &#123;</span><br><span class="line">        params.installFlags |= PackageManager.INSTALL_FROM_ADB;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        mAppOps.checkPackage(callingUid, installerPackageName);</span><br><span class="line"></span><br><span class="line">        params.installFlags &amp;= ~PackageManager.INSTALL_FROM_ADB;</span><br><span class="line">        params.installFlags &amp;= ~PackageManager.INSTALL_ALL_USERS;</span><br><span class="line">        params.installFlags |= PackageManager.INSTALL_REPLACE_EXISTING;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Only system components can circumvent runtime permissions when installing.</span></span><br><span class="line">    <span class="keyword">if</span> ((params.installFlags &amp; PackageManager.INSTALL_GRANT_RUNTIME_PERMISSIONS) != <span class="number">0</span></span><br><span class="line">            &amp;&amp; mContext.checkCallingOrSelfPermission(Manifest.permission</span><br><span class="line">            .INSTALL_GRANT_RUNTIME_PERMISSIONS) == PackageManager.PERMISSION_DENIED) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SecurityException</span>(<span class="string">&quot;You need the &quot;</span></span><br><span class="line">                + <span class="string">&quot;android.permission.INSTALL_GRANT_RUNTIME_PERMISSIONS permission &quot;</span></span><br><span class="line">                + <span class="string">&quot;to use the PackageManager.INSTALL_GRANT_RUNTIME_PERMISSIONS flag&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Defensively resize giant app icons</span></span><br><span class="line">    <span class="comment">// 调整app图标大小</span></span><br><span class="line">    <span class="keyword">if</span> (params.appIcon != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ActivityManager</span> <span class="variable">am</span> <span class="operator">=</span> (ActivityManager) mContext.getSystemService(</span><br><span class="line">                Context.ACTIVITY_SERVICE);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">iconSize</span> <span class="operator">=</span> am.getLauncherLargeIconSize();</span><br><span class="line">        <span class="keyword">if</span> ((params.appIcon.getWidth() &gt; iconSize * <span class="number">2</span>)</span><br><span class="line">                || (params.appIcon.getHeight() &gt; iconSize * <span class="number">2</span>)) &#123;</span><br><span class="line">            params.appIcon = Bitmap.createScaledBitmap(params.appIcon, iconSize, iconSize,</span><br><span class="line">                    <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (params.mode) &#123;</span><br><span class="line">        <span class="keyword">case</span> SessionParams.MODE_FULL_INSTALL:</span><br><span class="line">        <span class="keyword">case</span> SessionParams.MODE_INHERIT_EXISTING:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Invalid install mode: &quot;</span> + params.mode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If caller requested explicit location, sanity check it, otherwise</span></span><br><span class="line">    <span class="comment">// resolve the best internal or adopted location.</span></span><br><span class="line">    <span class="comment">// 根据SessionParams的installFlags进行一些操作</span></span><br><span class="line">    <span class="keyword">if</span> ((params.installFlags &amp; PackageManager.INSTALL_INTERNAL) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!PackageHelper.fitsOnInternal(mContext, params.sizeBytes)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;No suitable internal storage available&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((params.installFlags &amp; PackageManager.INSTALL_EXTERNAL) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!PackageHelper.fitsOnExternal(mContext, params.sizeBytes)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;No suitable external storage available&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((params.installFlags &amp; PackageManager.INSTALL_FORCE_VOLUME_UUID) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// For now, installs to adopted media are treated as internal from</span></span><br><span class="line">        <span class="comment">// an install flag point-of-view.</span></span><br><span class="line">        params.setInstallFlagsInternal();</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 通过adb安装会进入到这个分支，为SessionParams设置InstallInternal Flag</span></span><br><span class="line">        <span class="comment">// For now, installs to adopted media are treated as internal from</span></span><br><span class="line">        <span class="comment">// an install flag point-of-view.</span></span><br><span class="line">        params.setInstallFlagsInternal();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Resolve best location for install, based on combination of</span></span><br><span class="line">        <span class="comment">// requested install flags, delta size, and manifest settings.</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">long</span> <span class="variable">ident</span> <span class="operator">=</span> Binder.clearCallingIdentity();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            params.volumeUuid = PackageHelper.resolveInstallVolume(mContext,</span><br><span class="line">                    params.appPackageName, params.installLocation, params.sizeBytes);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            Binder.restoreCallingIdentity(ident);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> sessionId;</span><br><span class="line">    <span class="keyword">final</span> PackageInstallerSession session;</span><br><span class="line">    <span class="keyword">synchronized</span> (mSessions) &#123;</span><br><span class="line">        <span class="comment">// Sanity check that installer isn&#x27;t going crazy</span></span><br><span class="line">        <span class="comment">// 确保同一个uid没有提交过多的活动Session，MAX_ACTIVE_SESSIONS=1024</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">activeCount</span> <span class="operator">=</span> getSessionCount(mSessions, callingUid);</span><br><span class="line">        <span class="keyword">if</span> (activeCount &gt;= MAX_ACTIVE_SESSIONS) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(</span><br><span class="line">                    <span class="string">&quot;Too many active sessions for UID &quot;</span> + callingUid);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 确保同一个uid没有提交过多的历史Session，MAX_HISTORICAL_SESSIONS=1048576</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">historicalCount</span> <span class="operator">=</span> getSessionCount(mHistoricalSessions, callingUid);</span><br><span class="line">        <span class="keyword">if</span> (historicalCount &gt;= MAX_HISTORICAL_SESSIONS) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(</span><br><span class="line">                    <span class="string">&quot;Too many historical sessions for UID &quot;</span> + callingUid);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sessionId = allocateSessionIdLocked();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">long</span> <span class="variable">createdMillis</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="comment">// We&#x27;re staging to exactly one location</span></span><br><span class="line">    <span class="type">File</span> <span class="variable">stageDir</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">stageCid</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 根据installFlags决定安装目录，默认安装到internal目录下</span></span><br><span class="line">    <span class="keyword">if</span> ((params.installFlags &amp; PackageManager.INSTALL_INTERNAL) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">isEphemeral</span> <span class="operator">=</span></span><br><span class="line">                (params.installFlags &amp; PackageManager.INSTALL_EPHEMERAL) != <span class="number">0</span>;</span><br><span class="line">        stageDir = buildStageDir(params.volumeUuid, sessionId, isEphemeral);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        stageCid = buildExternalStageCid(sessionId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    session = <span class="keyword">new</span> <span class="title class_">PackageInstallerSession</span>(mInternalCallback, mContext, mPm,</span><br><span class="line">            mInstallThread.getLooper(), sessionId, userId, installerPackageName, callingUid,</span><br><span class="line">            params, createdMillis, stageDir, stageCid, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (mSessions) &#123;</span><br><span class="line">        mSessions.put(sessionId, session);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 回调通知Session已经create</span></span><br><span class="line">    mCallbacks.notifySessionCreated(session.sessionId, session.userId);</span><br><span class="line">    <span class="comment">// 在mSessionsFile中记录</span></span><br><span class="line">    writeSessionsAsync();</span><br><span class="line">    <span class="keyword">return</span> sessionId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从代码中可知creatSession主要工作就是为APK的安装做好准备工作，最终创建出PackageInstallerSession对象，这个对象可以看作是“安装APK”这个请求的封装，其中包含了处理这个请求需要的一些信息。</p>
<h4 id="3-2-Write-Session"><a href="#3-2-Write-Session" class="headerlink" title="3.2 Write Session"></a>3.2 Write Session</h4><p>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/">frameworks</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/">base</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/cmds/">cmds</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/cmds/pm/">pm</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/cmds/pm/src/">src</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/cmds/pm/src/com/">com</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/cmds/pm/src/com/android/">android</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/cmds/pm/src/com/android/commands/">commands</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/cmds/pm/src/com/android/commands/pm/">pm</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/cmds/pm/src/com/android/commands/pm/Pm.java">Pm.java</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">doWriteSession</span><span class="params">(<span class="type">int</span> sessionId, String inPath, <span class="type">long</span> sizeBytes, String splitName,</span></span><br><span class="line"><span class="params">        <span class="type">boolean</span> logSuccess)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;-&quot;</span>.equals(inPath)) &#123;</span><br><span class="line">        inPath = <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (inPath != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// file指向待安装的apk文件</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(inPath);</span><br><span class="line">        <span class="keyword">if</span> (file.isFile()) &#123;</span><br><span class="line">            sizeBytes = file.length();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">SessionInfo</span> <span class="variable">info</span> <span class="operator">=</span> mInstaller.getSessionInfo(sessionId);</span><br><span class="line"></span><br><span class="line">    PackageInstaller.<span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 获取PakcageInstallerSession的调用接口</span></span><br><span class="line">        session = <span class="keyword">new</span> <span class="title class_">PackageInstaller</span>.Session(</span><br><span class="line">                mInstaller.openSession(sessionId));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (inPath != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 定义输入端，待安装apk对应文件的源地址</span></span><br><span class="line">            in = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(inPath);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            in = <span class="keyword">new</span> <span class="title class_">SizedInputStream</span>(System.in, sizeBytes);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 定义输出端，对应copy后的目的地址</span></span><br><span class="line">        out = session.openWrite(splitName, <span class="number">0</span>, sizeBytes);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">65536</span>];</span><br><span class="line">        <span class="type">int</span> c;</span><br><span class="line">        <span class="comment">// 开始copy文件</span></span><br><span class="line">        <span class="keyword">while</span> ((c = in.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            total += c;</span><br><span class="line">            out.write(buffer, <span class="number">0</span>, c);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (info.sizeBytes &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="type">float</span> <span class="variable">fraction</span> <span class="operator">=</span> ((<span class="type">float</span>) c / (<span class="type">float</span>) info.sizeBytes);</span><br><span class="line">                <span class="comment">// 更新copy的进度（c为已copy的，info.sizeBytes为总的）</span></span><br><span class="line">                session.addProgress(fraction);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        session.fsync(out);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (logSuccess) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Success: streamed &quot;</span> + total + <span class="string">&quot; bytes&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> PackageInstaller.STATUS_SUCCESS;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        System.err.println(<span class="string">&quot;Error: failed to write; &quot;</span> + e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> PackageInstaller.STATUS_FAILURE;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        IoUtils.closeQuietly(out);</span><br><span class="line">        IoUtils.closeQuietly(in);</span><br><span class="line">        IoUtils.closeQuietly(session);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从代码看此段代码主要作用是通过Session将源端的数据copy到目的端。</p>
<p>整个执行过程是基于C&#x2F;S架构的通信工程，PackageInstallerSession是服务端：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PackageInstallerSession</span> <span class="keyword">extends</span> <span class="title class_">IPackageInstallerSession</span>.Stub &#123;</span><br></pre></td></tr></table></figure>

<p>Pm作为PackageInstallerService的客户端，利用PackageInstallerSession来封装每一次完整的通信过程。</p>
<h5 id="3-2-1-得到PackageInstallerSession的代理对象"><a href="#3-2-1-得到PackageInstallerSession的代理对象" class="headerlink" title="3.2.1 得到PackageInstallerSession的代理对象"></a>3.2.1 得到PackageInstallerSession的代理对象</h5><p>在Write Session中通过<code>session = new PackageInstaller.Session(mInstaller.openSession(sessionId));</code>获取了PackageInstallerSession的调用接口，PackageInstaller.Session的构造函数如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Session</span> <span class="keyword">implements</span> <span class="title class_">Closeable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> IPackageInstallerSession mSession;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** &#123;<span class="doctag">@hide</span>&#125; */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Session</span><span class="params">(IPackageInstallerSession session)</span> &#123;</span><br><span class="line">        mSession = session;</span><br><span class="line">    &#125;</span><br><span class="line">... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>传入的参数是<code>mInstaller.openSession(sessionId)</code>，mInstaller是在Pm.java中定义的，<code>IPackageInstaller mInstaller;</code>，<code>mInstaller = mPm.getPackageInstaller();</code>，最终返回的是<code>final PackageInstallerService mInstallerService;</code> ，来看一下PackageInstallerService.openSession函数：</p>
<p>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/">frameworks</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/">base</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/">services</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/">core</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/">java</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/com/">com</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/com/android/">android</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/com/android/server/">server</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/com/android/server/pm/">pm</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/com/android/server/pm/PackageInstallerService.java">PackageInstallerService.java</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> IPackageInstallerSession <span class="title function_">openSession</span><span class="params">(<span class="type">int</span> sessionId)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> openSessionInternal(sessionId);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> ExceptionUtils.wrap(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> IPackageInstallerSession <span class="title function_">openSessionInternal</span><span class="params">(<span class="type">int</span> sessionId)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mSessions) &#123;</span><br><span class="line">        <span class="comment">// 根据sessionId获得PackageInstallerSession</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">PackageInstallerSession</span> <span class="variable">session</span> <span class="operator">=</span> mSessions.get(sessionId);</span><br><span class="line">        <span class="keyword">if</span> (session == <span class="literal">null</span> || !isCallingUidOwner(session)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SecurityException</span>(<span class="string">&quot;Caller has no access to session &quot;</span> + sessionId);</span><br><span class="line">        &#125;</span><br><span class="line">        session.open();</span><br><span class="line">        <span class="keyword">return</span> session;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// open函数作用是准备好待copy的目录</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">if</span> (mActiveCount.getAndIncrement() == <span class="number">0</span>) &#123;</span><br><span class="line">        mCallback.onSessionActiveChanged(<span class="built_in">this</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!mPrepared) &#123;</span><br><span class="line">            <span class="keyword">if</span> (stageDir != <span class="literal">null</span>) &#123;</span><br><span class="line">                prepareStageDir(stageDir);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (stageCid != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="type">long</span> <span class="variable">identity</span> <span class="operator">=</span> Binder.clearCallingIdentity();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    prepareExternalStageCid(stageCid, params.sizeBytes);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    Binder.restoreCallingIdentity(identity);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// <span class="doctag">TODO:</span> deliver more granular progress for ASEC allocation</span></span><br><span class="line">                mInternalProgress = <span class="number">0.25f</span>;</span><br><span class="line">                computeProgressLocked(<span class="literal">true</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(</span><br><span class="line">                        <span class="string">&quot;Exactly one of stageDir or stageCid stage must be set&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            mPrepared = <span class="literal">true</span>;</span><br><span class="line">            mCallback.onSessionPrepared(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-2-2-定义输出端，得到客户端"><a href="#3-2-2-定义输出端，得到客户端" class="headerlink" title="3.2.2 定义输出端，得到客户端"></a>3.2.2 定义输出端，得到客户端</h5><p>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/">frameworks</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/">base</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/core/">core</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/core/java/">java</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/core/java/android/">android</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/core/java/android/content/">content</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/core/java/android/content/pm/">pm</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/core/java/android/content/pm/PackageInstaller.java">PackageInstaller.java</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@NonNull</span> OutputStream <span class="title function_">openWrite</span><span class="params">(<span class="meta">@NonNull</span> String name, <span class="type">long</span> offsetBytes,</span></span><br><span class="line"><span class="params">        <span class="type">long</span> lengthBytes)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 调用了mSession(PackageInstallerSession对象)的openWrite方法，发生了Binder通信</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">ParcelFileDescriptor</span> <span class="variable">clientSocket</span> <span class="operator">=</span> mSession.openWrite(name,</span><br><span class="line">                offsetBytes, lengthBytes);</span><br><span class="line">        <span class="comment">// 此处创建了一个FileBridge对象</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FileBridge</span>.FileBridgeOutputStream(clientSocket);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">        ExceptionUtils.maybeUnwrapIOException(e);</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> e.rethrowFromSystemServer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实际上就是获得输出流，对应copy后的目的地址，接下来看看PackageInstallerSession的openWrite方法。</p>
<p>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/">frameworks</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/">base</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/">services</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/">core</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/">java</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/com/">com</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/com/android/">android</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/com/android/server/">server</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/com/android/server/pm/">pm</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/com/android/server/pm/PackageInstallerSession.java">PackageInstallerSession.java</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ParcelFileDescriptor <span class="title function_">openWrite</span><span class="params">(String name, <span class="type">long</span> offsetBytes, <span class="type">long</span> lengthBytes)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> openWriteInternal(name, offsetBytes, lengthBytes);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> ExceptionUtils.wrap(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ParcelFileDescriptor <span class="title function_">openWriteInternal</span><span class="params">(String name, <span class="type">long</span> offsetBytes, <span class="type">long</span> lengthBytes)</span></span><br><span class="line">        <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// Quick sanity check of state, and allocate a pipe for ourselves. We</span></span><br><span class="line">    <span class="comment">// then do heavy disk allocation outside the lock, but this open pipe</span></span><br><span class="line">    <span class="comment">// will block any attempted install transitions.</span></span><br><span class="line">    <span class="comment">// FileBridge建立客户端和服务端的管道</span></span><br><span class="line">    <span class="keyword">final</span> FileBridge bridge;</span><br><span class="line">    <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">        assertPreparedAndNotSealed(<span class="string">&quot;openWrite&quot;</span>);</span><br><span class="line"></span><br><span class="line">        bridge = <span class="keyword">new</span> <span class="title class_">FileBridge</span>();</span><br><span class="line">        mBridges.add(bridge);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// Use installer provided name for now; we always rename later</span></span><br><span class="line">        <span class="keyword">if</span> (!FileUtils.isValidExtFilename(name)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Invalid name: &quot;</span> + name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> File target;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">long</span> <span class="variable">identity</span> <span class="operator">=</span> Binder.clearCallingIdentity();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            target = <span class="keyword">new</span> <span class="title class_">File</span>(resolveStageDir(), name);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            Binder.restoreCallingIdentity(identity);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> this should delegate to DCS so the system process avoids</span></span><br><span class="line">        <span class="comment">// holding open FDs into containers.</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">FileDescriptor</span> <span class="variable">targetFd</span> <span class="operator">=</span> Libcore.os.open(target.getAbsolutePath(),</span><br><span class="line">                O_CREAT | O_WRONLY, <span class="number">0644</span>);</span><br><span class="line">        Os.chmod(target.getAbsolutePath(), <span class="number">0644</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If caller specified a total length, allocate it for them. Free up</span></span><br><span class="line">        <span class="comment">// cache space to grow, if needed.</span></span><br><span class="line">        <span class="keyword">if</span> (lengthBytes &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">StructStat</span> <span class="variable">stat</span> <span class="operator">=</span> Libcore.os.fstat(targetFd);</span><br><span class="line">            <span class="keyword">final</span> <span class="type">long</span> <span class="variable">deltaBytes</span> <span class="operator">=</span> lengthBytes - stat.st_size;</span><br><span class="line">            <span class="comment">// Only need to free up space when writing to internal stage</span></span><br><span class="line">            <span class="keyword">if</span> (stageDir != <span class="literal">null</span> &amp;&amp; deltaBytes &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                mPm.freeStorage(params.volumeUuid, deltaBytes);</span><br><span class="line">            &#125;</span><br><span class="line">            Libcore.os.posix_fallocate(targetFd, <span class="number">0</span>, lengthBytes);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (offsetBytes &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            Libcore.os.lseek(targetFd, offsetBytes, OsConstants.SEEK_SET);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        bridge.setTargetFile(targetFd);</span><br><span class="line">        bridge.start();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ParcelFileDescriptor</span>(bridge.getClientSocket());</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (ErrnoException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> e.rethrowAsIOException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>FileBridge到底是什么呢，来看一下FileBridge类：</p>
<p>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/">frameworks</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/">base</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/core/">core</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/core/java/">java</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/core/java/android/">android</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/core/java/android/os/">os</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/core/java/android/os/FileBridge.java">FileBridge.java</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Simple bridge that allows file access across process boundaries without</span></span><br><span class="line"><span class="comment"> * returning the underlying &#123;<span class="doctag">@link</span> FileDescriptor&#125;. This is useful when the</span></span><br><span class="line"><span class="comment"> * server side needs to strongly assert that a client side is completely</span></span><br><span class="line"><span class="comment"> * hands-off.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@hide</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileBridge</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TAG</span> <span class="operator">=</span> <span class="string">&quot;FileBridge&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> consider extending to support bidirectional IO</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MSG_LENGTH</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** CMD_WRITE [len] [data] */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CMD_WRITE</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="comment">/** CMD_FSYNC */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CMD_FSYNC</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="comment">/** CMD_CLOSE */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CMD_CLOSE</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> FileDescriptor mTarget;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">FileDescriptor</span> <span class="variable">mServer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileDescriptor</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">FileDescriptor</span> <span class="variable">mClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileDescriptor</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">boolean</span> mClosed;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FileBridge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 构造函数建立的mServer和mClient之间的管道</span></span><br><span class="line">            Os.socketpair(AF_UNIX, SOCK_STREAM, <span class="number">0</span>, mServer, mClient);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ErrnoException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Failed to create bridge&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isClosed</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mClosed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">forceClose</span><span class="params">()</span> &#123;</span><br><span class="line">        IoUtils.closeQuietly(mTarget);</span><br><span class="line">        IoUtils.closeQuietly(mServer);</span><br><span class="line">        IoUtils.closeQuietly(mClient);</span><br><span class="line">        mClosed = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTargetFile</span><span class="params">(FileDescriptor target)</span> &#123;</span><br><span class="line">        mTarget = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> FileDescriptor <span class="title function_">getClientSocket</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">byte</span>[] temp = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">8192</span>];</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// mServer和mClient已经通过管道绑定，取出从mClient写入到mServer中的数据并进行处理</span></span><br><span class="line">            <span class="keyword">while</span> (IoBridge.read(mServer, temp, <span class="number">0</span>, MSG_LENGTH) == MSG_LENGTH) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="type">int</span> <span class="variable">cmd</span> <span class="operator">=</span> Memory.peekInt(temp, <span class="number">0</span>, ByteOrder.BIG_ENDIAN);</span><br><span class="line">                <span class="keyword">if</span> (cmd == CMD_WRITE) &#123;</span><br><span class="line">                    <span class="comment">// Shuttle data into local file</span></span><br><span class="line">                    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> Memory.peekInt(temp, <span class="number">4</span>, ByteOrder.BIG_ENDIAN);</span><br><span class="line">                    <span class="keyword">while</span> (len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> IoBridge.read(mServer, temp, <span class="number">0</span>, Math.min(temp.length, len));</span><br><span class="line">                        <span class="keyword">if</span> (n == -<span class="number">1</span>) &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(</span><br><span class="line">                                    <span class="string">&quot;Unexpected EOF; still expected &quot;</span> + len + <span class="string">&quot; bytes&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        IoBridge.write(mTarget, temp, <span class="number">0</span>, n);</span><br><span class="line">                        len -= n;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmd == CMD_FSYNC) &#123;</span><br><span class="line">                    <span class="comment">// Sync and echo back to confirm</span></span><br><span class="line">                    Os.fsync(mTarget);</span><br><span class="line">                    IoBridge.write(mServer, temp, <span class="number">0</span>, MSG_LENGTH);</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmd == CMD_CLOSE) &#123;</span><br><span class="line">                    <span class="comment">// Close and echo back to confirm</span></span><br><span class="line">                    Os.fsync(mTarget);</span><br><span class="line">                    Os.close(mTarget);</span><br><span class="line">                    mClosed = <span class="literal">true</span>;</span><br><span class="line">                    IoBridge.write(mServer, temp, <span class="number">0</span>, MSG_LENGTH);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ErrnoException | IOException e) &#123;</span><br><span class="line">            Log.wtf(TAG, <span class="string">&quot;Failed during bridge&quot;</span>, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            forceClose(); <span class="comment">// 此处会关闭bridge</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>在PackageInstallerSession中的openWrite函数中，Pm得到与PackageInstallerSession通信的client端，同时PackageInstallerSession也启动了FileBridge准备接收数据。</p>
<p>在Write Session中进行文件copy时，最终是利用FileBridge的管道来完成实际的工作。</p>
<h4 id="3-3-Commit-Session"><a href="#3-3-Commit-Session" class="headerlink" title="3.3 Commit Session"></a>3.3 Commit Session</h4><p>在doWriteSession函数完成后，APK源文件已经copy到目的地址了，紧接着开始doCommitSession的工作：</p>
<p>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/">frameworks</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/">base</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/cmds/">cmds</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/cmds/pm/">pm</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/cmds/pm/src/">src</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/cmds/pm/src/com/">com</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/cmds/pm/src/com/android/">android</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/cmds/pm/src/com/android/commands/">commands</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/cmds/pm/src/com/android/commands/pm/">pm</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/cmds/pm/src/com/android/commands/pm/Pm.java">Pm.java</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">doCommitSession</span><span class="params">(<span class="type">int</span> sessionId, <span class="type">boolean</span> logSuccess)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">    PackageInstaller.<span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        session = <span class="keyword">new</span> <span class="title class_">PackageInstaller</span>.Session(</span><br><span class="line">                mInstaller.openSession(sessionId));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">LocalIntentReceiver</span> <span class="variable">receiver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LocalIntentReceiver</span>();</span><br><span class="line">        <span class="comment">// 此处提交Session</span></span><br><span class="line">        session.commit(receiver.getIntentSender());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Intent</span> <span class="variable">result</span> <span class="operator">=</span> receiver.getResult();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">status</span> <span class="operator">=</span> result.getIntExtra(PackageInstaller.EXTRA_STATUS,</span><br><span class="line">                PackageInstaller.STATUS_FAILURE);</span><br><span class="line">        <span class="keyword">if</span> (status == PackageInstaller.STATUS_SUCCESS) &#123;</span><br><span class="line">            <span class="keyword">if</span> (logSuccess) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Success&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;Failure [&quot;</span></span><br><span class="line">                    + result.getStringExtra(PackageInstaller.EXTRA_STATUS_MESSAGE) + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        IoUtils.closeQuietly(session);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/">frameworks</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/">base</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/core/">core</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/core/java/">java</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/core/java/android/">android</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/core/java/android/content/">content</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/core/java/android/content/pm/">pm</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/core/java/android/content/pm/PackageInstaller.java">PackageInstaller.java</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Attempt to commit everything staged in this session. This may require</span></span><br><span class="line"><span class="comment"> * user intervention, and so it may not happen immediately. The final</span></span><br><span class="line"><span class="comment"> * result of the commit will be reported through the given callback.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Once this method is called, no additional mutations may be performed</span></span><br><span class="line"><span class="comment"> * on the session. If the device reboots before the session has been</span></span><br><span class="line"><span class="comment"> * finalized, you may commit the session again.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> SecurityException if streams opened through</span></span><br><span class="line"><span class="comment"> *             &#123;<span class="doctag">@link</span> #openWrite(String, long, long)&#125; are still open.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commit</span><span class="params">(<span class="meta">@NonNull</span> IntentSender statusReceiver)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 通过Binder通信调用PackageInstallerSession中的commit函数</span></span><br><span class="line">        mSession.commit(statusReceiver);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> e.rethrowFromSystemServer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/">frameworks</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/">base</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/">services</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/">core</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/">java</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/com/">com</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/com/android/">android</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/com/android/server/">server</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/com/android/server/pm/">pm</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/com/android/server/pm/PackageInstallerSession.java">PackageInstallerSession.java</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commit</span><span class="params">(IntentSender statusReceiver)</span> &#123;</span><br><span class="line">    Preconditions.checkNotNull(statusReceiver);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">boolean</span> wasSealed; <span class="comment">// boolean默认值为false</span></span><br><span class="line">    <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">        wasSealed = mSealed;</span><br><span class="line">        <span class="keyword">if</span> (!mSealed) &#123;</span><br><span class="line">            <span class="comment">// Verify that all writers are hands-off</span></span><br><span class="line">            <span class="comment">// 在FileBridge.java中run()的finally代码块中(也即doWriteSession传输数据的结尾)会关闭bridge</span></span><br><span class="line">            <span class="keyword">for</span> (FileBridge bridge : mBridges) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!bridge.isClosed()) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SecurityException</span>(<span class="string">&quot;Files still open&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            mSealed = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Client staging is fully done at this point</span></span><br><span class="line">        mClientProgress = <span class="number">1f</span>;</span><br><span class="line">        computeProgressLocked(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!wasSealed) &#123;</span><br><span class="line">        <span class="comment">// Persist the fact that we&#x27;ve sealed ourselves to prevent</span></span><br><span class="line">        <span class="comment">// mutations of any hard links we create. We do this without holding</span></span><br><span class="line">        <span class="comment">// the session lock, since otherwise it&#x27;s a lock inversion.</span></span><br><span class="line">        mCallback.onSessionSealedBlocking(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This ongoing commit should keep session active, even though client</span></span><br><span class="line">    <span class="comment">// will probably close their end.</span></span><br><span class="line">    mActiveCount.incrementAndGet();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">PackageInstallObserverAdapter</span> <span class="variable">adapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PackageInstallObserverAdapter</span>(mContext,</span><br><span class="line">            statusReceiver, sessionId, mIsInstallerDeviceOwner, userId);</span><br><span class="line">    mHandler.obtainMessage(MSG_COMMIT, adapter.getBinder()).sendToTarget();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>指定mHandler对应的callback：</p>
<p>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/">frameworks</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/">base</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/">services</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/">core</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/">java</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/com/">com</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/com/android/">android</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/com/android/server/">server</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/com/android/server/pm/">pm</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/com/android/server/pm/PackageInstallerSession.java">PackageInstallerSession.java</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Handler.<span class="type">Callback</span> <span class="variable">mHandlerCallback</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Handler</span>.Callback() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">handleMessage</span><span class="params">(Message msg)</span> &#123;</span><br><span class="line">        <span class="comment">// Cache package manager data without the lock held</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">PackageInfo</span> <span class="variable">pkgInfo</span> <span class="operator">=</span> mPm.getPackageInfo(</span><br><span class="line">                params.appPackageName, PackageManager.GET_SIGNATURES <span class="comment">/*flags*/</span>, userId);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ApplicationInfo</span> <span class="variable">appInfo</span> <span class="operator">=</span> mPm.getApplicationInfo(</span><br><span class="line">                params.appPackageName, <span class="number">0</span>, userId);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">            <span class="keyword">if</span> (msg.obj != <span class="literal">null</span>) &#123;</span><br><span class="line">                mRemoteObserver = (IPackageInstallObserver2) msg.obj;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 最终触发commitLocked</span></span><br><span class="line">                commitLocked(pkgInfo, appInfo);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (PackageManagerException e) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="type">String</span> <span class="variable">completeMsg</span> <span class="operator">=</span> ExceptionUtils.getCompleteMessage(e);</span><br><span class="line">                Slog.e(TAG, <span class="string">&quot;Commit of session &quot;</span> + sessionId + <span class="string">&quot; failed: &quot;</span> + completeMsg);</span><br><span class="line">                destroyInternal();</span><br><span class="line">                dispatchSessionFinished(e.error, completeMsg, <span class="literal">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">commitLocked</span><span class="params">(PackageInfo pkgInfo, ApplicationInfo appInfo)</span></span><br><span class="line">        <span class="keyword">throws</span> PackageManagerException &#123;</span><br><span class="line">    ... ...</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        resolveStageDir(); <span class="comment">// 解析安装地址，即apk文件copy后的目的地址</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">PackageManagerException</span>(INSTALL_FAILED_CONTAINER_ERROR,</span><br><span class="line">                <span class="string">&quot;Failed to resolve stage location&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Verify that stage looks sane with respect to existing application.</span></span><br><span class="line">    <span class="comment">// This currently only ensures packageName, versionCode, and certificate</span></span><br><span class="line">    <span class="comment">// consistency.</span></span><br><span class="line">    <span class="comment">// 检查apk文件是否满足要求，验证包名，版本号，证书的一致性</span></span><br><span class="line">    validateInstallLocked(pkgInfo, appInfo);</span><br><span class="line"></span><br><span class="line">    Preconditions.checkNotNull(mPackageName);</span><br><span class="line">    Preconditions.checkNotNull(mSignatures);</span><br><span class="line">    Preconditions.checkNotNull(mResolvedBaseFile);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查权限</span></span><br><span class="line">    <span class="keyword">if</span> (!mPermissionsAccepted) &#123;</span><br><span class="line">        <span class="comment">// User needs to accept permissions; give installer an intent they</span></span><br><span class="line">        <span class="comment">// can use to involve user.</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(PackageInstaller.ACTION_CONFIRM_PERMISSIONS);</span><br><span class="line">        intent.setPackage(mContext.getPackageManager().getPermissionControllerPackageName());</span><br><span class="line">        intent.putExtra(PackageInstaller.EXTRA_SESSION_ID, sessionId);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mRemoteObserver.onUserActionRequired(intent);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException ignored) &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Commit was keeping session marked as active until now; release</span></span><br><span class="line">        <span class="comment">// that extra refcount so session appears idle.</span></span><br><span class="line">        close();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (stageCid != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Figure out the final installed size and resize the container once</span></span><br><span class="line">        <span class="comment">// and for all. Internally the parser handles straddling between two</span></span><br><span class="line">        <span class="comment">// locations when inheriting.</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">long</span> <span class="variable">finalSize</span> <span class="operator">=</span> calculateInstalledSize();</span><br><span class="line">        resizeContainer(stageCid, finalSize);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Inherit any packages and native libraries from existing install that</span></span><br><span class="line">    <span class="comment">// haven&#x27;t been overridden.</span></span><br><span class="line">    <span class="keyword">if</span> (params.mode == SessionParams.MODE_INHERIT_EXISTING) &#123;</span><br><span class="line">        <span class="comment">// 如果新的APK文件继承某些已安装的Package(不懂。。。)，此处将copy需要的native库文件等</span></span><br><span class="line">        ... ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> surface more granular state from dexopt</span></span><br><span class="line">    mInternalProgress = <span class="number">0.5f</span>;</span><br><span class="line">    computeProgressLocked(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Unpack native libraries</span></span><br><span class="line">    <span class="comment">// 解压native库文件</span></span><br><span class="line">    extractNativeLibraries(mResolvedStageDir, params.abiOverride);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Container is ready to go, let&#x27;s seal it up!</span></span><br><span class="line">    <span class="comment">// 封装容器，会针对安装在sdcard的操作做一些处理</span></span><br><span class="line">    <span class="keyword">if</span> (stageCid != <span class="literal">null</span>) &#123;</span><br><span class="line">        finalizeAndFixContainer(stageCid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// We&#x27;ve reached point of no return; call into PMS to install the stage.</span></span><br><span class="line">    <span class="comment">// Regardless of success or failure we always destroy session.</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">IPackageInstallObserver2</span> <span class="variable">localObserver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IPackageInstallObserver2</span>.Stub() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onUserActionRequired</span><span class="params">(Intent intent)</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onPackageInstalled</span><span class="params">(String basePackageName, <span class="type">int</span> returnCode, String msg,</span></span><br><span class="line"><span class="params">                Bundle extras)</span> &#123;</span><br><span class="line">            destroyInternal();</span><br><span class="line">            dispatchSessionFinished(returnCode, msg, extras);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> UserHandle user;</span><br><span class="line">    <span class="keyword">if</span> ((params.installFlags &amp; PackageManager.INSTALL_ALL_USERS) != <span class="number">0</span>) &#123;</span><br><span class="line">        user = UserHandle.ALL;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        user = <span class="keyword">new</span> <span class="title class_">UserHandle</span>(userId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mRelinquished = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// 调用PKMS的installStage，进入安装的下一步操作</span></span><br><span class="line">    mPm.installStage(mPackageName, stageDir, stageCid, localObserver, params,</span><br><span class="line">            installerPackageName, installerUid, user, mCertificates);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>到这里可以总结Pm.java所做的事情，实际操作就是将adb copy的文件，copy到系统内或者sdcard的目录中，进行初步的权限检查等工作，最后通知PKMS进入Install Stage。这部分流程图如下：</p>
<p><img src="http://otqux1hnn.bkt.clouddn.com/rangerzhou/170904/pm.png" alt="pm流程"></p>
<h3 id="4-installStage"><a href="#4-installStage" class="headerlink" title="4. installStage"></a>4. installStage</h3><p>接下来进入PKMS，首先来看installStage函数：</p>
<p>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/">frameworks</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/">base</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/">services</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/">core</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/">java</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/com/">com</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/com/android/">android</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/com/android/server/">server</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/com/android/server/pm/">pm</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/com/android/server/pm/PackageManagerService.java">PackageManagerService.java</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">installStage</span><span class="params">(String packageName, File stagedDir, String stagedCid,</span></span><br><span class="line"><span class="params">        IPackageInstallObserver2 observer, PackageInstaller.SessionParams sessionParams,</span></span><br><span class="line"><span class="params">        String installerPackageName, <span class="type">int</span> installerUid, UserHandle user,</span></span><br><span class="line"><span class="params">        Certificate[][] certificates)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (DEBUG_EPHEMERAL) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((sessionParams.installFlags &amp; PackageManager.INSTALL_EPHEMERAL) != <span class="number">0</span>) &#123;</span><br><span class="line">            Slog.d(TAG, <span class="string">&quot;Ephemeral install of &quot;</span> + packageName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// verificationInfo主要用于存储权限验证需要的信息</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">VerificationInfo</span> <span class="variable">verificationInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VerificationInfo</span>(</span><br><span class="line">            sessionParams.originatingUri, sessionParams.referrerUri,</span><br><span class="line">            sessionParams.originatingUid, installerUid);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> OriginInfo origin;</span><br><span class="line">    <span class="keyword">if</span> (stagedDir != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// origin存储apk文件的路径信息</span></span><br><span class="line">        origin = OriginInfo.fromStagedFile(stagedDir);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        origin = OriginInfo.fromStagedContainer(stagedCid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> mHandler.obtainMessage(INIT_COPY); <span class="comment">// 参数为INIT_COPY</span></span><br><span class="line">    <span class="comment">// 准备安装所需要的参数</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">InstallParams</span> <span class="variable">params</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InstallParams</span>(origin, <span class="literal">null</span>, observer,</span><br><span class="line">            sessionParams.installFlags, installerPackageName, sessionParams.volumeUuid,</span><br><span class="line">            verificationInfo, user, sessionParams.abiOverride,</span><br><span class="line">            sessionParams.grantedRuntimePermissions, certificates);</span><br><span class="line">    params.setTraceMethod(<span class="string">&quot;installStage&quot;</span>).setTraceCookie(System.identityHashCode(params));</span><br><span class="line">    msg.obj = params; <span class="comment">// 把安装参数赋给msg.obj</span></span><br><span class="line"></span><br><span class="line">    Trace.asyncTraceBegin(TRACE_TAG_PACKAGE_MANAGER, <span class="string">&quot;installStage&quot;</span>,</span><br><span class="line">            System.identityHashCode(msg.obj));</span><br><span class="line">    Trace.asyncTraceBegin(TRACE_TAG_PACKAGE_MANAGER, <span class="string">&quot;queueInstall&quot;</span>,</span><br><span class="line">            System.identityHashCode(msg.obj));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送INIT_COPY消息，驱动处理流程</span></span><br><span class="line">    mHandler.sendMessage(msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此处的mHandler为PKMS中内部类PackageHandler对象，其中处理消息的函数为doHandleMessage:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_CONTAINER_PACKAGE</span> <span class="operator">=</span> <span class="string">&quot;com.android.defcontainer&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ComponentName</span> <span class="variable">DEFAULT_CONTAINER_COMPONENT</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComponentName</span>(</span><br><span class="line">            DEFAULT_CONTAINER_PACKAGE,</span><br><span class="line">            <span class="string">&quot;com.android.defcontainer.DefaultContainerService&quot;</span>);</span><br><span class="line">... ...</span><br><span class="line">	<span class="keyword">class</span> <span class="title class_">PackageHandler</span> <span class="keyword">extends</span> <span class="title class_">Handler</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">mBound</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">final</span> ArrayList&lt;HandlerParams&gt; mPendingInstalls =</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;HandlerParams&gt;();</span><br><span class="line">        <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">connectToService</span><span class="params">()</span> &#123; <span class="comment">// 其实就是bindService</span></span><br><span class="line">            <span class="keyword">if</span> (DEBUG_SD_INSTALL) Log.i(TAG, <span class="string">&quot;Trying to bind to&quot;</span> +</span><br><span class="line">                    <span class="string">&quot; DefaultContainerService&quot;</span>);</span><br><span class="line">            <span class="comment">// 如上定义了component的包名和类名</span></span><br><span class="line">            <span class="type">Intent</span> <span class="variable">service</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>().setComponent(DEFAULT_CONTAINER_COMPONENT);</span><br><span class="line">            Process.setThreadPriority(Process.THREAD_PRIORITY_DEFAULT);</span><br><span class="line">            <span class="keyword">if</span> (mContext.bindServiceAsUser(service, mDefContainerConn,</span><br><span class="line">                    Context.BIND_AUTO_CREATE, UserHandle.SYSTEM)) &#123;</span><br><span class="line">                Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);</span><br><span class="line">                mBound = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">disconnectService</span><span class="params">()</span> &#123; <span class="comment">// unbindService</span></span><br><span class="line">            mContainerService = <span class="literal">null</span>;</span><br><span class="line">            mBound = <span class="literal">false</span>;</span><br><span class="line">            Process.setThreadPriority(Process.THREAD_PRIORITY_DEFAULT);</span><br><span class="line">            mContext.unbindService(mDefContainerConn);</span><br><span class="line">            Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        PackageHandler(Looper looper) &#123;</span><br><span class="line">            <span class="built_in">super</span>(looper);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleMessage</span><span class="params">(Message msg)</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                doHandleMessage(msg);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">doHandleMessage</span><span class="params">(Message msg)</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">                <span class="keyword">case</span> INIT_COPY: &#123;</span><br><span class="line">                    <span class="comment">// 在installStage中msg.obj已经被赋值安装参数</span></span><br><span class="line">                    <span class="type">HandlerParams</span> <span class="variable">params</span> <span class="operator">=</span> (HandlerParams) msg.obj;</span><br><span class="line">                    <span class="comment">// idx为当前等待处理的安装请求个数</span></span><br><span class="line">                    <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> mPendingInstalls.size();</span><br><span class="line">                    <span class="keyword">if</span> (DEBUG_INSTALL) Slog.i(TAG, <span class="string">&quot;init_copy idx=&quot;</span> + idx + <span class="string">&quot;: &quot;</span> + params);</span><br><span class="line">                    <span class="comment">// If a bind was already initiated we dont really</span></span><br><span class="line">                    <span class="comment">// need to do anything. The pending install</span></span><br><span class="line">                    <span class="comment">// will be processed later on.</span></span><br><span class="line">                    <span class="comment">// 如果已经有一个绑定被初始化，那就不做任何事情，待安装的操作稍后会进行，初始时mBound的值为false</span></span><br><span class="line">                    <span class="keyword">if</span> (!mBound) &#123;</span><br><span class="line">                        Trace.asyncTraceBegin(TRACE_TAG_PACKAGE_MANAGER, <span class="string">&quot;bindingMCS&quot;</span>,</span><br><span class="line">                                System.identityHashCode(mHandler));</span><br><span class="line">                        <span class="comment">// If this is the only one pending we might</span></span><br><span class="line">                        <span class="comment">// have to bind to the service again.</span></span><br><span class="line">                        <span class="comment">// 绑定实际的安装service</span></span><br><span class="line">                        <span class="keyword">if</span> (!connectToService()) &#123;</span><br><span class="line">                            Slog.e(TAG, <span class="string">&quot;Failed to bind to media container service&quot;</span>);</span><br><span class="line">                            params.serviceError();</span><br><span class="line">                            Trace.asyncTraceEnd(TRACE_TAG_PACKAGE_MANAGER, <span class="string">&quot;bindingMCS&quot;</span>,</span><br><span class="line">                                    System.identityHashCode(mHandler));</span><br><span class="line">                            <span class="keyword">if</span> (params.traceMethod != <span class="literal">null</span>) &#123;</span><br><span class="line">                                Trace.asyncTraceEnd(TRACE_TAG_PACKAGE_MANAGER, params.traceMethod,</span><br><span class="line">                                        params.traceCookie);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">return</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="comment">// Once we bind to the service, the first</span></span><br><span class="line">                            <span class="comment">// pending request will be processed.</span></span><br><span class="line">                            <span class="comment">// 绑定服务成功后，将请求加入到mPendingInstalls等待处理</span></span><br><span class="line">                            mPendingInstalls.add(idx, params);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 如果已经绑定过service，同样将新的请求加入到mPendingInstalls等待处理</span></span><br><span class="line">                        mPendingInstalls.add(idx, params);</span><br><span class="line">                        <span class="comment">// Already bound to the service. Just make</span></span><br><span class="line">                        <span class="comment">// sure we trigger off processing the first request.</span></span><br><span class="line">                        <span class="keyword">if</span> (idx == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="comment">// idx=0代表第一个请求，直接发送MCS_BOUND事件，触发处理流程</span></span><br><span class="line">                            mHandler.sendEmptyMessage(MCS_BOUND);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                ... ...</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>

<p>PKMS定义了安装服务的包名<code>com.android.defcontainer</code>和类名<code>com.android.defcontainer.DefaultContainerService</code>，可知实际进行安装工作的是DefaultContainerService，还是定义在PKMS中，接下来看绑定服务成功后的操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DefaultContainerConnection</span> <span class="keyword">implements</span> <span class="title class_">ServiceConnection</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_SD_INSTALL) Log.i(TAG, <span class="string">&quot;onServiceConnected&quot;</span>);</span><br><span class="line">        <span class="comment">// 获得与服务端通信的代理对象</span></span><br><span class="line">        <span class="type">IMediaContainerService</span> <span class="variable">imcs</span> <span class="operator">=</span></span><br><span class="line">            IMediaContainerService.Stub.asInterface(service);</span><br><span class="line">        <span class="comment">// 发送消息MCS_BOUND</span></span><br><span class="line">        mHandler.sendMessage(mHandler.obtainMessage(MCS_BOUND, imcs));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onServiceDisconnected</span><span class="params">(ComponentName name)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_SD_INSTALL) Log.i(TAG, <span class="string">&quot;onServiceDisconnected&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>绑定service后会获取与服务端通信的代理对象，并且发送MCS_BOUND消息，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">doHandleMessage</span><span class="params">(Message msg)</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">        ... ...</span><br><span class="line">        <span class="keyword">case</span> MCS_BOUND: &#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_INSTALL) Slog.i(TAG, <span class="string">&quot;mcs_bound&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (msg.obj != <span class="literal">null</span>) &#123;</span><br><span class="line">                mContainerService = (IMediaContainerService) msg.obj;</span><br><span class="line">                Trace.asyncTraceEnd(TRACE_TAG_PACKAGE_MANAGER, <span class="string">&quot;bindingMCS&quot;</span>,</span><br><span class="line">                        System.identityHashCode(mHandler));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (mContainerService == <span class="literal">null</span>) &#123;</span><br><span class="line">                ... ...</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mPendingInstalls.size() &gt; <span class="number">0</span>) &#123; <span class="comment">// 安装请求的个数大于0</span></span><br><span class="line">                <span class="comment">// 获取第一个安装请求</span></span><br><span class="line">                <span class="type">HandlerParams</span> <span class="variable">params</span> <span class="operator">=</span> mPendingInstalls.get(<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">if</span> (params != <span class="literal">null</span>) &#123;</span><br><span class="line">                    Trace.asyncTraceEnd(TRACE_TAG_PACKAGE_MANAGER, <span class="string">&quot;queueInstall&quot;</span>,</span><br><span class="line">                            System.identityHashCode(params));</span><br><span class="line">                    Trace.traceBegin(TRACE_TAG_PACKAGE_MANAGER, <span class="string">&quot;startCopy&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (params.startCopy()) &#123;</span><br><span class="line">                        <span class="comment">// We are done...  look for more work or to</span></span><br><span class="line">                        <span class="comment">// go idle.</span></span><br><span class="line">                        <span class="keyword">if</span> (DEBUG_SD_INSTALL) Log.i(TAG,</span><br><span class="line">                                <span class="string">&quot;Checking for more work or unbind...&quot;</span>);</span><br><span class="line">                        <span class="comment">// Delete pending install</span></span><br><span class="line">                        <span class="keyword">if</span> (mPendingInstalls.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                            mPendingInstalls.remove(<span class="number">0</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (mPendingInstalls.size() == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="comment">// 如果没有安装请求了则10秒钟后解绑service</span></span><br><span class="line">                            <span class="keyword">if</span> (mBound) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (DEBUG_SD_INSTALL) Log.i(TAG,</span><br><span class="line">                                        <span class="string">&quot;Posting delayed MCS_UNBIND&quot;</span>);</span><br><span class="line">                                removeMessages(MCS_UNBIND);</span><br><span class="line">                                <span class="type">Message</span> <span class="variable">ubmsg</span> <span class="operator">=</span> obtainMessage(MCS_UNBIND);</span><br><span class="line">                                <span class="comment">// Unbind after a little delay, to avoid</span></span><br><span class="line">                                <span class="comment">// continual thrashing.</span></span><br><span class="line">                                sendMessageDelayed(ubmsg, <span class="number">10000</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="comment">// 否则继续发送MCS_BOUND消息</span></span><br><span class="line">                            <span class="comment">// There are more pending requests in queue.</span></span><br><span class="line">                            <span class="comment">// Just post MCS_BOUND message to trigger processing</span></span><br><span class="line">                            <span class="comment">// of next pending install.</span></span><br><span class="line">                            <span class="keyword">if</span> (DEBUG_SD_INSTALL) Log.i(TAG,</span><br><span class="line">                                    <span class="string">&quot;Posting MCS_BOUND for next work&quot;</span>);</span><br><span class="line">                            mHandler.sendEmptyMessage(MCS_BOUND);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    Trace.traceEnd(TRACE_TAG_PACKAGE_MANAGER);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// Should never happen ideally.</span></span><br><span class="line">                Slog.w(TAG, <span class="string">&quot;Empty queue&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>这段代码的功能就是处理安装请求，处理完后安装队列不为空，则继续发送MCS_BOUND消息继续处理下一个安装请求，如果安装队列为空，则等待10秒钟后发送MCS_UNBIND消息断开service绑定。</p>
<p>接下来看startCopy函数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">HandlerParams</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_RETRIES</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">  ... ...</span><br><span class="line">    <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">startCopy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> res;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_INSTALL) Slog.i(TAG, <span class="string">&quot;startCopy &quot;</span> + mUser + <span class="string">&quot;: &quot;</span> + <span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果最大安装重复次数大于4次，处理安装失败的消息</span></span><br><span class="line">            <span class="keyword">if</span> (++mRetries &gt; MAX_RETRIES) &#123;</span><br><span class="line">                Slog.w(TAG, <span class="string">&quot;Failed to invoke remote methods on default container service. Giving up&quot;</span>);</span><br><span class="line">                mHandler.sendEmptyMessage(MCS_GIVE_UP);</span><br><span class="line">                handleServiceError();</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                handleStartCopy(); <span class="comment">// 实际的copy工作</span></span><br><span class="line">                res = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_INSTALL) Slog.i(TAG, <span class="string">&quot;Posting install MCS_RECONNECT&quot;</span>);</span><br><span class="line">            mHandler.sendEmptyMessage(MCS_RECONNECT);</span><br><span class="line">            res = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        handleReturnCode();</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://otqux1hnn.bkt.clouddn.com/rangerzhou/170728/installstage.png" alt="installStage"></p>
<h3 id="5-handleStartCopy"><a href="#5-handleStartCopy" class="headerlink" title="5. handleStartCopy"></a>5. handleStartCopy</h3><p>如上图，HandlerParams为内部抽象类，handleStartCopy在HandlerParams的子类InstallParams中实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">InstallParams</span> <span class="keyword">extends</span> <span class="title class_">HandlerParams</span> &#123;</span><br><span class="line">  ... ...</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Invoke remote method to get package information and install</span></span><br><span class="line"><span class="comment">     * location values. Override install location based on default</span></span><br><span class="line"><span class="comment">     * policy if needed and then create install arguments based</span></span><br><span class="line"><span class="comment">     * on the install location.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleStartCopy</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ret</span> <span class="operator">=</span> PackageManager.INSTALL_SUCCEEDED;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If we&#x27;re already staged, we&#x27;ve firmly committed to an install location</span></span><br><span class="line">        <span class="keyword">if</span> (origin.staged) &#123;</span><br><span class="line">            <span class="keyword">if</span> (origin.file != <span class="literal">null</span>) &#123;</span><br><span class="line">                installFlags |= PackageManager.INSTALL_INTERNAL;</span><br><span class="line">                installFlags &amp;= ~PackageManager.INSTALL_EXTERNAL;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (origin.cid != <span class="literal">null</span>) &#123;</span><br><span class="line">                installFlags |= PackageManager.INSTALL_EXTERNAL;</span><br><span class="line">                installFlags &amp;= ~PackageManager.INSTALL_INTERNAL;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Invalid stage location&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">onSd</span> <span class="operator">=</span> (installFlags &amp; PackageManager.INSTALL_EXTERNAL) != <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">onInt</span> <span class="operator">=</span> (installFlags &amp; PackageManager.INSTALL_INTERNAL) != <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">ephemeral</span> <span class="operator">=</span> (installFlags &amp; PackageManager.INSTALL_EPHEMERAL) != <span class="number">0</span>;</span><br><span class="line">        <span class="type">PackageInfoLite</span> <span class="variable">pkgLite</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查APK的安装位置是否正确</span></span><br><span class="line">        <span class="keyword">if</span> (onInt &amp;&amp; onSd) &#123;</span><br><span class="line">            <span class="comment">// Check if both bits are set.</span></span><br><span class="line">            <span class="comment">// APK不能同时安装在内部存储和SD卡上</span></span><br><span class="line">            Slog.w(TAG, <span class="string">&quot;Conflicting flags specified for installing on both internal and external&quot;</span>);</span><br><span class="line">            ret = PackageManager.INSTALL_FAILED_INVALID_INSTALL_LOCATION;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (onSd &amp;&amp; ephemeral) &#123;</span><br><span class="line">            <span class="comment">// APK不能短暂的安装在SD卡中</span></span><br><span class="line">            Slog.w(TAG,  <span class="string">&quot;Conflicting flags specified for installing ephemeral on external&quot;</span>);</span><br><span class="line">            ret = PackageManager.INSTALL_FAILED_INVALID_INSTALL_LOCATION;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// getMini...用来解析安装包，返回PackageInfoLite对象，判断能否安装，具体见5.1</span></span><br><span class="line">            pkgLite = mContainerService.getMinimalPackageInfo(origin.resolvedPath, installFlags, packageAbiOverride);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (DEBUG_EPHEMERAL &amp;&amp; ephemeral) &#123;</span><br><span class="line">                Slog.v(TAG, <span class="string">&quot;pkgLite for install: &quot;</span> + pkgLite);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * If we have too little free space, try to free cache</span></span><br><span class="line"><span class="comment">             * before giving up.</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="comment">// 如果由于存储空间过小导致安装失败时</span></span><br><span class="line">            <span class="keyword">if</span> (!origin.staged &amp;&amp; pkgLite.recommendedInstallLocation</span><br><span class="line">                    == PackageHelper.RECOMMEND_FAILED_INSUFFICIENT_STORAGE) &#123;</span><br><span class="line">                <span class="comment">// <span class="doctag">TODO:</span> focus freeing disk space on the target device</span></span><br><span class="line">                <span class="keyword">final</span> <span class="type">StorageManager</span> <span class="variable">storage</span> <span class="operator">=</span> StorageManager.from(mContext);</span><br><span class="line">                <span class="comment">// 获取设备内部存储空间允许的最小存储空间大小</span></span><br><span class="line">                <span class="keyword">final</span> <span class="type">long</span> <span class="variable">lowThreshold</span> <span class="operator">=</span> storage.getStorageLowBytes(</span><br><span class="line">                        Environment.getDataDirectory());</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 计算安装APK大概所需的空间</span></span><br><span class="line">                <span class="keyword">final</span> <span class="type">long</span> <span class="variable">sizeBytes</span> <span class="operator">=</span> mContainerService.calculateInstalledSize(</span><br><span class="line">                        origin.resolvedPath, isForwardLocked(), packageAbiOverride);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 释放cache，尝试将缓存释放到大于等于sizeBytes + lowThreshold</span></span><br><span class="line">                    mInstaller.freeCache(<span class="literal">null</span>, sizeBytes + lowThreshold);</span><br><span class="line">                    <span class="comment">// 再次通过getMini...方法判断是否满足安装条件</span></span><br><span class="line">                    pkgLite = mContainerService.getMinimalPackageInfo(origin.resolvedPath,</span><br><span class="line">                            installFlags, packageAbiOverride);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InstallerException e) &#123;</span><br><span class="line">                    Slog.w(TAG, <span class="string">&quot;Failed to free cache&quot;</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 * The cache free must have deleted the file we</span></span><br><span class="line"><span class="comment">                 * downloaded to install.</span></span><br><span class="line"><span class="comment">                 *</span></span><br><span class="line"><span class="comment">                 * <span class="doctag">TODO:</span> fix the &quot;freeCache&quot; call to not delete</span></span><br><span class="line"><span class="comment">                 *       the file we care about.</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="comment">// 如果经过释放cache后还是无法安装，则把安装失败flag保存到recom...</span></span><br><span class="line">                <span class="keyword">if</span> (pkgLite.recommendedInstallLocation</span><br><span class="line">                        == PackageHelper.RECOMMEND_FAILED_INVALID_URI) &#123;</span><br><span class="line">                    pkgLite.recommendedInstallLocation</span><br><span class="line">                        = PackageHelper.RECOMMEND_FAILED_INSUFFICIENT_STORAGE;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ret == PackageManager.INSTALL_SUCCEEDED) &#123;</span><br><span class="line">            <span class="comment">// recommendedInstallLocation保存安装路径信息，即内部还是SD卡中，也记录安装失败的信息</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">loc</span> <span class="operator">=</span> pkgLite.recommendedInstallLocation;</span><br><span class="line">            <span class="keyword">if</span> (loc == PackageHelper.RECOMMEND_FAILED_INVALID_LOCATION) &#123;</span><br><span class="line">                ret = PackageManager.INSTALL_FAILED_INVALID_INSTALL_LOCATION;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (loc == PackageHelper.RECOMMEND_FAILED_ALREADY_EXISTS) &#123;</span><br><span class="line">                ret = PackageManager.INSTALL_FAILED_ALREADY_EXISTS;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (loc == PackageHelper.RECOMMEND_FAILED_INSUFFICIENT_STORAGE) &#123;</span><br><span class="line">                ret = PackageManager.INSTALL_FAILED_INSUFFICIENT_STORAGE;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (loc == PackageHelper.RECOMMEND_FAILED_INVALID_APK) &#123;</span><br><span class="line">                ret = PackageManager.INSTALL_FAILED_INVALID_APK;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (loc == PackageHelper.RECOMMEND_FAILED_INVALID_URI) &#123;</span><br><span class="line">                ret = PackageManager.INSTALL_FAILED_INVALID_URI;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (loc == PackageHelper.RECOMMEND_MEDIA_UNAVAILABLE) &#123;</span><br><span class="line">                ret = PackageManager.INSTALL_FAILED_MEDIA_UNAVAILABLE;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// Override with defaults if needed.</span></span><br><span class="line">                <span class="comment">// 如果安装路径有足够的空间，loc就不会等于上述判断条件</span></span><br><span class="line">                <span class="comment">// 代码将会走到这里，installLocationPolicy用来判断APK是否已经安装过，具体见5.2</span></span><br><span class="line">                loc = installLocationPolicy(pkgLite);</span><br><span class="line">                ... ...</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建安装参数，具体见5.3</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">InstallArgs</span> <span class="variable">args</span> <span class="operator">=</span> createInstallArgs(<span class="built_in">this</span>);</span><br><span class="line">        mArgs = args;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ret == PackageManager.INSTALL_SUCCEEDED) &#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> http://b/22976637</span></span><br><span class="line">            <span class="comment">// Apps installed for &quot;all&quot; users use the device owner to verify the app</span></span><br><span class="line">            <span class="type">UserHandle</span> <span class="variable">verifierUser</span> <span class="operator">=</span> getUser();</span><br><span class="line">            <span class="keyword">if</span> (verifierUser == UserHandle.ALL) &#123;</span><br><span class="line">                verifierUser = UserHandle.SYSTEM;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * Determine if we have any installed package verifiers. If we</span></span><br><span class="line"><span class="comment">             * do, then we&#x27;ll defer to them to verify the packages.</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">requiredUid</span> <span class="operator">=</span> mRequiredVerifierPackage == <span class="literal">null</span> ? -<span class="number">1</span></span><br><span class="line">                    : getPackageUid(mRequiredVerifierPackage, MATCH_DEBUG_TRIAGED_MISSING,</span><br><span class="line">                            verifierUser.getIdentifier());</span><br><span class="line">            <span class="keyword">if</span> (!origin.existing &amp;&amp; requiredUid != -<span class="number">1</span></span><br><span class="line">                    &amp;&amp; isVerificationEnabled(verifierUser.getIdentifier(), installFlags)) &#123;</span><br><span class="line">                <span class="comment">// 存在安装包检查者，并且满足启动检查条件，就利用安装包检查者检查</span></span><br><span class="line">                <span class="keyword">final</span> <span class="type">Intent</span> <span class="variable">verification</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(</span><br><span class="line">                        Intent.ACTION_PACKAGE_NEEDS_VERIFICATION);</span><br><span class="line">                verification.addFlags(Intent.FLAG_RECEIVER_FOREGROUND);</span><br><span class="line">                verification.setDataAndType(Uri.fromFile(<span class="keyword">new</span> <span class="title class_">File</span>(origin.resolvedPath)),</span><br><span class="line">                        PACKAGE_MIME_TYPE);</span><br><span class="line">                verification.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 检查安装包的操作</span></span><br><span class="line">                ... ...</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 * No package verification is enabled, so immediately start</span></span><br><span class="line"><span class="comment">                 * the remote call to initiate copy using temporary file.</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="comment">// 没有安装包检查，则直接执行copyApk函数，具体见5.4</span></span><br><span class="line">                ret = args.copyApk(mContainerService, <span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mRet = ret;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-1-getMinimalPackageInfo"><a href="#5-1-getMinimalPackageInfo" class="headerlink" title="5.1 getMinimalPackageInfo"></a>5.1 getMinimalPackageInfo</h4><p>getMinimalPackageInfo定义在DefaultContainerService中：</p>
<p>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/">frameworks</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/">base</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/packages/">packages</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/packages/DefaultContainerService/">DefaultContainerService</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/packages/DefaultContainerService/src/">src</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/packages/DefaultContainerService/src/com/">com</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/packages/DefaultContainerService/src/com/android/">android</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/packages/DefaultContainerService/src/com/android/defcontainer/">defcontainer</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/packages/DefaultContainerService/src/com/android/defcontainer/DefaultContainerService.java">DefaultContainerService.java</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Parse given package and return minimal details.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> packagePath absolute path to the package to be copied. Can be</span></span><br><span class="line"><span class="comment"> *            a single monolithic APK file or a cluster directory</span></span><br><span class="line"><span class="comment"> *            containing one or more APKs.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> PackageInfoLite <span class="title function_">getMinimalPackageInfo</span><span class="params">(String packagePath, <span class="type">int</span> flags,</span></span><br><span class="line"><span class="params">        String abiOverride)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> DefaultContainerService.<span class="built_in">this</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">isForwardLocked</span> <span class="operator">=</span> (flags &amp; PackageManager.INSTALL_FORWARD_LOCK) != <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">PackageInfoLite</span> <span class="variable">ret</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PackageInfoLite</span>();</span><br><span class="line">    <span class="keyword">if</span> (packagePath == <span class="literal">null</span>) &#123;</span><br><span class="line">        Slog.i(TAG, <span class="string">&quot;Invalid package file &quot;</span> + packagePath);</span><br><span class="line">        ret.recommendedInstallLocation = PackageHelper.RECOMMEND_FAILED_INVALID_APK;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">File</span> <span class="variable">packageFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(packagePath);</span><br><span class="line">    <span class="keyword">final</span> PackageParser.PackageLite pkg;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">long</span> sizeBytes;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 解析安装包，得到PackageParser.PackageLite</span></span><br><span class="line">        pkg = PackageParser.parsePackageLite(packageFile, <span class="number">0</span>);</span><br><span class="line">        sizeBytes = PackageHelper.calculateInstalledSize(pkg, isForwardLocked, abiOverride);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (PackageParserException | IOException e) &#123;</span><br><span class="line">        Slog.w(TAG, <span class="string">&quot;Failed to parse package at &quot;</span> + packagePath + <span class="string">&quot;: &quot;</span> + e);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!packageFile.exists()) &#123;</span><br><span class="line">            ret.recommendedInstallLocation = PackageHelper.RECOMMEND_FAILED_INVALID_URI;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ret.recommendedInstallLocation = PackageHelper.RECOMMEND_FAILED_INVALID_APK;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ret.packageName = pkg.packageName;</span><br><span class="line">    ret.splitNames = pkg.splitNames;</span><br><span class="line">    ret.versionCode = pkg.versionCode;</span><br><span class="line">    ret.baseRevisionCode = pkg.baseRevisionCode;</span><br><span class="line">    ret.splitRevisionCodes = pkg.splitRevisionCodes;</span><br><span class="line">    ret.installLocation = pkg.installLocation;</span><br><span class="line">    ret.verifiers = pkg.verifiers;</span><br><span class="line">    <span class="comment">// 利用resolveInstallLocation获取安装位置</span></span><br><span class="line">    ret.recommendedInstallLocation = PackageHelper.resolveInstallLocation(context,</span><br><span class="line">            pkg.packageName, pkg.installLocation, sizeBytes, flags);</span><br><span class="line">    ret.multiArch = pkg.multiArch;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从代码可知<code>getMinimalPackageInfo</code>就是对安装包进行解析，获取安装包的一些信息。</p>
<p>resolveInstallLocation:</p>
<p>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/">frameworks</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/">base</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/core/">core</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/core/java/">java</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/core/java/com/">com</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/core/java/com/android/">android</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/core/java/com/android/internal/">internal</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/core/java/com/android/internal/content/">content</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/core/java/com/android/internal/content/PackageHelper.java">PackageHelper.java</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Given a requested &#123;<span class="doctag">@link</span> PackageInfo#installLocation&#125; and calculated</span></span><br><span class="line"><span class="comment"> * install size, pick the actual location to install the app.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">resolveInstallLocation</span><span class="params">(Context context, String packageName,</span></span><br><span class="line"><span class="params">        <span class="type">int</span> installLocation, <span class="type">long</span> sizeBytes, <span class="type">int</span> installFlags)</span> &#123;</span><br><span class="line">    <span class="type">ApplicationInfo</span> <span class="variable">existingInfo</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 就根据包名获取已经存在的ApplicationInfo信息，意如其名existingInfo</span></span><br><span class="line">        existingInfo = context.getPackageManager().getApplicationInfo(packageName,</span><br><span class="line">                PackageManager.GET_UNINSTALLED_PACKAGES);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NameNotFoundException ignored) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> prefer;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">boolean</span> checkBoth;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">ephemeral</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// 根据installFlags与一些常量flag参数的相与结果以及installLocation决定安装路径</span></span><br><span class="line">    <span class="keyword">if</span> ((installFlags &amp; PackageManager.INSTALL_EPHEMERAL) != <span class="number">0</span>) &#123;</span><br><span class="line">        prefer = RECOMMEND_INSTALL_INTERNAL;</span><br><span class="line">        ephemeral = <span class="literal">true</span>;</span><br><span class="line">        checkBoth = <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((installFlags &amp; PackageManager.INSTALL_INTERNAL) != <span class="number">0</span>) &#123;</span><br><span class="line">        prefer = RECOMMEND_INSTALL_INTERNAL;</span><br><span class="line">        checkBoth = <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((installFlags &amp; PackageManager.INSTALL_EXTERNAL) != <span class="number">0</span>) &#123;</span><br><span class="line">        prefer = RECOMMEND_INSTALL_EXTERNAL;</span><br><span class="line">        checkBoth = <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (installLocation == PackageInfo.INSTALL_LOCATION_INTERNAL_ONLY) &#123;</span><br><span class="line">        prefer = RECOMMEND_INSTALL_INTERNAL;</span><br><span class="line">        checkBoth = <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (installLocation == PackageInfo.INSTALL_LOCATION_PREFER_EXTERNAL) &#123;</span><br><span class="line">        prefer = RECOMMEND_INSTALL_EXTERNAL;</span><br><span class="line">        checkBoth = <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (installLocation == PackageInfo.INSTALL_LOCATION_AUTO) &#123;</span><br><span class="line">        <span class="comment">// 一般情况下installLocation为AUTO</span></span><br><span class="line">        <span class="comment">// When app is already installed, prefer same medium</span></span><br><span class="line">        <span class="keyword">if</span> (existingInfo != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> distinguish if this is external ASEC</span></span><br><span class="line">            <span class="comment">// APK以前安装过，直接从保存的ApplicationInfo中获取flag得出安装路径</span></span><br><span class="line">            <span class="keyword">if</span> ((existingInfo.flags &amp; ApplicationInfo.FLAG_EXTERNAL_STORAGE) != <span class="number">0</span>) &#123;</span><br><span class="line">                prefer = RECOMMEND_INSTALL_EXTERNAL;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                prefer = RECOMMEND_INSTALL_INTERNAL;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果existingInfo为null，即以前没有安装过，则安装在手机内部</span></span><br><span class="line">            prefer = RECOMMEND_INSTALL_INTERNAL;</span><br><span class="line">        &#125;</span><br><span class="line">        checkBoth = <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 默认情况下也安装在手机内部</span></span><br><span class="line">        prefer = RECOMMEND_INSTALL_INTERNAL;</span><br><span class="line">        checkBoth = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// fitsOnInternal函数会判断上文中得出的sizeBytes是否小于data目录的剩余空间</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">fitsOnInternal</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (checkBoth || prefer == RECOMMEND_INSTALL_INTERNAL) &#123;</span><br><span class="line">        fitsOnInternal = fitsOnInternal(context, sizeBytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// fitsOnExternal和fitsOnInternal一样都是判断是否有足够空间安装</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">fitsOnExternal</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (checkBoth || prefer == RECOMMEND_INSTALL_EXTERNAL) &#123;</span><br><span class="line">        fitsOnExternal = fitsOnExternal(context, sizeBytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据prefer和上面得出的fits...再次判断返回的安装目录</span></span><br><span class="line">    <span class="comment">// 怎么这么多重复判断呢，感觉代码写的有点冗余，明明可以合在上面代码中一并处理</span></span><br><span class="line">    <span class="keyword">if</span> (prefer == RECOMMEND_INSTALL_INTERNAL) &#123;</span><br><span class="line">        <span class="comment">// The ephemeral case will either fit and return EPHEMERAL, or will not fit</span></span><br><span class="line">        <span class="comment">// and will fall through to return INSUFFICIENT_STORAGE</span></span><br><span class="line">        <span class="keyword">if</span> (fitsOnInternal) &#123;</span><br><span class="line">            <span class="keyword">return</span> (ephemeral)</span><br><span class="line">                    ? PackageHelper.RECOMMEND_INSTALL_EPHEMERAL</span><br><span class="line">                    : PackageHelper.RECOMMEND_INSTALL_INTERNAL;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (prefer == RECOMMEND_INSTALL_EXTERNAL) &#123;</span><br><span class="line">        <span class="keyword">if</span> (fitsOnExternal) &#123;</span><br><span class="line">            <span class="keyword">return</span> PackageHelper.RECOMMEND_INSTALL_EXTERNAL;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 正常情况下以上部分代码已经返回了安装路径</span></span><br><span class="line">    <span class="keyword">if</span> (checkBoth) &#123;</span><br><span class="line">        <span class="keyword">if</span> (fitsOnInternal) &#123;</span><br><span class="line">            <span class="keyword">return</span> PackageHelper.RECOMMEND_INSTALL_INTERNAL;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fitsOnExternal) &#123;</span><br><span class="line">            <span class="keyword">return</span> PackageHelper.RECOMMEND_INSTALL_EXTERNAL;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果没有足够的空间安装，则返回。。。</span></span><br><span class="line">    <span class="keyword">return</span> PackageHelper.RECOMMEND_FAILED_INSUFFICIENT_STORAGE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>resolveInstallLocation</code>的作用就是判断安装路径是否有足够的工具，返回对应的flag。</p>
<h4 id="5-2-installLocationPolicy"><a href="#5-2-installLocationPolicy" class="headerlink" title="5.2 installLocationPolicy"></a>5.2 installLocationPolicy</h4><p>如果<code>resolveInstallLocation</code>返回的不是FAILED的flag，就会调用installLocationPolicy函数判断APK是否安装过，返回安装路径：</p>
<p>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/">frameworks</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/">base</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/">services</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/">core</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/">java</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/com/">com</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/com/android/">android</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/com/android/server/">server</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/com/android/server/pm/">pm</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/com/android/server/pm/PackageManagerService.java">PackageManagerService.java</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">InstallParams</span> <span class="keyword">extends</span> <span class="title class_">HandlerParams</span> &#123;</span><br><span class="line">  ... ...</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">installLocationPolicy</span><span class="params">(PackageInfoLite pkgLite)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">packageName</span> <span class="operator">=</span> pkgLite.packageName;</span><br><span class="line">        <span class="type">int</span> <span class="variable">installLocation</span> <span class="operator">=</span> pkgLite.installLocation;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">onSd</span> <span class="operator">=</span> (installFlags &amp; PackageManager.INSTALL_EXTERNAL) != <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// reader</span></span><br><span class="line">        <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">            <span class="comment">// Currently installed package which the new package is attempting to replace or</span></span><br><span class="line">            <span class="comment">// null if no such package is installed.</span></span><br><span class="line">            <span class="comment">// 判断终端上是否安装过同样的APK</span></span><br><span class="line">            PackageParser.<span class="type">Package</span> <span class="variable">installedPkg</span> <span class="operator">=</span> mPackages.get(packageName);</span><br><span class="line">            <span class="comment">// ... ...</span></span><br><span class="line">            <span class="comment">// 如果installedPkg为null，则APK已卸载</span></span><br><span class="line">            PackageParser.<span class="type">Package</span> <span class="variable">dataOwnerPkg</span> <span class="operator">=</span> installedPkg;</span><br><span class="line">            <span class="keyword">if</span> (dataOwnerPkg  == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果APK卸载了，但是保留了数据，那么将取出对应的PackageSetting对象</span></span><br><span class="line">                <span class="type">PackageSetting</span> <span class="variable">ps</span> <span class="operator">=</span> mSettings.mPackages.get(packageName);</span><br><span class="line">                <span class="keyword">if</span> (ps != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 如果取出的PackageSetting不为空，则取出对应的pkg给dataOwnerPkg</span></span><br><span class="line">                    dataOwnerPkg = ps.pkg;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 存在旧APK的信息</span></span><br><span class="line">            <span class="keyword">if</span> (dataOwnerPkg != <span class="literal">null</span>) &#123;</span><br><span class="line">	<span class="comment">// 只有当不是降级版本时，或者前身程序包被标记为可调式且显示请求降级时，才允许新的程序包有访问前身保留数据的权限</span></span><br><span class="line">                <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">downgradeRequested</span> <span class="operator">=</span></span><br><span class="line">                        (installFlags &amp; PackageManager.INSTALL_ALLOW_DOWNGRADE) != <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">packageDebuggable</span> <span class="operator">=</span></span><br><span class="line">                            (dataOwnerPkg.applicationInfo.flags</span><br><span class="line">                                    &amp; ApplicationInfo.FLAG_DEBUGGABLE) != <span class="number">0</span>;</span><br><span class="line">                <span class="comment">// 降级安装的情况,不会在下面比较版本号</span></span><br><span class="line">                <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">downgradePermitted</span> <span class="operator">=</span></span><br><span class="line">                        (downgradeRequested) &amp;&amp; ((Build.IS_DEBUGGABLE) || (packageDebuggable));</span><br><span class="line">                <span class="comment">// 正常情况下，即非降级安装时，会比较两个package信息中的versionCode</span></span><br><span class="line">                <span class="keyword">if</span> (!downgradePermitted) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        checkDowngrade(dataOwnerPkg, pkgLite);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (PackageManagerException e) &#123;</span><br><span class="line">                        Slog.w(TAG, <span class="string">&quot;Downgrade detected: &quot;</span> + e.getMessage());</span><br><span class="line">                        <span class="keyword">return</span> PackageHelper.RECOMMEND_FAILED_VERSION_DOWNGRADE;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// installedPkg不为空，则表示旧的APK还在终端上没卸载</span></span><br><span class="line">            <span class="keyword">if</span> (installedPkg != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((installFlags &amp; PackageManager.INSTALL_REPLACE_EXISTING) != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// Check for updated system application.</span></span><br><span class="line">                    <span class="keyword">if</span> ((installedPkg.applicationInfo.flags &amp; ApplicationInfo.FLAG_SYSTEM) != <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="comment">// 系统app不能在SD卡上安装更新</span></span><br><span class="line">                        <span class="keyword">if</span> (onSd) &#123;</span><br><span class="line">                            Slog.w(TAG, <span class="string">&quot;Cannot install update to system app on sdcard&quot;</span>);</span><br><span class="line">                            <span class="keyword">return</span> PackageHelper.RECOMMEND_FAILED_INVALID_LOCATION;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> PackageHelper.RECOMMEND_INSTALL_INTERNAL;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (onSd) &#123;</span><br><span class="line">                            <span class="comment">// Install flag overrides everything.</span></span><br><span class="line">                            <span class="keyword">return</span> PackageHelper.RECOMMEND_INSTALL_EXTERNAL;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// If current upgrade specifies particular preference</span></span><br><span class="line">                        <span class="keyword">if</span> (installLocation == PackageInfo.INSTALL_LOCATION_INTERNAL_ONLY) &#123;</span><br><span class="line">                            <span class="comment">// Application explicitly specified internal.</span></span><br><span class="line">                            <span class="keyword">return</span> PackageHelper.RECOMMEND_INSTALL_INTERNAL;</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (installLocation == PackageInfo.INSTALL_LOCATION_PREFER_EXTERNAL) &#123;</span><br><span class="line">                            <span class="comment">// App explictly prefers external. Let policy decide</span></span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="comment">// Prefer previous location</span></span><br><span class="line">                            <span class="comment">// 如果没有指定安装路径，与之前的安装路径保持一致</span></span><br><span class="line">                            <span class="keyword">if</span> (isExternal(installedPkg)) &#123;</span><br><span class="line">                                <span class="keyword">return</span> PackageHelper.RECOMMEND_INSTALL_EXTERNAL;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">return</span> PackageHelper.RECOMMEND_INSTALL_INTERNAL;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// Invalid install. Return error code</span></span><br><span class="line">                    <span class="keyword">return</span> PackageHelper.RECOMMEND_FAILED_ALREADY_EXISTS;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// All the special cases have been taken care of.</span></span><br><span class="line">        <span class="comment">// Return result based on recommended install location.</span></span><br><span class="line">        <span class="keyword">if</span> (onSd) &#123;</span><br><span class="line">            <span class="keyword">return</span> PackageHelper.RECOMMEND_INSTALL_EXTERNAL;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pkgLite.recommendedInstallLocation;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>从代码可知，installLocationPolicy函数就是判断APK是否安装过，对于升级安装要比较新旧两个package的版本号，再根据一些参数最后返回安装路径。</p>
<h4 id="5-3-createInstallArgs"><a href="#5-3-createInstallArgs" class="headerlink" title="5.3 createInstallArgs"></a>5.3 createInstallArgs</h4><p>随后PKMS开始调用createInstallArgs方法生成安装参数对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> InstallArgs <span class="title function_">createInstallArgs</span><span class="params">(InstallParams params)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (params.move != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MoveInstallArgs</span>(params);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (installOnExternalAsec(params.installFlags) || params.isForwardLocked()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AsecInstallArgs</span>(params);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FileInstallArgs</span>(params);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据params决定创建哪个InstallArgs的子类对象，在这里将会创建FileInstallArgs对象。</p>
<h4 id="5-4-copyApk"><a href="#5-4-copyApk" class="headerlink" title="5.4 copyApk"></a>5.4 copyApk</h4><p>在handleStartCopy中创建安装参数后，如果不需要进行安装包检查，则调用上一步创建的安装参数FileInstallArgs的copyApk方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Logic to handle installation of non-ASEC applications, including copying</span></span><br><span class="line"><span class="comment"> * and renaming logic.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FileInstallArgs</span> <span class="keyword">extends</span> <span class="title class_">InstallArgs</span> &#123;</span><br><span class="line">  ... ...</span><br><span class="line">    <span class="type">int</span> <span class="title function_">copyApk</span><span class="params">(IMediaContainerService imcs, <span class="type">boolean</span> temp)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        Trace.traceBegin(TRACE_TAG_PACKAGE_MANAGER, <span class="string">&quot;copyApk&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> doCopyApk(imcs, temp);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            Trace.traceEnd(TRACE_TAG_PACKAGE_MANAGER);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">doCopyApk</span><span class="params">(IMediaContainerService imcs, <span class="type">boolean</span> temp)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="comment">// Android 7.0对于adb安装在前文3.2 WriteSession中已经完成了copy操作，在installStag函数</span></span><br><span class="line">        <span class="comment">// 中调用的OriginInfo.fromStagedFile和OriginInfo.fromStagedContainer两个方法均会把</span></span><br><span class="line">        <span class="comment">// origin.staged设置为true</span></span><br><span class="line">        <span class="keyword">if</span> (origin.staged) &#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_INSTALL) Slog.d(TAG, origin.file + <span class="string">&quot; already staged; skipping copy&quot;</span>);</span><br><span class="line">            codeFile = origin.file;</span><br><span class="line">            resourceFile = origin.file;</span><br><span class="line">            <span class="keyword">return</span> PackageManager.INSTALL_SUCCEEDED;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对于非adb安装</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 临时安装flag</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">isEphemeral</span> <span class="operator">=</span> (installFlags &amp; PackageManager.INSTALL_EPHEMERAL) != <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 创建一个临时安装的目录</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">File</span> <span class="variable">tempDir</span> <span class="operator">=</span></span><br><span class="line">                    mInstallerService.allocateStageDirLegacy(volumeUuid, isEphemeral);</span><br><span class="line">            codeFile = tempDir;</span><br><span class="line">            resourceFile = tempDir;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            Slog.w(TAG, <span class="string">&quot;Failed to create copy file: &quot;</span> + e);</span><br><span class="line">            <span class="keyword">return</span> PackageManager.INSTALL_FAILED_INSUFFICIENT_STORAGE;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义一个回调接口</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">IParcelFileDescriptorFactory</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IParcelFileDescriptorFactory</span>.Stub() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> ParcelFileDescriptor <span class="title function_">open</span><span class="params">(String name, <span class="type">int</span> mode)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">                <span class="keyword">if</span> (!FileUtils.isValidExtFilename(name)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Invalid filename: &quot;</span> + name);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 接口被回调时的操作，包含创建文件，打开文件，返回ParcelFileDescriptor对象</span></span><br><span class="line">                    <span class="keyword">final</span> <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(codeFile, name);</span><br><span class="line">                    <span class="keyword">final</span> <span class="type">FileDescriptor</span> <span class="variable">fd</span> <span class="operator">=</span> Os.open(file.getAbsolutePath(),</span><br><span class="line">                            O_RDWR | O_CREAT, <span class="number">0644</span>);</span><br><span class="line">                    Os.chmod(file.getAbsolutePath(), <span class="number">0644</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ParcelFileDescriptor</span>(fd);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ErrnoException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RemoteException</span>(<span class="string">&quot;Failed to open: &quot;</span> + e.getMessage());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">ret</span> <span class="operator">=</span> PackageManager.INSTALL_SUCCEEDED;</span><br><span class="line">        <span class="comment">// 通过DefaultContainerService的copyPackage方法进行copy，target是上面的回调的接口</span></span><br><span class="line">        ret = imcs.copyPackage(origin.file.getAbsolutePath(), target);</span><br><span class="line">        <span class="keyword">if</span> (ret != PackageManager.INSTALL_SUCCEEDED) &#123;</span><br><span class="line">            Slog.e(TAG, <span class="string">&quot;Failed to copy package&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// copy APK对应的Native库文件</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">File</span> <span class="variable">libraryRoot</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(codeFile, LIB_DIR_NAME);</span><br><span class="line">        NativeLibraryHelper.<span class="type">Handle</span> <span class="variable">handle</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            handle = NativeLibraryHelper.Handle.create(codeFile);</span><br><span class="line">            ret = NativeLibraryHelper.copyNativeBinariesWithOverride(handle, libraryRoot,</span><br><span class="line">                    abiOverride);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            Slog.e(TAG, <span class="string">&quot;Copying native libraries failed&quot;</span>, e);</span><br><span class="line">            ret = PackageManager.INSTALL_FAILED_INTERNAL_ERROR;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            IoUtils.closeQuietly(handle);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>看一下DefaultContainerService的copyPackage操作：</p>
<p>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/">frameworks</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/">base</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/packages/">packages</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/packages/DefaultContainerService/">DefaultContainerService</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/packages/DefaultContainerService/src/">src</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/packages/DefaultContainerService/src/com/">com</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/packages/DefaultContainerService/src/com/android/">android</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/packages/DefaultContainerService/src/com/android/defcontainer/">defcontainer</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/packages/DefaultContainerService/src/com/android/defcontainer/DefaultContainerService.java">DefaultContainerService.java</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Copy package to the target location.</span></span><br><span class="line"><span class="comment">         * copy安装包到target</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> packagePath absolute path to the package to be copied. Can be</span></span><br><span class="line"><span class="comment">         *            a single monolithic APK file or a cluster directory</span></span><br><span class="line"><span class="comment">         *            containing one or more APKs.</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> returns status code according to those in</span></span><br><span class="line"><span class="comment">         *         &#123;<span class="doctag">@link</span> PackageManager&#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">copyPackage</span><span class="params">(String packagePath, IParcelFileDescriptorFactory target)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (packagePath == <span class="literal">null</span> || target == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> PackageManager.INSTALL_FAILED_INVALID_URI;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">PackageLite</span> <span class="variable">pkg</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="type">File</span> <span class="variable">packageFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(packagePath);</span><br><span class="line">                pkg = PackageParser.parsePackageLite(packageFile, <span class="number">0</span>); <span class="comment">// 解析packageFile</span></span><br><span class="line">                <span class="keyword">return</span> copyPackageInner(pkg, target); <span class="comment">// 调用copyPackageInner</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (PackageParserException | IOException | RemoteException e) &#123;</span><br><span class="line">                Slog.w(TAG, <span class="string">&quot;Failed to copy package at &quot;</span> + packagePath + <span class="string">&quot;: &quot;</span> + e);</span><br><span class="line">                <span class="keyword">return</span> PackageManager.INSTALL_FAILED_INSUFFICIENT_STORAGE;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">... ...</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">copyPackageInner</span><span class="params">(PackageLite pkg, IParcelFileDescriptorFactory target)</span></span><br><span class="line">            <span class="keyword">throws</span> IOException, RemoteException &#123;</span><br><span class="line">        copyFile(pkg.baseCodePath, target, <span class="string">&quot;base.apk&quot;</span>); <span class="comment">// 实际copy的执行</span></span><br><span class="line">  		<span class="comment">// 处理多apk的情况</span></span><br><span class="line">        <span class="keyword">if</span> (!ArrayUtils.isEmpty(pkg.splitNames)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; pkg.splitNames.length; i++) &#123;</span><br><span class="line">                copyFile(pkg.splitCodePaths[i], target, <span class="string">&quot;split_&quot;</span> + pkg.splitNames[i] + <span class="string">&quot;.apk&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> PackageManager.INSTALL_SUCCEEDED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">copyFile</span><span class="params">(String sourcePath, IParcelFileDescriptorFactory target, String targetName)</span></span><br><span class="line">            <span class="keyword">throws</span> IOException, RemoteException &#123;</span><br><span class="line">        Slog.d(TAG, <span class="string">&quot;Copying &quot;</span> + sourcePath + <span class="string">&quot; to &quot;</span> + targetName);</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            in = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(sourcePath); <span class="comment">// 输入源</span></span><br><span class="line">            <span class="comment">// 输出源，在doCopyApk中定义的回调接口的open函数，会创建文件，打开文件，</span></span><br><span class="line">            <span class="comment">// 赋予权限，返回ParcelFileDescriptor对象</span></span><br><span class="line">            out = <span class="keyword">new</span> <span class="title class_">ParcelFileDescriptor</span>.AutoCloseOutputStream(</span><br><span class="line">                    target.open(targetName, ParcelFileDescriptor.MODE_READ_WRITE));</span><br><span class="line">            Streams.copy(in, out); <span class="comment">// 执行copy操作</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 关闭输入输出流</span></span><br><span class="line">            IoUtils.closeQuietly(out);</span><br><span class="line">            IoUtils.closeQuietly(in);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>对于非adb安装路径，handleStartCopy会进行copy的操作，对于adb安装途经则并没有做什么实质性的操作，整个handleStartCopy的流程如下：</p>
<p><img src="http://otqux1hnn.bkt.clouddn.com/rangerzhou/170728/handleStartCopy.png" alt="handleStartCopy"></p>
<h3 id="6-handleReturnCode"><a href="#6-handleReturnCode" class="headerlink" title="6. handleReturnCode"></a>6. handleReturnCode</h3><p>在handleStartCopy后，会调用handleReturnCode：</p>
<p>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/">frameworks</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/">base</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/">services</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/">core</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/">java</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/com/">com</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/com/android/">android</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/com/android/server/">server</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/com/android/server/pm/">pm</a>&#x2F;<a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/core/java/com/android/server/pm/PackageManagerService.java">PackageManagerService.java</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">InstallParams</span> <span class="keyword">extends</span> <span class="title class_">HandlerParams</span> &#123;</span><br><span class="line">  ... ...</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">handleReturnCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mArgs != <span class="literal">null</span>) &#123;</span><br><span class="line">            processPendingInstall(mArgs, mRet);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ... ...</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">processPendingInstall</span><span class="params">(<span class="keyword">final</span> InstallArgs args, <span class="keyword">final</span> <span class="type">int</span> currentStatus)</span> &#123;</span><br><span class="line">    <span class="comment">// Queue up an async operation since the package installation may take a little while.</span></span><br><span class="line">    <span class="comment">// 安装需要一些时间，新建一个线程</span></span><br><span class="line">    mHandler.post(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            mHandler.removeCallbacks(<span class="built_in">this</span>);</span><br><span class="line">             <span class="comment">// Result object to be returned</span></span><br><span class="line">            <span class="type">PackageInstalledInfo</span> <span class="variable">res</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PackageInstalledInfo</span>();</span><br><span class="line">            res.setReturnCode(currentStatus);</span><br><span class="line">            res.uid = -<span class="number">1</span>;</span><br><span class="line">            res.pkg = <span class="literal">null</span>;</span><br><span class="line">            res.removedInfo = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (res.returnCode == PackageManager.INSTALL_SUCCEEDED) &#123;</span><br><span class="line">                <span class="comment">// 见6.1</span></span><br><span class="line">                args.doPreInstall(res.returnCode);</span><br><span class="line">                <span class="keyword">synchronized</span> (mInstallLock) &#123;</span><br><span class="line">                    <span class="comment">// 进行安装，见6.2</span></span><br><span class="line">                    installPackageTracedLI(args, res);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 见6.3</span></span><br><span class="line">                args.doPostInstall(res.returnCode, res.uid);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// A restore should be performed at this point if (a) the install</span></span><br><span class="line">            <span class="comment">// succeeded, (b) the operation is not an update, and (c) the new</span></span><br><span class="line">            <span class="comment">// package has not opted out of backup participation.</span></span><br><span class="line">            <span class="comment">// 如果(a)安装成功(b)不是更新操作(c)新的package没有选择退出备份，则进行备份</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">update</span> <span class="operator">=</span> res.removedInfo != <span class="literal">null</span></span><br><span class="line">                    &amp;&amp; res.removedInfo.removedPackage != <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">flags</span> <span class="operator">=</span> (res.pkg == <span class="literal">null</span>) ? <span class="number">0</span> : res.pkg.applicationInfo.flags;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">doRestore</span> <span class="operator">=</span> !update</span><br><span class="line">                    &amp;&amp; ((flags &amp; ApplicationInfo.FLAG_ALLOW_BACKUP) != <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Set up the post-install work request bookkeeping.  This will be used</span></span><br><span class="line">            <span class="comment">// and cleaned up by the post-install event handling regardless of whether</span></span><br><span class="line">            <span class="comment">// there&#x27;s a restore pass performed.  Token values are &gt;= 1.</span></span><br><span class="line">            <span class="type">int</span> token;</span><br><span class="line">            <span class="keyword">if</span> (mNextInstallToken &lt; <span class="number">0</span>) mNextInstallToken = <span class="number">1</span>;</span><br><span class="line">            token = mNextInstallToken++;</span><br><span class="line"></span><br><span class="line">            <span class="type">PostInstallData</span> <span class="variable">data</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PostInstallData</span>(args, res);</span><br><span class="line">            mRunningInstalls.put(token, data);</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_INSTALL) Log.v(TAG, <span class="string">&quot;+ starting restore round-trip &quot;</span> + token);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// doRestore为true的话则进行恢复工作</span></span><br><span class="line">            <span class="keyword">if</span> (res.returnCode == PackageManager.INSTALL_SUCCEEDED &amp;&amp; doRestore) &#123;</span><br><span class="line">                <span class="comment">// Pass responsibility to the Backup Manager.  It will perform a</span></span><br><span class="line">                <span class="comment">// restore if appropriate, then pass responsibility back to the</span></span><br><span class="line">                <span class="comment">// Package Manager to run the post-install observer callbacks</span></span><br><span class="line">                <span class="comment">// and broadcasts.</span></span><br><span class="line">                <span class="type">IBackupManager</span> <span class="variable">bm</span> <span class="operator">=</span> IBackupManager.Stub.asInterface(</span><br><span class="line">                        ServiceManager.getService(Context.BACKUP_SERVICE));</span><br><span class="line">                <span class="keyword">if</span> (bm != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (DEBUG_INSTALL) Log.v(TAG, <span class="string">&quot;token &quot;</span> + token</span><br><span class="line">                            + <span class="string">&quot; to BM for possible restore&quot;</span>);</span><br><span class="line">                    Trace.asyncTraceBegin(TRACE_TAG_PACKAGE_MANAGER, <span class="string">&quot;restore&quot;</span>, token);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// <span class="doctag">TODO:</span> http://b/22388012</span></span><br><span class="line">                        <span class="keyword">if</span> (bm.isBackupServiceActive(UserHandle.USER_SYSTEM)) &#123;</span><br><span class="line">                            bm.restoreAtInstall(res.pkg.applicationInfo.packageName, token);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            doRestore = <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                        <span class="comment">// can&#x27;t happen; the backup manager is local</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        Slog.e(TAG, <span class="string">&quot;Exception trying to enqueue restore&quot;</span>, e);</span><br><span class="line">                        doRestore = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Slog.e(TAG, <span class="string">&quot;Backup Manager not found!&quot;</span>);</span><br><span class="line">                    doRestore = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!doRestore) &#123;</span><br><span class="line">                <span class="comment">// No restore possible, or the Backup Manager was mysteriously not</span></span><br><span class="line">                <span class="comment">// available -- just fire the post-install work request directly.</span></span><br><span class="line">                <span class="keyword">if</span> (DEBUG_INSTALL) Log.v(TAG, <span class="string">&quot;No restore - queue post-install for &quot;</span> + token);</span><br><span class="line"></span><br><span class="line">                Trace.asyncTraceBegin(TRACE_TAG_PACKAGE_MANAGER, <span class="string">&quot;postInstall&quot;</span>, token);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 发送POST_INSTALL消息，见6.4</span></span><br><span class="line">                <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> mHandler.obtainMessage(POST_INSTALL, token, <span class="number">0</span>);</span><br><span class="line">                mHandler.sendMessage(msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="6-1-doPreInstall"><a href="#6-1-doPreInstall" class="headerlink" title="6.1 doPreInstall"></a>6.1 doPreInstall</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FileInstallArgs</span> <span class="keyword">extends</span> <span class="title class_">InstallArgs</span> &#123;</span><br><span class="line">  ... ...</span><br><span class="line">    <span class="type">int</span> <span class="title function_">doPreInstall</span><span class="params">(<span class="type">int</span> status)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (status != PackageManager.INSTALL_SUCCEEDED) &#123;</span><br><span class="line">            cleanUp();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">    &#125;</span><br><span class="line">  ... ...</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">cleanUp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (codeFile == <span class="literal">null</span> || !codeFile.exists()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        removeCodePathLI(codeFile);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (resourceFile != <span class="literal">null</span> &amp;&amp; !FileUtils.contains(codeFile, resourceFile)) &#123;</span><br><span class="line">            resourceFile.delete();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>在前面代码调用doPreInstall之前已经判断了status是否等于PackageManager.INSTALL_SUCCEEDED，传入的参数也是PackageManager.INSTALL_SUCCEEDED，所以根本就没做什么操作，直接把status返回了，看其他调用doPreInstall的地方也是传入的XXX_SUCCEEDED，莫名其妙。。。</p>
<h4 id="6-2-installPackageTracedLI"><a href="#6-2-installPackageTracedLI" class="headerlink" title="6.2 installPackageTracedLI"></a>6.2 installPackageTracedLI</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">installPackageTracedLI</span><span class="params">(InstallArgs args, PackageInstalledInfo res)</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          Trace.traceBegin(TRACE_TAG_PACKAGE_MANAGER, <span class="string">&quot;installPackage&quot;</span>);</span><br><span class="line">          installPackageLI(args, res);</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          Trace.traceEnd(TRACE_TAG_PACKAGE_MANAGER);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">installPackageLI</span><span class="params">(InstallArgs args, PackageInstalledInfo res)</span> &#123;</span><br><span class="line">      ... ...</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Result object to be returned</span></span><br><span class="line">      res.setReturnCode(PackageManager.INSTALL_SUCCEEDED);</span><br><span class="line"></span><br><span class="line">      ... ...</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Retrieve PackageSettings and parse package</span></span><br><span class="line">      <span class="keyword">final</span> <span class="type">int</span> <span class="variable">parseFlags</span> <span class="operator">=</span> mDefParseFlags | ...;</span><br><span class="line">      <span class="type">PackageParser</span> <span class="variable">pp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PackageParser</span>();</span><br><span class="line">      pp.setSeparateProcesses(mSeparateProcesses);</span><br><span class="line">      pp.setDisplayMetrics(mMetrics);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">final</span> PackageParser.Package pkg;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// 解析APK文件得到PackageParser.Package对象</span></span><br><span class="line">          pkg = pp.parsePackage(tmpPackageFile, parseFlags);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (PackageParserException e) &#123;</span><br><span class="line">          res.setError(<span class="string">&quot;Failed parse during installPackageLI&quot;</span>, e);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          Trace.traceEnd(TRACE_TAG_PACKAGE_MANAGER);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// If we are installing a clustered package add results for the children</span></span><br><span class="line">      <span class="comment">// 安装clustered pacakge时的一些操作</span></span><br><span class="line">      <span class="keyword">if</span> (pkg.childPackages != <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">              ... ...</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">... ...</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// either use what we&#x27;ve been given or parse directly from the APK</span></span><br><span class="line">          <span class="comment">// 权限信息的一些处理</span></span><br><span class="line">          <span class="keyword">if</span> (args.certificates != <span class="literal">null</span>) &#123;</span><br><span class="line">              <span class="keyword">try</span> &#123;</span><br><span class="line">                  <span class="comment">// 如果args中包含了权限信息，则直接用参数中的权限配置package</span></span><br><span class="line">                  PackageParser.populateCertificates(pkg, args.certificates);</span><br><span class="line">              &#125; <span class="keyword">catch</span> (PackageParserException e) &#123;</span><br><span class="line">                  <span class="comment">// there was something wrong with the certificates we were given;</span></span><br><span class="line">                  <span class="comment">// try to pull them from the APK</span></span><br><span class="line">                  PackageParser.collectCertificates(pkg, parseFlags);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="comment">// 否则直接从Manifest.xml中解析出权限信息</span></span><br><span class="line">              PackageParser.collectCertificates(pkg, parseFlags);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (PackageParserException e) &#123;</span><br><span class="line">          res.setError(<span class="string">&quot;Failed collect during installPackageLI&quot;</span>, e);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Get rid of all references to package scan path via parser.</span></span><br><span class="line">      pp = <span class="literal">null</span>;</span><br><span class="line">      <span class="type">String</span> <span class="variable">oldCodePath</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">      <span class="type">boolean</span> <span class="variable">systemApp</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Check if installing already existing package</span></span><br><span class="line">      <span class="comment">// 检查安装的package是否已经存在，即是否重复安装，会根据运行时权限、签名信息、</span></span><br><span class="line">      <span class="comment">// 版本、是否系统APP等条件，判断能否继续安装</span></span><br><span class="line">... ...</span><br><span class="line"><span class="comment">// 重命名copy时临时赋予的名字</span></span><br><span class="line">      <span class="keyword">if</span> (!args.doRename(res.returnCode, pkg, oldCodePath)) &#123;</span><br><span class="line">          res.setError(INSTALL_FAILED_INSUFFICIENT_STORAGE, <span class="string">&quot;Failed rename&quot;</span>);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      startIntentFilterVerifications(args.user.getIdentifier(), replace, pkg);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> (<span class="type">PackageFreezer</span> <span class="variable">freezer</span> <span class="operator">=</span> freezePackageForInstall(pkgName, installFlags,</span><br><span class="line">              <span class="string">&quot;installPackageLI&quot;</span>)) &#123;</span><br><span class="line">          <span class="keyword">if</span> (replace) &#123;</span><br><span class="line">              <span class="comment">// 用新的package信息替换旧的</span></span><br><span class="line">              replacePackageLIF(pkg, parseFlags, scanFlags | SCAN_REPLACING, args.user,</span><br><span class="line">                      installerPackageName, res);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="comment">// 把新的package信息加入到PKMS中</span></span><br><span class="line">              installNewPackageLIF(pkg, parseFlags, scanFlags | SCAN_DELETE_DATA_ON_FAILURES,</span><br><span class="line">                      args.user, installerPackageName, volumeUuid, res);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">          <span class="keyword">final</span> <span class="type">PackageSetting</span> <span class="variable">ps</span> <span class="operator">=</span> mSettings.mPackages.get(pkgName);</span><br><span class="line">          <span class="keyword">if</span> (ps != <span class="literal">null</span>) &#123;</span><br><span class="line">              res.newUsers = ps.queryInstalledUsers(sUserManager.getUserIds(), <span class="literal">true</span>);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">final</span> <span class="type">int</span> <span class="variable">childCount</span> <span class="operator">=</span> (pkg.childPackages != <span class="literal">null</span>) ? pkg.childPackages.size() : <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">              PackageParser.<span class="type">Package</span> <span class="variable">childPkg</span> <span class="operator">=</span> pkg.childPackages.get(i);</span><br><span class="line">              <span class="type">PackageInstalledInfo</span> <span class="variable">childRes</span> <span class="operator">=</span> res.addedChildPackages.get(childPkg.packageName);</span><br><span class="line">              <span class="type">PackageSetting</span> <span class="variable">childPs</span> <span class="operator">=</span> mSettings.peekPackageLPr(childPkg.packageName);</span><br><span class="line">              <span class="keyword">if</span> (childPs != <span class="literal">null</span>) &#123;</span><br><span class="line">                  childRes.newUsers = childPs.queryInstalledUsers(</span><br><span class="line">                          sUserManager.getUserIds(), <span class="literal">true</span>);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>这部分代码太长了，也没有细看，installPackageTracedLI的主要工作就是解析APK文件，形成对应的Package对象；生成对应的权限信息后，根据Package中的信息，更改存储路径对应目录的名称。</p>
<h4 id="6-3-doPostInstall"><a href="#6-3-doPostInstall" class="headerlink" title="6.3 doPostInstall"></a>6.3 doPostInstall</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FileInstallArgs</span> <span class="keyword">extends</span> <span class="title class_">InstallArgs</span> &#123;</span><br><span class="line">  ... ...</span><br><span class="line">    <span class="type">int</span> <span class="title function_">doPostInstall</span><span class="params">(<span class="type">int</span> status, <span class="type">int</span> uid)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (status != PackageManager.INSTALL_SUCCEEDED) &#123;</span><br><span class="line">            cleanUp();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>doPostInstall和doPreInstall一样，没做什么实质性的操作。</p>
<h4 id="6-4-POST-INSTALL消息处理"><a href="#6-4-POST-INSTALL消息处理" class="headerlink" title="6.4 POST_INSTALL消息处理"></a>6.4 POST_INSTALL消息处理</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PackageHandler</span> <span class="keyword">extends</span> <span class="title class_">Handler</span> &#123;</span><br><span class="line">  ... ...</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">doHandleMessage</span><span class="params">(Message msg)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">            <span class="keyword">case</span> POST_INSTALL: &#123;</span><br><span class="line">                <span class="keyword">if</span> (DEBUG_INSTALL) Log.v(TAG, <span class="string">&quot;Handling post-install for &quot;</span> + msg.arg1);</span><br><span class="line"></span><br><span class="line">                <span class="type">PostInstallData</span> <span class="variable">data</span> <span class="operator">=</span> mRunningInstalls.get(msg.arg1);</span><br><span class="line">                <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">didRestore</span> <span class="operator">=</span> (msg.arg2 != <span class="number">0</span>);</span><br><span class="line">                mRunningInstalls.delete(msg.arg1);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (data != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="type">InstallArgs</span> <span class="variable">args</span> <span class="operator">=</span> data.args;</span><br><span class="line">                    <span class="type">PackageInstalledInfo</span> <span class="variable">parentRes</span> <span class="operator">=</span> data.res;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">grantPermissions</span> <span class="operator">=</span> (args.installFlags</span><br><span class="line">                            &amp; PackageManager.INSTALL_GRANT_RUNTIME_PERMISSIONS) != <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">killApp</span> <span class="operator">=</span> (args.installFlags</span><br><span class="line">                            &amp; PackageManager.INSTALL_DONT_KILL_APP) == <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">final</span> String[] grantedPermissions = args.installGrantPermissions;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// Handle the parent package</span></span><br><span class="line">                    <span class="comment">// 处理父package</span></span><br><span class="line">                    handlePackagePostInstall(parentRes, grantPermissions, killApp,</span><br><span class="line">                            grantedPermissions, didRestore, args.installerPackageName,</span><br><span class="line">                            args.observer);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// Handle the child packages</span></span><br><span class="line">                    <span class="comment">// 处理子package</span></span><br><span class="line">                    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">childCount</span> <span class="operator">=</span> (parentRes.addedChildPackages != <span class="literal">null</span>)</span><br><span class="line">                            ? parentRes.addedChildPackages.size() : <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">                        <span class="type">PackageInstalledInfo</span> <span class="variable">childRes</span> <span class="operator">=</span> parentRes.addedChildPackages.valueAt(i);</span><br><span class="line">                        handlePackagePostInstall(childRes, grantPermissions, killApp,</span><br><span class="line">                                grantedPermissions, <span class="literal">false</span>, args.installerPackageName,</span><br><span class="line">                                args.observer);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// Log tracing if needed</span></span><br><span class="line">                    <span class="keyword">if</span> (args.traceMethod != <span class="literal">null</span>) &#123;</span><br><span class="line">                        Trace.asyncTraceEnd(TRACE_TAG_PACKAGE_MANAGER, args.traceMethod,</span><br><span class="line">                                args.traceCookie);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Slog.e(TAG, <span class="string">&quot;Bogus post-install token &quot;</span> + msg.arg1);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                Trace.asyncTraceEnd(TRACE_TAG_PACKAGE_MANAGER, <span class="string">&quot;postInstall&quot;</span>, msg.arg1);</span><br><span class="line">            &#125; <span class="keyword">break</span>;</span><br><span class="line">            </span><br><span class="line">            ... ...</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handlePackagePostInstall</span><span class="params">(PackageInstalledInfo res, <span class="type">boolean</span> grantPermissions,</span></span><br><span class="line"><span class="params">        <span class="type">boolean</span> killApp, String[] grantedPermissions,</span></span><br><span class="line"><span class="params">        <span class="type">boolean</span> launchedForRestore, String installerPackage,</span></span><br><span class="line"><span class="params">        IPackageInstallObserver2 installObserver)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (res.returnCode == PackageManager.INSTALL_SUCCEEDED) &#123;</span><br><span class="line">        <span class="comment">// Send the removed broadcasts</span></span><br><span class="line">        <span class="comment">// 赋予package权限，发送ACTION_PACKAGE_ADDED等广播</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If someone is watching installs - notify them</span></span><br><span class="line">    <span class="comment">// 如果有观察者监控安装信息，就通知它</span></span><br><span class="line">    <span class="keyword">if</span> (installObserver != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Bundle</span> <span class="variable">extras</span> <span class="operator">=</span> extrasForInstallResult(res);</span><br><span class="line">            installObserver.onPackageInstalled(res.name, res.returnCode,</span><br><span class="line">                    res.returnMsg, extras);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            Slog.i(TAG, <span class="string">&quot;Observer no longer exists.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从代码看出处理POST_INSTALL消息的主要工作是通过广播和回调接口通知系统中的其他组件package的安装和改变信息。</p>
<p>点击查看 <a href="http://otqux1hnn.bkt.clouddn.com/rangerzhou/170928/handleReturnCode.png">handleReturnCode流程图</a> 。</p>
<p><img src="http://otqux1hnn.bkt.clouddn.com/rangerzhou/170928/handleReturnCode.png" alt="handleReturnCode"></p>
<h3 id="7-总结"><a href="#7-总结" class="headerlink" title="7. 总结"></a>7. 总结</h3><p>点击查看 <a href="http://otqux1hnn.bkt.clouddn.com/rangerzhou/170929/apkinstall.png">APK安装整体流程图</a> 。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>Markdown语法手册</title>
    <url>/2017/06/14/Others/Markdown_grammar/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-Markdown-简明语法"><a href="#1-Markdown-简明语法" class="headerlink" title="1 Markdown 简明语法"></a>1 Markdown 简明语法</h1><h3 id="1-斜体和粗体"><a href="#1-斜体和粗体" class="headerlink" title="1. 斜体和粗体"></a>1. 斜体和粗体</h3><p>使用 * 和 ** 表示斜体和粗体。</p>
<span id="more"></span>

<p>示例：</p>
<p>这是 <em>斜体</em>，这是 <strong>粗体</strong>。</p>
<h3 id="2-分级标题"><a href="#2-分级标题" class="headerlink" title="2. 分级标题"></a>2. 分级标题</h3><p>使用 &#x3D;&#x3D;&#x3D; 表示一级标题，使用 — 表示二级标题。</p>
<p>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这是一个一级标题</span><br><span class="line">============================</span><br><span class="line"></span><br><span class="line">这是一个二级标题</span><br><span class="line">--------------------------------------------------</span><br><span class="line"></span><br><span class="line">### 这是一个三级标题</span><br></pre></td></tr></table></figure>

<p>你也可以选择在行首加井号表示不同级别的标题 (H1-H6)，例如：# H1, ## H2, ### H3，#### H4。</p>
<h3 id="3-外链接"><a href="#3-外链接" class="headerlink" title="3. 外链接"></a>3. 外链接</h3><p>使用 [描述](链接地址) 为文字增加外链接。</p>
<p>示例：</p>
<p>这是去往 <a href="http://rangerzhou.top/">本人博客</a> 的链接。</p>
<h3 id="4-无序列表"><a href="#4-无序列表" class="headerlink" title="4. 无序列表"></a>4. 无序列表</h3><p>使用 *，+，- 表示无序列表。</p>
<p>示例：</p>
<ul>
<li>无序列表项 一</li>
<li>无序列表项 二</li>
<li>无序列表项 三</li>
</ul>
<h3 id="5-有序列表"><a href="#5-有序列表" class="headerlink" title="5. 有序列表"></a>5. 有序列表</h3><p>使用数字和点表示有序列表。</p>
<p>示例：</p>
<ol>
<li>有序列表项 一</li>
<li>有序列表项 二</li>
<li>有序列表项 三</li>
</ol>
<h3 id="6-文字引用"><a href="#6-文字引用" class="headerlink" title="6. 文字引用"></a>6. 文字引用</h3><p>使用 &gt; 表示文字引用。</p>
<p>示例：</p>
<blockquote>
<p>野火烧不尽，春风吹又生。</p>
</blockquote>
<h3 id="7-行内代码块"><a href="#7-行内代码块" class="headerlink" title="7. 行内代码块"></a>7. 行内代码块</h3><p>使用 `代码&#96; 表示行内代码块。</p>
<p>示例：</p>
<p>让我们聊聊 <code>html</code>。</p>
<h3 id="8-代码块"><a href="#8-代码块" class="headerlink" title="8.  代码块"></a>8.  代码块</h3><p>使用 四个缩进空格 表示代码块。</p>
<p>示例：</p>
<pre><code>这是一个代码块，此行左侧有四个不可见的空格。
</code></pre>
<h3 id="9-插入图像"><a href="#9-插入图像" class="headerlink" title="9.  插入图像"></a>9.  插入图像</h3><p>使用 ![描述](图片链接地址) 插入图像。</p>
<h1 id="2-Markdown-高阶语法"><a href="#2-Markdown-高阶语法" class="headerlink" title="2 Markdown 高阶语法"></a>2 Markdown 高阶语法</h1><h3 id="1-内容目录"><a href="#1-内容目录" class="headerlink" title="1. 内容目录"></a>1. 内容目录</h3><p>在段落中填写 <code>[TOC]</code> 以显示全文内容的目录结构。</p>
<p>[TOC]</p>
<h3 id="2-标签分类"><a href="#2-标签分类" class="headerlink" title="2. 标签分类"></a>2. 标签分类</h3><p>在编辑区任意行的列首位置输入以下代码给文稿标签：</p>
<p>标签： 数学 英语 Markdown</p>
<p>或者</p>
<p>Tags： 数学 英语 Markdown</p>
<h3 id="3-删除线"><a href="#3-删除线" class="headerlink" title="3. 删除线"></a>3. 删除线</h3><p>使用 ~~ 表示删除线。</p>
<p><del>这是一段错误的文本。</del></p>
<h3 id="4-注脚"><a href="#4-注脚" class="headerlink" title="4. 注脚"></a>4. 注脚</h3><p>使用 [^keyword] 表示注脚。</p>
<p>这是一个注脚[^footnote]的样例。</p>
<p>这是第二个注脚[^footnote2]的样例。</p>
<h3 id="5-LaTeX-公式"><a href="#5-LaTeX-公式" class="headerlink" title="5. LaTeX 公式"></a>5. LaTeX 公式</h3><p>$ 表示行内公式： </p>
<p>质能守恒方程可以用一个很简洁的方程式 $E&#x3D;mc^2$ 来表达。</p>
<p>$$ 表示整行公式：</p>
<p>$$\sum_{i&#x3D;1}^n a_i&#x3D;0$$</p>
<p>$$f(x_1,x_x,\ldots,x_n) &#x3D; x_1^2 + x_2^2 + \cdots + x_n^2 $$</p>
<p>$$\sum^{j-1}<em>{k&#x3D;0}{\widehat{\gamma}</em>{kj} z_k}$$</p>
<p>访问 <a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference">MathJax</a> 参考更多使用方法。</p>
<h3 id="6-加强的代码块"><a href="#6-加强的代码块" class="headerlink" title="6. 加强的代码块"></a>6. 加强的代码块</h3><p>支持四十一种编程语言的语法高亮的显示，行号显示。</p>
<p>使用方法为``` c++</p>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">uninstall_app_legacy</span><span class="params">(TransportType transport, <span class="type">const</span> <span class="type">char</span>* serial, <span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* if the user choose the -k option, we refuse to do it until devices are</span></span><br><span class="line"><span class="comment">       out with the option to uninstall the remaining data somehow (adb/ui) */</span></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; argc; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(argv[i], <span class="string">&quot;-k&quot;</span>)) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(</span><br><span class="line">                <span class="string">&quot;The -k option uninstalls the application while retaining the data/cache.\n&quot;</span></span><br><span class="line">                <span class="string">&quot;At the moment, there is no way to remove the remaining data.\n&quot;</span></span><br><span class="line">                <span class="string">&quot;You will have to reinstall the application with the same signature, and fully uninstall it.\n&quot;</span></span><br><span class="line">                <span class="string">&quot;If you truly wish to continue, execute &#x27;adb shell pm uninstall -k&#x27;\n.&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* &#x27;adb uninstall&#x27; takes the same arguments as &#x27;pm uninstall&#x27; on device */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pm_command</span>(transport, serial, argc, argv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="7-流程图"><a href="#7-流程图" class="headerlink" title="7. 流程图"></a>7. 流程图</h3><p>使用方法为``` flow</p>
<h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">st=&gt;start: Start:&gt;https://www.zybuluo.com</span><br><span class="line">io=&gt;inputoutput: verification</span><br><span class="line">op=&gt;operation: Your Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line">sub=&gt;subroutine: Your Subroutine</span><br><span class="line">e=&gt;end</span><br><span class="line"></span><br><span class="line">st-&gt;io-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;sub-&gt;io</span><br></pre></td></tr></table></figure>

<h4 id="更多语法参考：流程图语法参考"><a href="#更多语法参考：流程图语法参考" class="headerlink" title="更多语法参考：流程图语法参考"></a>更多语法参考：<a href="http://adrai.github.io/flowchart.js/">流程图语法参考</a></h4><h3 id="8-序列图"><a href="#8-序列图" class="headerlink" title="8. 序列图"></a>8. 序列图</h3><p>使用方法为``` seq</p>
<h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Alice-&gt;Bob: Hello Bob, how are you?</span><br><span class="line">Note right of Bob: Bob thinks</span><br><span class="line">Bob--&gt;Alice: I am good thanks!</span><br></pre></td></tr></table></figure>

<h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Title: Here is a title</span><br><span class="line">A-&gt;B: Normal line</span><br><span class="line">B--&gt;C: Dashed line</span><br><span class="line">C-&gt;&gt;D: Open arrow</span><br><span class="line">D--&gt;&gt;A: Dashed open arrow</span><br></pre></td></tr></table></figure>

<h4 id="更多语法参考：序列图语法参考"><a href="#更多语法参考：序列图语法参考" class="headerlink" title="更多语法参考：序列图语法参考"></a>更多语法参考：<a href="http://bramp.github.io/js-sequence-diagrams/">序列图语法参考</a></h4><h3 id="9-甘特图"><a href="#9-甘特图" class="headerlink" title="9. 甘特图"></a>9. 甘特图</h3><p>甘特图内在思想简单。基本是一条线条图，横轴表示时间，纵轴表示活动（项目），线条表示在整个期间上计划和实际的活动完成情况。它直观地表明任务计划在什么时候进行，及实际进展与计划要求的对比。<br>使用方法为``` gantt<br>####示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title 项目开发流程</span><br><span class="line">section 项目确定</span><br><span class="line">    需求分析       :a1, 2016-06-22, 3d</span><br><span class="line">    可行性报告     :after a1, 5d</span><br><span class="line">    概念验证       : 5d</span><br><span class="line">section 项目实施</span><br><span class="line">    概要设计      :2016-07-05  , 5d</span><br><span class="line">    详细设计      :2016-07-08, 10d</span><br><span class="line">    编码          :2016-07-15, 10d</span><br><span class="line">    测试          :2016-07-22, 5d</span><br><span class="line">section 发布验收</span><br><span class="line">    发布: 2d</span><br><span class="line">    验收: 3d</span><br></pre></td></tr></table></figure>

<h4 id="更多语法参考：甘特图语法参考"><a href="#更多语法参考：甘特图语法参考" class="headerlink" title="更多语法参考：甘特图语法参考"></a>更多语法参考：<a href="https://knsv.github.io/mermaid/#gant-diagrams">甘特图语法参考</a></h4><h3 id="10-Mermaid-流程图"><a href="#10-Mermaid-流程图" class="headerlink" title="10. Mermaid 流程图"></a>10. Mermaid 流程图</h3><p>使用方法``` graphLR<br>####示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A[Hard edge] --&gt;|Link text| B(Round edge)</span><br><span class="line">B --&gt; C&#123;Decision&#125;</span><br><span class="line">C --&gt;|One| D[Result one]</span><br><span class="line">C --&gt;|Two| E[Result two]</span><br></pre></td></tr></table></figure>

<h4 id="更多语法参考：Mermaid-流程图语法参考"><a href="#更多语法参考：Mermaid-流程图语法参考" class="headerlink" title="更多语法参考：Mermaid 流程图语法参考"></a>更多语法参考：<a href="https://knsv.github.io/mermaid/#flowcharts-basic-syntax">Mermaid 流程图语法参考</a></h4><h3 id="11-Mermaid-序列图"><a href="#11-Mermaid-序列图" class="headerlink" title="11. Mermaid 序列图"></a>11. Mermaid 序列图</h3><p>使用方法``` sequence<br>####示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Alice-&gt;John: Hello John, how are you?</span><br><span class="line">loop every minute</span><br><span class="line">    John--&gt;Alice: Great!</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<h4 id="更多语法参考：Mermaid-序列图语法参考"><a href="#更多语法参考：Mermaid-序列图语法参考" class="headerlink" title="更多语法参考：Mermaid 序列图语法参考"></a>更多语法参考：<a href="https://knsv.github.io/mermaid/#sequence-diagrams">Mermaid 序列图语法参考</a></h4><h3 id="12-表格支持"><a href="#12-表格支持" class="headerlink" title="12. 表格支持"></a>12. 表格支持</h3><table>
<thead>
<tr>
<th>项目</th>
<th align="right">价格</th>
<th align="center">数量</th>
</tr>
</thead>
<tbody><tr>
<td>计算机</td>
<td align="right">$1600</td>
<td align="center">5</td>
</tr>
<tr>
<td>手机</td>
<td align="right">$12</td>
<td align="center">12</td>
</tr>
<tr>
<td>管线</td>
<td align="right">$1</td>
<td align="center">234</td>
</tr>
</tbody></table>
<h3 id="13-定义型列表"><a href="#13-定义型列表" class="headerlink" title="13. 定义型列表"></a>13. 定义型列表</h3><dl><dt>名词 1</dt><dd>定义 1（左侧有一个可见的冒号和四个不可见的空格）</dd></dl><dl><dt>代码块 2</dt><dd>这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格）</dd></dl><pre><code>    代码块（左侧有八个不可见的空格）
</code></pre>
<h3 id="14-Html-标签"><a href="#14-Html-标签" class="headerlink" title="14. Html 标签"></a>14. Html 标签</h3><p>本站支持在 Markdown 语法中嵌套 Html 标签，譬如，你可以用 Html 写一个纵跨两行的表格：</p>
<pre><code>&lt;table&gt;
    &lt;tr&gt;
        &lt;th rowspan=&quot;2&quot;&gt;值班人员&lt;/th&gt;
        &lt;th&gt;星期一&lt;/th&gt;
        &lt;th&gt;星期二&lt;/th&gt;
        &lt;th&gt;星期三&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;李强&lt;/td&gt;
        &lt;td&gt;张明&lt;/td&gt;
        &lt;td&gt;王平&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
</code></pre>
<table>
    <tr>
        <th rowspan="2">值班人员</th>
        <th>星期一</th>
        <th>星期二</th>
        <th>星期三</th>
    </tr>
    <tr>
        <td>李强</td>
        <td>张明</td>
        <td>王平</td>
    </tr>
</table>

<h3 id="15-内嵌图标"><a href="#15-内嵌图标" class="headerlink" title="15. 内嵌图标"></a>15. 内嵌图标</h3><p>本站的图标系统对外开放，在文档中输入</p>
<pre><code>&lt;i class=&quot;icon-weibo&quot;&gt;&lt;/i&gt;
</code></pre>
<p>即显示微博的图标： <i class="icon-weibo icon-2x"></i></p>
<p>替换 上述 <code>i 标签</code> 内的 <code>icon-weibo</code> 以显示不同的图标，例如：</p>
<pre><code>&lt;i class=&quot;icon-renren&quot;&gt;&lt;/i&gt;
</code></pre>
<p>即显示人人的图标： <i class="icon-renren icon-2x"></i></p>
<p>更多的图标和玩法可以参看 <a href="http://fortawesome.github.io/Font-Awesome/3.2.1/icons/">font-awesome</a> 官方网站。</p>
<h3 id="16-待办事宜-Todo-列表"><a href="#16-待办事宜-Todo-列表" class="headerlink" title="16. 待办事宜 Todo 列表"></a>16. 待办事宜 Todo 列表</h3><p>使用带有 [ ] 或 [x] （未完成或已完成）项的列表语法撰写一个待办事宜列表，并且支持子列表嵌套以及混用Markdown语法，例如：</p>
<pre><code>- [ ] **Cmd Markdown 开发**
    - [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率
    - [ ] 支持以 PDF 格式导出文稿
    - [x] 新增Todo列表功能 [语法参考](https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments)
    - [x] 改进 LaTex 功能
        - [x] 修复 LaTex 公式渲染问题
        - [x] 新增 LaTex 公式编号功能 [语法参考](http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers)
- [ ] **七月旅行准备**
    - [ ] 准备邮轮上需要携带的物品
    - [ ] 浏览日本免税店的物品
    - [x] 购买蓝宝石公主号七月一日的船票
    
</code></pre>
<p>对应显示如下待办事宜 Todo 列表：</p>
<ul>
<li><input disabled="" type="checkbox"> <strong>Cmd Markdown 开发</strong><ul>
<li><input disabled="" type="checkbox"> 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li>
<li><input disabled="" type="checkbox"> 支持以 PDF 格式导出文稿</li>
<li><input checked="" disabled="" type="checkbox"> 新增Todo列表功能 <a href="https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments">语法参考</a></li>
<li><input checked="" disabled="" type="checkbox"> 改进 LaTex 功能<ul>
<li><input checked="" disabled="" type="checkbox"> 修复 LaTex 公式渲染问题</li>
<li><input checked="" disabled="" type="checkbox"> 新增 LaTex 公式编号功能 <a href="http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers">语法参考</a></li>
</ul>
</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <strong>七月旅行准备</strong><ul>
<li><input disabled="" type="checkbox"> 准备邮轮上需要携带的物品</li>
<li><input disabled="" type="checkbox"> 浏览日本免税店的物品</li>
<li><input checked="" disabled="" type="checkbox"> 购买蓝宝石公主号七月一日的船票</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Others</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>原来你也在这里</title>
    <url>/2017/06/13/Others/YouAreHereToo/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>#欢迎关注作者博客: <a href="http://rangerzhou.top/">http://rangerzhou.top/</a></p>
<blockquote>
<p><strong>早就想搭建一个自己的博客，奈何人懒，直至昨日才完成，祝福自己以后事业顺利，家庭美满幸福，能买大房子！！！</strong></p>
</blockquote>
<p><strong>《原来你也在这里》</strong><br><em>好妹妹乐队</em></p>
<p>请允许我尘埃落定<br>用沉默埋葬了过去<br>满身风雨我从海上来<br>才隐居在这沙漠里</p>
<span id="more"></span>

<p>该隐瞒的事总清晰<br>千言万语只能无语<br>爱是天时地利的迷信<br>喔 原来你也在这里</p>
<p>啊 哪一个人<br>是不是只存在梦境里<br>为什么我用尽全身力气<br>却换来半生回忆</p>
<p>若不是你渴望眼睛<br>若不是我救赎心情<br>在千山万水人海相遇<br>喔 原来你也在这里</p>
<p>啊 哪一个人<br>是不是只存在梦境里<br>为什么我用尽全身力气<br>却换来半生回忆</p>
<p>若不是你渴望眼睛<br>若不是我救赎心情<br>在千山万水人海相遇<br>喔 原来你也在这里</p>
<p>该隐瞒的事总清晰<br>千言万语只能无语<br>爱是天时地利的迷信<br>喔 原来你也在这里<br>原来你也在这里</p>
<p>Update: 2018.07.18.02</p>
]]></content>
      <categories>
        <category>Others</category>
      </categories>
      <tags>
        <tag>原来你也在这里</tag>
        <tag>好妹妹乐队</tag>
      </tags>
  </entry>
</search>
